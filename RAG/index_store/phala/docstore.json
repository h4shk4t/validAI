{"docstore/data": {"893ed0c0-81d8-4f90-a0f6-64ae34e0aa97": {"__data__": {"id_": "893ed0c0-81d8-4f90-a0f6-64ae34e0aa97", "embedding": null, "metadata": {"file_path": "./phala_dist/trusted-execution-environments-tee-and-compute-verifiability.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8c8c21b-67b4-403b-b861-de6698485ebe", "node_type": "4", "metadata": {}, "hash": "7eefac65ca76fea21236a0d7bc124db69846317b4e2ca4b96dede8ce69817307", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "36d8033b-386d-460e-97e4-0d44e4f52787", "node_type": "1", "metadata": {}, "hash": "444c8bf827862d41c9910aaff7cb3b745b63e92c41c8a535e238f61fa68e79b8", "class_name": "RelatedNodeInfo"}}, "text": "# Trusted Execution Environments (TEE) and Compute Verifiability\n\n<figure><img src=\"../../.gitbook/assets/TEE-Compute-Verifiability.png\" alt=\"\"><figcaption></figcaption></figure>\n\nUntil now, the Phala network has more than 30K TEE devices registered and running, becoming the biggest TEE network in Web3.\n\nA TEE is a secure area within the main processor of a device. It ensures external processes or computations, even those with higher privileges, cannot access or alter the data inside it. This isolative feature directly wheels in a trust-minimized environment, heightening the protection against potential security threats.\n\n<figure><img src=\"../../.gitbook/assets/TEE.png\" alt=\"\"><figcaption></figcaption></figure>\n\nThe unassailable security of TEEs is not just limited to protecting critical data. They also authenticate and verify the data computations that take place within them. This feature illuminates the foreground of TEEs in multi-proof systems, addressing the challenge of computing verifiability.\n\nPhala currently only supports Intel SGX (Software Guard Extension) as the TEE hardware, and will support Intel TDX and NVIDIA GPU TEE soon. Check [here](https://sgx101.gitbook.io/sgx101/sgx-bootstrap/overview) for more info about SGX.\n\n## How are TEE Devices Being Verified?\n\nVerification is the cornerstone of guaranteeing TEE's trust-minimized environment. Verifying a TEE device (in Phala's context, Intel SGX device), generally refers to verifying the hardware information of the device, which includes checking if the CPU is genuine hardware manufactured by vendors such as Intel, the cert-chain is valid and provided by the manufacture that can be trusted. Verification of the TEE device before running any program in it (Enclave) is necessary because it can provide security guarantees from a hardware perspective that the program is running the actual copy of the code that the user expects through [**Remote Attestation**](https://sgx101.gitbook.io/sgx101/sgx-bootstrap/attestation#remote-attestation-primitives).\n\nCurrently, Phala enforces the verification on the Phala blockchain when the TEE device (the worker) is going to register.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36d8033b-386d-460e-97e4-0d44e4f52787": {"__data__": {"id_": "36d8033b-386d-460e-97e4-0d44e4f52787", "embedding": null, "metadata": {"file_path": "./phala_dist/trusted-execution-environments-tee-and-compute-verifiability.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8c8c21b-67b4-403b-b861-de6698485ebe", "node_type": "4", "metadata": {}, "hash": "7eefac65ca76fea21236a0d7bc124db69846317b4e2ca4b96dede8ce69817307", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "893ed0c0-81d8-4f90-a0f6-64ae34e0aa97", "node_type": "1", "metadata": {}, "hash": "d72ba3dc161bfe368681f92c9d363157eed575b245512cbee2f5e926d2e76a47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a16743e-c051-431c-a88d-0f783c48f162", "node_type": "1", "metadata": {}, "hash": "ffeb7587ff4fbb02a69d0b8d9d6f1b46694c5d8b155cc31c7df2a99dc34eb9b1", "class_name": "RelatedNodeInfo"}}, "text": "Recently we have been searching the Zero Knowledge-based TEE device verification, which aims to leverage the ZK technique to verify TEE devices off-chain in a trustless manner.\n\n1. **Verified on Phala Blockchain**: Employing Phala Blockchain positions an extra layer of transparency and trust in the verification process. The verification process's details are recorded on the blockchain, allowing users to transparently view and verify the operations. Check the code [here](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/sgx-attestation) if you wanna explore more.\n2.  **Verified on Ethereum with a ZK DCAP Verifier**: Verification of TEEs on Ethereum directly is expensive in gas cost, but we can only verify the ZKP on-chain of a DCAP verifier, where we move the heavy computation to off-chain. Check the PoC code [here](https://github.com/tolak/zk-dcap-verifier) to see how we verify DCAP based on RiscZero zkVM with a local prover.\\\n\n\n    <figure><img src=\"../../.gitbook/assets/TEE-ZKProver.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## How to Generate TEE-Proof for Programs\n\nUnlike generating ZKP (Zero Knowledge Proof), which needs to have a specific circuit for the proven program, TEE-proof generation is cheaper in the cost of computation. When thinking about the TEE-proof generation, we need to get out of that Zero-Knowledge mindset for a moment. Here are two considerations when proving the program execution result is trust in TEE:\n\n1.  If the execution environment is trust\n\n    As we mentioned earlier, every TEE device was verified when registered on the Phala blockchain. A bunch of items will be checked, and finally, we will evaluate a confidential level according to the check. See [here](https://docs.phala.network/compute-providers/basic-info/confidence-level-and-sgx-function) for more information.\n2.  If the key used to sign the proof is secure\n\n    Since we already guarantee the execution environment is trusted, the data signed by the key derived in the environment should be trusted too.", "mimetype": "text/plain", "start_char_idx": 2162, "end_char_idx": 4209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a16743e-c051-431c-a88d-0f783c48f162": {"__data__": {"id_": "1a16743e-c051-431c-a88d-0f783c48f162", "embedding": null, "metadata": {"file_path": "./phala_dist/trusted-execution-environments-tee-and-compute-verifiability.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8c8c21b-67b4-403b-b861-de6698485ebe", "node_type": "4", "metadata": {}, "hash": "7eefac65ca76fea21236a0d7bc124db69846317b4e2ca4b96dede8ce69817307", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36d8033b-386d-460e-97e4-0d44e4f52787", "node_type": "1", "metadata": {}, "hash": "444c8bf827862d41c9910aaff7cb3b745b63e92c41c8a535e238f61fa68e79b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29c3aa76-5383-4b6f-8b68-28f258b3e263", "node_type": "1", "metadata": {}, "hash": "b6b46bbf6da46014cdde0d173021161d1878a2e72907376770efe10a87162754", "class_name": "RelatedNodeInfo"}}, "text": "By introducing [Key Hierarchy](https://docs.phala.network/developers/advanced-topics/blockchain-infrastructure/secret-key-hierarchy#key-hierarchy-management) and [Key Rotation](https://github.com/Phala-Network/phala-blockchain/pull/810) mechanisms, the safety of the key is guaranteed in both cryptographic and economic ways. Check this [article](https://medium.com/phala-network/technical-analysis-of-why-phala-will-not-be-affected-by-the-intel-sgx-chip-vulnerabilities-e045b0189dc2) for the analysis of Phala security design.\n\nWith the above two premises, the TEE-proof generation is pretty simple. Every multi-proof program running on the system will have a dedicated app key which is derived from WASM Virtual Machine - SideVM, the SideVM is running inside TEE. Every user can deploy a Javascript Engine for themselves, the key will be injected when developer upload their Javascript code to the JS engine where developer can use this key to sign transaction in their Javascript code. To generate the TEE-proof, the program needs to use this key to sign the output of the execution result of their business logic. For example, if you are going to verify the TEE proof on Ethereum, you can sign the result with the ECDSA signature scheme. See **How to Build with Multi-Proof** section for how to generate TEE-proof with JS SDK.\n\n## Comparison: TEE Compute Verification vs. ZK Compute Verification\n\nWhile TEE-Proofs and ZK-Proofs share the same goal of ensuring computational integrity and verifiability, they differ in their construction and operation:\n\n1. **Computation Cost**: The computation cost for generating a TEE-Proof is significantly lower than for a ZK-Proof. While a ZK-Proof requires intricate cryptographic operations and a relatively large amount of computational resources, a TEE-Proof is generated as a result of computation inside a TEE. This makes the TEE-Proof computation incredibly efficient, providing an edge, especially for systems dealing with more extensive calculations.\n2. **Proof Size and On-Chain Verification Cost**: ZK-Proofs, architected based on elliptic curve cryptography, the proof sizes differ from different proof systems, some of them are extremely expensive.", "mimetype": "text/plain", "start_char_idx": 4210, "end_char_idx": 6413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29c3aa76-5383-4b6f-8b68-28f258b3e263": {"__data__": {"id_": "29c3aa76-5383-4b6f-8b68-28f258b3e263", "embedding": null, "metadata": {"file_path": "./phala_dist/trusted-execution-environments-tee-and-compute-verifiability.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8c8c21b-67b4-403b-b861-de6698485ebe", "node_type": "4", "metadata": {}, "hash": "7eefac65ca76fea21236a0d7bc124db69846317b4e2ca4b96dede8ce69817307", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a16743e-c051-431c-a88d-0f783c48f162", "node_type": "1", "metadata": {}, "hash": "ffeb7587ff4fbb02a69d0b8d9d6f1b46694c5d8b155cc31c7df2a99dc34eb9b1", "class_name": "RelatedNodeInfo"}}, "text": "While TEE-Proofs are more cost-efficient to compute, they come with const proof sizes, e.g. the length of the signature, meaning they occupy small space and cost less to verify on-chain.\n3. **Security, Liveness, and Complexity**: Both TEE-Proofs and ZK-Proofs ensure robust security. However, ZK-Proofs, based on cryptographic hardness assumptions, offer mathematically guaranteed security but are complex to create and verify. TEE-Proofs, on the other hand, are simpler to produce and validate but trust in the TEE hardware and the integrity of the software it runs to provide the desired security level. Phala network adds an extra economic security guarantee on top of the default TEE security infrastructure, making the whole system more robust.\n\n## What's Next?\n\nNow you already have a fundamental understanding of the underlying techniques of TEE, if you are a developer, please follow the next section to see how you can develop multi-proof with our JS SDK.", "mimetype": "text/plain", "start_char_idx": 6414, "end_char_idx": 7378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b58f683-808c-42cb-ab79-39ca541ef037": {"__data__": {"id_": "7b58f683-808c-42cb-ab79-39ca541ef037", "embedding": null, "metadata": {"file_path": "./phala_dist/run-a-local-testnet-with-docker.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e02e52f9-ab71-4a26-99c8-9e02e39503ed", "node_type": "4", "metadata": {}, "hash": "64e39105b79e02eb86b8e1e85a77a06e39707cc9832c0dbde18075e0e23c7110", "class_name": "RelatedNodeInfo"}}, "text": "# Run a Local Testnet With Docker\n\nRun a local testnet with [`docker` support](https://docs.docker.com/desktop/). All you need to do to get a local testnet started is run:\n\n{% hint style=\"danger\" %}\nRunning the local testnet may return an error if port **`8000`** is already in use.\n{% endhint %}\n\n```shell\nnpm run dev\n```\n\n**Make a Request to Your Local Build**\n\n```shell\n# GET request\ncurl http://127.0.0.1:8000/local\n# GET request with URL queries\ncurl http://127.0.0.1:8000/local?query1=one&query2=two\n# POST request\ncurl http://127.0.0.1:8000/local -X POST -H 'content-type: application/json' -d '{\"foo\": \"bar\"}'\n```\n\n**Add Secrets to Your Local Build**\n\n```shell\ncurl http://127.0.0.1:8000/vaults -H 'Content-Type: application/json' -d '{\"cid\": \"local\", \"data\": {\"secretKey\":\"secretValue\"}}'\n```\n\n**Check The Logs of Your Local Build**\n\n```shell\ncurl 'http://127.0.0.1:8000/logs/all/local'\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 899, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a47bcb05-694d-4600-93da-c86eec2b665f": {"__data__": {"id_": "a47bcb05-694d-4600-93da-c86eec2b665f", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0463d662-84b9-47e0-8743-040510c90e22", "node_type": "1", "metadata": {}, "hash": "a1d84c991f3660d10de7e2e7d0167cb0fc39618f9e1283714bdc292ad9a4d158", "class_name": "RelatedNodeInfo"}}, "text": "# Asset Integration Guide\n\n## Why Integrating SubBridge <a href=\"#why-integrating-subbridge\" id=\"why-integrating-subbridge\"></a>\n\nA TL;DR answer is that: SubBridge greatly reduces the efforts to transfer your assets to/from multiple blockchains.\n\nGenerally speaking, it takes two steps to bridge your asset to another chain:\n\n1. To find an asset _route_ to your target chain so you can transfer your token there, which may be consisted of one bridge or multiple bridges;\n2. To ensure that your token can be recognized and handled in the target chain, this usually involves ad-hoc negotiation and program development;\n\nAnd SubBridge can simplify both steps for you:\n\n1. Instead of connecting your chain to others one-by-one, by integrating SubBridge you will be able to get the routes to any other chains that have already supported SubBridge (for now, this includes Polkadot parachains, Ethereum and Moonriver EVM);\n2. SubBridge provides a unified interface (based on Polkadot XCM protocol) to abstract your asset and the corresponding asset-handling example, also our technical team is glad to provide support during your integration.\n\n### Overview <a href=\"#overview\" id=\"overview\"></a>\n\nSubBridge supports both parachain assets and EVM assets, making it possible to transfer them between parachains and EVM chains. All supported assets are whitelisted, which means it would be failed if you transfer assets through SubBridge without registration. Refer to Supported Assets to check the asset list we have integrated.\n\n* A parachain asset means the asset is reserved on a parachain. For example, GLMR is reserved on Moonbeam.\n* An EVM asset means the asset is reserved on an EVM chain, in general, it\u2019s an ERC-20 smart contract deployed on EVM. **Note we currently only support assets deployed on Ethereum and Moonriver EVM.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0463d662-84b9-47e0-8743-040510c90e22": {"__data__": {"id_": "0463d662-84b9-47e0-8743-040510c90e22", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a47bcb05-694d-4600-93da-c86eec2b665f", "node_type": "1", "metadata": {}, "hash": "b4700414df53f64f17c12b8d3de0cdc388089dd20abed75b33523efc9ee9f0be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0af2f63a-ae6a-45cf-9fde-4591df0163c4", "node_type": "1", "metadata": {}, "hash": "d661db953773b449f226c6eb4be79de3822b1a0a70ad3d0eab6eff63d43b0e7c", "class_name": "RelatedNodeInfo"}}, "text": "**\n\nYou need to do the following steps to finish integration with SubBridge:\n\n* Open an issue on [subbridge-integration](https://github.com/Phala-Network/subbridge-integration) repo to provide asset registry information;\n* Test registration locally or on Rococo;\n* Register assets on Khala Network;\n* \\[Optional] Integrate SubBridge into your app;\n\n## Provide Asset Registry Information <a href=\"#provide-asset-registry-information\" id=\"provide-asset-registry-information\"></a>\n\nIf you are interested in integrating your asset into SubBridge, please go to [integration repo](https://github.com/Phala-Network/subbridge-integration) to open an issue with the template below:\n\n```\n### Who we are\n\n*** Brief introduction of your project and team ***\n\n### Asset registry information\n\n- name\n- symbol\n- decimals\n- location (represented as a MultiLocation in XCM)\n- contract address(EVM assets only)\n- is mintable (EVM assets only)\n```\n\n* `location` must be a [MultiLocation](https://polkadot.network/blog/xcm-the-cross-consensus-message-format/). For example, the location of `KAR` is `MultiLocation::new(1, X2(Parachain(2000), General(0x0080)))`. If your asset is an EVM asset, the `location` should be `MultiLocation::new(1, X3(Parachain(2004), GeneralIndex(chain_id), GeneralKey(erc20_address)))`. `chain_id` should match the chain your asset deployed on. So far chain id of Ethereum is `0`, and chain id of Moonriver EVM is `2`.\n* `is mintable` represents whether your ERC20 smart contract support `mint` and `burn`, if set as true, your users will need to give the mint authority to our contract when the first time they use SubBridge. Check [**Assets Registration**](technical-details.md#asset-registration) find more details about what we have done on registration.\n\nAfter the issue is opened, feel free to notify the team on our [Discord channel](https://discord.gg/phala-network) if we haven\u2019t replied immediately. Now you are ready to work with the team to finish the integration stuff when we approve the request on the issue.", "mimetype": "text/plain", "start_char_idx": 1826, "end_char_idx": 3857, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0af2f63a-ae6a-45cf-9fde-4591df0163c4": {"__data__": {"id_": "0af2f63a-ae6a-45cf-9fde-4591df0163c4", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0463d662-84b9-47e0-8743-040510c90e22", "node_type": "1", "metadata": {}, "hash": "a1d84c991f3660d10de7e2e7d0167cb0fc39618f9e1283714bdc292ad9a4d158", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a13206e-7e36-40eb-a63a-82f113eab2ad", "node_type": "1", "metadata": {}, "hash": "8990ac24d5dfe96f8399dcb34a0d63a422f323ab405a34d69c7f37f4e7e82b89", "class_name": "RelatedNodeInfo"}}, "text": "## Test Registration <a href=\"#test-registration\" id=\"test-registration\"></a>\n\nBefore onboarding your asset to the Khala network, we must make sure everything works properly on the [Rhala network](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frhala-api.phala.network%2Fws#/explorer), which is our test parachain on Rococo. For parachain assets, you can choose to test the registration locally before running a test with the Phala team on Rococo. We have provided a [config file](https://github.com/Phala-Network/subbridge-integration/blob/main/thala\\_karura.config.json) which contains the information on how to run our test runtime `Thala` with `polkadot-launch`. Check [here](https://github.com/paritytech/polkadot-launch) to find more about `polkadot-launch`.\n\nFor both parachain assets and EVM assets, the necessary step is to test the whole integration stuff on Rococo with the Phala team. The parachain registration on Rococo is maintained by Parity, if you are a parachain asset and you haven\u2019t been a Rococo parachain, please **notice the Parity team to onboard your chain on Rococo, also don\u2019t forget to let them open HRMP channels between your parachain and Rhala network**. If you are an EVM asset, please **deploy an ERC20 asset on Kovan in advance, which will be used to config the EVM bridge.", "mimetype": "text/plain", "start_char_idx": 3859, "end_char_idx": 5165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a13206e-7e36-40eb-a63a-82f113eab2ad": {"__data__": {"id_": "1a13206e-7e36-40eb-a63a-82f113eab2ad", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0af2f63a-ae6a-45cf-9fde-4591df0163c4", "node_type": "1", "metadata": {}, "hash": "d661db953773b449f226c6eb4be79de3822b1a0a70ad3d0eab6eff63d43b0e7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa20c5b7-e610-4350-9a62-b03df0b1a8f2", "node_type": "1", "metadata": {}, "hash": "fee18e1e9907e6a9e1007bbd47478283bf2ed089a4e6a39bf904b97e485ee328", "class_name": "RelatedNodeInfo"}}, "text": "** The architecture of the test net is as follow:\n\n<figure><img src=\"../../.gitbook/assets/subbridge-rhala.png\" alt=\"\"><figcaption><p>Rhala Testnet Architecture</p></figcaption></figure>\n\nAs shown, we have deployed a test ChainBridge that bridges the Rhala network and Kovan, contracts information is as below:\n\n| Contract     | Address                                    |\n| ------------ | ------------------------------------------ |\n| bridge       | 0x0316Ea56000BCdB7D7EAED54fd70898a1fF90C09 |\n| erc20Handler | 0x7b11b07318E2E01b28A75da99F7EB8d635A6d46b |\n\nTo start integration testing, please **transfer some assets to our test account in advance**\n\n* For parachain asset, please transfer 10000 of your asset to account `0x7804e66ec9eea3d8daf6273ffbe0a8af25a8879cf43f14d0ebbb30941f578242` on your parachain\n* For EVM asset, please transfer 10000 of your asset(ERC20) to account `0xA29D4E0F035cb50C0d78c8CeBb56Ca292616Ab20` on Kovan\n\nNow it\u2019s time to let us know that you have everything ready to do the test with the Phala team on Rococo. We will register your asset on the Rhala network and enable ChainBridge transfer if you are an EVM asset or you certainly want to bridge your parachain asset to EVM chains. Check [**Assets Registration**](technical-details.md#asset-registration) to find more details.\n\n## Register assets on the Khala network <a href=\"#register-assets-on-the-khala-network\" id=\"register-assets-on-the-khala-network\"></a>\n\nAfter we have confirmed all functions are working properly on Rococo, we will start integrating your asset on the Khala network. If your asset is a parachian asset, please refer to [**Parachain assets integration guide**](../../other-products/subbridge/broken-reference/) and if your assets is an EVM asset, please refer to [**EVM assets integration guide**](../../other-products/subbridge/broken-reference/).", "mimetype": "text/plain", "start_char_idx": 5165, "end_char_idx": 7023, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa20c5b7-e610-4350-9a62-b03df0b1a8f2": {"__data__": {"id_": "fa20c5b7-e610-4350-9a62-b03df0b1a8f2", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a13206e-7e36-40eb-a63a-82f113eab2ad", "node_type": "1", "metadata": {}, "hash": "8990ac24d5dfe96f8399dcb34a0d63a422f323ab405a34d69c7f37f4e7e82b89", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4715e030-6dcd-4d01-8326-a05c503e3f62", "node_type": "1", "metadata": {}, "hash": "416b6e8bdefee1789abe53d8ad819006212c3ca38b45f2779234f159f2b59a2d", "class_name": "RelatedNodeInfo"}}, "text": "#### Parachain Assets Integration Guide <a href=\"#parachain-assets-integration-guide\" id=\"parachain-assets-integration-guide\"></a>\n\nSubBridge contains an XCM-based bridge that can let assets transferred between parachains. If the parachian your asset reserved hasn\u2019t opened HRMP channel with Khala network, the first thing we should do is follow these steps to open bi-direction HRMP channels:\n\n> \ud83d\udca1 Steps 1 - 3 are the stuff to open HRMP channels between our two parachains. You can directly jump to Step 4 if it has been done. **Information of PHA are as follows**:\n\n| Type     | Value                                     |\n| -------- | ----------------------------------------- |\n| Name     | PHA                                       |\n| Symbol   | PHA                                       |\n| Decimals | 12                                        |\n| ED       | 0.01 PHA                                  |\n| Location | MultiLocation::new(1, X1(Parachain(2004)) |\n\n**Step 1: Construct the call to send a request to open the HRMP channel to the Khala network**\n\n* Head to: [https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.api.onfinality.io%2Fpublic-ws#/extrinsics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.api.onfinality.io%2Fpublic-ws#/extrinsics)\n* Choose extrinsic with parameters: _hrmp -> hrmpInitOpenChannel { recipient: 2004 , proposedMaxCapacity: 1000, proposedMaxMessageSize: 102400}_\n* Copy the encoded call data, it should be `0x3c00d4070000e803000000900100`\n\n<figure><img src=\"././.gitbook/assets/subbridge-openhrmp.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4715e030-6dcd-4d01-8326-a05c503e3f62": {"__data__": {"id_": "4715e030-6dcd-4d01-8326-a05c503e3f62", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa20c5b7-e610-4350-9a62-b03df0b1a8f2", "node_type": "1", "metadata": {}, "hash": "fee18e1e9907e6a9e1007bbd47478283bf2ed089a4e6a39bf904b97e485ee328", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8947423b-7948-4459-968e-e37255e95663", "node_type": "1", "metadata": {}, "hash": "d3febb923117bbeb8436ae61dad0165c82617f1c99dd8d2413e4fecd00487444", "class_name": "RelatedNodeInfo"}}, "text": "png\" alt=\"\"><figcaption><p>Send HRMP Open Request</p></figcaption></figure>\n\n**Step 2: Construct an XCM message and send it to the relay chain(Kusama)**\n\nThe XCM message you constructed should contain the following 5 instructions:\n\n* WithdrawAsset\n* BuyExecution\n* Transact\n* RefundSurplus\n* DepositAsset\n\nHere is an example to send the request to Moonriver from Khala `0x03000821040101009d1f02000000210001010002140004000000000700e876481713000000000700e876481700060002286bee383c00e7070000e803000000900100140d0100040001010070617261d4070000000000000000000000000000000000000000000000000000`, you can decode the call at page [https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/extrinsics/decode](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/extrinsics/decode)\n\n**Tips:**\n\n* Make sure the XCM message is sent from the root account (either SUDO or via governance)\n* Make sure your parachian sovereign account has enough KSM on the Kusama network\n* The destination should be (1, Here)\n* Asset id(MultiLocation) should be set to (0, Here)\n* Recipient of `DepositAsset` should be an `AccountId32` and put your parachain sovereign account public key to id field.\n\n> \ud83d\udca1 Please let us know when the XCM message is executed successfully on Kusama, then we will propose to send an XCM message to receive the request and send open the request to your parachain at the same time.\n\n**Step 3: Receive HRMP open request from Khala network**\n\nHRMP channel is a one-way channel, which means you also need to receive our open request on your side or your parachain will not be able to receive messages from our parachain. The steps to receive the request from the Khala network are similar to the open request we did before.", "mimetype": "text/plain", "start_char_idx": 8574, "end_char_idx": 10345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8947423b-7948-4459-968e-e37255e95663": {"__data__": {"id_": "8947423b-7948-4459-968e-e37255e95663", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4715e030-6dcd-4d01-8326-a05c503e3f62", "node_type": "1", "metadata": {}, "hash": "416b6e8bdefee1789abe53d8ad819006212c3ca38b45f2779234f159f2b59a2d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73d18509-6ef5-4cc3-b172-59e367b259fb", "node_type": "1", "metadata": {}, "hash": "777987083bb8f16f0a190a707547fc88ec281ccc6bdcb30c433b189a48772d61", "class_name": "RelatedNodeInfo"}}, "text": "When the Khala network successfully sends the open request, you should do as follow:\n\n* Head to [https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.api.onfinality.io%2Fpublic-ws#/extrinsics](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.api.onfinality.io%2Fpublic-ws#/extrinsics)\n* Choose extrinsic with parameters: _hrmp -> hrmpAcceptOpenChannel { sender: 2004 }_\n* Copy the encoded call data, it should be 0x3c01d4070000\n\n<figure><img src=\"../../.gitbook/assets/subbridge-accepthrmp.png\" alt=\"\"><figcaption><p>Accept HRMP Open Request</p></figcaption></figure>\n\n**Step 4: Register PHA on your parachain**\n\nSince the HRMP channel already opened between our two parachains, the last thing we need to do is to register your asset into our parachain and register our asset(PHA) into your parachain. You can refer to [**Assets Registration**](technical-details.md#asset-registration) to see what we have done to register an asset. Please note that the location of `PHA` is **MultiLocation::new(1, X1(Parachain(2004))**. You may want to add it to your runtime XCM trader config according to your implementation.\n\n#### EVM Assets Integration Guide <a href=\"#evm-assets-integration-guide\" id=\"evm-assets-integration-guide\"></a>\n\nIf the smart contract of your asset is ERC20 compatible, we can easily integrate it into SubBridge. Currently, we have integrated [ChainBridge](https://chainbridge.chainsafe.io/) as our EVM bridge. It already deployed on both Ethereum mainnet and Moonriver EVM, here is the deployed ChainBridge contracts information:\n\n* SygmaBridge smart contract info\n\nHead to [Sygma shared repo](https://github.com/sygmaprotocol/sygma-shared-configuration/blob/main/mainnet/shared-config-mainnet.json) for the contract deployment information and more.", "mimetype": "text/plain", "start_char_idx": 10346, "end_char_idx": 12115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73d18509-6ef5-4cc3-b172-59e367b259fb": {"__data__": {"id_": "73d18509-6ef5-4cc3-b172-59e367b259fb", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8947423b-7948-4459-968e-e37255e95663", "node_type": "1", "metadata": {}, "hash": "d3febb923117bbeb8436ae61dad0165c82617f1c99dd8d2413e4fecd00487444", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9a122f02-9666-43cd-bb53-376ce93ec368", "node_type": "1", "metadata": {}, "hash": "81c6f759644081c25ff2cc5514cacd2fc489ffc6069e37ef57597f32ee7ec5ab", "class_name": "RelatedNodeInfo"}}, "text": "* ChainBridge smart contract info\n\n**Ethereum mainnet:**\n\n| Contract      | Address                                    |\n| ------------- | ------------------------------------------ |\n| bridge        | 0x8F92e7353b180937895E0C5937d616E8ea1A2Bb9 |\n| erc20Handler1 | 0xEEc0fb4913119567cDfC0c5fc2Bf8f9F9B226c2d |\n| erc20Handler2 | 0xcd38b15a419491c7c1238b0659f65c755792e257 |\n\n**Moonriver EVM:**\n\n| Contract     | Address                                    |\n| ------------ | ------------------------------------------ |\n| bridge       | 0xCe6652551A989C13B41f70cac504341A5F711c8d |\n| erc20Handler | 0xf88337a0db6e24Dff0fCD7F92ab0655B97A68d38 |\n\n**Relayers:**\n\n| Relayer  | Address                                    |\n| -------- | ------------------------------------------ |\n| relayer1 | 0xA97Dc452Ca3699c4Eb62171FE2f994ff7aE48400 |\n| relayer2 | 0xdca0f5B3686cc87415100808a2568879fE74E01a |\n| relayer2 | 0x4EE535bE2ce432151916E36B3c684E1dB8Cbf8c1 |\n\nCompare with the registration of parachain assets, registration of EVM assets is more convenient. You should be relaxed because we will do everything need with the registration information provided by you. If you are aware of things we did when registering an asset, please refer to [**Assets Registration**](technical-details.md#asset-registration) for more information.\n\n> \ud83d\udca1 You should receive the update when we finish the registration.\n\n## Integrate SubBridge into Your App <a href=\"#integrate-subbridge-into-your-app\" id=\"integrate-subbridge-into-your-app\"></a>\n\nIt\u2019s better to integrate SubBridge into your App if you\u2019d like to let your users use it easily.", "mimetype": "text/plain", "start_char_idx": 12117, "end_char_idx": 13729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a122f02-9666-43cd-bb53-376ce93ec368": {"__data__": {"id_": "9a122f02-9666-43cd-bb53-376ce93ec368", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73d18509-6ef5-4cc3-b172-59e367b259fb", "node_type": "1", "metadata": {}, "hash": "777987083bb8f16f0a190a707547fc88ec281ccc6bdcb30c433b189a48772d61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca6e2e7c-9b30-4697-9b19-5bfe3ce2b873", "node_type": "1", "metadata": {}, "hash": "d8a1df1fabcaf50c7f39019595e12178edce3c444c757ad516ba98c52ec6fd22", "class_name": "RelatedNodeInfo"}}, "text": "Integrating SubBridge into your app is super easy, the only thing you need to do is follow the `dest` specification we defined previously on your client. The difference between doing crosschain transfer on a parachain and an EVM chain is that in the former case you will need to interact with the XCM implementation pallet on that parachain, while in the latter you will need to interact with the smart contract deployed by Phala.\n\n* Issuing crosschain transfer on other parachains or Khala network\n\nFor example, when issuing a crosschain transfer to the Khala network or EVM chains from Karura, you should use the [xtoken\u00bbtransfer](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkarura.polkawallet.io#/extrinsics), while issuing a crosschain transfer to other parachains or EVM chains from Khala, you should use the [xtransfer\u00bbtransfer](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/extrinsics). So interfaces may be different between different parachains depends on its implementation.\n\n* Issuing crosschain transfer on EVM chains with SygmaBridge\n\nSo far we have already supported SygmaBridge and ChainBridge as EVM bridge, and we will integrate more EVM bridges in the future. The following is based on interaction with SygmaBridge, with less fee being paied compared with ChainBridge. According to the mechanism of the ERC20 protocol, before calling `Bridge.deposit` which is the interface to issue crosschain transfer we need to call [ERC20 approve](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#IERC20-approve-address-uint256-) method to let user approve the specific amount of assets to `ERC20Handler` contract of SygmaBridge. This operation will allow `ERC20Handler` to spend up to the specific number of assets from the user account. After approval done, we can deposit asset through SygmaBridge contract. Luckily, Sygma has provided SDK to handle all of these stuffs, head to their [SDK repo](https://github.com/sygmaprotocol/sygma-sdk) for more details.", "mimetype": "text/plain", "start_char_idx": 13730, "end_char_idx": 15745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca6e2e7c-9b30-4697-9b19-5bfe3ce2b873": {"__data__": {"id_": "ca6e2e7c-9b30-4697-9b19-5bfe3ce2b873", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a122f02-9666-43cd-bb53-376ce93ec368", "node_type": "1", "metadata": {}, "hash": "81c6f759644081c25ff2cc5514cacd2fc489ffc6069e37ef57597f32ee7ec5ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "533917b7-01b1-4881-ae3b-4308b30b373b", "node_type": "1", "metadata": {}, "hash": "d94ab0ceb29298145cd14abd0edde4c03f174ce50c345772ceedada99beec1ba", "class_name": "RelatedNodeInfo"}}, "text": "We prepared the following 5 examples that almost covered all of the scenarios. If the transaction is issued on parachain, we have provided an encoded call you can decode on https://polkadot.js.app, and if the transaction is issued on EVM chains, we have provided a code snippet.\n\n**Example1: transfer an asset from Phala network to other parachain**\n\nAn example of transferring 100 PHA from the Phala network to Moonbeam, the recipient address is `0xA29D4E0F035cb50C0d78c8CeBb56Ca292616Ab20`:\n\n```\n0x5200000000000b00407a10f35a010200511f0300a29d4e0f035cb50c0d78c8cebb56ca292616ab20010700f2052a0102127a00\n```\n\n**Example2: transfer an asset from Phala network to another EVM chain**\n\nAn example of transferring 100 PHA from Khala network to Ethereum with Sygma bridge, recipient is `0xA29D4E0F035cb50C0d78c8CeBb56Ca292616Ab20`. Note small amount of PHA will be deducted as the fee of SygmaBridge:\n\n```\n0x5200000000000b00407a10f35a000306057379676d6100000000000000000000000000000000000000000000000000000005000614a29d4e0f035cb50c0d78c8cebb56ca292616ab2000000000000000000000000000\n```\n\n**Example3: transfer an asset from Moonbeam to Phala network**\n\nAn example of transferring 100 PHA from Karura to Khala network, the recipient is `Alice`.", "mimetype": "text/plain", "start_char_idx": 15747, "end_char_idx": 16980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "533917b7-01b1-4881-ae3b-4308b30b373b": {"__data__": {"id_": "533917b7-01b1-4881-ae3b-4308b30b373b", "embedding": null, "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0", "node_type": "4", "metadata": {}, "hash": "22f144233eccd631e93d21571be42ccf2c8d8a1c9c53f8db00e6ef70ffbc111d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca6e2e7c-9b30-4697-9b19-5bfe3ce2b873", "node_type": "1", "metadata": {}, "hash": "d8a1df1fabcaf50c7f39019595e12178edce3c444c757ad516ba98c52ec6fd22", "class_name": "RelatedNodeInfo"}}, "text": "Karura XCM transfer based on the implementation of \\[xtoken pallet]https://github.com/open-web3-stack/open-runtime-module-library/tree/master/xtokens):\n\n```\n0x6a010300010100cd1f000b00407a10f35a03010200511f01007804e66ec9eea3d8daf6273ffbe0a8af25a8879cf43f14d0ebbb30941f578242010700f2052a0102127a00\n```\n\n**Example4: transfer an asset from any parachain to EVM chain**\n\nAn example of transferring 100 PHA from Moonbeam to Ethereum with SygmaBridge, recipient is `0xA29D4E0F035cb50C0d78c8CeBb56Ca292616Ab20`. Note small amount of PHA will be deducted as the fee of SygmaBridge:\n\n```\n0x6a010300010100cd1f000b00407a10f35a03010400cd1f06057379676d6100000000000000000000000000000000000000000000000000000005000614a29d4e0f035cb50c0d78c8cebb56ca292616ab20000000000000000000000000010700f2052a0102127a00\n```\n\n**Example5: transfer an asset from EVM to substrate parachain**\n\nSygma SDK provided us example code of transfer fungible token from Goerli testnet to Substrate chain, head to [here](https://github.com/sygmaprotocol/sygma-sdk/tree/main/examples/evm-to-substrate-fungible-transfer) for the details.", "mimetype": "text/plain", "start_char_idx": 16981, "end_char_idx": 18071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dfa4f3c9-9f15-4f9e-bb8f-a1bdeaa9bc1c": {"__data__": {"id_": "dfa4f3c9-9f15-4f9e-bb8f-a1bdeaa9bc1c", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c032550-6865-43d7-8f99-6bab1107f91b", "node_type": "1", "metadata": {}, "hash": "b432bd27f12fd902890b8dec7b72d497d143d756429b395cd08591a414c32f5b", "class_name": "RelatedNodeInfo"}}, "text": "# Solo Worker Deployment\n\nCurrently, there is no one-click deployment script for workers on Phala Network. Computation providers need to run docker compose manually for solo worker deployment.\n\n## Basic Requirements\n\n### SGX Function\n\nRunning Phala worker requires SGX-capable CPU. Please choose a device that supports SGX and enable SGX in the BIOS. For more information, please check: [choose your CPU](https://wiki.phala.network/en-us/mine/khala-mining/hardware-requirements/#check-your-cpu)\n\n### Device Configuration\n\nSolo workers on Phala need to run 3 components: **Node**, **pherry**, and **pRuntime**. The requirements for each component are as follows:\n\n| Components  | RAM Space | Harddisk Space | Remark                                           |\n| ----------- | --------- | -------------- | ------------------------------------------------ |\n| Node        | 4GB+      | 900GB+ NVME    | harddisk requirement increasing, 2t will be best |\n| pherry      | 2GB       | 0              | -                                                |\n| pRuntime    | 2GB       | 500MB          | increase slowly                                  |\n| **Totally** | 8GB+      | 2TB            | -                                                |\n\n> The number of cores of the worker needs to be **4 or more**, the stronger the CPU computing power of the worker, the better the rewards in reward calculation. For details, please refer to: [Gemini Tokenomics](https://wiki.phala.network/en-us/general/phala-network/tokenomics/)\n\n### OS Requirements\n\nWe strongly recommend that you use Ubuntu 22.04.2 LTS, download link: https://ubuntu.com/download/server\n\n> The desktop version of the OS is less stable than Server version, so we strongly recommend using the server version.\n\nAnd please make sure that the kernel version is linux-image-5.15.0-82-generic or above, the intel-microcode should be 20230808 or above.\n\n> If you do not want to update the current Ubuntu system version, please be sure to check the kernel version. Because pRuntime will use the SGX driver built into the kernel.\n\nAfter the OS is installed, we strongly recommend that you remotely connect and deploy the worker through SSH or other methods. This will help you with document input and maintenance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c032550-6865-43d7-8f99-6bab1107f91b": {"__data__": {"id_": "4c032550-6865-43d7-8f99-6bab1107f91b", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dfa4f3c9-9f15-4f9e-bb8f-a1bdeaa9bc1c", "node_type": "1", "metadata": {}, "hash": "461c82ef2a30c765cbb55930b4f1060da12d649ed0a85fcfe02281930cff3ea8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d03af3e-b8b7-4f66-9ba3-839b533ce6b5", "node_type": "1", "metadata": {}, "hash": "1d3c0400ccc4c1e0be9f174ca4ff19074e3c11c0c8b084179baccd6dfa2b2ad8", "class_name": "RelatedNodeInfo"}}, "text": "## Deployment of Components <a href=\"#deployment-of-components\" id=\"deployment-of-components\"></a>\n\n### Preparations\n\nAfter installing the OS above, first install the necessary Docker program.\n\n```undefined\nsudo apt update && sudo apt upgrade -y && sudo apt autoremove -y\nsudo apt install docker-compose\n```\n\nThen create a folder locally, and create a docker-compose document within it.\n\n```bash\nmkdir phala-deployment\ncd ./phala-deployment\ntouch docker-compose.yml\n```\n\n### Document Editing\n\nEdit the docker-compose document using the following commands:\n\n```bash\nvim ./docker-compose.yml \n```\n\nAfter entering, you will access the document.\n\nAt this point, enter `a` and you will start editing the document. Paste the following content into the document. (Please note that the file content remains consistent and the indentation alignment of each line is consistent with this document)\n\n```javascript\nversion: \"3\"\nservices:\n  node:\n    image: phalanetwork/phala-node-with-launcher:latest\n    container_name: node\n    hostname: node\n    restart: always\n    ports:\n     - \"9944:9944\"\n     - \"9945:9945\"\n     - \"30333:30333\"\n     - \"30334:30334\"\n    environment:\n     - NODE_NAME=PNODE\n     - NODE_ROLE=MINER\n     - PARACHAIN_EXTRA_ARGS=--max-runtime-instances 32 --runtime-cache-size 8 --rpc-max-response-size 64\n     - RELAYCHAIN_EXTRA_ARGS=--max-runtime-instances 32 --runtime-cache-size 8 --rpc-max-response-size 64\n    volumes:\n     - /var/phala/node-data:/root/data\n\n  phala-pherry:\n    image: phalanetwork/phala-pherry:latest\n    container_name: phala-pherry\n    hostname: phala-pherry\n    restart: always\n    entrypoint:\n      [\n        \"/root/pherry\",\n        \"-r\",\n        \"--parachain\",\n        \"--mnemonic={gas fee memory seed}\",\n        \"--substrate-ws-endpoint=ws://{node ip}:9945\",\n        \"--collator-ws-endpoint=ws://{node ip}:9944\",\n        \"--pruntime-endpoint=http://{pruntime ip}:8000\",\n        \"--operator={owner address}\",", "mimetype": "text/plain", "start_char_idx": 2264, "end_char_idx": 4207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d03af3e-b8b7-4f66-9ba3-839b533ce6b5": {"__data__": {"id_": "4d03af3e-b8b7-4f66-9ba3-839b533ce6b5", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c032550-6865-43d7-8f99-6bab1107f91b", "node_type": "1", "metadata": {}, "hash": "b432bd27f12fd902890b8dec7b72d497d143d756429b395cd08591a414c32f5b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8dc5f4cf-13a9-458c-bea7-7f4fa3cf0b7b", "node_type": "1", "metadata": {}, "hash": "ee4d5b476432e54b9b8de414ddc6c6ac8ae65cd9e5c177b7581ce6c2ae0d5d6b", "class_name": "RelatedNodeInfo"}}, "text": "\"--fetch-blocks=512\",\n        \"--fast-sync\",\n        \"--auto-restart\"\n      ]\n\n  phala-pruntime:\n    image: phalanetwork/phala-pruntime-v2-with-handover:latest\n    container_name: phala-pruntime\n    hostname: phala-pruntime\n    ports:\n    - \"8000:8000\"\n    devices:\n    - /dev/sgx_enclave:/dev/sgx_enclave\n    - /dev/sgx_provision:/dev/sgx_provision\n    environment:\n    - EXTRA_OPTS=--cores={core_num} --checkpoint-interval=3600\n    - ROCKET_ADDRESS=0.0.0.0\n    volumes:\n    - /var/phala/pruntimev2:/opt/pruntime/data\n```\n\nSome parameters need to be customized by yourself, including:\n\n* In phala-pherry, replace {gas fee memory seed} in \u201c\u2013mnemonic={gas fee memory seed}\u201d with the mnemonic seed of the gas fee account. For example:\n  * \u201c\u2013mnemonic=a b c d e \u2026 h\u201d\n* In phala-pherry, replace the {node ip} with your own node\u2019s IP in both \u201c\u2013substrate-ws-endpoint=ws://{node ip}:9945\u201d and \u201c\u2013collator-ws-endpoint=ws://{node ip}:9944\u201d; Replace {pruntime ip} in \u201c\u2013pruntime-endpoint=http://{pruntime ip}:8000\u201d with the IP of your own pruntime worker; If you are running these components on the same device, the easiest way is to replace them all with 127.0.0.1. For example:\n  * \u201c\u2013substrate-ws-endpoint=ws://127.0.0.1:9945\u201d\n  * \u201c\u2013collator-ws-endpoint=ws://127.0.0.1:9944\u201d\n  * \u201c\u2013pruntime-endpoint=http://127.0.0.1:8000\u201d\n* In phala-pherry, replace {owner address} in \u201c\u2013operator={owner address}\u201d with the Phala network address of the mining pool\u2019s main account.", "mimetype": "text/plain", "start_char_idx": 4216, "end_char_idx": 5666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8dc5f4cf-13a9-458c-bea7-7f4fa3cf0b7b": {"__data__": {"id_": "8dc5f4cf-13a9-458c-bea7-7f4fa3cf0b7b", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d03af3e-b8b7-4f66-9ba3-839b533ce6b5", "node_type": "1", "metadata": {}, "hash": "1d3c0400ccc4c1e0be9f174ca4ff19074e3c11c0c8b084179baccd6dfa2b2ad8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c80ea34c-a713-4610-8406-889c286620b0", "node_type": "1", "metadata": {}, "hash": "bc4ead7ebd544dc6c07c394769f3bcdfb28940defa12a4d78a8dfeb2432bbfa7", "class_name": "RelatedNodeInfo"}}, "text": "For example:\n  * \u201c-operator=446u\u2026WewDEZyv\u201d\n* In phala-pruntime, change \u2013cores={core\\_num} to the number of cores of your machine, such as \u2013cores=4.\n\nAfter entering, complete the following steps to finish the text editing and save successfully.\n\n```javascript\n1\u3001Click \"esc\"\n2\u3001Enter \":wq\"\n3\u3001Click \"Enter\"\uff0cquit the editing page\n```\n\n### Program Execution\n\nInside the newly created folder, run docker-compose, and the essential components for Solo worker will run successfully.\n\n```undefined\nsudo docker-compose up -d\n```\n\n## Status Check\n\n### Node Check\n\nEnter the following command to get the last 100 lines of node log information\n\n```bash\nsudo docker logs node --tail 100\n```\n\n> If you have changed the component name through customizing docker-compose.yml, please replace \u201cnode\u201d to your customized name in the command.\n\nA typical node log in sync will look like this:\n\n```yaml\n2021-09-15 13:33:27 [Relaychain] \u2699\ufe0f  Syncing 10.4 bps, target=#9236775 (20 peers), best: #9227955 (0xa897\u20264f36), finalized #9227895 (0x1d6d\u20261527), \u2b07 1.7MiB/s \u2b06 657.8kiB/s\n2021-09-15 13:33:27 [Parachain] \u2699\ufe0f  Syncing 40.4 bps, target=#400531 (1 peers), best: #396657 (0xb898\u20266c02), finalized #396443 (0xf470\u20262f54), \u2b07 378.7kiB/s \u2b06 1.6kiB/s\n```\n\nDetermine whether the parachain and relaychain are synchronizing normally by judging the height of the \u201ctarget\u201d, \u201cbest\u201d, and \u201cfinalized\u201d.\n\n* Polkadot chain (relaychain) produces a block every 6 seconds.\n* Phala chain (parachain) produces a block every 12 seconds.", "mimetype": "text/plain", "start_char_idx": 5667, "end_char_idx": 7150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c80ea34c-a713-4610-8406-889c286620b0": {"__data__": {"id_": "c80ea34c-a713-4610-8406-889c286620b0", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8dc5f4cf-13a9-458c-bea7-7f4fa3cf0b7b", "node_type": "1", "metadata": {}, "hash": "ee4d5b476432e54b9b8de414ddc6c6ac8ae65cd9e5c177b7581ce6c2ae0d5d6b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "559813a7-f308-41d9-8ca0-18e29d402c81", "node_type": "1", "metadata": {}, "hash": "10d0f1c1b159b6c67164cd0c137eeaf301d670c5b8a9250d02ee0c39fa807306", "class_name": "RelatedNodeInfo"}}, "text": "### Pherry Check\n\nEnter the following command to get the most recent 100 lines of Pherry log information:\n\n```bash\nsudo docker logs phala-pherry --tail 100\n```\n\n> If you have changed the component name through customizing docker-compose.yml, please replace \u201cphala-pherry\u201d to your customized name in the command.\n\nA typical pherry log will look like this:\n\n```yaml\n[2023-05-10T11:18:38.733183Z INFO  pherry] get_block: Got block Some(8347280) hash 0x921c\u2026c876\n[2023-05-10T11:18:38.734430Z INFO  pherry] get_block: Got block Some(8347281) hash 0x66ca\u2026de13\n.\n[2023-05-10T11:18:38.835415Z INFO  pherry] fetching parachain header 9257\n[2023-05-10T11:18:38.835652Z INFO  pherry] fetching parachain header 9258\n.\n[2023-05-10T11:18:38.900188Z INFO  phactory_api::pruntime_client] Response: 200 OK\n[2023-05-10T11:18:38.900338Z INFO  pherry] .req_sync_para_header: SyncedTo { synced_to: 9414 }\n[2023-05-10T11:18:38.900342Z INFO  pherry] batch syncing from 9229 to 9414 (186 blocks)\n[2023-05-10T11:18:38.900345Z INFO  pherry] fetch_storage_changes (9229-9232)\n[2023-05-10T11:18:38.905124Z INFO  pherry::prefetcher] prefetching (9233-9236)\n[2023-05-10T11:18:38.905130Z INFO  pherry] fetch_storage_changes (9233-9236)\n.\n[2023-05-10T11:18:39.203944Z INFO  pherry] fetch_storage_changes (9415-9416)\n[2023-05-10T11:18:39.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "559813a7-f308-41d9-8ca0-18e29d402c81": {"__data__": {"id_": "559813a7-f308-41d9-8ca0-18e29d402c81", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c80ea34c-a713-4610-8406-889c286620b0", "node_type": "1", "metadata": {}, "hash": "bc4ead7ebd544dc6c07c394769f3bcdfb28940defa12a4d78a8dfeb2432bbfa7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f658315-c824-4fcd-a262-fdb098da927a", "node_type": "1", "metadata": {}, "hash": "85f3ad7f26726e56b900523e72fde26e5338cf02b07e169aab3b419390aac6a3", "class_name": "RelatedNodeInfo"}}, "text": "209291Z INFO  phactory_api::pruntime_client] Response: 200 OK\n[2023-05-10T11:18:39.209617Z WARN  pherry] Cannot find justification within window (from: 8347137, to: 8347327)\n[2023-05-10T11:18:39.214032Z INFO  phactory_api::pruntime_client] Response: 200 OK\n[2023-05-10T11:18:39.214046Z INFO  pherry] pRuntime get_info response: PhactoryInfo {\n        initialized: true,\n        registered: false,\n        genesis_block_hash: Some(\n            \".\",\n        ),\n        public_key: Some(\n            \".\",\n        ),\n        ecdh_public_key: Some(\n            \".\",\n        ),\n        headernum: 8347137,\n        para_headernum: 9415,\n        blocknum: 9415,\n        state_root: \".\",\n        dev_mode: false,\n        pending_messages: 0,\n        score: 0,\n        gatekeeper: Some(\n            GatekeeperStatus {\n                role: None,\n                master_public_key: \"\",\n            },\n        ),\n        version: \"2.0.1\",\n        git_revision: \".\",\n        memory_usage: Some(\n            MemoryUsage {\n                rust_used: 1973339,\n                rust_peak_used: 9071307,\n                total_peak_used: 328859648,\n            },\n        ),\n        waiting_for_paraheaders: false,\n        system: Some(\n            SystemInfo {\n                registered: false,\n                public_key: \".\",\n                ecdh_public_key: \".\",\n                gatekeeper: Some(\n                    GatekeeperStatus {\n                        role: None,\n                        master_public_key: \"\",\n                    },\n                ),\n                number_of_clusters: 0,\n                number_of_contracts: 0,\n                max_supported_consensus_version: 0,\n                genesis_block: 0,\n            },\n        ),\n        can_load_chain_state: false,\n    }\n[2023-05-10T11:18:39.222654Z INFO  pherry] try to sync blocks.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f658315-c824-4fcd-a262-fdb098da927a": {"__data__": {"id_": "0f658315-c824-4fcd-a262-fdb098da927a", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "559813a7-f308-41d9-8ca0-18e29d402c81", "node_type": "1", "metadata": {}, "hash": "10d0f1c1b159b6c67164cd0c137eeaf301d670c5b8a9250d02ee0c39fa807306", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1fb1d92c-0c8a-4cef-8fd5-4ccaede9710f", "node_type": "1", "metadata": {}, "hash": "1302b90ea2c4b561809521d148f47a347bcce00fe924b1334c6b55d5ad927cc4", "class_name": "RelatedNodeInfo"}}, "text": "next required: (relay_header=8347137, para_header=9415, body=9415), relay finalized tip: 17850681, buffered: 191\n[2023-05-10T11:18:39.223867Z INFO  pherry] get_block: Got block Some(8347328) hash 0xd305\u202604ff\n[2023-05-10T11:18:39.226657Z INFO  pherry] get_block: Got block Some(8347329) hash 0x27f2\u2026bc9a\n```\n\nYou can search for issues in these logs and confirm whether the synchronization is going normally. Also, you can obtain the worker\u2019s public key and the real-time calculated P-value (score) from them.\n\n### pRuntime Check\n\nEnter the following command to get the most recent 100 lines of pRuntime log information:\n\n```bash\nsudo docker logs phala-pruntime --tail 100\n```\n\n> If you have changed the component name through customizing docker-compose.yml, please replace \u201cphala-pruntime\u201d to your customized name in the command.", "mimetype": "text/plain", "start_char_idx": 10321, "end_char_idx": 11149, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fb1d92c-0c8a-4cef-8fd5-4ccaede9710f": {"__data__": {"id_": "1fb1d92c-0c8a-4cef-8fd5-4ccaede9710f", "embedding": null, "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72333733-10e6-4826-9ba7-37df010fba32", "node_type": "4", "metadata": {}, "hash": "5c75fe607c5b359f098e40dbc789eb50d9b0b1698710bc54eafc82ffcd134c56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f658315-c824-4fcd-a262-fdb098da927a", "node_type": "1", "metadata": {}, "hash": "85f3ad7f26726e56b900523e72fde26e5338cf02b07e169aab3b419390aac6a3", "class_name": "RelatedNodeInfo"}}, "text": "A typical pRuntime log in sync will look like this:\n\n```yaml\n2023-05-10T11:55:38.478826Z  INFO phactory::prpc_service: State synced\n2023-05-10T11:55:38.479089Z  INFO phactory::storage::storage_ext: Got 17 messages from OutboundMessages    \n2023-05-10T11:55:38.479330Z  INFO phactory::prpc_service: Dispatching block=440838\n2023-05-10T11:55:38.482465Z  INFO phactory::prpc_service: State synced\n2023-05-10T11:55:38.482647Z  INFO phactory::storage::storage_ext: Got 11 messages from OutboundMessages    \n2023-05-10T11:55:38.482825Z  INFO pruntime::runtime: pRPC returned code=200 size=4\n2023-05-10T11:55:38.482881Z  INFO prpc_measuring: POST /prpc/PhactoryAPI.DispatchBlocks cost 18221 microseconds, status: 200   \n```\n\nYou can determine whether the synchronization is proceeding normally by checking the synchronized height and progress.\\\\", "mimetype": "text/plain", "start_char_idx": 11151, "end_char_idx": 11989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21be5926-3c4d-445d-a662-f906f978035e": {"__data__": {"id_": "21be5926-3c4d-445d-a662-f906f978035e", "embedding": null, "metadata": {"file_path": "./phala_dist/why-multi-proof-and-how-we-can-help.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1251e17a-ee79-491c-8b46-66667122846a", "node_type": "4", "metadata": {}, "hash": "35084c46c5473f98967abc1b2a753a9ca67d93a9dcfa8084c12e3131ebf4284f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf349c04-b462-488e-bab4-0df5914b9e05", "node_type": "1", "metadata": {}, "hash": "9eeb17c584edc304db705691c142adbc0c1342b468fa3d81ceb56d0ea0c798f1", "class_name": "RelatedNodeInfo"}}, "text": "# Why Multi-Proof and How We Can Help\n\n## The Need for Multi-Proof Systems\n\nIn the blockchain space, our vision is to bring privacy, security, and verifiability to users. Our ultimate goal is to design a system that can simultaneously fulfill these attributes. However, relying on a single proof system to achieve this is impractical for several reasons:\n\n* No single cryptographic system can be guaranteed to be 100% secure. For instance, zero-knowledge proofs (zk) can have soundness bugs that are difficult to detect, while Multi-Party Computation (MPC) is susceptible to collusion risks between nodes.\n* Privacy in zkRollups cannot be fully guaranteed because sequencers can extract user transaction data during proof generation.\n* Verifiability in Fully Homomorphic Encryption (FHE) computations is challenging because the FHE server may not perform computations correctly, and without knowing the correct result, we cannot verify its accuracy.\n\nThere are several benefits we can gain by introducing TEE:\n\n1. **Hardware-grade safety:** The privacy, confidentiality, and data integrity is guaranteed by hardware secure enclave.\n2. **No computation overhead:** Applications run TEE have nearly same speed compare with running in normal CPU env\n3. **Low verification cost:** The Gas consumption to verify TEE proof is minimal, requiring just an ECDSA verification.\n\nBy building on the Phala TEE network, you can gain additional advantages:\n\n* **Data Sharing**: Phala TEE supports confidential data exchange use cases, such as Maximal Extractable Value (MEV), blockchain games, and AI model training.\n* **Availability**: With 35,000 TEE workers, Phala\u2019s Phat Contract is programmable to meet the needs of various blockchain projects, ensuring robust availability.\n* **Trust of Multiple Parties**: Phala TEE ensures that your application, project, or blockchain use case remains operational and free from legislative risks, maintaining trust across multiple parties.\n* **Out-of-the-Box SDK**: Our SDKs for Rust and JavaScript enable developers to launch their applications on our TEE network quickly, often within hours.\n\nWe can not guarantee any single cryptography system is 100% secure. At the same time, the current Zero-Knowledge (ZK) solution is secure theoretically but still does not guarantee system-wide bug-free operation, especially from an engineering perspective, which remains challenging due to the complexity of ZK implementation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2447, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf349c04-b462-488e-bab4-0df5914b9e05": {"__data__": {"id_": "cf349c04-b462-488e-bab4-0df5914b9e05", "embedding": null, "metadata": {"file_path": "./phala_dist/why-multi-proof-and-how-we-can-help.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1251e17a-ee79-491c-8b46-66667122846a", "node_type": "4", "metadata": {}, "hash": "35084c46c5473f98967abc1b2a753a9ca67d93a9dcfa8084c12e3131ebf4284f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "21be5926-3c4d-445d-a662-f906f978035e", "node_type": "1", "metadata": {}, "hash": "66280db0bac8917986f1df9ed0007221a97e1b4d2aacd2e2bdb46a849d8429a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "edc4dad8-987d-4aae-872f-d6a98ac595af", "node_type": "1", "metadata": {}, "hash": "14e45245d7445c3e170f2e84bca51a5a999d7f4c0610ad7d928e405b4e3f02ac", "class_name": "RelatedNodeInfo"}}, "text": "Here's where multi-proof systems come into play, to hedge the bugs in ZK implementation, a hardware solution, Trusted Execution Environment (TEE), can be used as a 2-factor verifier to offer double security to ZK projects like zk-Rollups. Inspired by Vitalik Buterin's [presentation](https://hackmd.io/@vbuterin/zk\\_slides\\_20221010#/) and a recent [post](https://ethresear.ch/t/2fa-zk-Rollups-using-sgx/14462) by Justin Drake.\n\n<figure><img src=\"../../.gitbook/assets/Why-Multi-Proof.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Use Cases\n\nLet's delve into some practical examples at the intersection of multi-proof systems. The practical real-world applications of multi-proof technology can be particularly seen in:\n\n1. **Build coprocessor for FHE-based blockchain**:\n\nMost FHE-based blockchain networks introduce a threshold signature-based MPC network to manage keys and perform decryption on behalf of the user, effectively acting as an FHE coprocessor. However, MPC introduces collusion risks between nodes. A better approach is to build the coprocessor using TEE, which offers several benefits:\n\n* **Key Security**: The program can be proven immutable, and access is restricted, essentially treating TEE as a form of two-factor authentication (2FA). For more details, you can check out this [post](https://ethresear.ch/t/sgx-as-2fa-for-fhe-mpc/19780) we published earlier on the Ethereum research forum.\n*   **Encryption/Decryption Validity**: Currently, we cannot guarantee the integrity of plaintext during both the encryption and decryption steps, especially since decryption is often outsourced to the MPC network. Instead of introducing Zero-Knowledge Proofs (ZKP) during encryption and decryption, an alternative approach is to run the MPC nodes inside a TEE. This can simultaneously address both key security and decryption integrity issues, and with lower computational cost. For more information, check out the [blog](https://phala.network/posts/build-fhe-coprocessor-on-tee-using-javascript) we posted.\n\n    <figure><img src=\"../../.gitbook/assets/FHE-Coprocessor.png\" alt=\"\"><figcaption></figcaption></figure>\n\n2.", "mimetype": "text/plain", "start_char_idx": 2448, "end_char_idx": 4587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edc4dad8-987d-4aae-872f-d6a98ac595af": {"__data__": {"id_": "edc4dad8-987d-4aae-872f-d6a98ac595af", "embedding": null, "metadata": {"file_path": "./phala_dist/why-multi-proof-and-how-we-can-help.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1251e17a-ee79-491c-8b46-66667122846a", "node_type": "4", "metadata": {}, "hash": "35084c46c5473f98967abc1b2a753a9ca67d93a9dcfa8084c12e3131ebf4284f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf349c04-b462-488e-bab4-0df5914b9e05", "node_type": "1", "metadata": {}, "hash": "9eeb17c584edc304db705691c142adbc0c1342b468fa3d81ceb56d0ea0c798f1", "class_name": "RelatedNodeInfo"}}, "text": "**Build 2FA for ZK-Rollups**:\n\nInspired by Vitalik Buterin's [presentation](https://hackmd.io/@vbuterin/zk\\_slides\\_20221010#/) and a recent [post](https://ethresear.ch/t/2fa-zk-Rollups-using-sgx/14462) by Justin Drake, we have awared that there are few improvement space exist in zk implementation. For example, we currently can not guarantee that the ZK circuit is bug free since it's tens of thousands code and we also cannot guarantee the privacy of user transaction because the sequencer can say anything.\n\nTo solve thoese problem, zk-Rollup can run a separate STF (state transition function) in TEE, and the result returned by STF will be signed by the key derived in TEE (check this [article](https://phala.network/posts/introducing-phala-sgxprover-a-twofactor-authentication-solution-for-zkrollups) for more details), then submitted on-chain verifier along with the ZKP, the security levels can be significantly improved while ensuring computational efficiencies.\n\n<figure><img src=\"../../.gitbook/assets/Use-Cases-Multi-Proof.png\" alt=\"\"><figcaption></figcaption></figure>\n\n3\\. **TEE-Proof for ZK/MPC Bridges**:\n\nZK/MPC bridges also can run the copy of the relayer in TEE, instead generate proof or MPC signature, the program can generate TEE-proof and submit it to the destination chain. The inclusion of TEE-proof provides secondary security, strengthening the system against potential breaches and leaks.\n\n4. **TEE-Proof for zkVM-based application**:\n\nA zkVM-based application can simply move their guest code to TEE, guest code often has no relation to ZK primitive. We can generate the TEE proof for the output of the guest code, which can be used to provide a secondary security guarantee for the zkVM.\n\n<figure><img src=\"../../.gitbook/assets/Use-Cases-Multi-Proof-2.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 4588, "end_char_idx": 6417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49f07218-100a-4922-80bd-6df23a64deda": {"__data__": {"id_": "49f07218-100a-4922-80bd-6df23a64deda", "embedding": null, "metadata": {"file_path": "./phala_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37992834-34f6-4889-bc26-db1c09d3cefd", "node_type": "1", "metadata": {}, "hash": "38e78daee93af300db9551f8559e81156af31f81b122e757d3468e5260034611", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: proof namespace\nsidebar_label: proof\nsidebar_position: 7\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### proof_getTransactionByHash\n\nThis function returns the same result as `eth_getTransactionReceipt` and also a tx proof, receipt proof and serialized block headers.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n2. `includeHeader`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"proof_getTransactionByHash\",\n      \"params\": [txHash, includeHeader]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37992834-34f6-4889-bc26-db1c09d3cefd": {"__data__": {"id_": "37992834-34f6-4889-bc26-db1c09d3cefd", "embedding": null, "metadata": {"file_path": "./phala_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49f07218-100a-4922-80bd-6df23a64deda", "node_type": "1", "metadata": {}, "hash": "e542e47aa8a1b258cc20937c87f20f2be564b8c83731d39c260bc836db446ccb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0666907a-f322-4a35-a656-655343ffd5e6", "node_type": "1", "metadata": {}, "hash": "a45d27d9e7a9d9489778f8332d0abce85dcdb5f14809fcea566d8a5238c4d5d5", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `blockHeader`: *string* (hex data)\n  - `transaction`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n  - `txProof`: array of *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### proof_getTransactionReceipt\n\nThis function should return the same result as `eth_call` and also proofs of all used accounts and their storages and serialized block headers.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n2. `includeHeader`: *boolean*", "mimetype": "text/plain", "start_char_idx": 817, "end_char_idx": 2370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0666907a-f322-4a35-a656-655343ffd5e6": {"__data__": {"id_": "0666907a-f322-4a35-a656-655343ffd5e6", "embedding": null, "metadata": {"file_path": "./phala_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37992834-34f6-4889-bc26-db1c09d3cefd", "node_type": "1", "metadata": {}, "hash": "38e78daee93af300db9551f8559e81156af31f81b122e757d3468e5260034611", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4fae536d-699b-47d8-8074-b20afc5c3489", "node_type": "1", "metadata": {}, "hash": "568bc818e1f990c85f5ea08b622fa8152a48646aa85e117bc9a0caf907dd008e", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"proof_getTransactionReceipt\",\n      \"params\": [txHash, includeHeader]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 2373, "end_char_idx": 2763, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fae536d-699b-47d8-8074-b20afc5c3489": {"__data__": {"id_": "4fae536d-699b-47d8-8074-b20afc5c3489", "embedding": null, "metadata": {"file_path": "./phala_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0666907a-f322-4a35-a656-655343ffd5e6", "node_type": "1", "metadata": {}, "hash": "a45d27d9e7a9d9489778f8332d0abce85dcdb5f14809fcea566d8a5238c4d5d5", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `blockHeader`: *string* (hex data)\n  - `receipt`: *object*\n    - `blobGasPrice`: *string* (hex integer)\n    - `blobGasUsed`: *string* (hex integer)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `contractAddress`: *string* (address)\n    - `cumulativeGasUsed`: *string* (hex integer)\n    - `effectiveGasPrice`: *string* (hex integer)\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gasUsed`: *string* (hex integer)\n    - `logs`: array of *object*\n      - `address`: *string* (address)\n      - `blockHash`: *string* (hash)\n      - `blockNumber`: *string* (hex integer)\n      - `data`: *string* (hex data)\n      - `logIndex`: *string* (hex integer)\n      - `removed`: *boolean*\n      - `topics`: array of *string* (hash)\n      - `transactionHash`: *string* (hash)\n      - `transactionIndex`: *string* (hex integer)\n    - `logsBloom`: *string* (hex data)\n    - `root`: *string* (hash)\n    - `status`: *string* (hex integer)\n    - `to`: *string* (address)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n  - `receiptProof`: array of *string* (hex data)\n  - `txProof`: array of *string* (hex data)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 2766, "end_char_idx": 4044, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "664ad5fb-9b50-4fff-8a8e-8782c5d5efb2": {"__data__": {"id_": "664ad5fb-9b50-4fff-8a8e-8782c5d5efb2", "embedding": null, "metadata": {"file_path": "./phala_dist/access-from-ui.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed0cccf9-62e2-4526-838b-5dedb4812023", "node_type": "4", "metadata": {}, "hash": "a56d447926e4085f127090a85d0f7c55ea7d5c3b57809499e4bd80f17931feba", "class_name": "RelatedNodeInfo"}}, "text": "# Access from UI\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 108, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0f8948c-58f2-4eac-b0aa-8f79e866ef9c": {"__data__": {"id_": "b0f8948c-58f2-4eac-b0aa-8f79e866ef9c", "embedding": null, "metadata": {"file_path": "./phala_dist/error-summary.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae", "node_type": "4", "metadata": {}, "hash": "4f7fcf4f6bd2d99bacbd20167f512a5462945e949d78fb3b2f4308b62ae8827c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e2f8c72-3587-4821-9c44-5402b516c567", "node_type": "1", "metadata": {}, "hash": "4dffbf1bb233e5dd762dc323b45a3df9a7c0ffa3654adeb1604d798f458cbd1a", "class_name": "RelatedNodeInfo"}}, "text": "# Error Summary\n\n## Mining <a href=\"#mining\" id=\"mining\"></a>\n\n### Worker <a href=\"#worker\" id=\"worker\"></a>\n\n| Error name                          | Meaning                                                                             | Solution                                                                                                                                                                                                                                       |\n| ----------------------------------- | ----------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| WorkerNotRegistered                 | The worker is not registered in the registry when adding to the pool                | Check the synchronization process and mining status of the worker                                                                                                                                                                              |\n| BenchmarkMissing                    | The worker doesn\u2019t have a valid benchmark when adding to the pool                   | Make sure the worker is mining and wait for the benchmark uploaded                                                                                                                                                                             |\n| WorkerDoesNotExist                  | The worker is already added to the pool                                             | -                                                                                                                                                                                                                                              |\n| WorkerInAnotherPool                 | The worker is already added to another pool                                         | Remove it from the pool to which the worker is added before if it\u2019s not the pool you want to add the worker to                                                                                                                                 |\n| UnauthorizedOperator                | The access to a worker is granted by its operator parameter set by register\\_worker | Check the config on the mining scripts                                                                                                                                                                                                         |\n| InsufficientFreeStake               | Cannot start mining because there\u2019s no enough free stake                            | The stake amount you set to the work is more than the free stake amount in the pool. Set a number that is less than the free stake or delegates more PHA in the pool                                                                           |\n| WorkersExceedLimit                  | Failed to add a worker because the number of the workers exceeds the upper limit.   | Create another pool or remove the useless worker in this pool (Make sure the worker is stopped and reclaimed before you remove it)                                                                                                             |\n| CannotRestartWithLessStake          | Restarted with a less stake is not allowed in the tokenomic.                        | -                                                                                                                                                                                                                                              |\n| MinerNotReady                       | Miner is not in Ready state to proceed.                                             | Wait for a 7 days period of Cool-down and reclaim it when the period is finished                                                                                                                                                               |\n| MinerNotMining                      | Miner is not in Mining state to stop mining.                                        | -                                                                                                                                                                                                                                              |\n| CoolDownNotReady                    | Cannot reclaim the worker because it\u2019s still in cooldown period.                    | Wait for the 7 days period of Cool-down and reclaim it when the period is finished                                                                                                                                                             |\n| TooMuchStake                        | Cannot start mining because there\u2019s too much stake (exceeds Vmax).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4987, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e2f8c72-3587-4821-9c44-5402b516c567": {"__data__": {"id_": "6e2f8c72-3587-4821-9c44-5402b516c567", "embedding": null, "metadata": {"file_path": "./phala_dist/error-summary.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae", "node_type": "4", "metadata": {}, "hash": "4f7fcf4f6bd2d99bacbd20167f512a5462945e949d78fb3b2f4308b62ae8827c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0f8948c-58f2-4eac-b0aa-8f79e866ef9c", "node_type": "1", "metadata": {}, "hash": "31ad770f2a1410d457eba5a34ab550ec6a2156407002183cccccb38f15978ed3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "055268e6-61c4-4a0e-8573-a157a0d97933", "node_type": "1", "metadata": {}, "hash": "bbb5f1d02efae4da2a233ee9c18d77736ad93632611bebd687d177bc38e71894", "class_name": "RelatedNodeInfo"}}, "text": "| The stake amount you set for the worker is more than the maximum stake amount of the worker. Set a lower number and try again. How to calculate the maximum stake: Phala Tokenomics                                                            |\n| BenchmarkTooLow                     | Indicating the initial benchmark score is too low to start mining.                  | Make sure your worker has a high-quality computing power. Restart your mining scripts and check the mining score on the mining status. If the mining score is still under 100, the worker will not be allowed to participate the Phala Mining. |\n| MinerNotFound                       | Miner not found.                                                                    | -                                                                                                                                                                                                                                              |\n| MinerNotBound                       | Not permitted because the miner is not bound with a worker.                         | -                                                                                                                                                                                                                                              |\n| WorkerNotBound                      | Not permitted because the worker is not bound with a miner account.                 | -                                                                                                                                                                                                                                              |\n| InternalErrorBadTokenomicParameters | Internal error. The tokenomic parameter is not set.                                 | Please contact the Phala Team the bug you meet, thank you                                                                                                                                                                                      |\n\n### Pool <a href=\"#pool\" id=\"pool\"></a>\n\n| Error name                   | Meaning                                                                         | Solution                                                                 |\n| ---------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| InadequateCapacity           | The stake capacity is set too low to cover the existing stake                   | Set a higher cap that is not less than the amount of existing delegation |\n| NoRewardToClaim              | There\u2019s no pending reward to claim                                              | Keep patient and learn about the Principles of payment events            |\n| AlreadyInContributeWhitelist | Can not add the staker to whitelist because the staker is already in whitelist.", "mimetype": "text/plain", "start_char_idx": 5005, "end_char_idx": 7997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "055268e6-61c4-4a0e-8573-a157a0d97933": {"__data__": {"id_": "055268e6-61c4-4a0e-8573-a157a0d97933", "embedding": null, "metadata": {"file_path": "./phala_dist/error-summary.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae", "node_type": "4", "metadata": {}, "hash": "4f7fcf4f6bd2d99bacbd20167f512a5462945e949d78fb3b2f4308b62ae8827c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e2f8c72-3587-4821-9c44-5402b516c567", "node_type": "1", "metadata": {}, "hash": "4dffbf1bb233e5dd762dc323b45a3df9a7c0ffa3654adeb1604d798f458cbd1a", "class_name": "RelatedNodeInfo"}}, "text": "| -                                                                        |\n| ExceedWhitelistMaxLen        | Too many stakers in contribution whitelist that exceed the limit                | remove the useless whitelist in this pool                                |\n\n## Delegate <a href=\"#delegate\" id=\"delegate\"></a>\n\n| Error name               | Meaning                                                                             | Solution                                                                         |\n| ------------------------ | ----------------------------------------------------------------------------------- | -------------------------------------------------------------------------------- |\n| StakeExceedsCapacity     | The stake added to a pool exceeds its capacity                                      | You can\u2019t add the delegation amount more than the delegatable amount of the pool |\n| InsufficientContribution | The contributed stake is smaller than the minimum threshold                         | Set a delegation amount that is more than 0.01 PHA                               |\n| InsufficientBalance      | Trying to contribute more than the available balance                                | You don\u2019t have enough transferrable balance. Check your transferrable balance    |\n| InvalidWithdrawalAmount  | The withdrawal amount is too small (considered as dust)                             | The withdrawal amount should be more than 0.01 PHA                               |\n| NoRewardToClaim          | There\u2019s no pending reward to claim                                                  | Keep patient and learn about the Principles of payment events                    |\n| NotInContributeWhitelist | Invalid staker to contribute because origin isn\u2019t in Pool\u2019s contribution whitelist. | Ask the pool owner to add you to the whitelist                                   |", "mimetype": "text/plain", "start_char_idx": 7998, "end_char_idx": 9901, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9792748-0a5d-41e0-af3f-1e019b10337f": {"__data__": {"id_": "b9792748-0a5d-41e0-af3f-1e019b10337f", "embedding": null, "metadata": {"file_path": "./phala_dist/sidevm.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8be7beb-10b2-4c85-8bec-cedad02e83bc", "node_type": "4", "metadata": {}, "hash": "2a323aed57c650904b09af66aa9e21fd6b0a9cf272b8a1d5411cd5221c30c0b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ddd310aa-7bfd-456f-98ed-515b151a6068", "node_type": "1", "metadata": {}, "hash": "3d75484749aee5445d5ffe62c2490d39277516c51d5baef2bdc4584c65070ac6", "class_name": "RelatedNodeInfo"}}, "text": "# SideVM\n\n## About SideVM <a href=\"#about-sidevm\" id=\"about-sidevm\"></a>\n\nSideVM is the core extension of Phat Contract. Despite the advantages above, the raw Phat Contract still has limitations compared with current Web2 backend programs:\n\n* Lifecycle limitation. The Phat Contract execution is triggered when users send on-chain transactions or off-chain queries to it, and the instance is destroyed when the execution finishes. This makes it impossible to do async requests or keep a long-live network connection;\n* Program environment limitation. The Phat Contract inherits the limitations of Ink! and only supports `no_std` crates. This also limits the resources a contract can use (e.g. listening to a port for connections).\n\nSideVM is proposed to tackle these limitations. It runs in a different runtime. This means it can continuously execute, support `std` library, and listen to the port.\n\n## Prepare Environment <a href=\"#prepare-environment\" id=\"prepare-environment\"></a>\n\nThe SideVM support is already equipped to our public testnet. But it requires manual authorization to your contract to enable it to call the `start_sidevm()` function. Contact us is the `#dev` channel in our [Discord server](https://discord.gg/phala-network) to get support.\n\nAlso, you can run your local testnet following our tutorial and then do the testing.\n\n## Play with it <a href=\"#play-with-it\" id=\"play-with-it\"></a>\n\n### Programming SideVM <a href=\"#programming-sidevm\" id=\"programming-sidevm\"></a>\n\nWe use [https://github.com/Phala-Network/phat-contract-examples/tree/master/start\\_sidevm](https://github.com/Phala-Network/phat-contract-examples/tree/master/start\\_sidevm) as an example. It contains both the Phat contract and the SideVM program under `sideprog` folder.\n\nThe SideVM part listens to a local port. It will be launched by this [line of code](https://github.com/Phala-Network/phat-contract-examples/blob/master/start\\_sidevm/lib.rs#L29) if called.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddd310aa-7bfd-456f-98ed-515b151a6068": {"__data__": {"id_": "ddd310aa-7bfd-456f-98ed-515b151a6068", "embedding": null, "metadata": {"file_path": "./phala_dist/sidevm.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8be7beb-10b2-4c85-8bec-cedad02e83bc", "node_type": "4", "metadata": {}, "hash": "2a323aed57c650904b09af66aa9e21fd6b0a9cf272b8a1d5411cd5221c30c0b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9792748-0a5d-41e0-af3f-1e019b10337f", "node_type": "1", "metadata": {}, "hash": "bd13c6891a5f47d4b70b1451aa5cd3cc75d80e0611538cef3d216f02ba7b1cb4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4ab5bd9-e79f-4c09-8e20-e49cad117dbe", "node_type": "1", "metadata": {}, "hash": "4c970640b31b2841c0ce35505026018efcb640f0573e8c84044789ee998e32be", "class_name": "RelatedNodeInfo"}}, "text": "### Compile Phat Contract and SideVM Program <a href=\"#compile-phat-contract-and-sidevm-program\" id=\"compile-phat-contract-and-sidevm-program\"></a>\n\nJust `make` under the folder and it will give you\n\n1. SideVM program `sideprog.wasm`\n2. Phat contract under `target/ink/start_sidevm.contract`\n\n### Upload SideVM Program and Instantiate the Contract <a href=\"#upload-sidevm-program-and-instantiate-the-contract\" id=\"upload-sidevm-program-and-instantiate-the-contract\"></a>\n\nWe have a [frontend](https://phat.phala.network/) but it does not support the SideVM program upload yet. So we need to upload it manually.\n\n### **Upload SideVM Program**\n\nUse [Polkadot.js](https://polkadot.js.org/apps/) and change the endpoint to `Phala (PoC 6)` under `TEST NETWORKS`.\n\n![](https://i.imgur.com/gerZoKj.png)\n\nIn `Developer` - `Extrinsics`, choose `phalaFatContracts` and `clusterUploadResource`. Change `resourceType` to `SidevmCode`, and drag your `sideprog.wasm` here.\n\nSubmit the transaction and you shall see its success.\n\n**Interact with Phat UI**\n\nGo to [https://phat.phala.network/](https://phat.phala.network/), click `sign in` and link your address. You need to ensure the `RPC Endpoint` is [wss://poc6.phala.network/ws](wss://poc5.phala.network/ws) and `Default PRuntime Endpoint` [https://phat-cluster-us.phala.network/poc6/pruntime/0xac5087e0](https://phat-cluster-us.phala.network/poc6/pruntime/0xac5087e0).\n\n![](../../.gitbook/assets/SelectPoC6.png)\n\nClick `Upload` and drag your `target/ink/start_sidevm.contract`. Choose the default constructor and Cluster `0x0000000000000000000000000000000000000000000000000000000000000000`. Click `Submit`. You should see something like\n\n![](https://i.imgur.com/M8PoeTO.png)\n\n**Start SideVM with Query**\n\nYou can directly interact with your contract with Contract UI.", "mimetype": "text/plain", "start_char_idx": 1957, "end_char_idx": 3764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4ab5bd9-e79f-4c09-8e20-e49cad117dbe": {"__data__": {"id_": "f4ab5bd9-e79f-4c09-8e20-e49cad117dbe", "embedding": null, "metadata": {"file_path": "./phala_dist/sidevm.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8be7beb-10b2-4c85-8bec-cedad02e83bc", "node_type": "4", "metadata": {}, "hash": "2a323aed57c650904b09af66aa9e21fd6b0a9cf272b8a1d5411cd5221c30c0b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ddd310aa-7bfd-456f-98ed-515b151a6068", "node_type": "1", "metadata": {}, "hash": "3d75484749aee5445d5ffe62c2490d39277516c51d5baef2bdc4584c65070ac6", "class_name": "RelatedNodeInfo"}}, "text": "The `start_sidevm` query is used to start the SideVM program. It contains the [invoke](https://github.com/Phala-Network/phat-contract-examples/blob/master/start\\_sidevm/lib.rs#L29) to `pink::start_sidevm()`.\n\nFrom the Worker log, we can see\n\n![](https://i.imgur.com/DWjOeyh.png)\n\nActually, we implemented the log server with SideVM too ([ref](https://github.com/Phala-Network/phala-blockchain/pull/855)).\n\n### More Resources <a href=\"#more-resources\" id=\"more-resources\"></a>\n\nWe do not have many documents on SideVM yet, feel free to ask us directly.\n\n* Previous SideVM design: [https://github.com/Phala-Network/rfcs/blob/main/pink-sidevm/pink-sidevm.md](https://github.com/Phala-Network/rfcs/blob/main/pink-sidevm/pink-sidevm.md)\n* SideVM program examples under [https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink/sidevm/examples](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink/sidevm/examples)\n* Our SideVM-related PRs: [https://github.com/Phala-Network/phala-blockchain/pulls?q=sidevm+](https://github.com/Phala-Network/phala-blockchain/pulls?q=sidevm+)", "mimetype": "text/plain", "start_char_idx": 3766, "end_char_idx": 4873, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6d6b831-d4fb-4845-93d9-55c97929a2c7": {"__data__": {"id_": "b6d6b831-d4fb-4845-93d9-55c97929a2c7", "embedding": null, "metadata": {"file_path": "./phala_dist/archive-node-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b51f9662-e742-4254-832d-41751aa23c13", "node_type": "4", "metadata": {}, "hash": "1c65070f32d40b1d4adeb43ec7818d7ac18be591d48d4800f5917441f9882ce4", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: >-\n  If you don't have enough harddisk for a full node. Here is a deployment method\n  to save your space:\n---\n\n# Archive node deployment\n\n**Use the docker compose like this to deploy your Node and headers cache**\n\n```docker\nversion: \"3\"\nservices:\n  node:\n    image: phalanetwork/khala-node-with-launcher:latest\n    container_name: node\n    hostname: node\n    restart: always\n    ports:\n     - \"9944:9944\"\n     - \"9945:9945\"\n     - \"30333:30333\"\n     - \"30334:30334\"\n    environment:\n     - NODE_NAME=NODE\n     - NODE_ROLE=ARCHIVE\n     - PARACHAIN_EXTRA_ARGS=--max-runtime-instances 32 --runtime-cache-size 8 --rpc-max-response-size 64\n     - RELAYCHAIN_EXTRA_ARGS=--max-runtime-instances 32 --runtime-cache-size 8 --rpc-max-response-size 64 --blocks-pruning archive-canonical --state-pruning 50400\n    volumes:\n     - /var/khala/node-data:/root/data\n\n  khala-headers-cache:\n    image: phalanetwork/headers-cache:latest\n    container_name: khala-headers-cache\n    network_mode: host\n    restart: always\n    environment:\n      - ROCKET_PORT=22111\n      - ROCKET_ADDRESS=0.0.0.0\n      - RUST_LOG=info\n    command:\n      - serve\n      - --grab-headers\n      - --node-uri=ws://{node-ip}:9945\n      - --para-node-uri=ws://{node-ip}:9944\n      - --interval=60\n    volumes:\n      - ./khala-headers-cache-public:/opt/headers-cache/data\n```\n\nIt can be connected to both Prb3 or pherry, and then connected to pRuntime. But remember:\n\n**You can't start syncing the headers cache with an existing archive node, they can only starting syncing from 0 together.**", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1564, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6ff3d1f-03ee-463e-a0ac-c20282bb41e5": {"__data__": {"id_": "e6ff3d1f-03ee-463e-a0ac-c20282bb41e5", "embedding": null, "metadata": {"file_path": "./phala_dist/test-and-benchmark.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08addcb7-e6d0-4cb6-a187-8c8f786900f1", "node_type": "4", "metadata": {}, "hash": "94339534cc91f5e3794fdcdb732068043dbd04e709e2053014ccef350a485749", "class_name": "RelatedNodeInfo"}}, "text": "# Test and Benchmark\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ba82da7-3dd7-4968-acf5-8cd88860303b": {"__data__": {"id_": "4ba82da7-3dd7-4968-acf5-8cd88860303b", "embedding": null, "metadata": {"file_path": "./phala_dist/monitor-workers-status.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "83b2c658-b9fa-44a5-8d97-5d4037664b07", "node_type": "4", "metadata": {}, "hash": "f5c1fc50f75278217c1ceb3e43cb04c6d5a16b99708af6a713fc2f41af8e8ea9", "class_name": "RelatedNodeInfo"}}, "text": "# Monitor Worker's Status\n\n### Verify the Status of your Worker <a href=\"#verify-the-status-of-your-worker\" id=\"verify-the-status-of-your-worker\"></a>\n\nYou can see the synchronization progress at any time of your worker. Check your worker\u2019s status with:\n\n```\nsudo phala status\n```\n\nYour worker\u2019s status shows the\n\n* `node name`\n* `number of cores`\n* `gas account and balance`\n* `StakePool account`\n* `Worker public key`\n* `Alarm of node loss syncing`\n\n> A warning will be sent if your gas account balance is under 2 PHA so you can recharge your GAS account on time.\n\n<figure><img src=\"../../../.gitbook/assets/2-3-1.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 662, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7a41f68-36fd-440e-bd05-e7c58cd73a84": {"__data__": {"id_": "a7a41f68-36fd-440e-bd05-e7c58cd73a84", "embedding": null, "metadata": {"file_path": "./phala_dist/eth_unsubscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52a2f66a-2856-454b-933c-5bfe2d27d01b", "node_type": "4", "metadata": {}, "hash": "d2113404970a7c6576b43c530d2660756827873bcce5bcc05fddffbe2bbdb2d0", "class_name": "RelatedNodeInfo"}}, "text": "### eth_unsubscribe\n\nUnsubscribes from a subscription.\n\n:::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionId`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_unsubscribe\",\n  \"params\": [subscriptionId]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean* (`true` if unsubscribed successfully; otherwise, `false`)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 708, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bd41f40-cfd2-4d90-8693-d534e8dbb813": {"__data__": {"id_": "6bd41f40-cfd2-4d90-8693-d534e8dbb813", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2060798e-f8cf-45f7-b22d-ea0825b58f34", "node_type": "1", "metadata": {}, "hash": "cf4a9e7621e11300bff43547ff87c57d520bf2dc1ccc596f13a66d0b4c43cbac", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: trace namespace\nsidebar_label: trace\nsidebar_position: 8\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### trace_block\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `numberOrTag`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_block\",\n      \"params\": [numberOrTag]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2060798e-f8cf-45f7-b22d-ea0825b58f34": {"__data__": {"id_": "2060798e-f8cf-45f7-b22d-ea0825b58f34", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6bd41f40-cfd2-4d90-8693-d534e8dbb813", "node_type": "1", "metadata": {}, "hash": "588f0b2045884ee0e09b3694156146fa5e482a80a24ac6b9f536b9a13979485b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0d33937-bc48-46b2-b3f9-407be000a569", "node_type": "1", "metadata": {}, "hash": "ea270816d00f12fb3aa2419b20364c9a93d42e415343c31087cddf3d1c80f04e", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `error`: *string*\n  - `result`: *object*\n    - `address`: *string* (address)\n    - `code`: *string* (hex data)\n    - `gasUsed`: *string* (hex integer)\n    - `output`: *string* (hex data)\n  - `subtraces`: *string* (hex integer)\n  - `traceAddress`: array of *string* (hex integer)\n  - `transactionHash`: *string* (hash)\n  - `transactionPosition`: *string* (hex integer)\n  - `type`: *string*\n\n</TabItem>\n</Tabs>\n\n### trace_call\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 701, "end_char_idx": 2044, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0d33937-bc48-46b2-b3f9-407be000a569": {"__data__": {"id_": "b0d33937-bc48-46b2-b3f9-407be000a569", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2060798e-f8cf-45f7-b22d-ea0825b58f34", "node_type": "1", "metadata": {}, "hash": "cf4a9e7621e11300bff43547ff87c57d520bf2dc1ccc596f13a66d0b4c43cbac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b293825-037c-48d3-9702-7a6efbe1da06", "node_type": "1", "metadata": {}, "hash": "1c1aaef098aea941d14bd4d5a19dd6e0d512b10c90734857e8892f601bbdbc0c", "class_name": "RelatedNodeInfo"}}, "text": "`call`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `traceTypes`: array of *string*\n\n3. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_call\",\n      \"params\": [call, traceTypes,", "mimetype": "text/plain", "start_char_idx": 2045, "end_char_idx": 3571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b293825-037c-48d3-9702-7a6efbe1da06": {"__data__": {"id_": "9b293825-037c-48d3-9702-7a6efbe1da06", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0d33937-bc48-46b2-b3f9-407be000a569", "node_type": "1", "metadata": {}, "hash": "ea270816d00f12fb3aa2419b20364c9a93d42e415343c31087cddf3d1c80f04e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54fb7cd1-fa55-4538-9dcd-cd6d4d6c5437", "node_type": "1", "metadata": {}, "hash": "359ae254d313da02ca9e17fb88f9caa582926b69d5516b17faa2a4e279262454", "class_name": "RelatedNodeInfo"}}, "text": "blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of", "mimetype": "text/plain", "start_char_idx": 3572, "end_char_idx": 4877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54fb7cd1-fa55-4538-9dcd-cd6d4d6c5437": {"__data__": {"id_": "54fb7cd1-fa55-4538-9dcd-cd6d4d6c5437", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b293825-037c-48d3-9702-7a6efbe1da06", "node_type": "1", "metadata": {}, "hash": "1c1aaef098aea941d14bd4d5a19dd6e0d512b10c90734857e8892f601bbdbc0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae2d9f9a-c238-4718-836c-c652c5ae3c1f", "node_type": "1", "metadata": {}, "hash": "c51c4a9c481d11c0c7579ce18bd32daf6e5308994789e766a6be44742ca0613c", "class_name": "RelatedNodeInfo"}}, "text": "*object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_filter\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `traceFilterForRpc`: *object*\n    - `after`: *string* (hex integer)\n    - `count`: *string* (hex integer)\n    - `fromAddress`: array of *string* (address)\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toAddress`: array of *string* (address)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 4878, "end_char_idx": 6251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae2d9f9a-c238-4718-836c-c652c5ae3c1f": {"__data__": {"id_": "ae2d9f9a-c238-4718-836c-c652c5ae3c1f", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54fb7cd1-fa55-4538-9dcd-cd6d4d6c5437", "node_type": "1", "metadata": {}, "hash": "359ae254d313da02ca9e17fb88f9caa582926b69d5516b17faa2a4e279262454", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b55ade4-a215-41ff-943c-a4847c6d7ea6", "node_type": "1", "metadata": {}, "hash": "03f7573419aa058c1cde80769fa3c2dcb274246b7fec17da0ebee767f7b1b9c6", "class_name": "RelatedNodeInfo"}}, "text": "\"method\": \"trace_filter\",\n      \"params\": [traceFilterForRpc]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `error`: *string*\n  - `result`: *object*\n    - `address`: *string* (address)\n    - `code`: *string* (hex data)\n    - `gasUsed`: *string* (hex integer)\n    - `output`: *string* (hex data)\n  - `subtraces`: *string* (hex integer)\n  - `traceAddress`: array of *string* (hex integer)\n  - `transactionHash`: *string* (hash)\n  - `transactionPosition`: *string* (hex integer)\n  - `type`: *string*\n\n</TabItem>\n</Tabs>\n\n### trace_rawTransaction\n\nTraces a call to eth_sendRawTransaction without making the call,", "mimetype": "text/plain", "start_char_idx": 6258, "end_char_idx": 7794, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b55ade4-a215-41ff-943c-a4847c6d7ea6": {"__data__": {"id_": "1b55ade4-a215-41ff-943c-a4847c6d7ea6", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae2d9f9a-c238-4718-836c-c652c5ae3c1f", "node_type": "1", "metadata": {}, "hash": "c51c4a9c481d11c0c7579ce18bd32daf6e5308994789e766a6be44742ca0613c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c98a4519-124f-47be-8b6a-27d69dc6727a", "node_type": "1", "metadata": {}, "hash": "4425ca2d14cd78bfd7f7b5b5cf3f86622e13c526268e84138783c889169deb93", "class_name": "RelatedNodeInfo"}}, "text": "returning the traces\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `data`: *string* (hex data)\n\n2. `traceTypes`: array of *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_rawTransaction\",\n      \"params\": [data, traceTypes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`:", "mimetype": "text/plain", "start_char_idx": 7795, "end_char_idx": 9180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c98a4519-124f-47be-8b6a-27d69dc6727a": {"__data__": {"id_": "c98a4519-124f-47be-8b6a-27d69dc6727a", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b55ade4-a215-41ff-943c-a4847c6d7ea6", "node_type": "1", "metadata": {}, "hash": "03f7573419aa058c1cde80769fa3c2dcb274246b7fec17da0ebee767f7b1b9c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d44f10a-f474-4a88-a015-aec4d09ab01e", "node_type": "1", "metadata": {}, "hash": "a43e377ac5a9dd6cd8c820bfab1f0b72295bf672bd3eecf5b53e357c64cf77ef", "class_name": "RelatedNodeInfo"}}, "text": "*object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_replayBlockTransactions\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `traceTypes`: array of *string*", "mimetype": "text/plain", "start_char_idx": 9181, "end_char_idx": 10406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d44f10a-f474-4a88-a015-aec4d09ab01e": {"__data__": {"id_": "1d44f10a-f474-4a88-a015-aec4d09ab01e", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c98a4519-124f-47be-8b6a-27d69dc6727a", "node_type": "1", "metadata": {}, "hash": "4425ca2d14cd78bfd7f7b5b5cf3f86622e13c526268e84138783c889169deb93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2635700-cef9-454f-a880-320e2c423ae4", "node_type": "1", "metadata": {}, "hash": "829efc374be407772ad84de4b6490efa81b8eb0ef21a9544bc6bdfce50f8ef94", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_replayBlockTransactions\",\n      \"params\": [blockParameter, traceTypes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    -", "mimetype": "text/plain", "start_char_idx": 10409, "end_char_idx": 11775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2635700-cef9-454f-a880-320e2c423ae4": {"__data__": {"id_": "f2635700-cef9-454f-a880-320e2c423ae4", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d44f10a-f474-4a88-a015-aec4d09ab01e", "node_type": "1", "metadata": {}, "hash": "a43e377ac5a9dd6cd8c820bfab1f0b72295bf672bd3eecf5b53e357c64cf77ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7720c015-debd-445a-9738-4af054eed1c4", "node_type": "1", "metadata": {}, "hash": "547621d410c2def51a5eb729ca3bcca8ee0296daa576c2bc1387a874a316d5c5", "class_name": "RelatedNodeInfo"}}, "text": "`code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_replayTransaction\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n2. `traceTypes`: array of *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_replayTransaction\",\n      \"params\": [txHash,", "mimetype": "text/plain", "start_char_idx": 11776, "end_char_idx": 13071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7720c015-debd-445a-9738-4af054eed1c4": {"__data__": {"id_": "7720c015-debd-445a-9738-4af054eed1c4", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2635700-cef9-454f-a880-320e2c423ae4", "node_type": "1", "metadata": {}, "hash": "829efc374be407772ad84de4b6490efa81b8eb0ef21a9544bc6bdfce50f8ef94", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0f1d697-8ca2-42ce-90d4-6905e79cc222", "node_type": "1", "metadata": {}, "hash": "dcbff61a1fafca9c15187046e1500496be889554dab44ebfa1a15c957bfb30c5", "class_name": "RelatedNodeInfo"}}, "text": "traceTypes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of", "mimetype": "text/plain", "start_char_idx": 8196, "end_char_idx": 9497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0f1d697-8ca2-42ce-90d4-6905e79cc222": {"__data__": {"id_": "c0f1d697-8ca2-42ce-90d4-6905e79cc222", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7720c015-debd-445a-9738-4af054eed1c4", "node_type": "1", "metadata": {}, "hash": "547621d410c2def51a5eb729ca3bcca8ee0296daa576c2bc1387a874a316d5c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e890c19-979a-460c-857a-bb3cd869b420", "node_type": "1", "metadata": {}, "hash": "11649da730c27247f8915e4375dcd54219b42535beeaeaba48f50a918923a09b", "class_name": "RelatedNodeInfo"}}, "text": "*object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_transaction\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_transaction\",\n      \"params\": [txHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 14374, "end_char_idx": 15509, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e890c19-979a-460c-857a-bb3cd869b420": {"__data__": {"id_": "6e890c19-979a-460c-857a-bb3cd869b420", "embedding": null, "metadata": {"file_path": "./phala_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "08263571-8343-43f8-ab10-64dd57d29090", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0f1d697-8ca2-42ce-90d4-6905e79cc222", "node_type": "1", "metadata": {}, "hash": "dcbff61a1fafca9c15187046e1500496be889554dab44ebfa1a15c957bfb30c5", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `error`: *string*\n  - `result`: *object*\n    - `address`: *string* (address)\n    - `code`: *string* (hex data)\n    - `gasUsed`: *string* (hex integer)\n    - `output`: *string* (hex data)\n  - `subtraces`: *string* (hex integer)\n  - `traceAddress`: array of *string* (hex integer)\n  - `transactionHash`: *string* (hash)\n  - `transactionPosition`: *string* (hex integer)\n  - `type`: *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 701, "end_char_idx": 1972, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a613378e-8747-4895-b2db-b90917f69acb": {"__data__": {"id_": "a613378e-8747-4895-b2db-b90917f69acb", "embedding": null, "metadata": {"file_path": "./phala_dist/framehub.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3ac87e7-b330-49d6-a4e7-bf5db38fdaf7", "node_type": "4", "metadata": {}, "hash": "8260fbb92d0661d3309dbc91f7e2d75bfddd5c7b25dfb5517d16b8c226492b8f", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\uddbc\ufe0f FrameHub\n\n<figure><img src=\"../.gitbook/assets/FramHub-Template.png\" alt=\"\"><figcaption></figcaption></figure>\n\nMore info coming soon. Check out our [repo](https://github.com/Phala-Network/framehub-template) to deploy today.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 229, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "baa24c40-7677-44d8-9441-2c9b76ab3521": {"__data__": {"id_": "baa24c40-7677-44d8-9441-2c9b76ab3521", "embedding": null, "metadata": {"file_path": "./phala_dist/switch-workers-from-solo-to-prb-mode.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "49d2ffb5-c4d9-4e40-b4c6-c08cc6eabfc2", "node_type": "4", "metadata": {}, "hash": "c91c08db59ee71c94e6683beb191b034190321b71930ed145a46e2c986caa291", "class_name": "RelatedNodeInfo"}}, "text": "# Switch Workers from Solo to PRB Mode\n\nSolo workers need to run node, pherry, and pRuntime simultaneously. If you want to switch your worker to PRB mode, you need to perform three steps:\n\n1. Set up at least one PRB Server, details: [PRB deployment](https://wiki.phala.network/en-us/mine/phala-worker/prbv3-deployment/)\n2. Disable the Node and pherry in the Solo miner, leaving only pRuntime running\n3. Add the Worker to the PRB UI, details: [Using PRBv3](https://wiki.phala.network/en-us/mine/phala-worker/using-prbv3/)\n\nIf you are using the docker compose content under this Wiki: [Solo worker deployment](https://wiki.phala.network/en-us/mine/phala-worker/solo-worker-deployment/)\n\nThe command to disable Node and pherry is as follows:\n\n```bash\nsudo docker container rm -f node\nsudo docker container rm -f phala-pherry\n```\n\n> If you have customized the docker compose content, please use `sudo docker container ps` to query the running service names and replace `node` and `phala-pherry` in the above commands.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8d691f8-bd2e-4597-96ab-d6b3de9f4bdb": {"__data__": {"id_": "c8d691f8-bd2e-4597-96ab-d6b3de9f4bdb", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-from-morpheus-plugin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c4e40f7-6e25-44c9-88ed-325a49c566ff", "node_type": "4", "metadata": {}, "hash": "205ae1cde8c58ec838e9593e0683541ddfb807287091a2d3daa947b0a3707bb1", "class_name": "RelatedNodeInfo"}}, "text": "# Connect from Morpheus Plugin\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ef3b2bb-4c9b-42b4-9bd9-c1856ee6e8a7": {"__data__": {"id_": "1ef3b2bb-4c9b-42b4-9bd9-c1856ee6e8a7", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-governance.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ea482d0-6d5a-4b30-93db-415b26393ed1", "node_type": "4", "metadata": {}, "hash": "0db6d2eaa83b7012c981b5ebd82a9574afe6ae8a9a191b386c17d6e115778307", "class_name": "RelatedNodeInfo"}}, "text": "# Khala Governance\n\nKhala and Phala adopt the same governance mechanism as Kusama and Polkadot. This is a relatively mature mechanism that governs to ensure the majority of the stake can always command a network. No matter whether the proposal is submitted by the public (PHA token holders) or the council, it will eventually have to go through a referendum where all holders, weighted by stake, make decisions.\n\nTo dive deeply into Phala/Khala governance, please refer to the Governance section.\n\n## Council <a href=\"#council\" id=\"council\"></a>\n\nTo represent passive stakeholders, Phala/Khala introduced the idea of a \u201ccouncil\u201d. each council member represents an on-chain account. Phala and Khala share the same council which currently consists of 5 members. This is expected to increase over the next few months to 11 members. The council will end up having a fixed number of seats. Click here to learn how to be part of it.\n\n## Participate in Khala Democracy <a href=\"#participate-in-khala-democracy\" id=\"participate-in-khala-democracy\"></a>\n\nKhala Governance Khala Polkadot.js", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "795181e0-7f31-4cd1-a1f7-a5887b076089": {"__data__": {"id_": "795181e0-7f31-4cd1-a1f7-a5887b076089", "embedding": null, "metadata": {"file_path": "./phala_dist/community-builders.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4cce7351-309e-4371-8c50-ba3dd083633c", "node_type": "4", "metadata": {}, "hash": "bd0afc1562daab7f2957035d0052d0db6a9659271fe7bd585d96b2c1d9b4fc68", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udc77 Community Builders", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 22, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5cdaedf3-1037-4e81-b8b7-45eb35bdf46c": {"__data__": {"id_": "5cdaedf3-1037-4e81-b8b7-45eb35bdf46c", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-dashboard-profile.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "14ad8e8c-e556-4f3b-8036-2a60b8ff5a51", "node_type": "4", "metadata": {}, "hash": "235c505c3cee8567d5ad4ac2edc624537278fa662d9f88b8b1de83068987b662", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udc7e Create a Dashboard Profile\n\n## Create a Profile <a href=\"#user-content-create-a-phala-profile\" id=\"user-content-create-a-phala-profile\"></a>\n\nYou can get an account from one of the following:\n\n* [Polkadot.js Wallet Extension](https://bit.ly/3RMUjqy)\n* [Talisman Wallet](https://bit.ly/3ZzAPYD)\n* [SubWallet](https://bit.ly/3tjS8R7) (**Support for iOS/Android**)\n* [Metamask](https://bit.ly/3RCiQ1b) (**Support for** [**EIP-712**](https://bit.ly/pha-eip-712))\n\nFirst, create your Phala Profile account on the [Phala PoC6 Testnet](https://bit.ly/3LHccmR) or [Phala Mainnet](https://bit.ly/3LHccmR). Here is a quick 1 minute [YouTube video](https://bit.ly/46clfo4) on setting up from scratch. Here is what your Phala Profile account overview should look like:\n\n<figure><img src=\"../../../.gitbook/assets/image (9).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Get Test Tokens\n\nTo get test tokens go to the [faucet](https://bit.ly/phala-faucet) and request tokens for both Phala PoC6 Testnet. Connect your wallet and click on `Send Me PHA` to get `100 PHA` sent to your wallet.\n\n<figure><img src=\"../../../.gitbook/assets/image (10).png\" alt=\"\"><figcaption></figcaption></figure>\n\nAnother way to get test tokens can be found [here](https://phat.phala.network) via the Phat UI.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "374e56e4-7604-4e76-a34f-75c2257995f7": {"__data__": {"id_": "374e56e4-7604-4e76-a34f-75c2257995f7", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c733f33c-8a44-4d29-8281-4e8ba8d82426", "node_type": "1", "metadata": {}, "hash": "567a655feda44ced81b90853d7065c035596e0f1bca3f60f149e38507ac79c0c", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83e\udec2 Connect Airstack Phat Contract to EVM Consumer Contract\n\nIn the previous section we described how the Airstack Starter Kit works. Let's revisit the diagram and description below.\n\n<figure><img src=\"../../../../.gitbook/assets/AirstackUserJourney (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\nThe diagram above displays the user journey of (1) Alice requesting a trust score for Eve from the EVM Consumer Contract. When (2) a new action request is added to the queue, (3) the Phala Network Phat Contract will pop the action off the queue and perform the off-chain work to compute a trust score.\n\nFirst (4) the Phat Contract will create a `batchHttpRequest` to query 3 separate subgraph endpoints to determine if Eve has transacted on-chain with Alice, has a Lens Profile, has a Farcaster account, has a primary ENS Domain, and if Alice & Eve have common POAPs. Once this data is returned then (5) the Phat Contract will compute a score based on some scoring criteria. You can view the code [here](https://bit.ly/pc-airstack-repo). Lastly, (6) the trust score for Eve has been returned to the EVM Consumer Contract and Eve's score is set in the Consumer Contract's storage for anyone to query.\n\n## Getting Started\n\nIf you have not setup Airstack code repo locally, go back to the [Quick Start](quick-start.md) section and follow the initial setup steps.\n\n### Before Deployment\n\nBefore deploying, you will need to either export your Phala Account via polkadot.js extension or store your private key in the .env (optionally you can manually enter during deployment as well).\n\n**Option 1: Export Polkadot account as json file**\n\nGo to your browser and click on the polkadot.js extension. Select your account and click \"Export Account\". Next, you will be prompted for your password before saving the file to your project directory. **Note** this is what will be set to `POLKADOT_WALLET_ACCOUNT_PASSPHRASE`. Make sure to save the file as `polkadot-account.json` in the **root** of your project directory.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c733f33c-8a44-4d29-8281-4e8ba8d82426": {"__data__": {"id_": "c733f33c-8a44-4d29-8281-4e8ba8d82426", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "374e56e4-7604-4e76-a34f-75c2257995f7", "node_type": "1", "metadata": {}, "hash": "867ffa1a77a68c382ea3f1f90082d9b7c68277a15414fac6526f1eb76f7d3d71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1852d46f-9f24-4cd1-8348-b7f754c60b5e", "node_type": "1", "metadata": {}, "hash": "6357197c7f4b43c989433ebdf2fa6f79f20ac0445a7944581e87313db58ca4a4", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/image (5) (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"../../../../.gitbook/assets/image (3) (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"../../../../.gitbook/assets/image (4) (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n**Option 2: Set mnemonic phrase to `POLKADOT_WALLET_SURI`**\n\nAfter creating your Phala Profile, set your `.env` variable `POLKADOT_WALLET_SURI` to the mnemonic phrase from generating the new Polkadot Account.\n\nHere is a screenshot of how to set `POLKADOT_WALLET_SURI`:\n\n<figure><img src=\"../../../../.gitbook/assets/image (8).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Deployments (Local, Testnet, Mainnet)\n\nThis guide will be separated into 3 tabs including:\n\n* **Local**: Local Testnet Deployment\n* **Testnet**: PoC6 Testnet & EVM Chain Testnet Deployment\n* **Mainnet**: Phala Mainnet & EVM Chain Mainnet Deployment\n\n> **Secrets (**[**What are Secrets**](../featured-blueprints/handling-secrets.md)**?", "mimetype": "text/plain", "start_char_idx": 2009, "end_char_idx": 3044, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1852d46f-9f24-4cd1-8348-b7f754c60b5e": {"__data__": {"id_": "1852d46f-9f24-4cd1-8348-b7f754c60b5e", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c733f33c-8a44-4d29-8281-4e8ba8d82426", "node_type": "1", "metadata": {}, "hash": "567a655feda44ced81b90853d7065c035596e0f1bca3f60f149e38507ac79c0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "791fb0e5-9948-4ee6-803a-9c649213c783", "node_type": "1", "metadata": {}, "hash": "a71ae5b01c13027bcb46f6a00f025d3ed7c4c1d9a1fd998da98d2a37ecad5fcb", "class_name": "RelatedNodeInfo"}}, "text": "):**\n>\n> * `apiUrl` - The endpoint base URL to the separate subgraph endpoints hosted on Airstack\n> * `apiKey` - an [API key](get-an-airstack-api-key.md) created on Airstack\n>\n> ```\n> {\n>     \"apiUrl\": \"https://api.airstack.xyz/gql\",\n>     \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"\n> }\n> ```\n\n{% tabs %}\n{% tab title=\"Local\" %}\nIn the previous [Quick Start](quick-start.md) section, we installed the dependencies and ran 2 separate tests locally, but these tests were not run against a live local testnet.&#x20;\n\nThis section will describe the process of:\n\n* Start up a local hardhat node\n* Deploy the EVM Consumer Contract to the local testnet\n* Run the `@phala/fn watch` command to run a local instance of the Airstack Phat Contract\n* Simulate a sample request by executing `npm run localhost-push-request`\n* See the Airstack Phat Contract reply with a result to the EVM Consumer Contract\n\n### Testing Locally\n\nFirst step is to install the package dependencies with the following command:\n\n```bash\nnpm install\n```\n\nWith all the dependencies installed, we are ready to build Airstack Phat Contract.\n\n```bash\nnpx @phala/fn build\n```\n\nTo simulate the expected result locally, run the Phat Contract script now with this command:\n\n> Use `decode` and `encode` playground at [https://playground.ethers.org](https://playground.ethers.org).\n\n```bash\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd '{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n```\n\nHere is the expected output of this call where the encoded call will request a trust score result for the address `hashwarlock.eth`. The result is `16`.", "mimetype": "text/plain", "start_char_idx": 3044, "end_char_idx": 4809, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "791fb0e5-9948-4ee6-803a-9c649213c783": {"__data__": {"id_": "791fb0e5-9948-4ee6-803a-9c649213c783", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1852d46f-9f24-4cd1-8348-b7f754c60b5e", "node_type": "1", "metadata": {}, "hash": "6357197c7f4b43c989433ebdf2fa6f79f20ac0445a7944581e87313db58ca4a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f4ac44c-da55-4ee1-bfbe-d1509d52ea85", "node_type": "1", "metadata": {}, "hash": "2bc89150b3ca7cce4882ec39e146b469c38210df28eebf49267dc64c3c6c6875", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000964256674e42d61f0ff84097e28f65311786ccb000000000000000000000000eaf55242a90bb3289db8184772b0b98562053559 '{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}' \n\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000964256674e42d61f0ff84097e28f65311786ccb000000000000000000000000eaf55242a90bb3289db8184772b0b98562053559\n[1]: 0x964256674E42D61f0fF84097E28f65311786ccB0 0xeaf55242a90bb3289dB8184772b0B98562053559\nRequest received for profile 0x964256674E42D61f0fF84097E28f65311786ccB0 0xeaf55242a90bb3289dB8184772b0B98562053559\nTokens Sent on ETH Check... Result [0]\nTokens Sent on ETH Check... Result [0]\nLens Profile Check... Result [7]\nFarcaster Account Check... Result [14]\nPrimary ENS Account.", "mimetype": "text/plain", "start_char_idx": 4811, "end_char_idx": 5723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f4ac44c-da55-4ee1-bfbe-d1509d52ea85": {"__data__": {"id_": "8f4ac44c-da55-4ee1-bfbe-d1509d52ea85", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "791fb0e5-9948-4ee6-803a-9c649213c783", "node_type": "1", "metadata": {}, "hash": "a71ae5b01c13027bcb46f6a00f025d3ed7c4c1d9a1fd998da98d2a37ecad5fcb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b821262-35be-4666-a2c8-2658645fca69", "node_type": "1", "metadata": {}, "hash": "af896c85e8f63e53a404aad3865ca083eb80b57b77a922154117c342222f2fb7", "class_name": "RelatedNodeInfo"}}, "text": "Result [24]\nCommon POAPs Check... Result[24]\nresponse: 0,1,0x964256674E42D61f0fF84097E28f65311786ccB0,24\n{\"output\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000964256674e42d61f0ff84097e28f65311786ccb00000000000000000000000000000000000000000000000000000000000000018\"}\n```\n\n#### Deploy a Local Hardhat Node\n\nNow that we have a simple understanding of the expected functionality of the Phat Contract, we can now take our tests to a local testnet. Here we will use Hardhat to deploy the EVM Consumer Contract then listen from new action requests and reply with built Phat Contract script.\n\nFirst we will start a local hardhat node.\n\n```sh\nnpm run localhost-node\n```\n\nWith our hardhat node running locally, we can now deploy the `OracleConsumerContract.sol` contract to the local hardhat network.\n\n```bash\nnpm run localhost-deploy\n```\n\n```bash\nnpm run localhost-deploy\n> the-graph-phat-contract@1.0.0 localhost-deploy\n> hardhat run --network localhost ./scripts/localhost/deploy.ts\n\nCompiled 18 Solidity files successfully (evm target: london).\nDeploying...\nDeployed { consumer: '0x5FbDB2315678afecb367f032d93F642f64180aa3' }\n```\n\nMake sure to copy the deployed contract address when you deploy your own contract locally. Note you contract address will be different than `0x5FbDB2315678afecb367f032d93F642f64180aa3`. We will now start watching the hardhat node deployed contract for any new requests from Airstack Phat Contract.", "mimetype": "text/plain", "start_char_idx": 5724, "end_char_idx": 7257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b821262-35be-4666-a2c8-2658645fca69": {"__data__": {"id_": "2b821262-35be-4666-a2c8-2658645fca69", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f4ac44c-da55-4ee1-bfbe-d1509d52ea85", "node_type": "1", "metadata": {}, "hash": "2bc89150b3ca7cce4882ec39e146b469c38210df28eebf49267dc64c3c6c6875", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ac79924-920f-47cd-bb62-26de020e0967", "node_type": "1", "metadata": {}, "hash": "3b4238499c7341ebb249fa70bd5afc4bc2e7b5c571b97db88c9bdfc83e89b43a", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nnpx @phala/fn watch 0x5FbDB2315678afecb367f032d93F642f64180aa3 artifacts/contracts/OracleConsumerContract.sol/OracleConsumerContract.json dist/index.js -a '{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n```\n\n```bash\nnpx @phala/fn watch 0x5FbDB2315678afecb367f032d93F642f64180aa3 artifacts/contracts/OracleConsumerContract.sol/OracleConsumerContract.json dist/index.js -a '{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\nListening for OracleConsumerContract MessageQueued events...\n```\n\nLet\u2019s now make a new request and see what happens with the listener\u2019s output. In separate tab, you will push a request with the following.\n\n> **Note**: The file can be edited [here](https://github.com/Phala-Network/airstack-phat-contract/blob/010d9c1f8b28fd74328c1e4ef633f55a6850f2f9/scripts/localhost/push-request.ts#L16) where you can change the `target` address.\n\n```bash\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3 npm run localhost-push-request\n```\n\n```bash\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3 npm run localhost-push-request\n> the-graph-phat-contract@1.0.0 localhost-push-request\n> hardhat run --network localhost ./scripts/localhost/push-request.ts\n\nPushing a request.\nReceived event [ResponseReceived]: {\n  reqId: BigNumber { value: \"1\" },\n  target: '0x011c23b3AadAf3D4991f3aBeE262A34d18e9fdb5',", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ac79924-920f-47cd-bb62-26de020e0967": {"__data__": {"id_": "0ac79924-920f-47cd-bb62-26de020e0967", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b821262-35be-4666-a2c8-2658645fca69", "node_type": "1", "metadata": {}, "hash": "af896c85e8f63e53a404aad3865ca083eb80b57b77a922154117c342222f2fb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15430652-0a2c-46d9-9f5b-93631a80a1d2", "node_type": "1", "metadata": {}, "hash": "87ab64e61c19f8fcb2f49a139cf4ec60987253b793ea505d3e0582a4172fac1f", "class_name": "RelatedNodeInfo"}}, "text": "value: BigNumber { value: \"70\" }\n}\n```\n\nIf you check back the tab where the Phat Contract is listening for new requests, the console log may look similar to below:\n\n```bash\nReceived event [MessageQueued]: {\n  tail: 0n,\n  data: '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000964256674e42d61f0ff84097e28f65311786ccb000000000000000000000000eaf55242a90bb3289db8184772b0b98562053559'\n}\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000964256674e42d61f0ff84097e28f65311786ccb000000000000000000000000eaf55242a90bb3289db8184772b0b98562053559\n[1]: 0x964256674E42D61f0fF84097E28f65311786ccB0 0xeaf55242a90bb3289dB8184772b0B98562053559\nRequest received for profile 0x964256674E42D61f0fF84097E28f65311786ccB0 0xeaf55242a90bb3289dB8184772b0B98562053559\nTokens Sent on ETH Check. Result [0]\nTokens Sent on ETH Check. Result [0]\nLens Profile Check. Result [7]\nFarcaster Account Check. Result [14]\nPrimary ENS Account.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15430652-0a2c-46d9-9f5b-93631a80a1d2": {"__data__": {"id_": "15430652-0a2c-46d9-9f5b-93631a80a1d2", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ac79924-920f-47cd-bb62-26de020e0967", "node_type": "1", "metadata": {}, "hash": "3b4238499c7341ebb249fa70bd5afc4bc2e7b5c571b97db88c9bdfc83e89b43a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0c1e5f3-0845-4e7e-9600-d1e9516688ad", "node_type": "1", "metadata": {}, "hash": "05a5cd03d0fb9bdc6e359c0e4acb3d3b4ae56733bdc16465f5acbd9094a0b5cc", "class_name": "RelatedNodeInfo"}}, "text": "Result [24]\nCommon POAPs Check... Result[24]\nresponse: 0,1,0x964256674E42D61f0fF84097E28f65311786ccB0,24\nJS Execution output: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000964256674e42d61f0ff84097e28f65311786ccb00000000000000000000000000000000000000000000000000000000000000018\n```\n\n:tada: **Congratulations!**&#x20;\n\nYou've completed deploying and testing the Airstack Phat Contract successfully in a local testnet. Now let's move to deploying to an EVM Testnet and connecting a deployed Phat Contract on PoC6 Testnet to visualize how this works autonomously.\n{% endtab %}\n\n{% tab title=\"Testnet\" %}\n{% hint style=\"danger\" %}\n**Important**\n\nThis guide references the `mumbai` testnet chain.&#x20;\n\nThe`mumbai` testnet is [deprecated since 2024/04/08](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos), meaning the steps to deploy to a testnet will no longer work out of the box.\n\nYou can opt to use the [`amoy`](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos) testnet or any other EVM testnet instead.\n{% endhint %}\n\nIn the previous [Quick Start](quick-start.md) section, we installed the dependencies.", "mimetype": "text/plain", "start_char_idx": 9731, "end_char_idx": 10999, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0c1e5f3-0845-4e7e-9600-d1e9516688ad": {"__data__": {"id_": "c0c1e5f3-0845-4e7e-9600-d1e9516688ad", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15430652-0a2c-46d9-9f5b-93631a80a1d2", "node_type": "1", "metadata": {}, "hash": "87ab64e61c19f8fcb2f49a139cf4ec60987253b793ea505d3e0582a4172fac1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "980202b5-c7ac-4800-bda1-51b41aaceca6", "node_type": "1", "metadata": {}, "hash": "e28a55cff8a39f13a067b277b4babdcd4a68075eaa56486872afade757106bd3", "class_name": "RelatedNodeInfo"}}, "text": "Now it is time to deploy and test to an EVM public testnet.&#x20;\n\nThe following steps will be performed:\n\n* Deploy the EVM Consumer Contract to the target EVM chain\n  * The EVM Consumer Contract will request actions to be executed off-chain by the Phat Contract\n* Deploy Airstack Phat Contract to the Phala PoC6 Testnet\n  * Once deployed, update the `ATTESTOR_ROLE` in the EVM Consumer Contract to the `Attestor Address` in the Phat Contract 2.0 UI Dashboard\n* Send a `request(address target)` transaction to get a trust score about an EVM target address\n* See Airstack Phat Contract respond with an action reply with a score for the target address\n\n### Minimum Requirements\n\n* [ ] Create a [Phala Dashboard Profile](../create-a-dashboard-profile.md) on Phala PoC6 Testnet\n  * [ ] Add funds to the EVM Gas Account to pay TX fees on target EVM Testnet Chain\n* [ ] Finished the [Quick Start](quick-start.md)\n* [ ] (Recommended) Go through the `Local` tab deployment process\n* [ ] Burner Account for EVM Consumer Contract deployment\n\n### Deployment\n\nIn this example, we will use Polygon Mumbai Testnet as the target EVM Testnet Chain, but this can be changed to any EVM testnet of the developers choice.\n\n#### Install Dependencies & Compile Contracts <a href=\"#user-content-install-dependencies--compile-contracts\" id=\"user-content-install-dependencies--compile-contracts\"></a>\n\n```sh\n# install dependencies\n$ npm install\n\n# compile contracts\n$ npm run compile\n```\n\n#### Deploy to Polygon Mumbai Testnet <a href=\"#user-content-deploy-to-polygon-mumbai-testnet\" id=\"user-content-deploy-to-polygon-mumbai-testnet\"></a>\n\nWith the contracts successfully compiled, now we can begin deploying first to Polygon Mumbai Testnet. If you have not gotten `MATIC` for Mumbai Testnet then get `MATIC` from a [faucet](https://bit.ly/3ZyFoT3). Ensure to save the address after deploying the Consumer Contract because this address will be use in the \"Configure Client\" section of Phat Contract 2.0 UI.", "mimetype": "text/plain", "start_char_idx": 11000, "end_char_idx": 12982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "980202b5-c7ac-4800-bda1-51b41aaceca6": {"__data__": {"id_": "980202b5-c7ac-4800-bda1-51b41aaceca6", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0c1e5f3-0845-4e7e-9600-d1e9516688ad", "node_type": "1", "metadata": {}, "hash": "05a5cd03d0fb9bdc6e359c0e4acb3d3b4ae56733bdc16465f5acbd9094a0b5cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b917a82-257b-4330-bac9-83ff019f22be", "node_type": "1", "metadata": {}, "hash": "82045d02df59f991d74422e1bd1af3101c04f65fb72e2007e8481294e4250722", "class_name": "RelatedNodeInfo"}}, "text": "The deployed address will also be set to the environment variable `MUMBAI_CONSUMER_CONTRACT_ADDRESS`.\n\n<pre class=\"language-sh\"><code class=\"lang-sh\"><strong>npm run test-deploy\n</strong></code></pre>\n\n```sh\n# deploy contracts to testnet mumbai\nnpm run test-deploy\n# > the-graph-phat-contract@1.0.0 test-deploy\n# > hardhat run --network mumbai ./scripts/mumbai/deploy.ts\n#\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://mumbai.polygonscan.com/address/0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# MUMBAI_CONSUMER_CONTRACT_ADDRESS=0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n#\n# Done\n```\n\n#### **(Optional) Verify Contract on Polygon Mumbai Testnet**\n\nEnsure to update the `mumbai.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `mumbai.arguments.ts` file.\n\n> **Note**: Your contract address will be different than `0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run test-deploy`.\n\n```sh\nnpm run test-verify -- <MUMBAI_CONSUMER_CONTRACT_ADDRESS>\n```\n\n```sh\nnpm run test-verify -- 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# > the-graph-phat-contract@1.0.0 test-verify\n# > hardhat verify --network mumbai --constructor-args mumbai.arguments.ts 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n#\n# Nothing to compile\n# No need to generate any newer typings.", "mimetype": "text/plain", "start_char_idx": 12983, "end_char_idx": 14609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b917a82-257b-4330-bac9-83ff019f22be": {"__data__": {"id_": "4b917a82-257b-4330-bac9-83ff019f22be", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "980202b5-c7ac-4800-bda1-51b41aaceca6", "node_type": "1", "metadata": {}, "hash": "e28a55cff8a39f13a067b277b4babdcd4a68075eaa56486872afade757106bd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d56d333-f715-498d-a951-0a0080bb359f", "node_type": "1", "metadata": {}, "hash": "d565826130b123d9c230f07c839febc83289f4bdb3f522fc9979af79701129ad", "class_name": "RelatedNodeInfo"}}, "text": "# Successfully submitted source code for contract\n# contracts/OracleConsumerContract.sol:OracleConsumerContract at 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract OracleConsumerContract on Etherscan.\n# https://mumbai.polygonscan.com/address/0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355#code\n```\n\n#### Deploy Phat Contract to PoC6 Testnet <a href=\"#user-content-deploy-phat-contract-to-poc5-testnet\" id=\"user-content-deploy-phat-contract-to-poc5-testnet\"></a>\n\nFor customizing your Phat Contract, checkout Phat Contract custom configurations in [Cusomizing Your Phat Contract](../featured-blueprints/customizing-your-phat-contract.md) to learn more before deploying to PoC6 testnet.\n\nNow that are Phat Contract has built successfully, let's deploy to Phala PoC6 Testnet with the following command:\n\n```shell\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --coreSettings='{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n# If polkadot-account.json is in the root of project\nnpx @phala/fn upload -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n```\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```bash\nnpx @phala/fn upload -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n# ?", "mimetype": "text/plain", "start_char_idx": 14610, "end_char_idx": 16235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d56d333-f715-498d-a951-0a0080bb359f": {"__data__": {"id_": "2d56d333-f715-498d-a951-0a0080bb359f", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b917a82-257b-4330-bac9-83ff019f22be", "node_type": "1", "metadata": {}, "hash": "82045d02df59f991d74422e1bd1af3101c04f65fb72e2007e8481294e4250722", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6fbd027-a509-498c-8703-4e087bd0b28c", "node_type": "1", "metadata": {}, "hash": "c07c663a8479ef83ac700ce44e3018ed2e12cf82114b07157a7364f5af844e93", "class_name": "RelatedNodeInfo"}}, "text": "Please enter your client RPC URL https://polygon-mumbai.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# ? Please enter your consumer address 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# ? Please Enter hahaha account password [hidden]\n# \u2713 Compiled successfully.\n# \u2713 Connected to the endpoint: wss://poc6.phala.network/ws\n#\n# You are connecting to a testnet.\n#\n# \u2713 Your Brick Profile contract ID: 0x2a9f9a07886e11e1c5d63a176e3f75253d6765aadb90beb112fb3e55f7c98ea8\n# \u2713 The ActionOffchainRollup contract has been instantiated: 0xc9b96a665c3f1730606760f056b78bbb493f31a2b5406f8dd19e138561177336\n# ? Please select an external account: [1] 0x20050cae178a72e7c5adc207a060a16e65bbb7cf. https://polygon-mumbai.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# \u2713 Checking your settings\n# ? Please enter your project name My Phat Contract 6\n# \u2713 \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks.phala.network/workflows/0x2a9f9a07886e11e1c5d63a176e3f75253d6765aadb90beb112fb3e55f7c98ea8/6\n# Your Attestor address: 0x4a8e621202af9206959017c3795721f327f2ef28\n# Your WORKFLOW_ID: 6\n```\n\nGo to the PoC6 Testnet [Phat Contract 2.0 UI](https://bit.ly/3LHccmR) Dashboard and you can see your newly deployed Phat Contract.", "mimetype": "text/plain", "start_char_idx": 16236, "end_char_idx": 17467, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6fbd027-a509-498c-8703-4e087bd0b28c": {"__data__": {"id_": "d6fbd027-a509-498c-8703-4e087bd0b28c", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d56d333-f715-498d-a951-0a0080bb359f", "node_type": "1", "metadata": {}, "hash": "d565826130b123d9c230f07c839febc83289f4bdb3f522fc9979af79701129ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a09d59a6-7242-4e7c-bc03-b49b641b98e9", "node_type": "1", "metadata": {}, "hash": "943e9ba5519fab83b974d15d6d70b76f4a6b2d77359f7220664ae8a2a1129628", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/DeployedTheGraphPC.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### **Interact with Consumer Contract on Polygon Mumbai**\n\nTest Consumer Contract on Mumbai with a few tests to check for malformed requests failures, successful requests, and set the attestor.\n\n```sh\nnpm run test-set-attestor\n```\n\n```sh\nnpm run test-set-attestor\n# > the-graph-phat-contract@1.0.0 test-set-attestor\n# > hardhat run --network mumbai ./scripts/mumbai/set-attestor.ts\n#\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Contract 2.0 UI dashboard (https://bricks.phala.network)\n# - Go to the 'Configuration' tab and update the 'Client' box\n# - Set value to 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# Done\n```\n\nTest pushing a malform request.\n\n```sh\nnpm run test-push-malformed-request\n```\n\n```sh\nnpm run test-push-malformed-request\n# > the-graph-phat-contract@1.0.0 test-push-malformed-request\n# > hardhat run --network mumbai ./scripts/mumbai/push-malformed-request.ts\n#\n# Pushing a malformed request...\n# Done\n```\n\nWe can visualize the response from the Phat Contract in the block explorer.\n\n<figure><img src=\"../../../../.gitbook/assets/malformreq-thegraph-pc.png\" alt=\"\"><figcaption></figcaption></figure>\n\nTest pushing a valid request.\n\n```sh\nnpm run test-push-request\n```\n\n```sh\nnpm run test-push-request\n# Pushing a request...\n# Done\n# \u2728  Done in 2.97s.\n```\n\nThe next 2 images will show the request to the Consumer Contract with a reply from the Phat Contract, and the last picture shows what the Phat Contract replied with.", "mimetype": "text/plain", "start_char_idx": 17469, "end_char_idx": 19072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a09d59a6-7242-4e7c-bc03-b49b641b98e9": {"__data__": {"id_": "a09d59a6-7242-4e7c-bc03-b49b641b98e9", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6fbd027-a509-498c-8703-4e087bd0b28c", "node_type": "1", "metadata": {}, "hash": "c07c663a8479ef83ac700ce44e3018ed2e12cf82114b07157a7364f5af844e93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a802ac02-1f8e-467e-b618-760ee7b481ba", "node_type": "1", "metadata": {}, "hash": "451294148764362283676ec56aa711f20c1d1296ddc93cf1e215d55b89a9b6a8", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/push-request-thegraph.png\" alt=\"\"><figcaption></figcaption></figure>\n\nHere is the emitted event `ResponseReceived` with the score `70` for `target` address `0x011c23b3AadAf3D4991f3aBeE262A34d18e9fdb5.`\n\n<figure><img src=\"../../../../.gitbook/assets/thegraph-pc-reply-info.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### Update Phat Contract on Phala PoC6 Testnet <a href=\"#user-content-update-phat-contract-on-phala-poc5-testnet\" id=\"user-content-update-phat-contract-on-phala-poc5-testnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. The `npx @phala/fn update` command will update your Phat Contract easily in the command line.&#x20;\n\nNow let's update the Phat Contract:\n\n```bash\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update -a ./polkadot-account.json\n```\n\n```bash\nnpx @phala/fn update -a ./polkadot-account.json\n# ? Please Enter hahaha account password [hidden]\n# \u2713 Compiled successfully.\n# \u2713 Connected to the endpoint: wss://poc6.phala.network/ws\n#\n# You are connecting to a testnet.\n#\n# \u2713 Your Brick Profile contract ID: 0x2a9f9a07886e11e1c5d63a176e3f75253d6765aadb90beb112fb3e55f7c98ea8\n# \u2713 The JavaScript code for workflow 6 has been updated.\n```\n\n:tada: **Congratulations!** You have now completed a full testnet deployment and have a fully functional Phat Contract connected to Airstack to compute a score and return to your EVM Consumer Contract.", "mimetype": "text/plain", "start_char_idx": 19074, "end_char_idx": 20731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a802ac02-1f8e-467e-b618-760ee7b481ba": {"__data__": {"id_": "a802ac02-1f8e-467e-b618-760ee7b481ba", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a09d59a6-7242-4e7c-bc03-b49b641b98e9", "node_type": "1", "metadata": {}, "hash": "943e9ba5519fab83b974d15d6d70b76f4a6b2d77359f7220664ae8a2a1129628", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f3e317c-b01b-4b63-9263-add1ec9c7e5b", "node_type": "1", "metadata": {}, "hash": "bb7e32d78f4e279c3d46e9261aff84f90604f454307b97815d77cdfd58b465b1", "class_name": "RelatedNodeInfo"}}, "text": "The steps for mainnet deployment are nearly identical, but let's take a look at the process in the `Mainnet` tab.\n{% endtab %}\n\n{% tab title=\"Mainnet\" %}\nIn the previous `Testnet` tab, you went through the full deployment process to connect Airstack Phat Contract to a Consumer Contract on an EVM Testnet Chain. Now it is time to take these talents to **Mainnet** :sunglasses:.&#x20;\n\nThe following steps will be performed:\n\n* Deploy the EVM Consumer Contract to the target EVM  Mainnet chain\n  * The EVM Consumer Contract will request actions to be executed off-chain by the Phat Contract\n* Deploy Airstack Phat Contract to the Phala Mainnet\n  * Once deployed, update the `ATTESTOR_ROLE` in the EVM Consumer Contract to the `Attestor Address` in the Phat Contract 2.0 UI Dashboard\n* Send a `request(address target)` transaction to get a trust score about an EVM target address\n* See Airstack Phat Contract respond with an action reply with a score for the target address\n\n### Minimum Requirements\n\n* [ ] Create a [Phala Dashboard Profile](../create-a-dashboard-profile.md) on Phala Mainnet\n  * [ ] Add funds to the EVM Gas Account to pay TX fees on target EVM Mainnet Chain\n* [ ] Finished the [Quick Start](quick-start.md)\n* [ ] (Recommended) Go through the `Local` AND `Testnet` tabs to understand the deployment process fully\n* [ ] Burner Account for EVM Consumer Contract deployment\n\n### Deployment\n\nIn this example, we will use Polygon PoS Mainnet as the target EVM Mainnet Chain, but this can be changed to any EVM chain of the developer's choice.\n\n#### Install Dependencies & Compile Contracts <a href=\"#user-content-install-dependencies--compile-contracts\" id=\"user-content-install-dependencies--compile-contracts\"></a>\n\n```sh\n# install dependencies\n$ npm install\n\n# compile contracts\n$ npm run compile\n```\n\n#### Deploy to Polygon Mainnet <a href=\"#user-content-deploy-to-polygon-mumbai-testnet\" id=\"user-content-deploy-to-polygon-mumbai-testnet\"></a>\n\nWith the contracts successfully compiled, now we can begin deploying first to Polygon PoS Mainnet.", "mimetype": "text/plain", "start_char_idx": 20732, "end_char_idx": 22791, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f3e317c-b01b-4b63-9263-add1ec9c7e5b": {"__data__": {"id_": "3f3e317c-b01b-4b63-9263-add1ec9c7e5b", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a802ac02-1f8e-467e-b618-760ee7b481ba", "node_type": "1", "metadata": {}, "hash": "451294148764362283676ec56aa711f20c1d1296ddc93cf1e215d55b89a9b6a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ac1adc5-1121-4f8f-b274-a6d161444397", "node_type": "1", "metadata": {}, "hash": "66a18ea74af3b6a99e68b5227fdd9c7e7281595fe80e131db87348d963e249bb", "class_name": "RelatedNodeInfo"}}, "text": "If you have not gotten `MATIC` then get `MATIC` from an exchange or through their [Wallet Suite](https://wallet.polygon.technology/). Ensure to save the address after deploying the Consumer Contract because this address will be use in the \"Configure Client\" section of Phat Contract 2.0 UI. The deployed address will also be set to the environment variable `POLYGON_CONSUMER_CONTRACT_ADDRESS`.\n\n<pre class=\"language-sh\"><code class=\"lang-sh\"><strong>npm run main-deploy\n</strong></code></pre>\n\n```sh\n# deploy contracts to Polygon PoS mainnet\nnpm run main-deploy\n# > the-graph-phat-contract@1.0.0 main-deploy\n# > hardhat run --network polygon ./scripts/polygon/deploy.ts\n#\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://polygonscan.com/address/0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# POLYGON_CONSUMER_CONTRACT_ADDRESS=0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# \n# Done\n```\n\n#### **(Optional) Verify Contract on Polygon Mainnet**\n\nEnsure to update the `polygon.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `polygon.arguments.ts` file.\n\n> **Note**: Your contract address will be different than `0x0b9aC89924483077899d2B52bc8AF794F546a1e9` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run main-deploy`.", "mimetype": "text/plain", "start_char_idx": 22792, "end_char_idx": 24337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ac1adc5-1121-4f8f-b274-a6d161444397": {"__data__": {"id_": "7ac1adc5-1121-4f8f-b274-a6d161444397", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f3e317c-b01b-4b63-9263-add1ec9c7e5b", "node_type": "1", "metadata": {}, "hash": "bb7e32d78f4e279c3d46e9261aff84f90604f454307b97815d77cdfd58b465b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "40276550-520b-4587-a38e-70745a12cac8", "node_type": "1", "metadata": {}, "hash": "b839f4c0e05a2ff31b76908f6798ec9a1ca3b85bd46aae6b028e84eec25cb1ba", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run main-verify -- <MUMBAI_CONSUMER_CONTRACT_ADDRESS>\n```\n\n```sh\nnpm run main-verify -- 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# > the-graph-phat-contract@1.0.0 main-verify\n# > hardhat verify --network polygon --constructor-args polygon.arguments.ts 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n#\n# Nothing to compile\n# No need to generate any newer typings.\n# Successfully submitted source code for contract\n# contracts/OracleConsumerContract.sol:OracleConsumerContract at 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract OracleConsumerContract on Etherscan.\n# https://polygonscan.com/address/0x0b9aC89924483077899d2B52bc8AF794F546a1e9#code\n```\n\n#### Deploy Phat Contract to Phala Mainnet <a href=\"#user-content-deploy-phat-contract-to-poc5-testnet\" id=\"user-content-deploy-phat-contract-to-poc5-testnet\"></a>\n\nFor customizing your Phat Contract, checkout Phat Contract custom configurations in [Customizing Your Phat Contract ](../featured-blueprints/customizing-your-phat-contract.md)to learn more before deploying to Phala Mainnet.", "mimetype": "text/plain", "start_char_idx": 24339, "end_char_idx": 25492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40276550-520b-4587-a38e-70745a12cac8": {"__data__": {"id_": "40276550-520b-4587-a38e-70745a12cac8", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ac1adc5-1121-4f8f-b274-a6d161444397", "node_type": "1", "metadata": {}, "hash": "66a18ea74af3b6a99e68b5227fdd9c7e7281595fe80e131db87348d963e249bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68916ba3-b73e-47b0-82d1-5ebaff33f757", "node_type": "1", "metadata": {}, "hash": "097250894e93b6cf2b271829c649d472cfff0922421597ecd75d3ecfec2d042f", "class_name": "RelatedNodeInfo"}}, "text": "Now that are Phat Contract has built successfully, let's deploy to Phala Mainnet with the following command:\n\n<pre class=\"language-shell\"><code class=\"lang-shell\"># If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --mode=production --coreSettings='{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n# If polkadot-account.json is in the root of project\n<strong>npx @phala/fn upload --mode=production -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n</strong></code></pre>\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```bash\nnpx @phala/fn upload --mode=production -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://api.airstack.xyz/gql\", \"apiKey\": \"3a41775a358a4cb99ca9a29c1f6fc486\"}'\n# ? Please enter your client RPC URL https://polygon-mainnet.g.alchemy.com/v2/UZpqlxsFm0aVm_euopH95rQ6YxiRa3VC\n# ? Please enter your consumer address 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# ? Please Enter hahaha account password [hidden]\n# \u2713 Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 25494, "end_char_idx": 26717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68916ba3-b73e-47b0-82d1-5ebaff33f757": {"__data__": {"id_": "68916ba3-b73e-47b0-82d1-5ebaff33f757", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "40276550-520b-4587-a38e-70745a12cac8", "node_type": "1", "metadata": {}, "hash": "b839f4c0e05a2ff31b76908f6798ec9a1ca3b85bd46aae6b028e84eec25cb1ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc3e1af5-1d9c-48f9-9bb2-021ad5163f87", "node_type": "1", "metadata": {}, "hash": "9c4ad978a4bd56baf0fe5e1b47c92ed9433b11d22650b0c22c5d2154fbe2e571", "class_name": "RelatedNodeInfo"}}, "text": "# \u2713 Connected to the endpoint: wss://api.phala.network/ws\n# \u2713 Your Brick Profile contract ID: 0x6e96d8c209fc14b69533e3627c4766b6eeef8f77a25348b2d77b28c90b0bd012\n# \u2713 The ActionOffchainRollup contract has been instantiated: 0xe2ac2edc835de67f71f76ef686ebb4e48bdf0c2da2b6862329cca00c3c9b8349\n# ? Please select an external account: [0] 0x8438ce1a6196b7edae83cbc2a58d33db6fae6bee. https://polygon-mainnet.g.alchemy.com/v2/W1kyx17tiFQFT2b19mGOqppx90BLHp0a\n# \u2713 Checking your settings\n# ? Please enter your project name My Phat Contract 0\n# \u2713 \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks.phala.network/workflows/0x6e96d8c209fc14b69533e3627c4766b6eeef8f77a25348b2d77b28c90b0bd012/0\n# Your Attestor address: 0x2829d70d48516b7d1be2b5f5f424b41ce4da8056\n# Your WORKFLOW_ID: 0\n```\n\nGo to the [Phat Contract 2.0 Dashboard](https://bit.ly/3LHccmR) and you can see your newly deployed Phat Contract.\n\n<figure><img src=\"../../../../.gitbook/assets/deploy-thegraph-main.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### **Interact with Consumer Contract on Polygon PoS Mainnet**\n\nConsumer Contract on Mumbai with a few transactions to set the attestor, check for malformed requests failures, and successfully fulfilled requests.", "mimetype": "text/plain", "start_char_idx": 26718, "end_char_idx": 27959, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc3e1af5-1d9c-48f9-9bb2-021ad5163f87": {"__data__": {"id_": "fc3e1af5-1d9c-48f9-9bb2-021ad5163f87", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68916ba3-b73e-47b0-82d1-5ebaff33f757", "node_type": "1", "metadata": {}, "hash": "097250894e93b6cf2b271829c649d472cfff0922421597ecd75d3ecfec2d042f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33038452-541c-4e3c-97aa-93bb9ef15fd1", "node_type": "1", "metadata": {}, "hash": "361a020327b01210180f5171d5d433207224e56d198c146c7b8f127424b00c28", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run main-set-attestor\n```\n\n<pre class=\"language-sh\"><code class=\"lang-sh\">npm run main-set-attestor\n<strong># > the-graph-phat-contract@1.0.0 main-set-attestor\n</strong># > hardhat run --network polygon ./scripts/polygon/set-attestor.ts\n#\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Contract 2.0 UI dashboard (https://bricks.phala.network)\n# - Go to the 'Configuration' tab and update the 'Client' box\n# - Set value to 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# Done\n</code></pre>\n\nTry pushing a malform request to ensure failures behave appropriately.\n\n```sh\nnpm run main-push-malformed-request\n```\n\n```sh\nnpm run main-push-malformed-request\n# > the-graph-phat-contract@1.0.0 main-push-malformed-request\n# > hardhat run --network polygon ./scripts/polygon/push-malformed-request.ts\n#\n# Pushing a malformed request...\n# Done\n```\n\nWe can visualize the response from the Phat Contract in the Polygonscan block explorer.\n\n<figure><img src=\"../../../../.gitbook/assets/malform-request-pc-main.png\" alt=\"\"><figcaption></figcaption></figure>\n\nTest pushing a valid request that will get a valid reply of a trust score value for a `target` address.\n\n```sh\nnpm run main-push-request\n```\n\n```sh\nnpm run main-push-request\n# > the-graph-phat-contract@1.0.0 main-push-request\n# > hardhat run --network polygon ./scripts/polygon/push-request.ts\n#\n# Pushing a request...\n# Done\n```\n\nThe next 2 images will show the request to the Consumer Contract with a reply from the Phat Contract, and the last picture shows what the Phat Contract replied with.", "mimetype": "text/plain", "start_char_idx": 27961, "end_char_idx": 29555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33038452-541c-4e3c-97aa-93bb9ef15fd1": {"__data__": {"id_": "33038452-541c-4e3c-97aa-93bb9ef15fd1", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc3e1af5-1d9c-48f9-9bb2-021ad5163f87", "node_type": "1", "metadata": {}, "hash": "9c4ad978a4bd56baf0fe5e1b47c92ed9433b11d22650b0c22c5d2154fbe2e571", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b18d6ae0-074b-4a1b-922f-5598a15387e7", "node_type": "1", "metadata": {}, "hash": "ed8eed8cbb2f40d6e7de3e736252385519027b4c6f0d99c08e3217ec32321512", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/push-request-thegraph-main.png\" alt=\"\"><figcaption></figcaption></figure>\n\nHere is the emitted event `ResponseReceived` with the score `206` for `target` address `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045` (aka vitalik.eth)\n\n<figure><img src=\"../../../../.gitbook/assets/thegraph-pc-reply-info-vitalik.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### Update Phat Contract on Phala Mainnet <a href=\"#user-content-update-phat-contract-on-phala-poc5-testnet\" id=\"user-content-update-phat-contract-on-phala-poc5-testnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. The `npx @phala/fn update` command will update your Phat Contract easily in the command line.&#x20;\n\nNow let's update the Phat Contract:\n\n```bash\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update --mode=production\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update --mode=production -a ./polkadot-account.json\n```\n\n<pre class=\"language-bash\"><code class=\"lang-bash\">npx @phala/fn update --mode=production -a ./polkadot-account.json\n<strong># ? Please Enter hahaha account password [hidden]\n</strong># \u2713 Compiled successfully.\n# \u2713 Connected to the endpoint: wss://api.phala.network/ws\n# \u2713 Your Brick Profile contract ID: 0x6e96d8c209fc14b69533e3627c4766b6eeef8f77a25348b2d77b28c90b0bd012\n# \u2713 The JavaScript code for workflow 0 has been updated.\n</code></pre>\n\n:tada: **Congratulations!** You have now completed a full mainnet deployment and have a fully functional Phat Contract connected to Airstack to compute a score and return to your EVM Consumer Contract.", "mimetype": "text/plain", "start_char_idx": 29557, "end_char_idx": 31324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b18d6ae0-074b-4a1b-922f-5598a15387e7": {"__data__": {"id_": "b18d6ae0-074b-4a1b-922f-5598a15387e7", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e093953-c3c6-4611-8db8-4eb87589b13a", "node_type": "4", "metadata": {}, "hash": "ec75d52b15171f90778c54bbdbc79bf2b5540fef3b32bfc53415c153b769eccc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33038452-541c-4e3c-97aa-93bb9ef15fd1", "node_type": "1", "metadata": {}, "hash": "361a020327b01210180f5171d5d433207224e56d198c146c7b8f127424b00c28", "class_name": "RelatedNodeInfo"}}, "text": "{% endtab %}\n{% endtabs %}", "mimetype": "text/plain", "start_char_idx": 31325, "end_char_idx": 31351, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9455b3b-d171-4f84-9b5e-7f62d87ffeca": {"__data__": {"id_": "a9455b3b-d171-4f84-9b5e-7f62d87ffeca", "embedding": null, "metadata": {"file_path": "./phala_dist/blockchain-entities.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "561832ae-d4d2-4ce4-ae25-6855cecf61cb", "node_type": "4", "metadata": {}, "hash": "4ae86b0f4f3172e9790f172892ea0ecbbadc15f71c24dfc50d06e4a9c66ac22f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61039350-570e-46be-be8c-7bc175c22f64", "node_type": "1", "metadata": {}, "hash": "f92b890c45bf45d7d6930dd7cc6d327876fa3692a4b20c589a0cec6b35f21e5d", "class_name": "RelatedNodeInfo"}}, "text": "# Blockchain Entities\n\n## Overview <a href=\"#overview\" id=\"overview\"></a>\n\nThe last chapter covered Phala\u2019s architecture, whereas this page will touch on Phala\u2019s entities and the types of nodes that make Phala Network.\n\nIn Phala Network, there are three kinds of entities:\n\n* _Client_, which operates on normal devices without any special hardware requirements;\n* _Worker_, which operates on Secure Enclave and serves as the computation nodes for confidential smart contracts;\n* _Gatekeeper_, which operates on Secure Enclave and serves as the authorities and key managers;\n\nThe image below visualizes the interaction between Phala\u2019s entities.\n\n<figure><img src=\"../../.gitbook/assets/phala-design.png\" alt=\"\"><figcaption></figcaption></figure>\n\nThe basic design of Phala Network is meant to ensure the security and confidentiality of the blockchain and its Phat Contract. However, with more security improvements, Phala Network can defend against advanced attacks.\n\n## Entity Key Initialization <a href=\"#entity-key-initialization\" id=\"entity-key-initialization\"></a>\n\nIn Phala, the communication between any entity should be encrypted, so each entity generates the following entity key pairs with a pseudorandom number generator during initialization:\n\n1. `IdentityKey`\n   * an `sr25519` key pair to uniquely identify an entity;\n2. `EcdhKey`\n   * an `sr25519` key pair for secure communication;\n\n#### pRuntime Initialization <a href=\"#pruntime-initialization\" id=\"pruntime-initialization\"></a>\n\nDuring initialization, `pRuntime` automatically generates the entity key pairs above with a random number generator. The generated key pairs are managed in `pRuntime` in the Secure Enclave, which means the workers and gatekeepers can only use it with the limited APIs exported by `pRuntime`, and can never gain the plaintext key pairs to read the encrypted data out of the Secure Enclave.\n\nThe generated key pairs can be locally encrypted and cached on the disk with [Sealing](https://sgx101.gitbook.io/sgx101/sgx-bootstrap/sealing) and decrypted and loaded when restarting. This applies to both gatekeepers and workers.\n\n### Secure Communication Channels <a href=\"#secure-communication-channels\" id=\"secure-communication-channels\"></a>\n\nThe `EcdhKey` public key in the `pRuntime` of a worker or gatekeeper is publicly available.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61039350-570e-46be-be8c-7bc175c22f64": {"__data__": {"id_": "61039350-570e-46be-be8c-7bc175c22f64", "embedding": null, "metadata": {"file_path": "./phala_dist/blockchain-entities.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "561832ae-d4d2-4ce4-ae25-6855cecf61cb", "node_type": "4", "metadata": {}, "hash": "4ae86b0f4f3172e9790f172892ea0ecbbadc15f71c24dfc50d06e4a9c66ac22f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9455b3b-d171-4f84-9b5e-7f62d87ffeca", "node_type": "1", "metadata": {}, "hash": "9c2bbc43489814155bb5560194f51c7086e952b8e1ee7515a011c154dd531a8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ebc92ae-e257-4239-97a2-8a3029cc493e", "node_type": "1", "metadata": {}, "hash": "fae9e534e0c777034ae1e52b2d696f4b96fa6dbd8e6d1acbc423934b765047d2", "class_name": "RelatedNodeInfo"}}, "text": "Therefore an [ECDH key agreement protocol](https://wiki.openssl.org/index.php/Elliptic\\_Curve\\_Diffie\\_Hellman) can be applied to establish a secure communication channel between a worker (or a gatekeeper) and any other entity non-interactively.\n\nA channel between two entities, `A` and `B` is denoted as $$Channel(Pk_A, Pk_B)$$, where $$Pk_A$$ and $$Pk_B$$ are the public keys of their ECDH key pairs correspondingly. A shared secret can be derived from one\u2019s ECDH private key and the counterpart\u2019s public key via the Diffie Hellman algorithm. Then the final communication key `CommKey(A, B)` can be calculated via a one-way function. Finally, `CommKey(A, B)` is used to encrypt the messages between the two entities.\n\n> In Khala, the `EcdhKey` is an `sr25519` key pair. We can adopt the [child key derivation (CKD) functions](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions) from Bitcoin BIP32 to derive `CommKey(A, B)` from the key agreed by ECDH.\n>\n> The messages are end-to-end encrypted with `aes-gcm-256`.\n\nThe public keys of the entities are registered on-chain. So we can build on-chain or off-chain communication channels:\n\n* On-chain Communication\n  1. Both `A` and `B` know each other\u2019s public keys from the blockchain. They can derives `CommKey(A, B)`;\n  2. `A` posts a cipher message encrypted by `CommKey(A, B)` to the blockchain;\n  3. `B` receives it, and decrypts it with `CommKey(A, B)`;\n* Off-chain (`A` is off-chain and `B` is an on-chain worker) Communication\n  1. `A` can learn `B`\u2019s public key from the blockchain and derive `CommKey(A, B)`;\n  2. `A` learns the API endpoint of `B` from its `WorkerInfo` in `WorkerState` on chain;\n  3.", "mimetype": "text/plain", "start_char_idx": 2327, "end_char_idx": 4035, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ebc92ae-e257-4239-97a2-8a3029cc493e": {"__data__": {"id_": "1ebc92ae-e257-4239-97a2-8a3029cc493e", "embedding": null, "metadata": {"file_path": "./phala_dist/blockchain-entities.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "561832ae-d4d2-4ce4-ae25-6855cecf61cb", "node_type": "4", "metadata": {}, "hash": "4ae86b0f4f3172e9790f172892ea0ecbbadc15f71c24dfc50d06e4a9c66ac22f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61039350-570e-46be-be8c-7bc175c22f64", "node_type": "1", "metadata": {}, "hash": "f92b890c45bf45d7d6930dd7cc6d327876fa3692a4b20c589a0cec6b35f21e5d", "class_name": "RelatedNodeInfo"}}, "text": "`A` sends a signed cipher message (encrypted by `CommKey(A, B)`) with its public key to `B` directly;\n  4. `B` gets `A`\u2019s public key from the message, and derives `CommKey(A, B)` to decrypt it;\n\n### Client-worker Payload Example <a href=\"#client-worker-payload-example\" id=\"client-worker-payload-example\"></a>\n\nA client communicates with a worker only for contract invocation. An invocation consists of at least the following payloads.\n\n```\n{\n    from: Client_IdentityKey,\n    payload: {\n        to: Contract_IdentityKey,\n        input: \"0xdeadbeef\",\n    },\n    nonce: 12345,\n    sig: UserSignature,\n}\n```\n\n* `nonce` is necessary for defending against Double-spend and Replay Attacks.\n* `from` shows the identity of the caller, and can be verified with `sig`. `from` will be further passed to the contract.\n* Since a worker can run multiple contracts (or even different instances of the same contract), `to` is needed to specify the invocation target.\n* `input` encodes the invoked function and arguments, it should be serialized according to the ABI of contracts.\n\n## Serialization <a href=\"#serialization\" id=\"serialization\"></a>\n\n> #### `EcdhKey` Rotation <a href=\"#ecdhkey-rotation\" id=\"ecdhkey-rotation\"></a>\n>\n> Unlike the `IdentityKey` which shows the identity of a worker or gatekeeper thus should not be changed, we recommend a regular rotation of the `EcdhKey` to ensure the security of the communication channels between different entities. In the future, `pRuntime` will automatically rotate the managed `EcdhKey` key after certain time interval.", "mimetype": "text/plain", "start_char_idx": 4036, "end_char_idx": 5594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "517bcaba-5832-41f9-a5f2-eb19df21fe39": {"__data__": {"id_": "517bcaba-5832-41f9-a5f2-eb19df21fe39", "embedding": null, "metadata": {"file_path": "./phala_dist/wrappedbalances-and-w-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14", "node_type": "4", "metadata": {}, "hash": "51361e12ef654c5280ea70bd3966b221d97b1ad386803f7503ab86c0ef3f58ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9730b0cd-5372-424c-ae19-ad7fb7831e60", "node_type": "1", "metadata": {}, "hash": "4dcf7e1f323c89489a408aa7eff2230574bf7e9019b0649a2402f4f22fbba6c0", "class_name": "RelatedNodeInfo"}}, "text": "# WrappedBalances & W-PHA\n\nWrappedBalances is the name of a pallet with the function of wrapping W-PHA to delegate. And it also has the role of bookkeeping, which will record the total value of the Delegation and W-PHA in the address, and can help the user to cast a governance vote that does not exceed this total value.\n\nW-PHA (Wrapped PHA) is the token that users use PHA to wrap from WrappedBalances 1-to-1. Used to contribute to StakePool or Vault to obtain Delegation NFT and earn delegation rewards.\n\n## Why do we need W-PHA <a href=\"#why-do-we-need-w-pha\" id=\"why-do-we-need-w-pha\"></a>\n\nIn the StakePool V1, the PHA could be used as a delegation. While delegated in the StakePool, the Delegator can also use it for daily community governance voting. Because when you delegate your PHA to the StakePool, the status of the token will be adjusted to \u201clocked\u201d, but it will remain in your address. Then you can use it for governance voting. This logic caused the Delegation to be unable to be transferred or traded.\n\nIn the process of NFTization of the Delegation, to improve the liquidity of the Delegation, we hope to set the NFTs in a tradable state and use a suitable mechanism to give these Delegation NFTs governance voting rights.\n\nTherefore, we need to introduce the concept of WrappedBalances and W-PHA.\n\n## How does it work <a href=\"#how-does-it-work\" id=\"how-does-it-work\"></a>\n\nW-PHA is an asset on the Khala chain (Delegation is not yet enabled on the Phala chain, so there is no W-PHA on Phala yet). Therefore, when you wrap a W-PHA from WrappedBalances, your PHA will be transferred to the pallet (WrappedBalances) and locked there.\n\nDelegators can only use W-PHA to delegate into a StakePool or a Vault.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9730b0cd-5372-424c-ae19-ad7fb7831e60": {"__data__": {"id_": "9730b0cd-5372-424c-ae19-ad7fb7831e60", "embedding": null, "metadata": {"file_path": "./phala_dist/wrappedbalances-and-w-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14", "node_type": "4", "metadata": {}, "hash": "51361e12ef654c5280ea70bd3966b221d97b1ad386803f7503ab86c0ef3f58ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "517bcaba-5832-41f9-a5f2-eb19df21fe39", "node_type": "1", "metadata": {}, "hash": "a97822a73949cd2738537a0313d1a8bd04d56dee1d44448fdd75352c2d43f42c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2a908c2-b8a4-4658-955b-a6903a242447", "node_type": "1", "metadata": {}, "hash": "4b3b176793ba121ff45be745519f5acdb69e06fe848e8596c3a542eec68f5292", "class_name": "RelatedNodeInfo"}}, "text": "* When the user delegates to a Vault or a StakePool, W-PHA will be transferred from the user address to the account of the pools\n* When the Vault delegates to a StakePool, W-PHA will be transferred from the Vault address to the StakePool account\n* When StakePool stakes the Delegation to the worker, W-PHA will be transferred to the worker staking account corresponding to the StakePool\n\n> Please Note that use the \u201ccontribute\u201d for all delegating operations to the pools and use the \u201cstart working\u201d to set the worker to the active state.\n>\n> Do not transfer tokens to any pool or worker address manually. The protocol controls these addresses, and the tokens you manually transfer in cannot be transferred out forever.\n\nWrappedBalances is a ledger responsible for calculating how much W-PHA each user has. When the user transfers W-PHA to the pool as a delegation, because of the existence of the Delegation NFT, it will treat the Delegation NFT as a delegation certificate. Therefore, the W-PHA will be counted into the address holding the Delegation NFT.\n\nThe process of W-PHA being transferred between the user and the pool will be fully calculated by WrappedBalances.\n\n### PHA and W-PHA are always one-to-one exchange <a href=\"#pha-and-w-pha-are-always-one-to-one-exchange\" id=\"pha-and-w-pha-are-always-one-to-one-exchange\"></a>\n\nWhenever a W-PHA is minted, a PHA will be locked in the pallet, which is a protocol-controlled rule.\n\nWhen the W-PHA delegated into the StakePool is used as a delegation to obtain delegation rewards, the Delegation rewards it obtained (PHA) will be directly locked into the pallet, and the protocol will mint the same amount of W-PHA at the same time, which will automatically be delegated into the corresponding StakePool as a delegation. And be recorded in the corresponding Delegation NFT.\n\nBecause of this minting logic, W-PHA will not be issued maliciously, and it can be unwrapped to PHA at any time unless the holder uses its right to vote in WrappedBalances.", "mimetype": "text/plain", "start_char_idx": 1725, "end_char_idx": 3725, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2a908c2-b8a4-4658-955b-a6903a242447": {"__data__": {"id_": "b2a908c2-b8a4-4658-955b-a6903a242447", "embedding": null, "metadata": {"file_path": "./phala_dist/wrappedbalances-and-w-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14", "node_type": "4", "metadata": {}, "hash": "51361e12ef654c5280ea70bd3966b221d97b1ad386803f7503ab86c0ef3f58ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9730b0cd-5372-424c-ae19-ad7fb7831e60", "node_type": "1", "metadata": {}, "hash": "4dcf7e1f323c89489a408aa7eff2230574bf7e9019b0649a2402f4f22fbba6c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "77263ce9-afe1-42c4-a995-5b97aeb64bac", "node_type": "1", "metadata": {}, "hash": "dce5aa64480ca8c94d551e0d3fe9253e06cd9506435a292afdffaf8508225c4c", "class_name": "RelatedNodeInfo"}}, "text": "## Use your Delegation to vote <a href=\"#use-your-delegation-to-vote\" id=\"use-your-delegation-to-vote\"></a>\n\n### You will not vote with any W-PHA or Delegation NFT <a href=\"#you-will-not-vote-with-any-w-pha-or-delegation-nft\" id=\"you-will-not-vote-with-any-w-pha-or-delegation-nft\"></a>\n\nWhen you vote in WrappedBalances, you will not use any W-PHA or Delegation NFT to vote.\n\nWrappedBalances uses a proxy voting mechanism.\n\nWhen you wrap PHA to W-PHA through WrappedBalances, your voting rights will be held by the pallet along with the transfer of PHA. Therefore, WrappedBalances' bookkeeping function records how many voting rights it manages that belong to you. Then, when you want to initiate a vote in the pallet, it will calculate how many equivalent PHA assets you have locked in it based on the W-PHA and Delegation NFT you hold, which means how many voting rights you are represented by it. Then, you can direct WrappedBalances to cast these votes on your behalf.\n\nThis is the original logic of this proxy voting mechanism. The operation is to initiate a vote transaction in WrappedBalances, and the rest of the proxy voting will be completed by the protocol. As long as you have enough voting rights, the vote you initiate will be a success.\n\nOnce you vote for a proposal in WrappedBalances, it will temporarily lock a part of your W-PHA assets to lock the voting rights. This part of W-PHA will not be transferred or unwrapped to PHA until your vote is over.\n\n### Different initiation methods, the same result <a href=\"#different-initiation-methods-the-same-result\" id=\"different-initiation-methods-the-same-result\"></a>\n\nYou can still use PHA to initiate voting in the [Polkadot.js](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/democracy) or [Subsquare](https://www.subsquare.io/). At the same time, you can use your proxy voting rights through WrappedBalances. But you cannot use your W-PHA or Delegation NFT to vote on Subsquare.", "mimetype": "text/plain", "start_char_idx": 3727, "end_char_idx": 5709, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77263ce9-afe1-42c4-a995-5b97aeb64bac": {"__data__": {"id_": "77263ce9-afe1-42c4-a995-5b97aeb64bac", "embedding": null, "metadata": {"file_path": "./phala_dist/wrappedbalances-and-w-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14", "node_type": "4", "metadata": {}, "hash": "51361e12ef654c5280ea70bd3966b221d97b1ad386803f7503ab86c0ef3f58ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2a908c2-b8a4-4658-955b-a6903a242447", "node_type": "1", "metadata": {}, "hash": "4b3b176793ba121ff45be745519f5acdb69e06fe848e8596c3a542eec68f5292", "class_name": "RelatedNodeInfo"}}, "text": "So, for the time being, you can only use the locked assets in WrappedBalances to vote through making transactions in [extrinsics page of Polkadot.js](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/extrinsics).\n\nThis is a short-term phenomenon.\n\nWe are going to gather all the governance behaviors in the Phala APP. At that time, you will be able to use your PHA or Delegation for governance in the Phala App at the same time. Please look forward to it.", "mimetype": "text/plain", "start_char_idx": 5710, "end_char_idx": 6198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48c41f9e-6dce-4c1f-889a-5bace055e076": {"__data__": {"id_": "48c41f9e-6dce-4c1f-889a-5bace055e076", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3178f980-8295-4d7c-9d12-5a3a4f8e973a", "node_type": "1", "metadata": {}, "hash": "bb5fa559cba94a5af21225eb44231d8225f84efee40aca832769c71c799ad2c0", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Sync\nsidebar_position: 2\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n## There are three main synchronization modes\n\n* snap sync\n\t* the fastest way to sync to the network (syncs to mainnet in \\~3 hours)\n\t* downloads only the latest state, headers, and optionally bodies and receipts\n* fast sync\n\t* slower than snap sync\n\t* useful on nethermind-only chains (like Gnosis), where snap sync is not available for now\n\t* downloads only the latest state, headers, and optionally bodies and receipts\n* archive sync\n\t* heavy historical sync verifying all the transactions and keeping all the historical state\n\t* you can run it like this `./Nethermind.Runner --config mainnet_archive`\n\n| Sync Mode                                                  | Disk Space needed | Full current state | Full current and all historical states | Can sync a full archive node from this | Time to sync | Time to RPC |\n|------------------------------------------------------------|-------------------|--------------------|----------------------------------------|----------------------------------------|--------------|-------------|\n| archive                                                    | \\~12TB            | YES                | YES                                    | YES                                    | \\~3 weeks    | \\~3 weeks   |\n| snap/fast sync with all bodies and receipts                | \\~800GB           | YES                | NO                                     | YES                                    | \\~20 hours   | \\~20 hours  |\n| default snap/fast sync (with barriers set to support Eth2) | \\~500GB           | YES                | NO                                     | NO                                     | \\~11 hours   | \\~11 hours  |\n| snap/fast sync without receipts                            | \\~450GB           | YES                | NO                                     | YES                                    | \\~12 hours   | \\~12 hours  |\n| snap/fast sync without bodies and receipts                 | \\~200GB           | YES                | NO                                     | NO                                     | \\~9 hours    | \\~9 hours   |\n\n## Snap Sync\n\nSnap sync allows a node to perform the initial synchronization and download of Ethereum\u2019s state up to 10 times faster\nthan using fast sync.\n\n#### How to Enable\n\nSnap sync is enabled by default for majority of networks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3178f980-8295-4d7c-9d12-5a3a4f8e973a": {"__data__": {"id_": "3178f980-8295-4d7c-9d12-5a3a4f8e973a", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48c41f9e-6dce-4c1f-889a-5bace055e076", "node_type": "1", "metadata": {}, "hash": "38de270ab329ebf6e03766d1bb214ac40645bf699ce3a0db4e0d3988f40f8b49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56c97ccb-3003-468b-9d58-cde938eedc68", "node_type": "1", "metadata": {}, "hash": "cc9bf0dda4a94282d5b0e675612c5975fa7a940c9a897f294dcfe70b707781b0", "class_name": "RelatedNodeInfo"}}, "text": "To make sure, check if`SnapSync` is set to `true` in the Sync\nmodule of your `.cfg` file\n\n```\n\"Sync\": {\n\t\"SnapSync\": true\n}\n```\n\n> **IMPORTANT**: Do not enable snap sync on a previously synced node. Only use when syncing to the network for the first\n> time.\n>\n> **IMPORTANT**: Do not remove other configurations from Sync module. Just add `\"SnapSync\": true`, e.g.\n>\n> ```\n> \"Sync\": {\n> \t\"SnapSync\": true,\n> \t\"PivotNumber\": 15011000,\n>         \"PivotHash\": \"0x46c838d02d5fa5bc070080ed7965da1d888f6eb1797045365407c7011280af56\",\n>     \t\"PivotTotalDifficulty\": \"52367203434576253689712\",\n>     \t\"FastBlocks\": true\n> }\n> ```\n\n#### Snap Sync vs Other Sync Modes\n\nMore than 12TB of storage is needed today to run a full archive node \u2014 one that stores all the state since genesis.\nBecause of that, setting up an archive node can take days or even weeks. Fast Sync can still take more than 24 hours on\nthe fast machine and download about 90GB state data. With Snap Sync, sync time is reduced to 2-3h with a download of\nabout 30GB.\n\nThis reduction in sync time and download size has to do with the specific way in which Ethereum\u2019s state is stored in a\nnode: Merkle trees.\n\n![](</img/Untitled(1).png>)\n\nWith Fast Sync, a node downloads the headers of each block and retrieves all the nodes beneath it until it reaches the\nleaves. By contrast, Snap Sync only downloads the leaf nodes, generating the remaining nodes locally which saves time\nand packets downloaded.\n\n#### Current limitations and future development\n\nFor now Snap Sync on the Nethermind client can only download the Ethereum state but not serve it to other clients - snap\nserving development is in progress, expected late 2023/early 2024.\n\nThe only Ethereum client that supports serving Snap Sync requests is Geth, so only networks supported by Geth can be\nsynced using that method: Mainnet, Goerli, Sepolia.", "mimetype": "text/plain", "start_char_idx": 2523, "end_char_idx": 4383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56c97ccb-3003-468b-9d58-cde938eedc68": {"__data__": {"id_": "56c97ccb-3003-468b-9d58-cde938eedc68", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3178f980-8295-4d7c-9d12-5a3a4f8e973a", "node_type": "1", "metadata": {}, "hash": "bb5fa559cba94a5af21225eb44231d8225f84efee40aca832769c71c799ad2c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b857b8c5-3aa7-463b-978c-aed50b12f5a5", "node_type": "1", "metadata": {}, "hash": "49b9fc5bcedf8052135b058d5bda36ac5bb56c0ebf47c8becdc7aec0acf7d5a5", "class_name": "RelatedNodeInfo"}}, "text": "## Fast Sync\n\nAfter completing the fast sync your node will have the ability to answer questions like _'what is my account\nbalance **now**'_, _'how many XYZ tokens SomeExchange holds **at the moment**'_.\n\nFast sync has multiple stages. Nethermind uses a `pivot block` number to improve fast sync performance.\nThe `pivot block` data is automatically updated after initialization of the client and consists of\nthe `block number`, `block hash` and `block total difficulty` (please note that `total difficulty` is different\nthan `difficulty`). Before synchronizing state data Nethermind synchronizes in two directions - backwards\nfrom `pivot block` to 0 for headers and forward to the head of the chain for headers, blocks and receipts. Forward sync\nmight be very slow (5 - 50 bps) so having fresh pivot block is very important - it is guaranteed by recently implemented\nauto-update.\n\nAfter downloading the block data Nethermind will start state sync (downloading the latest state trie nodes). We are\nproviding an estimate for the download size and progress but the real value may be different than the estimate (\nespecially if you are using an old version of Nethermind as we sometimes manually adjust the estimator based on our\nobservations of the chain growth rate). Because of this sometimes your sync may continue even when it shows \\~100%\nfinished. The other important component is the speed of your sync - if your IO / network / file system causes the state\nsync to go much slower than around 1.5MB per second on average then you will start downloading some parts of the trie\nover and over again. In such cases you may be surprised to see something like 58000MB / 53000MB (100%). It means that\nyou downloaded around 5GB of data that is no longer needed. If your sync is very slow (extended beyond two days) then\nvery likely your setup cannot catch up with the chain progress.\n\nAfter the state sync finishes you will see the _'Processed...'_ messages like in archive sync - it means that your node\nis in sync and is processing the latest blocks.", "mimetype": "text/plain", "start_char_idx": 4385, "end_char_idx": 6432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b857b8c5-3aa7-463b-978c-aed50b12f5a5": {"__data__": {"id_": "b857b8c5-3aa7-463b-978c-aed50b12f5a5", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56c97ccb-3003-468b-9d58-cde938eedc68", "node_type": "1", "metadata": {}, "hash": "cc9bf0dda4a94282d5b0e675612c5975fa7a940c9a897f294dcfe70b707781b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4885420c-1849-4d6c-99ca-a1653e629038", "node_type": "1", "metadata": {}, "hash": "333f33fa4de8a5f0a6537db6dff202c3b42e3d05b1b7dbc928ed7d9a2516d8ff", "class_name": "RelatedNodeInfo"}}, "text": "Mainnet sync, at the time of writing (December 2020), takes around 8 hours on an UpCloud 16GB RAM 8 CPU $40 VM (and then\nsyncs receipts and bodies in the background if you enabled them in the configuration). Goerli sync should take around 40\nminutes.\n\n![Fast sync logs example for mainnet.](</img/image(59).png>)\n\nState sync log messages have multiple values displayed. First `dd.HH:mm:ss` total state sync time is displayed, followed\nby an estimated sync progress (percentage of total database data synced), then the current download speed is displayed (\nthere will be times when it will slow down to 0 or single digit numbers, especially towards the end of the sync). In\ngeneral 6 hours sync times shown on screenshots are with around 2000 kB/s (kilobytes per second) average sync rate. You\ncan calculate it in the example as \\~45GB / (2MB/s) \\~ 22500 seconds \\~6.25 hours. We also display the number of state\naccounts synced, number of trie nodes synced and a diagnostic message in the format of _\\[number\\_of\\_pending\\_requests]\n.\\[average time spent in response handler displayed as milliseconds]_. So `5.6.20ms` means that we are awaiting for\nresponses to 5 requests that have been sent to peers and the average time it takes us to process a single response is\n6.20ms. The response handling times will differ depending on how many trie nodes are already cached (so they will be\nsignificantly slower for a while after the node restart when cache has to be rebuilt) and based on how fast the database\nIO is (SSD vs NVMe vs cloud drives). For a reasonable sync time you probably should expect these values to be below\n15ms (but they may be as high as 700ms for a while after restarting the node).\n\nA single restart of the node during the fast sync may extend the sync time by up to two hours because the node has to\nrebuild the caches by reading millions of values from the database.\n\nAt the last stages of the sync the node will be repeatedly displaying the branch sync progress and changing the block\nnumber to which it tries to catch up. This stage should take between 30 minutes and two hours.", "mimetype": "text/plain", "start_char_idx": 6434, "end_char_idx": 8534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4885420c-1849-4d6c-99ca-a1653e629038": {"__data__": {"id_": "4885420c-1849-4d6c-99ca-a1653e629038", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b857b8c5-3aa7-463b-978c-aed50b12f5a5", "node_type": "1", "metadata": {}, "hash": "49b9fc5bcedf8052135b058d5bda36ac5bb56c0ebf47c8becdc7aec0acf7d5a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d597bc20-606c-4ea8-bb8d-9cb2a09d3cce", "node_type": "1", "metadata": {}, "hash": "470b75b03b07e30255cc91f3eaf8c47d58b3e99917c03b43372726d05a3b5405", "class_name": "RelatedNodeInfo"}}, "text": "If it lasts much more\nthen it is possible that you will not be able to catch up with the network progress.\n\nOne of the best indicators that you are close to be synced is combined \\~100% state size progress and nearly 100% branch\nsync progress.\n\n![](</img/image(64).png>)\n\n![](</img/image(62).png>)\n\n## Archive Sync\n\nArchive sync is the 'heaviest' and slowest sync mode but allows to ask questions like _'what was the balance of my\naccount 2 years ago?'_, _'how many XYZ token were held in SomeExchange custody in 2017?'_.\n\nWe have prepared default archive sync configurations and they can be launched from Nethermind Launcher (just choose the\narchive options) or by simply loading appropriate config when launching `./Nethermind.Runner --config mainnet_archive`\n\n`./Nethermind.Runner --config goerli_archive`\n\nWhile for some smaller networks archive sync can complete very quickly (in minutes or hours) mainnet sync would take 2 -\n6 weeks depending on the speed of your IO (whether you use SSD or NVMe or depending on the cloud provider IOPS).\nDatabase size in archive sync is the biggest from all modes as you will store all the historical data.\n\n![Example of the archive sync logs](</img/image(58).png>)\n\n![](</img/image(57).png>)\n\nExplanation of some data in the logs:\n\n* at the beginning you may see a _'Waiting for peers...'_ message while the node is trying to discover nodes that it can\n  sync with.\n* _'Downloaded 1234/8000000'_ shows the number of unprocessed blocks (with transactions) downloaded from the network.\n  For `mainnet`this value may be slower than processing at first but very quickly you will see blocks being downloaded\n  much faster than processed. Empty blocks can be as small as 512 bytes (just headers without transactions) and full\n  blocks with heavy transactions can reach a few hundred kilobytes. We display both current download speed (calculated\n  in the last second) and average (total) speed since starting the node.\n* _'Processed ...'_ displays the blocks that have been processed by the EVM.", "mimetype": "text/plain", "start_char_idx": 8535, "end_char_idx": 10564, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d597bc20-606c-4ea8-bb8d-9cb2a09d3cce": {"__data__": {"id_": "d597bc20-606c-4ea8-bb8d-9cb2a09d3cce", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4885420c-1849-4d6c-99ca-a1653e629038", "node_type": "1", "metadata": {}, "hash": "333f33fa4de8a5f0a6537db6dff202c3b42e3d05b1b7dbc928ed7d9a2516d8ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e56129b8-df68-4dfd-84fc-cbb5ac383005", "node_type": "1", "metadata": {}, "hash": "01d643a102f6dafd0cbc39db01e7b38ef3805e93375df37002411c09f5bfb769", "class_name": "RelatedNodeInfo"}}, "text": "The first number shows the current head\n  block number, then you can see `mgasps` (million gas per second) - current and total, then `tps` (transactions per\n  second) - current and total, `bps` (blocks per second). Then `recv queue` (transactions signature public key recovery\n  queue), `proc queue` (processor queue). Both recovery queue and processor queue are designed so when too many blocks\n  are waiting for processing then only their hashes are kept in memory and remaining data are stored in the database.\n  Thus, the queues numbers that you can see will be capped by some number.\n* _'Cache for epoch...'_ informs about `ethash` cache needed for block seal verification (only on `mainnet`\n  and `ropsten`). Caches will be calculated every 30000 blocks (length of an epoch) but can also be calculated for the\n  latest blocks that are being broadcast on the network.\n* After the archive sync finishes you will see the _'Processed...'_ message appearing on average every 15 seconds when\n  the new block is processed.\n* `mgasps`, `tps`, `bps` values should not be treated as comparable as they may differ massively on different parts of\n  the chain. For example when blocks are empty you may see very high `bps` values with very low (or even zero) `tps`\n  and `mgasps` values as there are no transactions and no gas for EVM processing and blocks are very light. On the other\n  hand when blocks are filled with very heavy transactions then `bps` might be very low while `mgasps` will be very\n  high. It is even possible that you will see a lot of very light transactions where `tps` will be high while `bps`\n  and `mgasps` will be average.\n\n## Sync time\n\nSync time heavily depends on the hardware used for the node, network speed, and peering. We are constantly pursuing to make it as fast as possible. Below is a brief on how the sync time looks on different machines and various chains (tested with Nethermind v1.21.0).", "mimetype": "text/plain", "start_char_idx": 10565, "end_char_idx": 12489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e56129b8-df68-4dfd-84fc-cbb5ac383005": {"__data__": {"id_": "e56129b8-df68-4dfd-84fc-cbb5ac383005", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d597bc20-606c-4ea8-bb8d-9cb2a09d3cce", "node_type": "1", "metadata": {}, "hash": "470b75b03b07e30255cc91f3eaf8c47d58b3e99917c03b43372726d05a3b5405", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e7b4c42-bf45-4a26-b050-e0a97b24808a", "node_type": "1", "metadata": {}, "hash": "634ef94c9848114238e1b9444ad6d45bd20ef9a02f50371d436ab49eaecfaf80", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"highend-vm\" label=\"High-end VM\">\n\nHardware configuration:\n\n- Cloud provider: Akamai (formerly Linode)\n- CPU: AMD EPYC 7601, 16 vCPU\n- Memory: 64 GB\n- Storage: 1.2 TB, ~40k IOPS\n\n<Tabs groupId=\"network\">\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 2h 3m\n- **Full sync time:** 7h 3m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 1h 58m\n- **State sync:** 4m\n- **Old headers:** 1h 27m\n- **Old bodies:** 1h 55m\n- **Old receipts:** 3h 2m\n\n</TabItem>\n<TabItem value=\"goerli\" label=\"Goerli\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 2h 49m\n- **Full sync time:** 4h 58m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 2h 49m\n- **State sync:** 0.5m\n- **Old headers:** 11m\n- **Old bodies:** 1h 2m\n- **Old receipts:** 1h 5m\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 8m\n- **Full sync time:** 1h 9m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 8m\n- **State sync:** 0.", "mimetype": "text/plain", "start_char_idx": 12491, "end_char_idx": 13611, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e7b4c42-bf45-4a26-b050-e0a97b24808a": {"__data__": {"id_": "1e7b4c42-bf45-4a26-b050-e0a97b24808a", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e56129b8-df68-4dfd-84fc-cbb5ac383005", "node_type": "1", "metadata": {}, "hash": "01d643a102f6dafd0cbc39db01e7b38ef3805e93375df37002411c09f5bfb769", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d5e0f53-bbc6-4598-9fc4-9a7935f20377", "node_type": "1", "metadata": {}, "hash": "5327dbf0a02e1eba31eaeaf5d730297b2e8cc717d589570a8bd17c7b1bc2bb64", "class_name": "RelatedNodeInfo"}}, "text": "3m\n- **Old headers:** 12m\n- **Old bodies:** 21m\n- **Old receipts:** 22m\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 13h 40m\n- **Full sync time:** 17h 17m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 13h 40m\n- **Old headers:** 1h 46m\n- **Old bodies:** 1h 31m\n- **Old receipts:** 2h 3m\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 20m\n- **Full sync time:** 40m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 20m\n- **Old headers:** 11m\n- **Old bodies:** 8m\n- **Old receipts:** 10m\n\n</TabItem>\n</Tabs>\n</TabItem>\n<TabItem value=\"midend-vm\" label=\"Mid-end VM\">\n\nHardware configuration:\n\n- Cloud provider: AWS\n- [c7g.2xlarge](https://aws.amazon.com/ec2/instance-types/c7g/): 8 vCPU, 16 GiB memory\n- Storage: 1 TB, ~10k IOPS\n\n<Tabs groupId=\"network\">\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 5h 55m\n- **Full sync time:** 12h 37m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 4h 35m\n- **State sync:** 1h 20m\n- **Old headers:** 1h 43m\n- **Old bodies:** 2h 13m\n- **Old receipts:** 4h 28m\n\n</TabItem>\n<TabItem value=\"goerli\" label=\"Goerli\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 1h 32m\n- **Full sync time:** 4h 10m\n\nThe detailed breakdown of sync", "mimetype": "text/plain", "start_char_idx": 13611, "end_char_idx": 15058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d5e0f53-bbc6-4598-9fc4-9a7935f20377": {"__data__": {"id_": "3d5e0f53-bbc6-4598-9fc4-9a7935f20377", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e7b4c42-bf45-4a26-b050-e0a97b24808a", "node_type": "1", "metadata": {}, "hash": "634ef94c9848114238e1b9444ad6d45bd20ef9a02f50371d436ab49eaecfaf80", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98ace2ab-39c8-47a1-9988-f1b1971087e8", "node_type": "1", "metadata": {}, "hash": "5218e5f685d2f25e8cabd2b6b869a58a9aa34c4b0e1d4a198a1aaa54058bab38", "class_name": "RelatedNodeInfo"}}, "text": "stages:\n\n- **Snap sync phase 1:** 1h 19m\n- **State sync:** 12m\n- **Old headers:** 23m\n- **Old bodies:** 49m\n- **Old receipts:** 1h 35m\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 17m\n- **Full sync time:** 1h 3m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 13m\n- **State sync:** 4m\n- **Old headers:** 15m\n- **Old bodies:** 19m\n- **Old receipts:** 29m\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 15h 54m\n- **Full sync time:** 18h 28m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 15h 54m\n- **Old headers:** 1h 4m\n- **Old bodies:** 40m\n- **Old receipts:** 1h 52m\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 13m\n- **Full sync time:** 25m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 13m\n- **Old headers:** 12m\n- **Old bodies:** 5m\n- **Old receipts:** 5m\n\n</TabItem>\n</Tabs>\n</TabItem>\n<TabItem value=\"oldspec-vm\" label=\"Old-spec VM\">\n\nHardware configuration:\n\n- Cloud provider: Scaleway\n- CPU: Intel Xeon Processor E5-2620 v2, 2 vCPU\n- Memory: 192 GB\n- Storage: 1 TB, ~44k IOPS\n\n<Tabs groupId=\"network\">\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 5h 55m\n- **Full sync time:** 17h 1m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync", "mimetype": "text/plain", "start_char_idx": 15059, "end_char_idx": 16553, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98ace2ab-39c8-47a1-9988-f1b1971087e8": {"__data__": {"id_": "98ace2ab-39c8-47a1-9988-f1b1971087e8", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d5e0f53-bbc6-4598-9fc4-9a7935f20377", "node_type": "1", "metadata": {}, "hash": "5327dbf0a02e1eba31eaeaf5d730297b2e8cc717d589570a8bd17c7b1bc2bb64", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7781cf6-d446-4679-85d6-5d96e339e67b", "node_type": "1", "metadata": {}, "hash": "d06e7afe790ed8a104814d25884e0327667c8c804bccb25d27d3cb320c15e06d", "class_name": "RelatedNodeInfo"}}, "text": "phase 1:** 4h 29m\n- **State sync:** 25m\n- **Old headers:** 1h 27m\n- **Old bodies:** 3h 39m\n- **Old receipts:** 8h 3m\n\n</TabItem>\n<TabItem value=\"goerli\" label=\"Goerli\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 1h 51m\n- **Full sync time:** 5h 55m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 1h 40m\n- **State sync:** 11m\n- **Old headers:** 50m\n- **Old bodies:** 1h 34m\n- **Old receipts:** 2h 14m\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 16m\n- **Full sync time:** 2h 9m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 15m\n- **State sync:** 1m\n- **Old headers:** 26m\n- **Old bodies:** 45m\n- **Old receipts:** 56m\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 15h 13m\n- **Full sync time:** 17h 30m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 15h 13m\n- **Old headers:** 3h 8m\n- **Old bodies:** 50m\n- **Old receipts:** 1h 25m\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 20m\n- **Full sync time:** 40m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 4m\n- **Old headers:** 1h 27m\n- **Old bodies:** 1h 55m\n- **Old receipts:** 3h 2m\n\n</TabItem>\n<TabItem value=\"energyweb\" label=\"Energy", "mimetype": "text/plain", "start_char_idx": 16554, "end_char_idx": 17967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7781cf6-d446-4679-85d6-5d96e339e67b": {"__data__": {"id_": "f7781cf6-d446-4679-85d6-5d96e339e67b", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98ace2ab-39c8-47a1-9988-f1b1971087e8", "node_type": "1", "metadata": {}, "hash": "5218e5f685d2f25e8cabd2b6b869a58a9aa34c4b0e1d4a198a1aaa54058bab38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25be69cc-8e76-4003-91bb-f8b78150f185", "node_type": "1", "metadata": {}, "hash": "c9ed7306ff66cdf86483dd647205134e38f1d0f79226d98c25b2d77681243fbc", "class_name": "RelatedNodeInfo"}}, "text": "Web\">\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 13h 7m\n- **Old headers:** 2h 32m\n- **Old bodies:** 51m\n- **Old receipts:** 1h 11m\n- **Full sync time:** 15h 20m\n\n</TabItem>\n<TabItem value=\"volta\" label=\"Volta\">\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 14h 27m\n- **Old headers:** 2h 42m\n- **Old bodies:** 40m\n- **Old receipts:** 58m\n- **Full sync time:** 16h 10m\n\n</TabItem>\n</Tabs>\n</TabItem>\n</Tabs>\n\n## Resync a node from scratch\n\nThis guide explains how to resync a Nethermind node using the existing Pivot block or updating it to a more recent one.\n\n### Steps to Resync a Nethermind Node\n\n1. **Stop the Nethermind node**: If your Nethermind node is currently running, stop it to ensure that no new data is\n   being written to the database during the resync process.\n2. **Delete the existing database**: Navigate to the Nethermind data directory. The location of this directory depends\n   on how Nethermind was installed and your configuration settings. Inside the data directory, find the `nethermind_db`\n   folder and delete the `mainnet` subfolder to remove the existing database for the mainnet.\n3. **Update the configuration file (optional)**: If you want to change any configuration settings before resyncing the\n   node, edit the `mainnet.cfg` file located in the Nethermind directory. For example, you might want to adjust the\n   pruning settings or specify a different network.\n4. **Update the Pivot block (optional)**\\\n   :::danger\n   **Only for versions before 1.19.0 where Auto-Pivot approach was introduced**\n   :::\n\t1. **Using Etherscan**: If you want to speed up the syncing process, you can update the Pivot block to a more recent\n\t   one.", "mimetype": "text/plain", "start_char_idx": 17968, "end_char_idx": 19660, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25be69cc-8e76-4003-91bb-f8b78150f185": {"__data__": {"id_": "25be69cc-8e76-4003-91bb-f8b78150f185", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7781cf6-d446-4679-85d6-5d96e339e67b", "node_type": "1", "metadata": {}, "hash": "d06e7afe790ed8a104814d25884e0327667c8c804bccb25d27d3cb320c15e06d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59fcfc65-d1ec-4bbd-bdc8-5bee5d08f533", "node_type": "1", "metadata": {}, "hash": "80f0183155a5701310018d61ceedca832db34729a6afcea6a713b3b13eb2dea1", "class_name": "RelatedNodeInfo"}}, "text": "To do this, find the `Sync` section in the `mainnet.cfg` file and update the `PivotNumber` and `PivotHash`\n\t   fields to match a recent \"finalized\" block number and its corresponding hash. You can obtain this information from\n\t   a block explorer such as [Etherscan](https://etherscan.io/).\\\n\t   \\\n\t   Using block number 17165278 from [Etherscan](https://etherscan.io/block/17165278):\n\t   \n\t   ```\n\t\t { \n\t\t\t \"PivotNumber\": 17165278,\n\t\t\t \"PivotHash\": \"0xa665315efd923f3b11215feee09a9d3e13c5e6ee602fa19b642824682ec0a752\"\n\t\t }\n\t\t ```\n\t2. **Using Nethermind's GitHub**: Alternatively, you can update the Pivot block by referring to\n\t   the [Nethermind's mainnet.cfg file on GitHub](https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.Runner/configs/mainnet.cfg).\n\t   The Pivot block is periodically bumped to the HEAD-8192 block of the mainnet chain. Copy the `PivotNumber`\n\t   and `PivotHash` values from the GitHub file and update your local `mainnet.cfg` file accordingly.\n5. **Restart the Nethermind node**: Start the Nethermind node again to initiate the resync process. The node will begin\n   syncing from the existing Pivot block or the specified updated Pivot block, downloading and processing all the blocks\n   in the blockchain.\n\nTo ensure that your Nethermind node is resyncing, you can monitor the logs for the node's progress. The logs will\ndisplay information about the block processing, synchronization status and `OldHeaders` being processed. By observing\nthe increasing block numbers and synchronization messages in the logs, you can confirm that the resync process is active\nand working as expected.", "mimetype": "text/plain", "start_char_idx": 19661, "end_char_idx": 21304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59fcfc65-d1ec-4bbd-bdc8-5bee5d08f533": {"__data__": {"id_": "59fcfc65-d1ec-4bbd-bdc8-5bee5d08f533", "embedding": null, "metadata": {"file_path": "./phala_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25be69cc-8e76-4003-91bb-f8b78150f185", "node_type": "1", "metadata": {}, "hash": "c9ed7306ff66cdf86483dd647205134e38f1d0f79226d98c25b2d77681243fbc", "class_name": "RelatedNodeInfo"}}, "text": "> Old Headers 0 / 17154000 | queue 0 | current 0.00bps | total 0.00bps\n>\n> Old Headers 768 / 17154000 | queue 0 | current 766.07bps | total 762.49bps\n>\n> Beacon Headers from block 17154001 to block 17169722 | 960 / 15722 | queue 4992 | current 0.00bps | total\n> 40622848.83bps\n>\n> Old Headers 9024 / 17154000 | queue 0 | current 576.40bps | total 1286.40bps\n>\n> Beacon Headers from block 17154001 to block 17169723 | 9024 / 15723 | queue 6698 | current 2694.81bps | total\n> 3882943.63bps\\\n> Downloaded 17154031 / 17172359 | current 0.00bps | total 0.00bps\n>\n> Downloaded 17154062 / 17169724 | current 0.00bps | total 2.88bps\n\nKeep in mind that resyncing a Nethermind node can take a considerable amount of time. It depends on your hardware,\ninternet connection, and the size of the blockchain.", "mimetype": "text/plain", "start_char_idx": 21306, "end_char_idx": 22099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c62149c6-a068-4eaa-8cfa-994e8a9edb11": {"__data__": {"id_": "c62149c6-a068-4eaa-8cfa-994e8a9edb11", "embedding": null, "metadata": {"file_path": "./phala_dist/language-basics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52c2b12b-c485-4809-935c-3cdf76eee8b6", "node_type": "4", "metadata": {}, "hash": "c6626c088ab13c098ca4946a88ade1da3e98a4e7e3f568c6f4f051f0513dc080", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6b9b4d9-3abe-4502-b666-0ef87a597c5e", "node_type": "1", "metadata": {}, "hash": "bbd90c522fa0d4a7c75c6f3157630a139dd151a002779ab0fad27c588a5288a4", "class_name": "RelatedNodeInfo"}}, "text": "# Language Basics\n\nThe Phat Contract is written in ink! language, which is extended from Rust language (more language support will be provided in the future). It is finally compiled into WebAssembly (WASM), which also takes [security](https://training.linuxfoundation.org/blog/webassembly-security-now-and-in-the-future/) into consideration when designed, then you can upload and deploy them.\n\nRust is thought to be a hard language, but no worries! It deserves the effort since Rust is fast and helps prevent many million-dollar bugs. Also, I sincerely believe one day you will find it charming since all your enemy is just the Rust compiler itself\ud83d\ude3c.\n\nThe prospering ecosystem is another reason to use Rust-based ink! to develop your contract. There are many secure and high-performance libraries for you to use without building all the wheels from scratch.\n\nThis section will not teach you about Rust and ink! language itself. Instead, it provides some helpful links and comments to get you prepared quickly.\n\n## Rust <a href=\"#rust\" id=\"rust\"></a>\n\n### Tooling <a href=\"#tooling\" id=\"tooling\"></a>\n\nWhen using Rust, you will always rely on the following official tools to manage your toolchain and compile your projects:\n\n* [rustup](https://rustup.rs/), which helps you install and manage different versions of Rust compilers;\n* cargo, the package manager is installed automatically along with the Rust compiler. Each Rust project contains a `Cargo.toml` file to describe its metadata and dependencies, and `cargo` downloads the dependencies and builds the project for you. The [cargo book](https://doc.rust-lang.org/cargo/reference/index.html) can help, and ensure you understand the [\\[dependencies\\]](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) and [\\[features\\]](https://doc.rust-lang.org/cargo/reference/features.html) sections in `Cargo.toml` before going on.\n\n### Language Basics <a href=\"#language-basics\" id=\"language-basics\"></a>\n\nThe best material is surely the official [Rust book](https://doc.rust-lang.org/book/).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6b9b4d9-3abe-4502-b666-0ef87a597c5e": {"__data__": {"id_": "f6b9b4d9-3abe-4502-b666-0ef87a597c5e", "embedding": null, "metadata": {"file_path": "./phala_dist/language-basics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52c2b12b-c485-4809-935c-3cdf76eee8b6", "node_type": "4", "metadata": {}, "hash": "c6626c088ab13c098ca4946a88ade1da3e98a4e7e3f568c6f4f051f0513dc080", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c62149c6-a068-4eaa-8cfa-994e8a9edb11", "node_type": "1", "metadata": {}, "hash": "7a8f88536f9fa7f0e254d5cdc814771e2b2c9ba201de506095fc25c32f4dd7e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb871a80-a3cb-431e-b69e-f7b6880468e7", "node_type": "1", "metadata": {}, "hash": "2e56ef9691f86fe14f130657d824612aa69b08a5007876e33169ce384822b6c6", "class_name": "RelatedNodeInfo"}}, "text": "* For a beginner, learning the first 6 sections is enough for your journey in the Phat Contract world;\n* I also recommend finishing the 7 - 10 sections when you decide to go a little deeper.\n\nThere are also many [books recommended by the community](https://www.reddit.com/r/rust/comments/sjclfb/best\\_book\\_to\\_learn\\_rust/) for more advanced topics.\n\n## ink! <a href=\"#ink\" id=\"ink\"></a>\n\nink! is the default contract programming language in the Polkadot ecosystem. The native ink! contracts can run on different blockchains (like Polkadot and Phala), but Phala adds its secret ingredient called [pink-extension](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink) (short for Phala ink! Extension) to form Phat Contract which is only functional in Phala cloud.\n\n> Phat Contract is the superset of ink! contract.\n\n### ink! Macros <a href=\"#ink-macros\" id=\"ink-macros\"></a>\n\nThe difference between an ink! contract and a normal Rust program are the macros in it. As shown in our example contract, you need to annotate the Rust code with ink! macros so the compiler can learn your contract structure. For example,\n\n```\n#[ink(storage)]\npub struct OnchainState;\n```\n\n`#[ink(storage)]` tells us the following struct `OnchainState` saves the contract states and needs to be stored on-chain. And\n\n```\n#[ink(message)]\npub fn query_handler(&self, from: AccountId) {\n    // actual implementation\n}\n```\n\n`#[ink(message)]` means the following functions are meant to be called by other contracts or users in different ways.\n\nFor a complete list of these macros and a more detailed tutorial, refer to the [official document](https://ink.substrate.io/).\n\n### Use Crates in Your Contract <a href=\"#use-crates-in-your-contract\" id=\"use-crates-in-your-contract\"></a>\n\n> If you do not know what\u2019s Crate, you may need to go over your Rust book.\n\n[crates.io](https://crates.io/) is the market for Rust crates. While only the crates with `no_std` support can be used in your ink! contract.", "mimetype": "text/plain", "start_char_idx": 2059, "end_char_idx": 4049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb871a80-a3cb-431e-b69e-f7b6880468e7": {"__data__": {"id_": "bb871a80-a3cb-431e-b69e-f7b6880468e7", "embedding": null, "metadata": {"file_path": "./phala_dist/language-basics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "52c2b12b-c485-4809-935c-3cdf76eee8b6", "node_type": "4", "metadata": {}, "hash": "c6626c088ab13c098ca4946a88ade1da3e98a4e7e3f568c6f4f051f0513dc080", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6b9b4d9-3abe-4502-b666-0ef87a597c5e", "node_type": "1", "metadata": {}, "hash": "bbd90c522fa0d4a7c75c6f3157630a139dd151a002779ab0fad27c588a5288a4", "class_name": "RelatedNodeInfo"}}, "text": "The reason is [explained by the official](https://ink.substrate.io/faq#why-is-rusts-standard-library-stdlib-not-available-in-ink).", "mimetype": "text/plain", "start_char_idx": 4050, "end_char_idx": 4180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c7e979d-c18e-4dbf-a765-f2448316c568": {"__data__": {"id_": "6c7e979d-c18e-4dbf-a765-f2448316c568", "embedding": null, "metadata": {"file_path": "./phala_dist/setting-up-local-metrics-infrastracture.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7069e0a4-5100-489e-99d9-734e6676d073", "node_type": "4", "metadata": {}, "hash": "3e97034ca4d015e4d17e14b90e56dd2ada1255c407221cb5591041b61d4d1644", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ec35689-ba17-48fa-838b-16129a312835", "node_type": "1", "metadata": {}, "hash": "fa7aa1b717edbb043a6075275d0402c86fcc0a7666310c65c21bb8dc5a0b8846", "class_name": "RelatedNodeInfo"}}, "text": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n# Setting up local Metrics infrastructure\n\n## Metrics Configuration\n\nNethermind metrics can be consumed by _Prometheus/Grafana_ if configured\nin [Metrics configuration category](../../fundamentals/configuration#metrics).\n\n## Metrics infrastructure\n\n### Enabling Metrics in Nethermind\n\nMetrics can be enabled by simply passing `--Metrics.Enabled true` argument to the Docker containers,`Nethermind.Runner`\nor `Nethermind.Launcher`  e.g. `./Nethermind.Runner --Metrics.Enabled true`.\n\n`Metrics.PushGatewayUrl` will need to be amended if pushgateway endpoint is not default.\n\n### Running sample configuration\n\n* [x] clone [metrics-infrastructure](https://github.com/NethermindEth/metrics-infrastructure) repository\n\n```bash\ngit clone https://github.com/NethermindEth/metrics-infrastructure.git\n```\n\n1. [x] go to `metrics-infrastructure` directory\n\n```bash\ncd metrics-explanation-infrastructure\n```\n\n1. [x] run docker stack\n\n```bash\ndocker-compose up -d\n```\n\n* _Prometheus_ instance should be now running on [`http://localhost:9090/`](http://localhost:9090/)\n* _Pushgateway_ on [`http://localhost:9091/`](http://localhost:9091/)\n* _Grafana on_ [`http://localhost:3000/`](http://localhost:3000/)\\`\\`\n\n1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ec35689-ba17-48fa-838b-16129a312835": {"__data__": {"id_": "2ec35689-ba17-48fa-838b-16129a312835", "embedding": null, "metadata": {"file_path": "./phala_dist/setting-up-local-metrics-infrastracture.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7069e0a4-5100-489e-99d9-734e6676d073", "node_type": "4", "metadata": {}, "hash": "3e97034ca4d015e4d17e14b90e56dd2ada1255c407221cb5591041b61d4d1644", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c7e979d-c18e-4dbf-a765-f2448316c568", "node_type": "1", "metadata": {}, "hash": "cfde6df9a4a758f7c42908299d20bc5c7b54d2664d2a3b57b05beb6417c3ec13", "class_name": "RelatedNodeInfo"}}, "text": "[x] run the `Nethermind` node with `Metrics` enabled and you should see metrics inflowing on\n   _Pushgateway_ [url](http://localhost:9091/)\n\n:::info\nYou can add nethermind service to the `docker-compose.yml` file so that it runs with the whole stack\n\n```yaml\nnethermind:\n  image: nethermind/nethermind\n  container_name: nethermind\n  restart: unless-stopped\n  command: '--config goerli --Metrics.Enabled true'\n  network_mode: host\n  volumes:\n    - ./nethermind_db/:/nethermind/nethermind_db/\n    - ./keystore/:/nethermind/keystore/\n    - ./logs/:/nethermind/logs/\n```\n\n:::\n\n<Tabs>\n<TabItem value=\"Runner\" label=\"Runner\">\n\n```bash\n./Nethermind.Runner --Metrics.Enabled true\n```\n\n</TabItem>\n<TabItem value=\"Launcher\" label=\"Launcher\">\n\n```bash\n./Nethermind.Launcher --Metrics.Enabled true\n```\n\n</TabItem>\n<TabItem value=\"Docker\" label=\"Docker\">\n\n```bash\ndocker run -it --network host nethermind/nethermind:alpine --Metrics.Enabled\n```\n\n</TabItem>\n</Tabs>\n\n![http://localhost:9091/](https://nethermind.readthedocs.io/en/latest/_images/pushgateway.png)\n\n1. [x] open _Grafana_ [url](http://localhost:3000) and login with default login \\(admin\\) and password \\(admin\\), skip\n   password change if you want\n\n![](/img/image(28).png)\n\n* [x] go to dashboards management [`http://localhost:3000/dashboards`](http://localhost:3000/dashboards)and\n  click `Nethermind`\n\n![](/img/image(26).png)\n\n* [x] you can now explore metrics and monitor your Nethermind node\n\n![](/img/image(29).png)\n\n### Useful Resources\n\n- [Prometheus](https://github.com/prometheus/prometheus)\n- [Pushgateway](https://github.com/prometheus/pushgateway)\n- [Grafana](https://github.com/grafana/grafana)", "mimetype": "text/plain", "start_char_idx": 1336, "end_char_idx": 2994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56bc8c4d-195a-4c05-ac02-22845dad01f3": {"__data__": {"id_": "56bc8c4d-195a-4c05-ac02-22845dad01f3", "embedding": null, "metadata": {"file_path": "./phala_dist/collator.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b74c9b4c-f739-4533-9d74-995598f9b010", "node_type": "4", "metadata": {}, "hash": "97752a628d09fffacf401c6b61b807aa7d331c3a6e3dde518647dad3c3b480ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1318c2b-0447-4585-b557-b185225ccae3", "node_type": "1", "metadata": {}, "hash": "2d818b63a6d9a94a2ac129d51b4bbace6df683d5070aa47b22ada4b8b5d28291", "class_name": "RelatedNodeInfo"}}, "text": "# Collator\n\n> Collators on Phala (Khala) are supposed to be Gatekeepers, who also run the `pRuntime` as the Gatekeeper role, helping manage the keys in the network. However, Gatekeeper is not open for election now.\n\n## Concepts <a href=\"#concepts\" id=\"concepts\"></a>\n\nPhala Network is currently running its collators on Aura consensus. Aura is a simple block authoring engine that rotates the block producers among the registered collator candidates one by one.\n\n```\n            Host              Session\n            Api               Manager\n Collator <===== [Session]  <--------- [CollatorSelection]\n   node            pallet                     pallet\n```\n\nOn the blockchain, the block authoring is handled collaboratively by `Session` and `CollatorSelection` pallets. The `Session` pallet controls how the blocks are produced and validated. Therefore it has a list of the selected block authors. However, the `Session` doesn\u2019t decide the list on its own. Instead, it delegates that to the `CollatorSelection` pallet.\n\n> The `CollatorSelection` pallet implements the `SessionManager` trait and is injected as the manager of the `Session` pallet in the runtime.\n\nThe `CollatorSelection` pallet is a minimal PoS system. It has a configurable bound amount for all the collator candidates. Anyone can run a collator as long as they meet the minimal bound. It also kicks the unresponsive collator out after each session. Besides the public collators, it also holds a special group of collators called `invulnerables`, who are not vulnerable to kicks even if they are offline.\n\n## Prepare a new collator <a href=\"#prepare-a-new-collator\" id=\"prepare-a-new-collator\"></a>\n\n1. Create an account with a minimum amount of bound available (16 PHA by default)\n2. Deploy a collator full node with the `--collator` flag enabled\n3. Generate a session key. Two options:\n   1. Call RPC `api.rpc.author.rotateKeys()` to generate a new session key in the node, and note the public key it outputs\n   2. Generate the session key externally (dangerous), calculate the public key, and note it\n4.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1318c2b-0447-4585-b557-b185225ccae3": {"__data__": {"id_": "c1318c2b-0447-4585-b557-b185225ccae3", "embedding": null, "metadata": {"file_path": "./phala_dist/collator.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b74c9b4c-f739-4533-9d74-995598f9b010", "node_type": "4", "metadata": {}, "hash": "97752a628d09fffacf401c6b61b807aa7d331c3a6e3dde518647dad3c3b480ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56bc8c4d-195a-4c05-ac02-22845dad01f3", "node_type": "1", "metadata": {}, "hash": "4d33e11dc0a19e22d700e2007f86b0cec179fff3d2a8251d29f3eada05be7915", "class_name": "RelatedNodeInfo"}}, "text": "Set the session (public) key of the collator account by calling `session.setKeys()`\n5. Start the collator node\n\n## Enable an invulnerable collator <a href=\"#enable-an-invulnerable-collator\" id=\"enable-an-invulnerable-collator\"></a>\n\n> This operation can only be done with the Sudo permission. To apply for a public collator, please refer to the next section.\n\nCall `collatorSelection.setInvulnerables(list)`, where `list` is the full list of all the invulnerables collators including the old ones. The current invulnerable collator list can be found from `collatorSelection.invulnerables()`.\n\n## Apply for a public collator <a href=\"#apply-for-a-public-collator\" id=\"apply-for-a-public-collator\"></a>\n\nTo become a public collator, you will need to put a fixed amount of the deposit. The deposit can be found at `collatorSelection.candidacyBond()`. Up to a certain number of the public collators are allowed (the genesis collators are not included). The number can be found at `collatorSelection.desiredCandidates()`, and the current candidates can be found at `collatorSelection.candidates()`. As of writing, the bond is 1000 PHA, and the desired candidate number is 12.\n\nAfter the collator account and the node is setup correctly, submit a proposal by calling `collatorSelection.registerAsCandidate()` from the account. Once it\u2019s submitted, you will need to wait for two sessions to become a collator.\n\nThe blockchain will detect offline collators. If the produced blocks in a session is under a threshold, it will be kicked out from the collator candidate list, and the bond will be returned in full.\n\nAt any time, a collator account can signal the intention to leave the collator candidate list by calling `collatorSelection.leaveIntent()`.", "mimetype": "text/plain", "start_char_idx": 2076, "end_char_idx": 3819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "643001ac-5597-41cd-bd6c-d1f72616fdd6": {"__data__": {"id_": "643001ac-5597-41cd-bd6c-d1f72616fdd6", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8bbf633-92e3-4c5a-b753-72e118ef84d4", "node_type": "4", "metadata": {}, "hash": "fcb75f1b8020cb9c455128a74d7eab66a9a23326190f4e8a8925fed4a18f1996", "class_name": "RelatedNodeInfo"}}, "text": "# Khala Worker Rewards\n\nAfter [Gemini Upgrade](https://khala.subsquare.io/democracy/referendum/27), Khala and Phala share 70% PHA tokens of the total supply for workers' subsidy allocation. You can learn about the Supply-end Tokenomics details [here](../basic-info/worker-rewards.md).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 284, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2bfd338-a534-4ed0-a751-ca6bc1476eca": {"__data__": {"id_": "a2bfd338-a534-4ed0-a751-ca6bc1476eca", "embedding": null, "metadata": {"file_path": "./phala_dist/access-from-other-agents.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d4e92ab7-cf76-43fe-9f62-ab3a168436b5", "node_type": "4", "metadata": {}, "hash": "4b02952b09d4bdefb0577f3b687b6a77903822bf0f45bd12baf4090ed3745252", "class_name": "RelatedNodeInfo"}}, "text": "# Access from Other Agents\n\n:construction\\_site: Work In Progress\n\n<figure><img src=\"../../.gitbook/assets/Phala-Agent-Plugins.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76627e54-d864-4660-9d5c-ed5a45af9ee4": {"__data__": {"id_": "76627e54-d864-4660-9d5c-ed5a45af9ee4", "embedding": null, "metadata": {"file_path": "./phala_dist/eth_subscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "528927f1-f5e5-483f-810e-2f546f8a34b9", "node_type": "4", "metadata": {}, "hash": "440e10ec66ef46adce796efe906bd51ec22e722df53ca0af2a8fc90bad2db8c3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5c46448-81db-4c80-a244-a727bc67be49", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}}, "text": "### eth_subscribe\n\nStarts a subscription to a particular event over WebSockets. A JSON-RPC notification with event payload and subscription id is sent to a client for every event matching the subscription topic.\n\n:::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionName`: *string*\n\n2. `filter`: *object*\n    - `address`: *string* (address)\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *string* (hex data)\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_subscribe\",\n  \"params\": [subscriptionName, args]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": \"0x...\" // subscription id\n}\n```\n\n`result`: *string*\n\n</TabItem>\n<TabItem value=\"notif\" label=\"Notification\">\n\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_subscription\",\n  \"params\": {\n    \"subscription\": \"0x...\", // subscription id\n    \"result\": payload\n  }\n}\n```\n\nSee specific subcription topic below for `payload` details.\n\n</TabItem>\n</Tabs>\n\n#### Subscription topics\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newHeads\n\n</summary>\n<p>\n\nSubscribes to incoming block headers. Fires a notification each time a new header is appended to the chain, including chain reorganizations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5c46448-81db-4c80-a244-a727bc67be49": {"__data__": {"id_": "f5c46448-81db-4c80-a244-a727bc67be49", "embedding": null, "metadata": {"file_path": "./phala_dist/eth_subscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "528927f1-f5e5-483f-810e-2f546f8a34b9", "node_type": "4", "metadata": {}, "hash": "440e10ec66ef46adce796efe906bd51ec22e722df53ca0af2a8fc90bad2db8c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "76627e54-d864-4660-9d5c-ed5a45af9ee4", "node_type": "1", "metadata": {}, "hash": "c276d8b87bc78a05a9ab28aaf91f0a30505bdbab4d445fbb55a683bae8fd22d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff799263-a4a9-4427-a14e-ca8d0c81db81", "node_type": "1", "metadata": {}, "hash": "1d5437dd74954f83d8079d695b90f7afa2dfda1a21f22209a90cb6e0141bccb0", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amount`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### logs\n\n</summary>\n<p>\n\nSubscribes to incoming logs filtered by the given options. In case of a chain reorganization, previously sent logs on the old chain will be re-sent with the `removed` field set to `true`.", "mimetype": "text/plain", "start_char_idx": 1705, "end_char_idx": 3267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff799263-a4a9-4427-a14e-ca8d0c81db81": {"__data__": {"id_": "ff799263-a4a9-4427-a14e-ca8d0c81db81", "embedding": null, "metadata": {"file_path": "./phala_dist/eth_subscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "528927f1-f5e5-483f-810e-2f546f8a34b9", "node_type": "4", "metadata": {}, "hash": "440e10ec66ef46adce796efe906bd51ec22e722df53ca0af2a8fc90bad2db8c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5c46448-81db-4c80-a244-a727bc67be49", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to incoming pending transactions. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### droppedPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to transactions evicted from the transaction pool. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### syncing\n\n</summary>\n<p>\n\nSubscribes to syncing events. Returns `false` (once) if the node is synced or an object with statistics (once) when the node starts syncing.\n\nNotification `payload`:\n\n  - if synced: *boolean*\n  - if syncing: *object*\n      - `currentBlock`: *string* (hex integer)\n      - `highestBlock`: *string* (hex integer)\n      - `isSyncing`: *boolean*\n      - `startingBlock`: *string* (hex integer)\n\n</p>\n</details>", "mimetype": "text/plain", "start_char_idx": 3269, "end_char_idx": 4674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f17d46a1-408c-426f-a4e2-33d04659ea9e": {"__data__": {"id_": "f17d46a1-408c-426f-a4e2-33d04659ea9e", "embedding": null, "metadata": {"file_path": "./phala_dist/introduction.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3333230a-7c90-481a-80af-5fdc291a4b10", "node_type": "4", "metadata": {}, "hash": "92e3e64981c34ed3eda77169a0a76dd49383379a55a5277a89985cc6fea39260", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83e\ude99 Introduction\n\nPHA is the native token of the Phala blockchain. It serves several key functions and holders can use the token in a few different ways:\n\n* Workers, the compute providers for Phala Network, receive PHA rewards. Read about how [rewards are calculated](../../compute-providers/basic-info/worker-rewards.md) or [becoming a Worker](../../compute-providers/run-workers-on-phala/).\n* Running programs, or [AI Agent Contracts](../../tech-specs/ai-agent-contract/), on Phala Network.\n* Phala Network is a DAO governed by PHA token holders. Read about Phala's Governance mechanism [here](governance/).\n* PHA token can be staked or delegated to stakers to support the security of the network and earn rewards. Read about [delegation](delegation/) or get started on the [app](https://app.phala.network/).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acb33a25-a7eb-4a2f-8648-2cf94eae1f99": {"__data__": {"id_": "acb33a25-a7eb-4a2f-8648-2cf94eae1f99", "embedding": null, "metadata": {"file_path": "./phala_dist/quick-start.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3", "node_type": "4", "metadata": {}, "hash": "43e4687d8eab5f003a8fe0e6470e7d0fe0f66634c788f57585abf41e3aae6b4f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ad52f08-d716-4d11-a762-5cf213ffb1c6", "node_type": "1", "metadata": {}, "hash": "ff6e10e6503c3b5a70b4ff6fd369f09fc6727ab246a98ab5a22964a94a1db099", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: >-\n  Connect your subgraphs from The Graph to your on-chain dApps via Phat\n  Contract.\n---\n\n# \ud83e\udd8b Quick Start\n\n## Overview\n\nThe Graph template enables you to connect to subgraph endpoints for data and utilize the data to calculate a trust score and send to a Web3 dApp on an EVM chain.\n\n<figure><img src=\"../../../../.gitbook/assets/The_Graph.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Prerequisites <a href=\"#user-content-prerequisites\" id=\"user-content-prerequisites\"></a>\n\n* Active Phala Profile with version `>= 1.0.1` via [Phat Contract 2.0 UI](https://bit.ly/3LHccmR)\n* [Hardhat](https://bit.ly/469uyW5)\n* API Key from [The Graph](https://bit.ly/subgraph-api-key)\n* For EVM Mainnet deployments:\n  * Ex: Polygonscan API Key that can be generated on [polygonscan](https://bit.ly/3rBkypp)\n* RPC Endpoint for EVM Chain Mainnet & EVM Chain Testnet\n  * [Alchemy](https://bit.ly/46uObaH) - This repo example uses Alchemy's API Key.\n  * [Infura](https://bit.ly/3PXXCtN)\n  * Personal RPC Node (Ex. [ProjectPi](https://bit.ly/3RGf7QS))\n* Polkadot Account for Phala PoC6 Testnet and Mainnet deployment\n  * [Phala Faucet](https://bit.ly/3Tomopi)\n* Node >= 18.x\n\n## How it Works\n\n<figure><img src=\"../../../../.gitbook/assets/TheGraphFlow.jpg\" alt=\"\"><figcaption></figcaption></figure>\n\nThe diagram above displays the user journey of (1) Alice requesting a trust score for Eve from the EVM Consumer Contract. When (2) a new action request is added to the queue, (3) the Phala Network Phat Contract will pop the action off the queue and perform the off-chain work to compute a trust score.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ad52f08-d716-4d11-a762-5cf213ffb1c6": {"__data__": {"id_": "3ad52f08-d716-4d11-a762-5cf213ffb1c6", "embedding": null, "metadata": {"file_path": "./phala_dist/quick-start.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3", "node_type": "4", "metadata": {}, "hash": "43e4687d8eab5f003a8fe0e6470e7d0fe0f66634c788f57585abf41e3aae6b4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acb33a25-a7eb-4a2f-8648-2cf94eae1f99", "node_type": "1", "metadata": {}, "hash": "39603edcfd2dbfec967be1ecd7fdaced64267c6003eb372a83d4d69f65acc2b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5d9cd128-3248-40da-989d-6fb1051932bc", "node_type": "1", "metadata": {}, "hash": "a1bff1a51504283795bedc2b81645eb9f60376ca1695b62a1d0751323a661e3b", "class_name": "RelatedNodeInfo"}}, "text": "First (4) the Phat Contract will create a `batchHttpRequest` to query 3 separate subgraph endpoints to determine if Eve has any ERC-721 NFTs, a NounsDAO NFT,  an ENS Domain, and if any accounts delegate votes to Eve on Snapshot. Once this data is returned then (5) the Phat Contract will compute a score based on some scoring criteria. You can view the code [here](https://github.com/Phala-Network/the-graph-phat-contract/blob/da510bbbefd7a4cca16bf04b090136cf0d5d7503/src/index.ts#L108). Lastly, (6) the trust score for Eve has been returned to the EVM Consumer Contract and Eve's score is set in the Consumer Contract's storage for anyone to query.\n\n## Quick Start\n\nMake sure you have created a Phat Dashboard Profile and claimed some PoC6 Testnet Tokens. Instructions on creating a profile can be found [here](../create-a-dashboard-profile.md). Also, make sure to get an [API Key from The Graph](get-an-api-key-for-the-graph.md) to avoid being rate limited by the default API Key provided by the Phala team.\n\nTo kickstart your journey with The Graph Starter Kit, you install the `@phala/fn` CLI tool.&#x20;\n\nYou can do this using your node package manager (`npm`) or use node package execute (`npx`). For the purpose of this tutorial, we will be using `npx`.\n\nOnce you have the CLI tool installed, you can create your first Phala Oracle template with the following command.\n\n```\nnpx @phala/fn@latest init example\n```\n\n\ud83d\udea8 Note \ud83d\udea8\n\n> When selecting your template, elect `the-graph-starter-kit`.\n\n```\nnpx @phala/fn@latest init example\n? Please select one of the templates for your \"example\" project: \n  phat-contract-starter-kit: Send data from any API to your smart contract with Javascript. \n  lensapi-oracle-consumer-contract: Send data from Lens API to your smart contract to empower your Web3 Social dApp. \n  vrf-oracle: TEE-guarded Verifiable Random Function template to bring randomness to your smart contract.", "mimetype": "text/plain", "start_char_idx": 1606, "end_char_idx": 3520, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d9cd128-3248-40da-989d-6fb1051932bc": {"__data__": {"id_": "5d9cd128-3248-40da-989d-6fb1051932bc", "embedding": null, "metadata": {"file_path": "./phala_dist/quick-start.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3", "node_type": "4", "metadata": {}, "hash": "43e4687d8eab5f003a8fe0e6470e7d0fe0f66634c788f57585abf41e3aae6b4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ad52f08-d716-4d11-a762-5cf213ffb1c6", "node_type": "1", "metadata": {}, "hash": "ff6e10e6503c3b5a70b4ff6fd369f09fc6727ab246a98ab5a22964a94a1db099", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f599f68-c32c-4401-ac4c-2ef97b3671b5", "node_type": "1", "metadata": {}, "hash": "1c3e50b306321af1ed768a9cba57ab24c49ef07542d1d39126c2bbc5cd68ac44", "class_name": "RelatedNodeInfo"}}, "text": "airstack-phat-contract: Request an account\u2019s data from Airstack\u2019s API to compute trust score and send to your Web3 dApp on-chain. \n\u276f thegraph-phat-contract: Connect your subgraphs from The Graph to your on-chain dApps via Phat Contract.  \n```\n\n\ud83d\uded1 **Not so fast!** What is it exactly that we are building? \ud83d\uded1\n\n> **What are we building?**\n>\n> The artifact we are compiling is a JavaScript file, serving as the Phat Contract Oracle's tailored logic. This script is designed to respond to requests initiated from the Consumer Contract. The diagram provided above offers a visual representation of this request-response interaction.\n>\n> **Why is it important?**\n>\n> In the context of the off-chain environment, on-chain Smart Contracts are inherently limited. Their functionality is confined to the information available to them within the on-chain ecosystem. This limitation underscores the critical need for a secure off-chain oracle, such as the Phat Contract. This oracle is capable of fetching and transforming data, thereby enhancing the intelligence and awareness of Smart Contracts about on-chain activities. This is a pivotal step towards bridging the gap between the on-chain and off-chain worlds, making Smart Contracts not just smart, but also informed.\n\nAfter creating The Graph template repo, `cd` into the new project and install the package dependencies. You can do this with the following command:\n\n```\nnpm install\n```\n\nNow, build the default Phat Contract script with this command:\n\n```\nnpx @phala/fn build\n```\n\nTo simulate the expected result locally, run the Phat Contract script now with the `npx @phala/fn run`command to test the expected output when passing an encoded hexstring and the `secrets` into the `main` function of the Phat Contract. This is helpful to test locally quick to understand the functionality of your compiled Phat Contract.\n\n> Go to [https://playground.ethers.org](https://playground.ethers.org) to `decode` and `encode` the hexstring you want to pass into your Phat Contract `main` function.", "mimetype": "text/plain", "start_char_idx": 3524, "end_char_idx": 5554, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f599f68-c32c-4401-ac4c-2ef97b3671b5": {"__data__": {"id_": "9f599f68-c32c-4401-ac4c-2ef97b3671b5", "embedding": null, "metadata": {"file_path": "./phala_dist/quick-start.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3", "node_type": "4", "metadata": {}, "hash": "43e4687d8eab5f003a8fe0e6470e7d0fe0f66634c788f57585abf41e3aae6b4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5d9cd128-3248-40da-989d-6fb1051932bc", "node_type": "1", "metadata": {}, "hash": "a1bff1a51504283795bedc2b81645eb9f60376ca1695b62a1d0751323a661e3b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffb9c3a4-8f67-4563-945f-50d58eb20148", "node_type": "1", "metadata": {}, "hash": "a4ae5cb6d73590f7123bd1832910763cfbe399d8d3dd452600b93efa207aae2e", "class_name": "RelatedNodeInfo"}}, "text": ">\n> In this example, the hexstring  `0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd` represents types `uint id` and `address target`&#x20;\n>\n> Here is what you will enter in the playground:\n>\n> * `utils.defaultAbiCoder.decode(['uint id', 'address target'], '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd')`\n> * `[ BigNumber { value: \"1\" }, \"0xdE1683287529B9B4C3132af8AaD210644B259CfD\", id: BigNumber { value: \"1\" }, target: \"0xdE1683287529B9B4C3132af8AaD210644B259CfD\" ]`\n>\n> You can easily validate this by encoding the types and data with the `utils.defaultAbiCoder.encode()` function like below.", "mimetype": "text/plain", "start_char_idx": 5555, "end_char_idx": 6322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffb9c3a4-8f67-4563-945f-50d58eb20148": {"__data__": {"id_": "ffb9c3a4-8f67-4563-945f-50d58eb20148", "embedding": null, "metadata": {"file_path": "./phala_dist/quick-start.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3", "node_type": "4", "metadata": {}, "hash": "43e4687d8eab5f003a8fe0e6470e7d0fe0f66634c788f57585abf41e3aae6b4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f599f68-c32c-4401-ac4c-2ef97b3671b5", "node_type": "1", "metadata": {}, "hash": "1c3e50b306321af1ed768a9cba57ab24c49ef07542d1d39126c2bbc5cd68ac44", "class_name": "RelatedNodeInfo"}}, "text": ">\n> * `utils.defaultAbiCoder.encode(['uint id', 'address target'], [1, \"0xdE1683287529B9B4C3132af8AaD210644B259CfD\"])`\n> * `\"0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd\"`\n\n```\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd '{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n```\n\nFinally, run the local end-to-end tests with this command. Here we will simulate locally the interaction between the Phat Contract and the Consumer Contract with hardhat.\n\n```\nnpm run localhost-test \n```\n\n\ud83e\udd73 **Congratulations!**\n\nYou have successfully completed the quick start. For the next steps, you will learn how to deploy The Graph Phat Contract to PoC6 Testnet & Phala Mainnet, and also deploy the EVM Consumer Contract on the target EVM chain. Then you will connect to the Phat Contract to the Consumer Contract for the EVM testnet chain to start testing the request-response model live.", "mimetype": "text/plain", "start_char_idx": 6323, "end_char_idx": 7447, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67654169-7c28-45df-8b2e-4246db7c5c8b": {"__data__": {"id_": "67654169-7c28-45df-8b2e-4246db7c5c8b", "embedding": null, "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23248598-1f64-4606-acad-4f12f3292bd7", "node_type": "4", "metadata": {}, "hash": "179ce277f3aa0d25553504d19321c3399777936701651eff192e3e6114616658", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90e0de38-4d40-4967-a078-e37286135c64", "node_type": "1", "metadata": {}, "hash": "e03c43db9a6e52a03ffed84ddd683a6ce3106ff0e5f018f6bd164aa549f82848", "class_name": "RelatedNodeInfo"}}, "text": "# Setting Up an Account Identity\n\nPhala Network provides a naming system that allows participants to add personal information to their on-chain account and subsequently ask for verification of this information by [registrars](../../../pha-token/governance/broken-reference/).\n\nAfter your identity is added, it can be used in many applications in Phala or Khala ecosystem. For example, in Secure Worker, this will help you attract delegators to trust and vote for you.\n\n## Setting an Identity <a href=\"#setting-an-identity\" id=\"setting-an-identity\"></a>\n\nUsers can set an identity by registering through default fields including:\n\n* legal name\n* display name\n* website\n* Twitter handle\n* Element handle\n\nYou can also add extra custom fields to which you can attest. Personalized fields are elaborated in the [judgements](../../../pha-token/governance/broken-reference/) section.\n\n> Users must reserve funds in a bond to store their information on chain:`identity_reserve_funds`, and `identity_field_funds` per each field beyond the legal name. These funds are _locked_, can not be spent - they will be returned when the identity is cleared.\n>\n> These amounts can also be extracted by querying constants through the \u201c[Chain state constants](https://polkadot.js.org/apps/#/chainstate/constants)\u201d tab on polkadot.js/apps.\n\n### Getting Started <a href=\"#getting-started\" id=\"getting-started\"></a>\n\n1. To get started, head over to your [My Accounts](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala-api.phala.network%2Fws#/accounts) tab of Phala/Khala (Switch to \u201cPhala/Khala Network\u201d -> \u201cAccounts\u201d).\n\n> Each field can store up to 32 bytes of information, so the data must be less than that. When inputting the data manually through the [Extrinsics UI](https://polkadot.js.org/apps/#/extrinsics), a [UTF8 to bytes](https://onlineutf8tools.com/convert-utf8-to-bytes) converter can help.\n\n2. Click the gear icon next to your account and select \u201cSet on-chain identity\u201d.\n\nA popup will appear, offering the default fields.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2014, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90e0de38-4d40-4967-a078-e37286135c64": {"__data__": {"id_": "90e0de38-4d40-4967-a078-e37286135c64", "embedding": null, "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23248598-1f64-4606-acad-4f12f3292bd7", "node_type": "4", "metadata": {}, "hash": "179ce277f3aa0d25553504d19321c3399777936701651eff192e3e6114616658", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67654169-7c28-45df-8b2e-4246db7c5c8b", "node_type": "1", "metadata": {}, "hash": "3908f1c82656aeabe04cb388fd268b2a5b776952fda97498fced0cdbab32a517", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb97e39e-4169-4d3b-89e7-6344f86838f3", "node_type": "1", "metadata": {}, "hash": "056adf8e327e8c2a7b907565e1916d9af987a8c48527f4cd076bc8bb106b837f", "class_name": "RelatedNodeInfo"}}, "text": "#### **Adding Custom Fields**\n\nTo add custom fields beyond the default ones, use the Extrinsics UI (\u201cDeveloper\u201d -> \u201cExtrinsics\u201d). Select `submit the following extrinsic` \u201cidentity\u201d and in the field to the immediate right \u201csetidentity(info)\u201d. To submit a raw transaction, first click \u201cAdd Item\u201d and add any field name you like. The display name also must be provided; otherwise, the Identity pallet would consider it wiped if you submitted it with \u201cNone\u201d selected. Every time you change your identity values, you need to re-submit the entire set of fields: the write operation is always \u201coverwrite\u201d and never \u201cappend.\u201d\n\n> Note that custom fields are not shown in the UI by default.\n\nThe rendering of such custom values is, ultimately, up to the UI/dapp makers. In the case of Polkadot{.js} , the team prefers to only show official fields for now. If you want to check that the values are still stored, use the [Chain State UI](https://polkadot.js.org/apps/#/chainstate) to query the active account\u2019s identity info:\n\nIt is up to your own UI or dapp to then do with this data as it pleases. The data will remain available for querying via the Polkadot API, so you don\u2019t have to rely on the PolkadotJS UI.\n\nYou can have a maximum of 100 custom fields.\n\n### Format Caveat <a href=\"#format-caveat\" id=\"format-caveat\"></a>\n\n> Since fields support different formats, from raw bytes to various hashes, a UI has no way of telling how to encode a given field it encounters.\n\nThe Polkadot{.js} UI currently encodes the raw bytes it encounters as UTF8 strings, which makes these values readable on-screen. However, given that there are no restrictions on the values that can be placed into these fields, a different UI may interpret them as, for example, IPFS hashes or encoded bitmaps. This means any field stored as raw bytes will become unreadable by that specific UI. As field standards crystallize, things will become easier to use but for now, every custom implementation of displaying user information will likely have to make a conscious decision on the approach to take, or support multiple formats and then attempt multiple encodings until the output makes sense.", "mimetype": "text/plain", "start_char_idx": 2016, "end_char_idx": 4176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb97e39e-4169-4d3b-89e7-6344f86838f3": {"__data__": {"id_": "bb97e39e-4169-4d3b-89e7-6344f86838f3", "embedding": null, "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23248598-1f64-4606-acad-4f12f3292bd7", "node_type": "4", "metadata": {}, "hash": "179ce277f3aa0d25553504d19321c3399777936701651eff192e3e6114616658", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90e0de38-4d40-4967-a078-e37286135c64", "node_type": "1", "metadata": {}, "hash": "e03c43db9a6e52a03ffed84ddd683a6ce3106ff0e5f018f6bd164aa549f82848", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63969f29-c80e-45ef-961d-c9b9c7d99e29", "node_type": "1", "metadata": {}, "hash": "bcd88637dcf1a887d5bb910fa1a2469a77fa89702262722275a265dac1268e25", "class_name": "RelatedNodeInfo"}}, "text": "## Judgements <a href=\"#judgements\" id=\"judgements\"></a>\n\nAfter a user injects their information on chain, they can request judgement from a registrar. Users declare a maximum fee that they are willing to pay for judgement, and registrars whose fee is below that amount can provide a judgement.\n\nWhen a registrar provides judgement, they can select up to six levels of confidence in their attestation:\n\n* Unknown: The default value, no judgement made yet.\n* Reasonable: The data appears reasonable, but no in-depth checks (e.g. formal KYC process) were performed.\n* Known Good: The registrar has certified that the information is correct.\n* Out of Date: The information used to be good but is now out of date.\n* Low Quality: The information is low quality or imprecise, but can be fixed with an update.\n* Erroneous: The information is erroneous and may indicate malicious intent.\n\nA seventh state, \u201cfee paid\u201d, is for when a user has requested judgement and it is in progress. Information that is in this state or \u201cerroneous\u201d is \u201csticky\u201d and cannot be modified; it can only be removed by the complete removal of the identity.\n\nRegistrars gain trust by performing proper due diligence and would presumably be replaced for issuing faulty judgements.\n\nTo be judged after submitting your identity information, go to the [\u201cExtrinsics UI\u201d](https://polkadot.js.org/apps/#/extrinsics) and select the `identity` pallet, then `requestJudgement`. For the `reg_index` put the index of the registrar you want to be judged by, and for the `max_fee` put the maximum you\u2019re willing to pay for these confirmations.\n\nIf you don\u2019t know which registrar to pick, first check the available registrars by going to [\u201cChain State UI\u201d](../../../pha-token/governance/broken-reference/) and selecting `identity.registrars()` to get the full list.\n\n### Requesting a Judgement <a href=\"#requesting-a-judgement\" id=\"requesting-a-judgement\"></a>\n\nRequesting judgement follows the same process regardless of whether you\u2019re on the Khala or Phala networks. Select one of the registrars from the query you made above.", "mimetype": "text/plain", "start_char_idx": 4178, "end_char_idx": 6258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63969f29-c80e-45ef-961d-c9b9c7d99e29": {"__data__": {"id_": "63969f29-c80e-45ef-961d-c9b9c7d99e29", "embedding": null, "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23248598-1f64-4606-acad-4f12f3292bd7", "node_type": "4", "metadata": {}, "hash": "179ce277f3aa0d25553504d19321c3399777936701651eff192e3e6114616658", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb97e39e-4169-4d3b-89e7-6344f86838f3", "node_type": "1", "metadata": {}, "hash": "056adf8e327e8c2a7b907565e1916d9af987a8c48527f4cd076bc8bb106b837f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2fe9d81-6198-400e-b18d-884e4016f08c", "node_type": "1", "metadata": {}, "hash": "f165230103cab4503d52e704b560c81f97fed91a5f5622dd02bb61423dda05d3", "class_name": "RelatedNodeInfo"}}, "text": "This will make your identity go from unjudged to \u201cwaiting\u201d:\n\nAt this point, direct contact with the registrar is required - the contact info is in their identity as shown above. Each registrar will have their own set of procedures to verify your identity and values, and only once you\u2019ve satisfied their requirements will the process continue.\n\nOnce the registrar has confirmed the identity, a green checkmark should appear next to your account name with the appropriate confidence level:\n\n_Note that changing even a single field\u2019s value after you\u2019ve been verified will un-verify your account and you will need to start the judgement process again. However, you can still change fields while the judgement is going on - it\u2019s up to the registrar to keep an eye on the changes._\n\n### Cancelling a Judgement <a href=\"#cancelling-a-judgement\" id=\"cancelling-a-judgement\"></a>\n\nYou may decide that you do not want to be judged by a registrar (for instance, because you realize you entered incorrect data or selected the wrong registrar). In this case, after submitting the request for judgement but before your identity has been judged, you can issue a call to cancel the judgement using an extrinsic.\n\nTo do this, first, go to the [\u201cExtrinsics UI\u201d](https://polkadot.js.org/apps/#/extrinsics) and select the `identity` pallet, then `cancelRequest`. Ensure that you are calling this from the correct account (the one for which you initially requested judgement). For the `reg_index`, put the index of the registrar from which you requested judgement.\n\nSubmit the transaction, and the requested judgement will be canceled.", "mimetype": "text/plain", "start_char_idx": 6260, "end_char_idx": 7875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2fe9d81-6198-400e-b18d-884e4016f08c": {"__data__": {"id_": "e2fe9d81-6198-400e-b18d-884e4016f08c", "embedding": null, "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23248598-1f64-4606-acad-4f12f3292bd7", "node_type": "4", "metadata": {}, "hash": "179ce277f3aa0d25553504d19321c3399777936701651eff192e3e6114616658", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63969f29-c80e-45ef-961d-c9b9c7d99e29", "node_type": "1", "metadata": {}, "hash": "bcd88637dcf1a887d5bb910fa1a2469a77fa89702262722275a265dac1268e25", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa1301a1-b075-4946-951c-166131cc07bd", "node_type": "1", "metadata": {}, "hash": "9bdc011a5ee73c298102ccd5d0d27316e2e43cf78cb0dd539f11ee67689a8fc6", "class_name": "RelatedNodeInfo"}}, "text": "### Phala & Khala Registrars <a href=\"#khala-registrars\" id=\"khala-registrars\"></a>\n\n* Registrar 0:\n  * Marvin Tong\n  * Contact: \\[email protected]\n  * Account: 42McARWf3FMrGa2RnhhVansbCHuRktiiyHpjsW5nDkDefwHr\n  * Fee: 5 $PHA\n* Registrar 2:\n  * Doyle Guo\n  * Contact: \\[email protected]\n  * Account: 46E4xojF1Q3kaihagQt8to3pFMXQkNRdQAs8BnpyqVNKWHg6\n  * Fee: 0 $PHA\n\n### Khala Registrars <a href=\"#khala-registrars\" id=\"khala-registrars\"></a>\n\nThere will be multiple registrars on Khala. But at the moment you only have 2 registrar suppliers:\n\n* Registrar 0:\n  * Marvin Tong\n  * Contact: \\[email protected]\n  * Account: 42McARWf3FMrGa2RnhhVansbCHuRktiiyHpjsW5nDkDefwHr\n  * Fee: 5 $PHA\n* Registrar 1:\n  * Doyle Guo\n  * Contact: \\[email protected]\n  * Account: 46E4xojF1Q3kaihagQt8to3pFMXQkNRdQAs8BnpyqVNKWHg6\n  * Fee: 0 $PHA\n\nPlease add the following information to the application:\n\nI am applying for identity verification on Khala, the information is as follows:\n\n```\n{\n  \"account\": \"42McARWf3FMrGa2RnhhVansbCHuRktiiyHpjsW5nDkDefwHr\",\n  \"display\": \"Marvin Tong\",\n  \"web\": \"https://phala.network\",\n  \"email\": \"[email\u00a0protected]\"\n  \"twitter\": \"https://twitter.com/marvin_tong\"\n}\n```\n\nRegistrar 0 will reply with the next steps.", "mimetype": "text/plain", "start_char_idx": 7877, "end_char_idx": 9102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa1301a1-b075-4946-951c-166131cc07bd": {"__data__": {"id_": "aa1301a1-b075-4946-951c-166131cc07bd", "embedding": null, "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23248598-1f64-4606-acad-4f12f3292bd7", "node_type": "4", "metadata": {}, "hash": "179ce277f3aa0d25553504d19321c3399777936701651eff192e3e6114616658", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2fe9d81-6198-400e-b18d-884e4016f08c", "node_type": "1", "metadata": {}, "hash": "f165230103cab4503d52e704b560c81f97fed91a5f5622dd02bb61423dda05d3", "class_name": "RelatedNodeInfo"}}, "text": "## Sub Accounts <a href=\"#sub-accounts\" id=\"sub-accounts\"></a>\n\nUsers can also link accounts by setting \u201csub accounts\u201d, each with its own identity, under a primary account. The system reserves a bond for each sub account. An example of how you might use this would be a validation company running multiple validators. A single entity, \u201cMy Staking Company\u201d, could register multiple sub accounts that represent the [Stash accounts](../../../pha-token/governance/broken-reference/) of each of their validators.\n\nAn account can have a maximum of 100 sub-accounts.\n\nTo register a sub-account on an existing account, you must currently use the [Extrinsics UI](https://polkadot.js.org/apps/#/extrinsics). There, select the identity pallet, then `setSubs` as the function to use. Click \u201cAdd Item\u201d for every child account you want to add to the parent sender account. The value to put into the Data field of each parent is the optional name of the sub-account. If omitted, the sub-account will inherit the parent\u2019s name and be displayed as `parent/parent` instead of `parent/child`.\n\nNote that a deposit of `identity_sub_reserve_funds` is required for every sub-account.\n\nYou can use [polkadot.js/apps](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala-api.phala.network%2Fws#/chainstate/constants) again to verify this amount by querying the `identity.subAccountDeposit` constant.\n\n## Clearing and Killing an Identity <a href=\"#clearing-and-killing-an-identity\" id=\"clearing-and-killing-an-identity\"></a>\n\n> Users can clear their identity information and have their deposit returned. Clearing an identity also clears all sub accounts and returns their deposits.\n\nTo clear an identity:\n\n1. Navigate to the [Accounts UI](https://polkadot.js.org/apps/#/accounts).\n2. Click the three dots corresponding to the account you want to clear and select \u2018Set on-chain identity\u2019.\n3. Select \u2018Clear Identity\u2019, and sign and submit the transaction.\n\n**Killing:** The Council can kill an identity that it deems erroneous. This results in a slash in the deposit.", "mimetype": "text/plain", "start_char_idx": 9104, "end_char_idx": 11142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "183ce4ae-c356-442f-81d5-894e8623e65a": {"__data__": {"id_": "183ce4ae-c356-442f-81d5-894e8623e65a", "embedding": null, "metadata": {"file_path": "./phala_dist/prbv3-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87d20c0b-58ef-42b2-bec0-0da742842205", "node_type": "4", "metadata": {}, "hash": "7077330cb1d54d5f2c11a31e3945327004a8ec68191c0c214fabccfd83276c93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2038ba2c-0ebd-4682-88a8-c7f449c015f0", "node_type": "1", "metadata": {}, "hash": "ca6407a93fec5cc87c377e1101d844d347ef3fdda9216fe9b5433d177907d4c0", "class_name": "RelatedNodeInfo"}}, "text": "# PRBv3 Deployment Guide\n\n## Basic Requirements\n\nTo use PRBv3 (Runtime Bridge) for worker deployment, you need at least 1 additional device as the management server. The device connection is shown in the following diagram:\n\n<figure><img src=\"https://github.com/doyleguo/phala-wiki-next/assets/110812052/5ccdd9d5-a4da-434b-b231-fd8e64800873\" alt=\"\"><figcaption></figcaption></figure>\n\n> The node service and PRB service can be run on the same server as needed (depending on the number of workers and server performance).\n\n### Server Configuration Requirements\n\nThe PRB management server needs to run 2 main components, Node and PRB. The requirements for each component are as follows:\n\n| Components  | RAM Space | Harddisk Space | Remark                                                         |\n| ----------- | --------- | -------------- | -------------------------------------------------------------- |\n| Node        | 4GB+      | 3TB+ NVME      | harddisk requirement increasing, 8TB will be best              |\n| PRB         | 4GB+      | 0              | RAM requirement depends on worker number, 16GB+ will be better |\n| **Totally** | 32GB+     | 4TB            | -                                                              |\n\n> You also need to ensure good network connectivity between the management server and PRB workers, and the network of the PRB management server needs to have more than 10TB of traffic space per month.\n\n### PRB Worker requirements\n\nPRB\u2019s worker only needs to run a pRuntime, so the requirements for running a PRB worker are:\n\n* Support for SGX features\n* Ubuntu 22.04.2 LTS operating system and a system kernel of 5.13 or higher\n* At least 4 CPU cores\n* 8GB of memory\n* 128GB NVME\n\n## PRB Components Deployment\n\n### Preparations\n\nAfter installing the Ubuntu OS, first install the necessary Docker program.\n\n```undefined\nsudo apt update && sudo apt upgrade -y && sudo apt autoremove -y\nsudo apt install docker-compose\n```\n\nThen create a folder locally, and create a docker-compose document and other necessary documents within it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2038ba2c-0ebd-4682-88a8-c7f449c015f0": {"__data__": {"id_": "2038ba2c-0ebd-4682-88a8-c7f449c015f0", "embedding": null, "metadata": {"file_path": "./phala_dist/prbv3-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87d20c0b-58ef-42b2-bec0-0da742842205", "node_type": "4", "metadata": {}, "hash": "7077330cb1d54d5f2c11a31e3945327004a8ec68191c0c214fabccfd83276c93", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "183ce4ae-c356-442f-81d5-894e8623e65a", "node_type": "1", "metadata": {}, "hash": "ea8d034f9c357e71ef65d76e8850c4bbc980a279500894ed88fc5fd95a55e2f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9922ce08-4046-4f61-a5a7-75cee612526b", "node_type": "1", "metadata": {}, "hash": "bbc987f04cd60853d84b65105aa216dea1c35ee2b848f85f8d6ba6637f3f73ac", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nmkdir prb-deployment\ncd ./prb-deployment\ntouch docker-compose.yml\ntouch wm.yml\nmkdir prb-wm-data\ncd ./prb-wm-data\ntouch ds.yml\ncd ..\n```\n\nThe relationship of the file path is like\uff1a\n\n* prb-deployment folder\n  * docker-compose.yml\n  * wm.yml\n  * prb-wm-data folder\n    * ds.yml\n\n### Document Editing\n\nYou need to edit a total of 3 documents: the main PRB docker-compose.yml file; the wm.yml file (worker manager); and the ds.yml file (data source).\n\nFirst is the main PRB docker-compose file. In this document, the following code has been added to the configuration of the node-related components. If you don\u2019t need to run the node service and the PRB service on the same server, you can optionally delete the unnecessary parts.\n\nUse the following command to edit the docker-compose.yml document.\n\n```bash\nvim ./docker-compose.yml \n```\n\nAfter entering, you will access the document.\n\nAt this point, enter `a` and you will start editing the document. Paste the following content into the document.", "mimetype": "text/plain", "start_char_idx": 2066, "end_char_idx": 3068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9922ce08-4046-4f61-a5a7-75cee612526b": {"__data__": {"id_": "9922ce08-4046-4f61-a5a7-75cee612526b", "embedding": null, "metadata": {"file_path": "./phala_dist/prbv3-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87d20c0b-58ef-42b2-bec0-0da742842205", "node_type": "4", "metadata": {}, "hash": "7077330cb1d54d5f2c11a31e3945327004a8ec68191c0c214fabccfd83276c93", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2038ba2c-0ebd-4682-88a8-c7f449c015f0", "node_type": "1", "metadata": {}, "hash": "ca6407a93fec5cc87c377e1101d844d347ef3fdda9216fe9b5433d177907d4c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd5f54fb-574c-4503-938a-59cc80795926", "node_type": "1", "metadata": {}, "hash": "9082f7cdcc34327519e8dc6c1e12971ad8ba4ed11f1f6f28d341a052915a0759", "class_name": "RelatedNodeInfo"}}, "text": "(Please note that the file content remains consistent and the indentation alignment of each line is consistent with this document)\n\n```yaml\nversion: \"3\"\nservices:\n  node:\n    image: phalanetwork/khala-node:latest\n    container_name: node\n    hostname: node\n    restart: always\n    ports:\n     - \"9944:9944\"\n     - \"9945:9945\"\n     - \"30333:30333\"\n     - \"30334:30334\"\n    environment:\n     - NODE_NAME=PNODE\n     - NODE_ROLE=MINER\n     - PARACHAIN_EXTRA_ARGS=--max-runtime-instances 32 --runtime-cache-size 8 --rpc-max-response-size 64\n     - RELAYCHAIN_EXTRA_ARGS=--max-runtime-instances 32 --runtime-cache-size 8 --rpc-max-response-size 64\n    volumes:\n     - /var/khala/node-data:/root/data\n\n  wm:\n    image: phalanetwork/prb3:latest\n    hostname: prb-local\n    restart: always\n    network_mode: host\n    logging:\n      options:\n        max-size: \"1g\"\n    environment:\n      - MGMT_LISTEN_ADDRESSES=0.0.0.0:3001\n      - RUST_BACKTRACE=1\n      - RUST_LOG=info,pherry=off,phactory_api=off,prb=info\n    volumes:\n      - ./prb-wm-data:/var/data/prb-wm\n  monitor:\n    image: phalanetwork/prb3-monitor:latest\n    restart: always\n    network_mode: host\n    volumes:\n      - ./wm.yml:/app/public/wm.yml\n```\n\nAfter entering, complete the following steps to finish the text editing and save successfully.\n\n```javascript\n1\u3001Click \"esc\"\n2\u3001Enter \":wq\"\n3\u3001Click \"Enter\"\uff0cquit the editing page\n```\n\nNext is the wm.yml file. Edit the wm.yml document with the following command:\n\n```bash\nvim ./wm.yml \n```\n\nSimilarly, enter `a` to start editing the document and paste the following content into the document.", "mimetype": "text/plain", "start_char_idx": 3069, "end_char_idx": 4660, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd5f54fb-574c-4503-938a-59cc80795926": {"__data__": {"id_": "dd5f54fb-574c-4503-938a-59cc80795926", "embedding": null, "metadata": {"file_path": "./phala_dist/prbv3-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87d20c0b-58ef-42b2-bec0-0da742842205", "node_type": "4", "metadata": {}, "hash": "7077330cb1d54d5f2c11a31e3945327004a8ec68191c0c214fabccfd83276c93", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9922ce08-4046-4f61-a5a7-75cee612526b", "node_type": "1", "metadata": {}, "hash": "bbc987f04cd60853d84b65105aa216dea1c35ee2b848f85f8d6ba6637f3f73ac", "class_name": "RelatedNodeInfo"}}, "text": "```yaml\n- name: local-prb\n  endpoint: http://127.0.0.1:3001\n  proxied: true\n```\n\nAfter entering the content, save and return to the previous directory.\n\n```javascript\n1\u3001Click \"esc\"\n2\u3001Enter \":wq\"\n3\u3001Click \"Enter\"\uff0cquit the editing page\n```\n\nFinally, edit the ds document.\n\n```bash\nvim ./prb-wm-data/ds.yml \n```\n\nenter `a` to start editing the document and paste the following content into the document.\n\n```yaml\n---\nrelaychain:\n  select_policy: Failover # or Random\n  data_sources:\n    - !SubstrateWebSocketSource\n      endpoint: ws://{node-ip}:9945\n      pruned: false\nparachain:\n  select_policy: Failover\n  data_sources:\n    - !SubstrateWebSocketSource\n      endpoint: ws://{node-ip}:9944\n      pruned: false\n```\n\n> There are 2 parameters here that need to be user-defined: ws://{node-ip}:9945 & ws://{node-ip}:9944;\n>\n> You need to replace {node-ip} with the IP of the server where the node is located. If you are running the node and PRB on the same server, use your own ip there.\n>\n> If you don't need the PRBv3 connect to the headers-cache, delete the part of&#x20;\n>\n> `- !HeadersCacheHttpSource`&#x20;\n>\n> `endpoint: http://`{headerscache-ip}`:21111`\n\nAfter entering the content, save and return to the previous directory.\n\n```javascript\n1\u3001Click \"esc\"\n2\u3001Enter \":wq\"\n3\u3001Click \"Enter\"\uff0cquit the editing page\n```\n\n### Program Execution\n\nInside the newly created folder `prb-deployment`, run the docker-compose, and the essential components for PRB will run successfully.\n\n```undefined\nsudo docker-compose up -d\n```\n\n\\\\", "mimetype": "text/plain", "start_char_idx": 4662, "end_char_idx": 6180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f26aed6-c979-41ca-b645-20db0e195a8a": {"__data__": {"id_": "9f26aed6-c979-41ca-b645-20db0e195a8a", "embedding": null, "metadata": {"file_path": "./phala_dist/compatibility-matrix.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6e3ff113-83b6-4a31-bdd9-59d03d16173f", "node_type": "4", "metadata": {}, "hash": "5a9fc85a14fd884b13d8bb742a7648bf134631fcec398ae1953db031766081fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad830459-302f-4657-9b3e-c8016fc48a5d", "node_type": "1", "metadata": {}, "hash": "d8093c4140c88ded5ed6175580a92b5111422f9dc10c20f3b2de85e960c39547", "class_name": "RelatedNodeInfo"}}, "text": "# Compatibility Matrix\n\n{% hint style=\"danger\" %}\nNote that the following information relates to the legacy AI Agent Contracts known previously as Phat Contract.\n{% endhint %}\n\nThese are the minimum supported Rust crate versions for the initial release of Phat Contract.\n\n| Rust Crate                                                                                       | Minimum Version | Definition                                                                                                                                                                                                                                                                                                                                                                                    |\n| ------------------------------------------------------------------------------------------------ | --------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [ink](https://docs.rs/ink/4.2.0/ink/index.html)                                                  | v4.2.0          | ink! is an [eDSL](https://wiki.haskell.org/Embedded\\_domain\\_specific\\_language) to write smart contracts in Rust for blockchains built on the [Substrate](https://github.com/paritytech/substrate) framework. ink! contracts are compiled to WebAssembly.                                                                                                                                    |\n| [pink-extension](https://docs.rs/pink-extension/0.4.3/pink\\_extension/)                          | v0.4.3.         | pink! is based on Parity's ink! language and provide some extra functionality to interact with phala's phat contract runtime.                                                                                                                                                                                                                                                                 |\n| [pink-utils](https://docs.rs/pink-utils/0.4.1/pink\\_utils/)                                      | v0.4.1          | Useful utilities for pink!.                                                                                                                                                                                                                                                                                                                                                                   |\n| [pink-extension-macro](https://docs.rs/pink-extension-macro/0.4.2/pink\\_extension\\_macro/)       | v0.4.2          | Macros for writing phat contract.                                                                                                                                                                                                                                                                                                                                                             |\n| [pink-extension-runtime](https://docs.rs/pink-extension-runtime/0.4.2/pink\\_extension\\_runtime/) | v0.4.2          | Mock pink chain extension for Phala pink contract.                                                                                                                                                                                                                                                                                                                                            |\n| [pink-web3](https://docs.rs/pink-web3/0.20.2/pink\\_web3/)                                        | v0.20.2         | Ethereum JSON-RPC client for pink. Port of [rust-web3](https://github.com/tomusdrw/rust-web3) to Pink contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4023, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad830459-302f-4657-9b3e-c8016fc48a5d": {"__data__": {"id_": "ad830459-302f-4657-9b3e-c8016fc48a5d", "embedding": null, "metadata": {"file_path": "./phala_dist/compatibility-matrix.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6e3ff113-83b6-4a31-bdd9-59d03d16173f", "node_type": "4", "metadata": {}, "hash": "5a9fc85a14fd884b13d8bb742a7648bf134631fcec398ae1953db031766081fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f26aed6-c979-41ca-b645-20db0e195a8a", "node_type": "1", "metadata": {}, "hash": "4798e6954bc7cb920cf0180279ef78d2ccfadcb9a2b246e8857ac184a1361de7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a379bc5-7155-433b-a89f-657a1ab7be99", "node_type": "1", "metadata": {}, "hash": "50cb9ae1a411673dab79b21b1647c36d654bf65ff4620c69f8d641b8539c2348", "class_name": "RelatedNodeInfo"}}, "text": "|\n| [pink-json](https://docs.rs/pink-json/0.4.0/pink\\_json/)                                         | v0.4.0          | `serde_json` for pink programs. The serde-json-core with `alloc::*` types.                                                                                                                                                                                                                                                                                                                    |\n| [pink-ethabi](https://docs.rs/pink-ethabi/17.2.0/pink\\_ethabi/)                                  | v17.2.0         | Easy to use conversion of ethereum contract calls to bytecode. Ethereum ABI encoding decoding library.                                                                                                                                                                                                                                                                                        |\n| [pink-kv-session](https://docs.rs/pink-kv-session/0.2.0/pink\\_kv\\_session/)                      | v0.2.0          | KV session primitives for phat off-chain rollup.                                                                                                                                                                                                                                                                                                                                              |\n| [pink-erased-serde](https://docs.rs/pink-erased-serde/0.3.23/pink\\_erased\\_serde/)               | v0.3.23         | <p>Type-erased Serialize and Serializer traits. This crate provides type-erased versions of Serde's <code>Serialize</code>, <code>Serializer</code> and <code>Deserializer</code> traits that can be used as <a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html\">trait objects</a>.<br><br>Note: Floating points operations are removed to run in <code>ink!</code></p> |\n| [pink-s3](https://docs.rs/pink-subrpc/0.4.2/pink\\_subrpc/)                                       | v0.5.0          | A substrate rpc client running in pink. Substrate json RPC module with limited functionalities.                                                                                                                                                                                                                                                                                               |\n| [sidevm](https://docs.rs/sidevm/0.1.10/sidevm/)                                                  | v0.1.10         | Framework to help developing phala sidevm program. This crate provides some instrumentation to write sidevm programs. It is built on top of the Sidevm ocalls.                                                                                                                                                                                                                                |\n| [sidevm-macro](https://docs.rs/sidevm-macro/0.1.1/sidevm\\_macro/)                                | v0.1.1          | Macros for writing fat contract sidevm program.", "mimetype": "text/plain", "start_char_idx": 4294, "end_char_idx": 7480, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a379bc5-7155-433b-a89f-657a1ab7be99": {"__data__": {"id_": "3a379bc5-7155-433b-a89f-657a1ab7be99", "embedding": null, "metadata": {"file_path": "./phala_dist/compatibility-matrix.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6e3ff113-83b6-4a31-bdd9-59d03d16173f", "node_type": "4", "metadata": {}, "hash": "5a9fc85a14fd884b13d8bb742a7648bf134631fcec398ae1953db031766081fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad830459-302f-4657-9b3e-c8016fc48a5d", "node_type": "1", "metadata": {}, "hash": "d8093c4140c88ded5ed6175580a92b5111422f9dc10c20f3b2de85e960c39547", "class_name": "RelatedNodeInfo"}}, "text": "|\n| [sidevm-env](https://docs.rs/sidevm-env/0.1.7/sidevm\\_env/)                                      | v0.1.7          | The low level protocol between sidevm guest and host.                                                                                                                                                                                                                                                                                                                                         |\n| [sidevm-logger](https://docs.rs/sidevm-logger/0.1.1/sidevm\\_logger/)                             | v0.1.1          | A logger works in sidevm guest program. Enabling a logger for sidevm programs.                                                                                                                                                                                                                                                                                                                |", "mimetype": "text/plain", "start_char_idx": 7815, "end_char_idx": 8822, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbd30467-5882-4862-a8b0-36ab7eeccf55": {"__data__": {"id_": "cbd30467-5882-4862-a8b0-36ab7eeccf55", "embedding": null, "metadata": {"file_path": "./phala_dist/tutorial.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0fbed986-bf29-4b04-8543-5ca58d3d04b5", "node_type": "4", "metadata": {}, "hash": "83b8e057a119529448eed7c55e8f128239f1a0724c1c9b9433d3d1d3c90b7851", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83e\uddd1\u200d\ud83c\udfeb Tutorial\n\n{% embed url=\"https://youtu.be/uSY-0NxEnFY\" %}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 62, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "990daf0b-d4d2-4f00-8881-73fb20a9995a": {"__data__": {"id_": "990daf0b-d4d2-4f00-8881-73fb20a9995a", "embedding": null, "metadata": {"file_path": "./phala_dist/building-from-source.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b07af591-c7e7-4fe1-be1e-412a3f0f771f", "node_type": "4", "metadata": {}, "hash": "53cfbcd20a5408581374280efdaa5e873f4fcf4fda80099bf6e3ee52d6c44e57", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c416a65f-1a6f-474b-989a-dc58770369ee", "node_type": "1", "metadata": {}, "hash": "4a6a5bca1b8679df5f1b5659f74ac388481707d30639a8dd74212b617d4c0c6d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Building from source\nsidebar_label: Building from source\nsidebar_position: 0\n---\n\nThe Nethermind's source code can be obtained from [our repository](https://github.com/NethermindEth/nethermind) on\nGitHub:\n\n```bash\ngit clone --recursive https://github.com/nethermindeth/nethermind.git\n```\n\nThere are two options buiding Nethermind from source code:\n\n* [Standalone binaries](#building-standalone-binaries)\n* [Docker image](#bulding-docker-image)\n\n## Building standalone binaries\n\n### Prerequisites\n\nTo build Nethermind from source, install [.NET SDK](https://dotnet.microsoft.com/en-us/download) 8 or later.\n\n### Building\n\nTo build both the client and tests, run the following command from the project's root directory:\n\n```bash\ndotnet build src/Nethermind/Nethermind.sln -c release\n```\n\nTo simply run the client with a specific configuration without building tests, see below.\n\n:::info\nBefore running the client or tests, ensure the\nplatform-specific [prerequisites](../get-started/installing-nethermind#prerequisites) are met.\n:::\n\n#### Running\n\nNethermind can be launched immediately without compiling explicitly (thus, the previous step can be skipped). The following command builds Nethermind if needed and runs it:\n\n```bash\ncd src/Nethermind/Nethermind.Runner\ndotnet run -c release -- -c mainnet\n```\n\nAll Nethermind-specific parameters can be specified after `--`. For instance, the command above specifies the Mainnet\nconfiguration only.\n\nThe build artifacts can be found in the `src/Nethermind/artifacts/bin/Nethermind.Runner/release` directory. By default, the logs and database directories are located here as well.\n\nFor more info, see [Running Nethermind](../get-started/installing-nethermind.md#running).\n\n#### Testing\n\nThere are two test suites \u2014 Nethermind and Ethereum Foundation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c416a65f-1a6f-474b-989a-dc58770369ee": {"__data__": {"id_": "c416a65f-1a6f-474b-989a-dc58770369ee", "embedding": null, "metadata": {"file_path": "./phala_dist/building-from-source.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b07af591-c7e7-4fe1-be1e-412a3f0f771f", "node_type": "4", "metadata": {}, "hash": "53cfbcd20a5408581374280efdaa5e873f4fcf4fda80099bf6e3ee52d6c44e57", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "990daf0b-d4d2-4f00-8881-73fb20a9995a", "node_type": "1", "metadata": {}, "hash": "d746331affd5ffcf5329db904a807fc4fc95cfcb790b904bc64fc0332b9881bb", "class_name": "RelatedNodeInfo"}}, "text": "Tests can be run with the following commands (the\ninitial step of the build is not required):\n\n```bash\ncd src/Nethermind\n\n# Run Nethermind tests\ndotnet test Nethermind.sln -c release\n\n# Run Ethereum Foundation tests\ndotnet test EthereumTests.sln -c release\n```\n\n## Bulding Docker image\n\nTo build Nethermind Docker image, run the following command from the project's root directory:\n\n```bash\ndocker build -t nethermind .\n```\n\nFor more info about running Docker containers,\nsee [Installing Nethermind](../get-started/installing-nethermind#docker-container).", "mimetype": "text/plain", "start_char_idx": 1805, "end_char_idx": 2360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09e388c7-85ad-45a6-93f4-6afabf340408": {"__data__": {"id_": "09e388c7-85ad-45a6-93f4-6afabf340408", "embedding": null, "metadata": {"file_path": "./phala_dist/wapojs-functions.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ff8bd96-c422-45aa-9218-7f937d9e8ff9", "node_type": "4", "metadata": {}, "hash": "feab14da802ffe892cf293f3983866146823da6be1e7e4a44b9d50af691e2f93", "class_name": "RelatedNodeInfo"}}, "text": "# WapoJS Functions\n\nHere is a list of the available functions for developers to utilize when building on the AI Agent Contract.\n\n```typescript\n/**\n* Derives a secret key from a salt. The same app with the same salt on the same worker will always\n* derive the same secret. However, the same app with the same salt on different workers will derive\n* different secrets.\n*/\nderiveSecret(salt: Uint8Array | string): Uint8Array;\n\n/**\n* Hashes a message using the specified algorithm.\n* @param algrithm - The name of the hash algorithm to use.\n*    Supported values are \"blake2b128\", \"blake2b256\", \"blake2b512\", \"sha256\", \"keccak256\"\n* @param message - The message to hash, either as a Uint8Array or a string.\n*/\nhash(algrithm: 'blake2b128' | 'blake2b256' | 'blake2b512' | 'sha256' | 'keccak256', message: Uint8Array | string): Uint8Array;\n\n/**\n* Non-cryptographic hashing, current only supported wyhash64 64-bit hash. Non-cryptographic algorithms\n* are optimized for speed of computation over collision-resistance or seurity.\n*\n* @param algrithm - The name of the hash algorithm to use.\n*    Supported values are \"wyhash64\"\n* @param message - The message to hash, either as a Uint8Array or a string.\n*/\nnonCryptographicHash(algrithm: 'wyhash64', message: Uint8Array | string): Uint8Array;\n\n/**\n* Concatenates multiple Uint8Array objects into a single Uint8Array.\n*\n* @param arrays - The arrays to concatenate.\n*/\nconcatU8a(arrays: Uint8Array[]): Uint8Array;\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c2d7c33-9767-41a2-9dbb-329652eff45b": {"__data__": {"id_": "0c2d7c33-9767-41a2-9dbb-329652eff45b", "embedding": null, "metadata": {"file_path": "./phala_dist/json-rpc-server.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19a6aed5-3788-43a5-be73-bbbbaf3d662c", "node_type": "4", "metadata": {}, "hash": "d85bb993c3841f5806f7d9e4c233aeae6d4a530707a4b4cf202ba96f1d54efad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e45175cf-c4c8-4cd5-8740-ac47e0b7d211", "node_type": "1", "metadata": {}, "hash": "c0e27d468d92b91ccc9329ea289a823d54d5fbed67ad92d063221ffe839d17cf", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: JSON-RPC server\nsidebar_position: 0\n---\n\nInteracting with Nethermind requires using the JSON-RPC 2.0 protocol. Nethermind provides JSON-RPC over [HTTP](#http),  [WebSocket](#websocket), and [IPC socket](#ipc-socket) transports. Each transport must be enabled with the respective configuration option, as shown below. For more details, see the [JSON-RPC configuration options](../fundamentals/configuration.md#jsonrpc).\n\nThe JSON-RPC API methods are grouped into several categories (namespaces) depending on their purpose. All API method names are composed of the namespace and the actual method name in that namespace. For instance, the `eth_call` method belongs to the `eth` namespace. See the sidebar for all supported namespaces and methods.\n\n:::note\nNot all of the JSON-RPC namespaces are enabled by default. Instead, they must be enabled explicitly with the `--JsonRpc.EnabledModules` command line option. Otherwise, error code `-32600` is returned. The enabled namespaces can be found in the configuration file specified with the `--config` command line option.\n:::\n\n## Transports\n\n:::tip\nThe right choice of transport depends on the specific use case.\n\n- HTTP is a familiar and idempotent transport that closes connections between requests and can, therefore, have lower overall overhead for a relatively low number of requests.\n- WebSocket provides a continuous open channel that enables event subscriptions and streaming and handles large volumes of requests with more negligible per-message overhead.\n- IPC is generally the most secure as it is limited to local interactions and cannot be exposed to external traffic. It can also be used for event subscriptions.\n:::\n\n### HTTP\n\nHTTP is the most widely used transport for Nethermind. To enable the HTTP server, use the `--JsonRpc.Enabled true` command line option. By default, Nethermind uses local loopback (`127.0.0.1` or `localhost`) and `8545` port. To use a different host or port, set the `--JsonRpc.Host` and `--JsonRpc.Port` command line options, respectively.\n\n### WebSocket\n\nThe configuration of the WebSocket server follows the same pattern as the HTTP server. The WebSocket server is enabled automatically when the HTTP server is enabled and uses the same host and port.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e45175cf-c4c8-4cd5-8740-ac47e0b7d211": {"__data__": {"id_": "e45175cf-c4c8-4cd5-8740-ac47e0b7d211", "embedding": null, "metadata": {"file_path": "./phala_dist/json-rpc-server.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19a6aed5-3788-43a5-be73-bbbbaf3d662c", "node_type": "4", "metadata": {}, "hash": "d85bb993c3841f5806f7d9e4c233aeae6d4a530707a4b4cf202ba96f1d54efad", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c2d7c33-9767-41a2-9dbb-329652eff45b", "node_type": "1", "metadata": {}, "hash": "09858e143f7b6c8fc9bcf656aaf232b791b86cfa69310dd0c27a38314a63a8f0", "class_name": "RelatedNodeInfo"}}, "text": "To disable the WebSocket server, use the `--Init.WebSocketsEnabled false` command line option. To use a different a port, set the `--JsonRpc.WebSocketsPort` command line option.\n\n### IPC socket\n\nNethermind uses IPC based on Unix domain socket. To enable the IPC server, use the `--JsonRpc.IpcUnixDomainSocketPath path/to/ipc` command line option. If the `path/to/ipc` doesn't exist, Nethermind creates one.\n\n## Engine API\n\nThe Engine API is a set of RPC methods that enable communication between an execution and consensus client. The clients call these methods automatically when they need to exchange information. Engine API is enabled automatically by default and is not designed to be exposed to the user.\n\nBy default, the Engine API uses local loopback (`127.0.0.1` or `localhost`) and `8551` port. To use a different host or port, set the `--JsonRpc.EngineHost` and `--JsonRpc.EnginePort` command line options, respectively. For example, this can be useful when execution and consensus clients are on different machines.\n\n:::warning Important\nWhen the `--JsonRpc.EngineHost` option is specified, the `--JsonRpc.EnginePort` option must be specified as well.\n:::\n\nThe Engine API uses JWT authentication and requires a JWT secret. By default, Nethermind creates one at `keystore/jwt-secret` path in its root directory. To use a different path, specify the `--JsonRpc.JwtSecretFile path/to/jwt.hex` command line option.", "mimetype": "text/plain", "start_char_idx": 2253, "end_char_idx": 3674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73306b89-439a-4047-b368-8904a92e99f5": {"__data__": {"id_": "73306b89-439a-4047-b368-8904a92e99f5", "embedding": null, "metadata": {"file_path": "./phala_dist/define-your-agent.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "caf19641-7fe6-4031-8bbf-bc87555a701a", "node_type": "4", "metadata": {}, "hash": "070ed1c55bf6863e93b444cf5768fddea8ef18eb27016a015bf8bef1aec8ece6", "class_name": "RelatedNodeInfo"}}, "text": "# Define Your Agent\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "569e19fe-cf89-40f4-a3f3-5cf07f8140ae": {"__data__": {"id_": "569e19fe-cf89-40f4-a3f3-5cf07f8140ae", "embedding": null, "metadata": {"file_path": "./phala_dist/faucet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "006475ef-45e2-4cda-b485-fe2832bd2238", "node_type": "4", "metadata": {}, "hash": "2b7ca7c29b465d0449e7f670b92dcbee8ed467656db5529b311aa0e5feba09c4", "class_name": "RelatedNodeInfo"}}, "text": "# Faucet\n\nVisit the Phala Network Faucet to get testnet tokens.\n\n{% embed url=\"https://phala.network/faucet\" %}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b7902a3-4b7d-4c21-be75-bd4ce01db672": {"__data__": {"id_": "6b7902a3-4b7d-4c21-be75-bd4ce01db672", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-vault.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5708147f-5289-4abd-bd9d-1d337477fd74", "node_type": "4", "metadata": {}, "hash": "9e391f18104ad3cedeba4fd5e0f78627fe4790a2ef760ed8069a7582f043ee21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db556c5f-cfde-488e-a5bf-033527feb496", "node_type": "1", "metadata": {}, "hash": "037ac1d4b8d8c1ac0ffd46330487e3aa1bc860634dcf36a2d476b6558397a425", "class_name": "RelatedNodeInfo"}}, "text": "# What is Vault\n\nVault is a function designed for delegation proxy. Vaults are pools of funds with an associated strategy that aims to maximize returns on the assets they hold.\n\nDelegators can also skip Vault and delegate to StakePool directly.\n\n## Why do we need Vault? <a href=\"#why-do-we-need-vault\" id=\"why-do-we-need-vault\"></a>\n\n\u2018Delegating\u2019 refers to the process of contributing tokens to a public validator node. In Phala Network, delegating is referred to as \u2018stake to earn\u2019, whereby delegators receive incentives from the rewards of active workers.\n\nStakePools, which are overseen by pool operators, enables users to pool their tokens to increase their chances of earning block rewards. However, for novice delegators, it is often difficult to identify high-quality StakePools, as this process is dependent upon utilizing complex indicators such as creation time, past performance, APR, etc.\n\nThe \u2018quality\u2019 of a StakePool can be determined by its performance in rewarding its delegators consistently. Therefore, if delegators unknowingly select a \u2018bad\u2019 StakePool, they\u2019re at risk of receiving decreased rewards or no rewards. Minimizing the probability of this occurring is crucial to maintaining community confidence and avoiding risks of network instability.\n\nVaults increase the probability of high-performance workers being chosen as experienced agents are incentivized to assist with the process of StakePool selection.\n\n## About Vault <a href=\"#about-vault\" id=\"about-vault\"></a>\n\n> Before you start to understand Vault, please make sure you have a clear understanding of [how StakePool works](delegate-to-stakepool.md#how-it-works)\n\n### How Vault works? <a href=\"#how-vault-works\" id=\"how-vault-works\"></a>\n\n![](https://i.imgur.com/OyI4jab.png)\n\nThe above image illustrates how our delegation system operates with the introduction of Vaults.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db556c5f-cfde-488e-a5bf-033527feb496": {"__data__": {"id_": "db556c5f-cfde-488e-a5bf-033527feb496", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-vault.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5708147f-5289-4abd-bd9d-1d337477fd74", "node_type": "4", "metadata": {}, "hash": "9e391f18104ad3cedeba4fd5e0f78627fe4790a2ef760ed8069a7582f043ee21", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b7902a3-4b7d-4c21-be75-bd4ce01db672", "node_type": "1", "metadata": {}, "hash": "6f7cba4c86e1e9ad9141bb5d8463621e156c6c1cf8f7aa7f9abd9cc774b29695", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b22016aa-1241-4208-9a77-2c22b5d3e7e8", "node_type": "1", "metadata": {}, "hash": "5d27e5ecb2ed4a4637cf362a8fc79c893b6e9df463c96bc7c9aabdf8f10ce507", "class_name": "RelatedNodeInfo"}}, "text": "PHA holders will be able to delegate into either a StakePool or a Vault, taking into account the following:\n\n* Vault owners select and delegate the Vault\u2019s PHA to \u2018high-quality\u2019 StakePools;\n* A Vault owner\u2019s reward is based upon the commission share (set by the Vault owner) of all delegation rewards accrued by the Vault;\n* To the StakePool, there is no difference between delegations from common delegators or Vaults;\n* A Vault cannot delegate to other Vaults.\n\n### Vault delegation NFTization <a href=\"#vault-delegation-nftization\" id=\"vault-delegation-nftization\"></a>\n\nWith the introduction of Vaults, there will now be two categories of delegation NFTs: a Proof of Delegation NFT (Vault NFT) representing delegation to a Vault, and a Certificate of StakePool Delegation NFT representing delegation directly to a StakePool. Same as delegating to StakePools, when the user delegates to a Vault, the user will also receive a Delegation NFT as proof of your Delegation in the Vault.\n\nThe Vault Delegation NFT has the same function as the StakePool Delegation NFT: it will be transferable and able to be sold in the PhalaWorld marketplace.\n\n> NOTE When your Delegation NFT is transferred or sold to someone else, the delegated PHA will no longer belong to you, because you have lost the certificate to withdraw it back from the corresponding Vault.\n\n### Vault only has \u201cDelegate\u201d and \u201cWithdraw\u201d permissions <a href=\"#vault-only-has-delegate-and-withdraw-permissions\" id=\"vault-only-has-delegate-and-withdraw-permissions\"></a>\n\nVault owners only have permission to move PHA in and out of StakePools. Therefore, **Vault owners can NEVER transfer your tokens to an external account.** This avoids your assets from being permanently locked or tampered with.\n\nFor Vault users, **please ensure that you never transfer your assets to Vault account, only delegate them.**\n\n### Different withdrawal scenarios between Vault and StakePool <a href=\"#different-withdrawal-scenarios-between-vault-and-stakepool\" id=\"different-withdrawal-scenarios-between-vault-and-stakepool\"></a>\n\n![](https://i.imgur.com/LpHll0z.png)\n\nAll tokens delegated by the delegators to Vault will most likely be delegated to the StakePool.", "mimetype": "text/plain", "start_char_idx": 1859, "end_char_idx": 4061, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b22016aa-1241-4208-9a77-2c22b5d3e7e8": {"__data__": {"id_": "b22016aa-1241-4208-9a77-2c22b5d3e7e8", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-vault.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5708147f-5289-4abd-bd9d-1d337477fd74", "node_type": "4", "metadata": {}, "hash": "9e391f18104ad3cedeba4fd5e0f78627fe4790a2ef760ed8069a7582f043ee21", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db556c5f-cfde-488e-a5bf-033527feb496", "node_type": "1", "metadata": {}, "hash": "037ac1d4b8d8c1ac0ffd46330487e3aa1bc860634dcf36a2d476b6558397a425", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9675e07-1441-4adc-96af-5d6bebb4dc09", "node_type": "1", "metadata": {}, "hash": "839441c3d942cd8c2cc1b07eab898436778236141101c2da59fb574649d3cca9", "class_name": "RelatedNodeInfo"}}, "text": "When the delegators want to withdraw tokens from the Vault, once there are not enough free delegations in the Vault, the Vault needs to apply to the StakePool for withdrawal.\n\nAs Vaults are derivatives of StakePool delegations, withdrawals from Vaults are already subject to the maximum StakePool withdrawal period of 14 days. For Vaults, we\u2019ve extended this withdrawal period by a week to allow for asset turnover within the Vault, making the maximum withdrawal period 21 days.\n\nWithin seven days after the withdrawal queue of the delegator is created, the Vault owner needs to ensure that the Vault has enough free delegation to eliminate the withdrawal queue, or initiate a withdrawal application to the StakePool within seven days.\n\nSeven days after the withdrawal queue is created, once a delegator initiates a check balance transaction, and at the same time, the total amount of withdrawal requests to the StakePool and the free delegation in Vault is not enough to repay the withdrawal queue, the Vault will be frozen until the withdraw queues in the Vault are all eliminated.\n\nThe Vault being frozen means:\n\n* Vault will initiate the withdrawal application for the entire delegation amount to all StakePools it delegated\n* During the freezing process, the Vault Owner cannot conduct any other transactions except for delegating to the Vault\n\n### All rewards in Vault come from the StakePool <a href=\"#all-rewards-in-vault-come-from-the-stakepool\" id=\"all-rewards-in-vault-come-from-the-stakepool\"></a>\n\nVault does not create additional rewards, all rewards in Vault come from StakePool. The vault owner achieves the highest vault APY by choosing a StakePool with the highest APR.\n\nThe reason why we call StakePool\u2019s rate of return APR, and Vault\u2019s APY is\uff1a\n\n* Individual StakePool rewards can only increase with the addition of new workers. StakePool rewards are derived from workers, and each worker can only earn a finite amount of income regardless of how much the delegation amount in the StakePool increases. Additional rewards can be earned only when the StakePool owner adds new workers.\n* Vault\u2019s delegation rewards come from the StakePool\u2019s delegator rewards.", "mimetype": "text/plain", "start_char_idx": 4062, "end_char_idx": 6237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9675e07-1441-4adc-96af-5d6bebb4dc09": {"__data__": {"id_": "a9675e07-1441-4adc-96af-5d6bebb4dc09", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-vault.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5708147f-5289-4abd-bd9d-1d337477fd74", "node_type": "4", "metadata": {}, "hash": "9e391f18104ad3cedeba4fd5e0f78627fe4790a2ef760ed8069a7582f043ee21", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b22016aa-1241-4208-9a77-2c22b5d3e7e8", "node_type": "1", "metadata": {}, "hash": "5d27e5ecb2ed4a4637cf362a8fc79c893b6e9df463c96bc7c9aabdf8f10ce507", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed212976-475d-4bb7-ba3b-fd10721a6ec3", "node_type": "1", "metadata": {}, "hash": "66fc6807a7baf61477b48413acda973da765305ebbf2c060f58e523ea6b66d40", "class_name": "RelatedNodeInfo"}}, "text": "When the StakePool owner cannot add workers in time, the vault owner can transfer funds between different StakePools to realize that each token is effectively earning rewards, not limited to the growth rate of workers\n\n## About Vault Owner <a href=\"#about-vault-owner\" id=\"about-vault-owner\"></a>\n\n### How is the Vault owner\u2019s reward calculated? <a href=\"#how-is-the-vault-owners-reward-calculated\" id=\"how-is-the-vault-owners-reward-calculated\"></a>\n\nThe vault owner will get a commission based on the delegator rewards of the delegation in the vault. This commission value is set by the Vault Owner and it will be manually executed by the Vault owner. After each execution, the rewards earned between the last two executions will be used as the base to draw a commission for the pool owner.\n\nThe Share Price ([Click here to learn what\u2019s Share](whats-share.md)) in the pool will change with each reward or slash. Between the last two commission executions, the number of Share Price changes multiplied by the total value of Shares represents the sum of total rewards and Slash in the pool which was issued accumulatively during this period.\n\nWe extract commissions from the stock delegation by issuing additional Shares for the Vault. The additional Shares will still be stored in the Vault and can be assigned by the Vault owner.", "mimetype": "text/plain", "start_char_idx": 6238, "end_char_idx": 7569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed212976-475d-4bb7-ba3b-fd10721a6ec3": {"__data__": {"id_": "ed212976-475d-4bb7-ba3b-fd10721a6ec3", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-vault.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5708147f-5289-4abd-bd9d-1d337477fd74", "node_type": "4", "metadata": {}, "hash": "9e391f18104ad3cedeba4fd5e0f78627fe4790a2ef760ed8069a7582f043ee21", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9675e07-1441-4adc-96af-5d6bebb4dc09", "node_type": "1", "metadata": {}, "hash": "839441c3d942cd8c2cc1b07eab898436778236141101c2da59fb574649d3cca9", "class_name": "RelatedNodeInfo"}}, "text": "Here is an example:\n\n| Action                           | Delegation in Vault | Total Share | Share price | remarks                                             |\n| -------------------------------- | ------------------- | ----------- | ----------- | --------------------------------------------------- |\n| Tom Create the Vault #001        | 0                   | 0           | 1           | The initial price is 1                              |\n| Bob delegates 10000 $PHA in #001 | 10000               | 10000       | 1           | Bob has 1000 Shares                                 |\n| #001 earned 50 $PHA rewards      | 10050               | 10000       | 1.005       | Bob still has 1000 Shares                           |\n| Jack delegates 3000 $PHA in #001 | 13050               | 12985.07    | 1.005       | Jack has 2,985.07 shares because the price is 1.005 |\n| Tom execute the commission(5%)   | 13050               | 12988.3     | 1.00475     | Tom got 3.23 Shares as the Vault owner reward       |\n\n### Recommendations for Vault Owner <a href=\"#recommendations-for-vault-owner\" id=\"recommendations-for-vault-owner\"></a>\n\nSuccessful Vault owners will be experienced members of the Phala community who are very familiar with managing StakePool delegations. Vault owners should be willing to commit significant time and effort to manage their Vault, which includes coordinating with StakePool owners and delegators, developing a delegation strategy, and onboarding newcomers. Vault ownership can be a very profitable activity, and it follows that the more you put into managing your Vault, the more you will get out of it.\n\nFor Delegators, we recommend evaluating Vaults based on their TVL and overall stability, which will be more important in the long run than the APY.", "mimetype": "text/plain", "start_char_idx": 7571, "end_char_idx": 9349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "111b56e4-37ba-424c-b284-270b66f4db71": {"__data__": {"id_": "111b56e4-37ba-424c-b284-270b66f4db71", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc80424a-cbdf-4c37-b40b-9a392ff75c1e", "node_type": "1", "metadata": {}, "hash": "b85807d4573359c7b106233ea00b0c2e971087da817d01bf0cf97d622dde7d27", "class_name": "RelatedNodeInfo"}}, "text": "# Technical Details\n\nSubBridge is different from general cross-chain solutions in that they only realize the transfer of assets and data between two chains.\n\nSubBridge is more like a router linking different cross-chain bridges and allows asset transfer from one chain to any other chains which have been registered. For example, we have implemented the transfer of ERC20 assets on Moonriver and Ethereum to other parachains in the Polkadot ecosystem through SubBridge. To accomplish this, it is not necessary for the parachain receiving the asset to have an EVM cross-chain bridge integrated into its runtime. This is done by the SubBridge.\n\n<figure><img src=\"../../.gitbook/assets/subbridge-pallets.png\" alt=\"\"><figcaption><p>SubBridge pallet</p></figcaption></figure>\n\nAs shown in the figure below, SubBridge integrates the implementation of multiple bridges, here we use BridgeA, BridgeB, and BridgeC to represent. When SubBridge receives a cross-chain asset transfer, it will choose whether to forward the transaction to another chain according to the destination address. If the transaction is only transferred to an account in the Khala or Phala network, we will deposit the asset directly into the receiving account; in the case of another chain, usually, this needs to ensure:\n\n* The destination is already supported by a certain bridge, that is, the SubBridge will traverse the list of bridges to check whether the bridge supports transfers to the destination address, and if so, use this bridge for forwarding.\n* Make sure that the format of the path conforms to our specification \\[see next section] and still has enough assets as a fee to pay the cross-chain fee to the other chain.\n\nIt can be seen that we can not only realize the cross-chain transfer of assets through multiple bridges but also try to choose a transfer path with the lowest fee for users\n\n<figure><img src=\"../../.gitbook/assets/subbridge-topology.png\" alt=\"\"><figcaption><p>SubBridge Topology</p></figcaption></figure>\n\n## MultiAsset and MultiLocation <a href=\"#multiasset-and-multilocation\" id=\"multiasset-and-multilocation\"></a>\n\nThe purpose of SubBridge is to connect assets in multiple chains. Therefore, how to unify the definitions of assets and locations in multiple chains is the first problem we need to solve.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2302, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc80424a-cbdf-4c37-b40b-9a392ff75c1e": {"__data__": {"id_": "fc80424a-cbdf-4c37-b40b-9a392ff75c1e", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "111b56e4-37ba-424c-b284-270b66f4db71", "node_type": "1", "metadata": {}, "hash": "9a46abd78fad74b8b1b380b7b09bf9623b07e827a2829a1cd1782ceeffe263cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c4c3e53-ccdd-4fff-b630-05ffafdae788", "node_type": "1", "metadata": {}, "hash": "e7e7062c5f6fae713200c45902357f9880adf4320d240bd54bb2f1e8ac9f660d", "class_name": "RelatedNodeInfo"}}, "text": "After research, we thought of MultiAsset and MultiLocation in the Polkadot [XCM protocol](https://github.com/paritytech/xcm-format). MultiAsset is used to represent a certain asset on a certain chain. For example, the asset of PHA can be expressed as:\n\n```\nMultiAsset::new(Fungible(amount), Concrete(pha_location))\n```\n\n> Where `amount` is a certain amount of asset, `pha_location` is the path of PHA under the XCM protocol standard, which is defined by SubBridge and represented by MultiLocation, usually represented as:\n\n```\nMultiLocation::new(1, X1(Parachain(2035)))\n```\n\n> Among them, `2035` is the parachain ID of the Phala network. So how do we use the XCM protocol to represent any non-parachain\u2018s account address? It determines how SubBridge will recognize and forward cross-chain transactions.\n\nWhat we do in practice is that we incorporate other non-parachains into sub-addresses of the Phala network, similar to the local area network specified by TCP/IP. In this way, the account address of an EVM chain can be represented as:\n\n```\nMultiLocation::new(1, X4(Parachain(2035), GeneralKey(bridge), GeneralIndex(chain), GeneralKey(account)))\n```\n\n> Among them, `bridge` represents a specific bridge, for example, SygmaBridge uses sygma to represent; ChainBridge uses `cb` to represent; `chain` represents the ID of the EVM chain under the EVM Bridge system. Currently, Ethereum is 0 under both SygmaBridge and ChainBridge protocol; `account` represents the ID on the EVM chain. An account, usually a 20-byte hexadecimal string.\n\nSimilarly, the assets of any chain also need to be unified. The assets on the parachain are defined by the team of the parachain to define their corresponding MultiAsset; the EVM chain assets based on SubBridge are also defined as the sub-asset of the Khala network like the account address.", "mimetype": "text/plain", "start_char_idx": 2303, "end_char_idx": 4130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c4c3e53-ccdd-4fff-b630-05ffafdae788": {"__data__": {"id_": "6c4c3e53-ccdd-4fff-b630-05ffafdae788", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc80424a-cbdf-4c37-b40b-9a392ff75c1e", "node_type": "1", "metadata": {}, "hash": "b85807d4573359c7b106233ea00b0c2e971087da817d01bf0cf97d622dde7d27", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed8a72da-a1cf-4777-8820-cfeb42bbe45a", "node_type": "1", "metadata": {}, "hash": "1f1cc50dc6f2b814843dc76ea0445828ccf30f114755120838e8bd45c5b58772", "class_name": "RelatedNodeInfo"}}, "text": "That is, the usual asset location would be represented as:\n\n```\nMultiLocation::new(1, X3(Parachain(2035), GeneralIndex(chain), GeneralKey(token)))\n```\n\n> Among them, `token` represents the contract address of a certain ERC20 or ERC721 of EVM.\n\n## Asset Registration <a href=\"#asset-registration\" id=\"asset-registration\"></a>\n\nThe registration of SubBridge assets is mainly divided into two parts:\n\nThe first part is to register assets into the pallet-assets module. SubBridge uses the pallet-assets module provided by Substrate to manage the registered assets. The registered assets will be assigned an asset id. Each asset has an extra [registry info](https://github.com/Phala-Network/khala-parachain/blob/5ab4f77163c811fb4a02d337791ce669b41481ad/pallets/assets-registry/src/lib.rs#L62) which contains information of location, enabled bridges and properties. Unregistered assets will fail regardless of whether they are transferred via the EVM bridge or the XCM bridge.\n\nThe second part is to enable the corresponding EVM bridge. This part is only for the asset settings that want to carry out the cross-chain requirement from Phala to the EVM chain. In SubBridge, the same asset can enable both SygmaBridge-based bridges and ChainBridge-based bridges. In practice, users are always willing to choose solutions with lower fees.\n\nThe steps to do the registration stuff are as follow:\n\n*   Step1, we schedule a call of `pallet-registry::forceRegisterAsset` with given registration informations. When the council enacted the call, an asset instance will be created by `pallet-assets`, and some extra registration information will be saved in `pallet-registry`.\n\n    There are several things we need to pay attention to. The first one is that each asset has a bunch of metadata defined in `pallet-assets`, like `name`, `symbol`, etc. We have provided an extrinsic called `forceSetMetadata` in `pallet-registry` which can be used to update the metadata of an asset. Another one is that each asset has some privileged accounts used to manage the asset, like `Issuer`, `Admin`, etc. Different account has different permission.", "mimetype": "text/plain", "start_char_idx": 4131, "end_char_idx": 6251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed8a72da-a1cf-4777-8820-cfeb42bbe45a": {"__data__": {"id_": "ed8a72da-a1cf-4777-8820-cfeb42bbe45a", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c4c3e53-ccdd-4fff-b630-05ffafdae788", "node_type": "1", "metadata": {}, "hash": "e7e7062c5f6fae713200c45902357f9880adf4320d240bd54bb2f1e8ac9f660d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a8b05fa-e000-4c1c-b51b-8d14e8e64ff7", "node_type": "1", "metadata": {}, "hash": "7cc4baddaa541fc8c03e4ad1aef5b096770c0d015e2ca0497d4da9ba94ff24e9", "class_name": "RelatedNodeInfo"}}, "text": "In `asset-registry`, we set all the privileged accounts of each asset to an account derived by `PalletId(b\"phala/ar\")`. This means no external account has permission to do things beyond authority.\n\n    All registered assets can be found at [here](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/assets). The asset registration informations are stored on-chain, head to [polkadot.js.app](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/chainstate) and choose RPC `assetsRegistry\u2192registryInfoByIds` to see details. Here is a screenshot of KSM registration information:\n*\n\n    <figure><img src=\"../../.gitbook/assets/subbridge-assetinfo.png\" alt=\"\"><figcaption><p>Registration infomartion of KSM</p></figcaption></figure>\n\n> Note: For assets on Phala, also can be found on `Assets` tab in polkadot.js app\n\n*   Step2\\[optional], after the asset was registered, by default all assets will enable XCM crosschain transfer. If the asset is going to enable SygmaBridge or ChainBridge, another call named `assetRegistry::forceEnabledSygmaBridge` or `assetRegistry::forceEnabledChainbridge` should be enacted by the council. This will enable the crosschain transfer to a specific EVM chain. And `assetRegistry::forceDisableSygmaBridge` or `assetRegistry::forceDisableChainBridge` is used to disable it. When SygmaBridge or ChainBridge was enabled for the asset, you will see we have new data being added to the returned registration information.", "mimetype": "text/plain", "start_char_idx": 6252, "end_char_idx": 7756, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a8b05fa-e000-4c1c-b51b-8d14e8e64ff7": {"__data__": {"id_": "8a8b05fa-e000-4c1c-b51b-8d14e8e64ff7", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed8a72da-a1cf-4777-8820-cfeb42bbe45a", "node_type": "1", "metadata": {}, "hash": "1f1cc50dc6f2b814843dc76ea0445828ccf30f114755120838e8bd45c5b58772", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35bebf62-ade5-4d98-8e7e-1af1f7bdd086", "node_type": "1", "metadata": {}, "hash": "4e93e8af421c36f5dbc34dc587b3a34232661bac9c05417a3856f0f1ab7ee07c", "class_name": "RelatedNodeInfo"}}, "text": "For example, the enabled-bridges information of ZLK is shown below:\n\n    ```\n    enabledBridges: [\n        {\n            config: Xcmp\n            metadata:\n        }\n        {\n            config: {\n            ChainBridge: {\n                chainId: 2\n                resourceId: 0x028da1efb56e124f659fa6d5d95b3cc541ce207cbfee2f4f066061cc92d37bae\n                reserveAccount: 0xde50ca45c8f7323ea372fd5d7929b9f37946690b0b668985beebe60431badcea\n                isMintable: false\n            }\n            }\n            metadata: 0x00\n        }\n    ]\n    ```\n\n    Looking at the ChainBridge filed, the `chainId` is 2 means it has enabled crosschain transfer between the Khala network and Moonriver EVM. `ResourceId` is used to bind ZLK on the Khala network and ERC20-ZLK on Moonriver EVM. `reserveAccount` is used to save ZLK temporarily when transferring ZLK from the Khala network to Moonriver EVM, and will transfer back to the recipient account when someone transfer ZLK from Moonriver EVM back to Khala network. `isMintable` is `false` tells the client that should aware of the ZLK balance of reserve account.\n\n* Step3\\[If Step2 has been done], we also need to config your asset in our ChainBridge [Bridge contract](https://github.com/Phala-Network/chainbridge-solidity/blob/phala-bridge/contracts/Bridge.sol) before finally launching the crosschain transfer through ChainBridge. It including:\n  * Binding resource id generated during registration with its ERC20 contract address. This essentially is done by executing method [adminSetResource](https://github.com/Phala-Network/chainbridge-solidity/blob/5eef3073ccc75b48e06ce44eee522c2023da974e/contracts/Bridge.sol#L204) of Bridge contract.", "mimetype": "text/plain", "start_char_idx": 7757, "end_char_idx": 9453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35bebf62-ade5-4d98-8e7e-1af1f7bdd086": {"__data__": {"id_": "35bebf62-ade5-4d98-8e7e-1af1f7bdd086", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a8b05fa-e000-4c1c-b51b-8d14e8e64ff7", "node_type": "1", "metadata": {}, "hash": "7cc4baddaa541fc8c03e4ad1aef5b096770c0d015e2ca0497d4da9ba94ff24e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d876eee2-96f4-46f3-9de1-e2610e95bdce", "node_type": "1", "metadata": {}, "hash": "fcb336e44169947fe4a7dd0d61a8aa08a3a9c65bca5ae35ab1bc951f84f91828", "class_name": "RelatedNodeInfo"}}, "text": "* Set decimals of the asset by executing method [adminSetDecimals](https://github.com/Phala-Network/chainbridge-solidity/blob/5eef3073ccc75b48e06ce44eee522c2023da974e/contracts/Bridge.sol#L247). SubBridge is compatible with the scenario that asset has different decimals between substrate side and EVM side.\n  * If your asset is burnable and would like to give the mint/burn permission to our contract, we need to tell the contract to mark your asset as burnable by executing method [adminSetBurnable](https://github.com/Phala-Network/chainbridge-solidity/blob/5eef3073ccc75b48e06ce44eee522c2023da974e/contracts/Bridge.sol#L236). With burnable set, when the user transfers asset from EVM chains, the asset would be burned directly from their account, and mint to the recipient account when someone transfers back to EVM chains.\n\n> Note: For SygmaBridge, asset config need to be done by Sygma team.\n\n### The Lifecycle of Cross-chain Transaction <a href=\"#the-lifecycle-of-cross-chain-transaction\" id=\"the-lifecycle-of-cross-chain-transaction\"></a>\n\n<figure><img src=\"../../.gitbook/assets/subbridge-lifecycle.png\" alt=\"\"><figcaption><p>Lifecycle of SubBridge Cross-chain Transaction</p></figcaption></figure>\n\nThe life cycle of a transfer across three chains can be described in the above figure. In the above picture, assets are transferred between Parachains on the left and EVM Chains on the right, passing through the Phala network in the middle.\n\nTake SygmaBridge as an example, when a cross-chain transfer is initiated from a parachain, after executing the local XCM command (such as burning a certain amount of assets from the sending account) it will be wrapped into a cross-chain XCM message and sent from the parachain to the Phala network, the XCM related modules of the Phala network will be responsible for processing the message. The transmission and instruction processing of XCM cross-chain messages are handled by Polkadot\u2019s XCM-related modules. During the execution of the instruction, when the DepositAsset instruction is executed, SubBridge will parse the payment address.", "mimetype": "text/plain", "start_char_idx": 9456, "end_char_idx": 11547, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d876eee2-96f4-46f3-9de1-e2610e95bdce": {"__data__": {"id_": "d876eee2-96f4-46f3-9de1-e2610e95bdce", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35bebf62-ade5-4d98-8e7e-1af1f7bdd086", "node_type": "1", "metadata": {}, "hash": "4e93e8af421c36f5dbc34dc587b3a34232661bac9c05417a3856f0f1ab7ee07c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d83ea38d-06d0-4b58-af2d-211a7768db22", "node_type": "1", "metadata": {}, "hash": "dd677102cf33da968bc52226e0f67d32d2c86db4f0484e969716ad4259a9500f", "class_name": "RelatedNodeInfo"}}, "text": "If it points to the address of another EVM Chain, the transaction will be forwarded through the SygmaBridge module.\n\nSimilarly, when a cross-chain transfer is initiated from EVM Chains, the SygmaBridge Relayer will forward the message to the SygmaBridge pallet module of SubBridge. After the SygmaBridge module performs a series of verifications on the transaction, it will process the asset with the same logic. If it is resolved that the receiving address is not an address in the local Phala network but an address on a parachain, SubBridge\u2019s XCM module will be triggered to forward the transaction.\n\n## Other <a href=\"#other\" id=\"other\"></a>\n\nSubBridge's SygmaBridge in mantained by Phala team and Sygma team together. The substrate side is exist on Phala network, the smart contract on EVM side is deployed by Sygma team and the liquidity is maintained by both Phala team and Sygma team through multi-sig account.\n\nSubBridge\u2019s ChainBridge cross-chain bridge module is maintained and developed by the Phala team and is responsible for running three Relayers. The Relayer of the ChainBridge cross-chain bridge constructs the captured origin chain cross-chain transaction into a proposal, and then the three relayers vote on the Proposal. After the vote is passed, the proposal will be executed and the assets will be deposited in the user address.\n\nAbout ChainBridge, you can refer to their [websit](https://github.com/ChainSafe/ChainBridge)[e](https://github.com/ChainSafe/ChainBridge).\n\nFor the Phala Ethereum ChainBridge contract, please refer to the source code on [github](https://github.com/Phala-Network/chainbridge-solidity/tree/phala-bridge).\n\n## Code Auditing <a href=\"#code-auditing\" id=\"code-auditing\"></a>\n\nThe bridges currently integrated by SubBridge include 3 implementations, XCM, SygmaBridge, and ChainBridge.\n\nXCM is a cross-chain message protocol implemented by Parity Tech in the two networks of Polkadot and Kusama. Its code has been audited by a third-party audit firm hired by Parity.", "mimetype": "text/plain", "start_char_idx": 11548, "end_char_idx": 13559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d83ea38d-06d0-4b58-af2d-211a7768db22": {"__data__": {"id_": "d83ea38d-06d0-4b58-af2d-211a7768db22", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d876eee2-96f4-46f3-9de1-e2610e95bdce", "node_type": "1", "metadata": {}, "hash": "fcb336e44169947fe4a7dd0d61a8aa08a3a9c65bca5ae35ab1bc951f84f91828", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "607b9b7b-eed0-445a-a31e-3d4a45b9f106", "node_type": "1", "metadata": {}, "hash": "615a9851c6ea32fdfab558258ef9e1468877d7f86f8058593f593ec0fd1a71d7", "class_name": "RelatedNodeInfo"}}, "text": "The audit report on XCM V2 (the current version of XCM used by SubBridge) can be found [here](https://blog.quarkslab.com/resources/2022-02-27-xcmv2-audit/21-12-908-REP.pdf)\n\nAs for SygmaBridge, both the solidity smart contract and substrate pallet are get audited, the audit report can be found [here](https://github.com/sygmaprotocol/sygma-relayer/tree/main/audits)\n\nEarlier 2022, we deployed ChainBridge\u2019s Solidity contract on Ethereum. The contract info can be found [here](https://etherscan.io/address/0x8F92e7353b180937895E0C5937d616E8ea1A2Bb9). Recently we migrated the old contract to the new deploy one `0x8F92e7353b180937895E0C5937d616E8ea1A2Bb9`. Up to now, the contract has been running safely for nearly a year, and the contract has also been audited by Certik, a third-party auditor hired by Phala.", "mimetype": "text/plain", "start_char_idx": 13560, "end_char_idx": 14371, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "607b9b7b-eed0-445a-a31e-3d4a45b9f106": {"__data__": {"id_": "607b9b7b-eed0-445a-a31e-3d4a45b9f106", "embedding": null, "metadata": {"file_path": "./phala_dist/technical-details.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e7aa240-6763-4c31-a92f-0930394eaf74", "node_type": "4", "metadata": {}, "hash": "1ad19bd430ad4a998f415edc5a6aa9c68fe854d74445c06ba903331a35646b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d83ea38d-06d0-4b58-af2d-211a7768db22", "node_type": "1", "metadata": {}, "hash": "dd677102cf33da968bc52226e0f67d32d2c86db4f0484e969716ad4259a9500f", "class_name": "RelatedNodeInfo"}}, "text": "The detailed audit report can be found [here](https://www.certik.com/projects/phalanetwork)\n\n### Reference <a href=\"#reference\" id=\"reference\"></a>\n\n* XCM format: [https://github.com/paritytech/xcm-format](https://github.com/paritytech/xcm-format)\n* MultiAsset definition: [https://github.com/paritytech/polkadot/blob/master/xcm/src/v1/multiasset.rs](https://github.com/paritytech/polkadot/blob/master/xcm/src/v1/multiasset.rs)\n* MultiLocation definition: [https://github.com/paritytech/polkadot/blob/master/xcm/src/v1/multilocation.rs](https://github.com/paritytech/polkadot/blob/master/xcm/src/v1/multilocation.rs)\n* Phala ChainBridge Solidity contract: [https://github.com/Phala-Network/chainbridge-solidity/tree/phala-bridge](https://github.com/Phala-Network/chainbridge-solidity/tree/phala-bridge)\n* Pallet-assets implementation: [https://github.com/paritytech/substrate/tree/master/frame/assets](https://github.com/paritytech/substrate/tree/master/frame/assets)\n* Introduction to ChainBridge: [https://chainbridge.chainsafe.io/](https://chainbridge.chainsafe.io/)\n* Introduction to CelerBridge: [https://cbridge-docs.celer.network/](https://cbridge-docs.celer.network/)", "mimetype": "text/plain", "start_char_idx": 14372, "end_char_idx": 15547, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f45c4245-4397-4ce1-88dd-ee6e4a31e2f5": {"__data__": {"id_": "f45c4245-4397-4ce1-88dd-ee6e4a31e2f5", "embedding": null, "metadata": {"file_path": "./phala_dist/estimate-your-reward.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "16aed209-ae14-4ebd-acfa-6db87d421a60", "node_type": "4", "metadata": {}, "hash": "0189f6e513974d59c5a1ac10cb3838e8681be5112935697bc95f3d7a7b39dc71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81307a0f-32a7-4539-b33c-b78503379e52", "node_type": "1", "metadata": {}, "hash": "cfe7dba2fe7f1f1f991bf1a0b2a471350b165822b2eccb540ba13d99eaf00e21", "class_name": "RelatedNodeInfo"}}, "text": "# Estimate Your Reward\n\n## StakePool\u2019s APR <a href=\"#stakepools-apr\" id=\"stakepools-apr\"></a>\n\n$$\nAPR=\\frac{PoolRewardPerHour \\cdot 24\\cdot 365\\cdot(1-TreasuryRatio)\\cdot(1-Commission)}{Delegated}\n$$\n\n* $$PoolRewardPerHour$$ is the theoretical estimation of the number of tokens mined in the next hour based on the status and attributes of the Workers in StakePool;\n* $$TreasuryRatio$$ is a fixed amount of mining rewards that is handed over to the treasury, which remains at 20%;\n* $$Commission$$ is the management fee left to the StakePool\u2019s owner, which is also set by the owner;\n* $$Delegated$$ is the total delegated amount in this StakePool.\n\n## Pool Owner Reward <a href=\"#pool-owner-reward\" id=\"pool-owner-reward\"></a>\n\n$$\nOwner Reward=PoolMined \\cdot (1-TreasuryRatio) \\cdot Commission\n$$\n\n## Delegator Reward <a href=\"#delegator-reward\" id=\"delegator-reward\"></a>\n\n$$\nDelegator Reward = PoolMined \\cdot (1-TreasuryRatio) \\cdot (1-Commission) \\cdot \\frac{UserDelegation}{Delegated}\n$$\n\n* $$UserDelegation$$ is the delegation amount of a Delegator in the StakePool\n\nVaults act in the same role as delegators when Vaults delegate to StakePool. But the Vault owner will charge an additional commission for the management of funds. Click to learn more about [Vault commission](whats-vault.md#how-is-the-vault-owners-reward-calculated).\n\n## Vault\u2019s APY <a href=\"#vaults-apy\" id=\"vaults-apy\"></a>\n\n$$\nVault\u2019s APR=\\frac{Delegations from Vault to StakePool\\cdot StakePool\u2019s APR}{Total delegation in Vault}\n$$\n\n$$\nVault\u2019s APY={(\\frac{Vault\u2019s APR}{365}+1)}^{365} - 1\n$$\n\nAll rewards earned by Vaults are from StakePool delegations. However, we use \u2018APY\u2019 to evaluate the interest accrual in the Vault rather than \u2018APR\u2019 which is used in StakePools.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81307a0f-32a7-4539-b33c-b78503379e52": {"__data__": {"id_": "81307a0f-32a7-4539-b33c-b78503379e52", "embedding": null, "metadata": {"file_path": "./phala_dist/estimate-your-reward.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "16aed209-ae14-4ebd-acfa-6db87d421a60", "node_type": "4", "metadata": {}, "hash": "0189f6e513974d59c5a1ac10cb3838e8681be5112935697bc95f3d7a7b39dc71", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f45c4245-4397-4ce1-88dd-ee6e4a31e2f5", "node_type": "1", "metadata": {}, "hash": "79477a4cd6214ff589504b99b942aff5b4e26d58c7c83b42f16c4fb6d73c9ec0", "class_name": "RelatedNodeInfo"}}, "text": "This was decided for the following reasons:\n\n* Individual StakePool rewards can only increase with the addition of new workers. StakePool rewards are derived from workers, and each worker can only earn a finite amount of income regardless of how much the delegation amount in the StakePool increases. Additional rewards can be earned only when the StakePool owner adds new workers.\n* Vault owners have the ability to freely transfer delegations among different StakePools. A Vault\u2019s delegation rewards are derived from the StakePools it delegates to. If a certain StakePool is producing its maximum reward and doesn\u2019t add more workers, the Vault owner can begin delegating to a new StakePool to continue increasing the rewards that Vault earns.\n* The interest in the Vault delegation is compounded. All delegation rewards in the Vault will remain in StakePools and will be compounded if they\u2019re not withdrawn.\n\n### How these variables affect reward <a href=\"#how-these-variables-affect-reward\" id=\"how-these-variables-affect-reward\"></a>\n\nHuman factors fall into the following categories:\n\n1. _PoolMined_: The better the performance\u2b06 of the workers in the StakePool, the more rewards\u2b06 mined, and the more rewards\u2b06 the delegators get;\n2. _Commission_: The higher the commission\u2b06, the less reward\u2b07 the delegators get;\n3. _Delegated_: The higher the amount of delegation\u2b06 in the StakePool, the less reward\u2b07 the delegators get.\n\nAmong them, the 1st generally does not fluctuate greatly. The 2nd depends on the credit of the owner of the StakePool, and the 3rd may change steadily.", "mimetype": "text/plain", "start_char_idx": 1747, "end_char_idx": 3323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb19153c-e7f9-470a-85f9-844a58ac3f06": {"__data__": {"id_": "fb19153c-e7f9-470a-85f9-844a58ac3f06", "embedding": null, "metadata": {"file_path": "./phala_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67605b52-aa9f-4923-be93-c89a41b9033c", "node_type": "1", "metadata": {}, "hash": "cfe00b3f3cdf3e92be0daae4f0474d88d35a6e8ca67a44361e6d180bc2bc5b29", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Health check\nsidebar_position: 1\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nNethermind has a pre-packed `Nethermind.HealthChecks.dll` plugin that allows you to monitor your Nethermind node better.\nIt leverages the power\nof [AspNetCore.Diagnostics.HealthChecks](https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks). It simply adds\nan`/health`endpoint to the JSON RPC service which can be used to check the Nethermind's _**liveness** -_ verify if the\nnode is **synced** and has **at least one peer.** Useful when you don't want to query the node before it's able to\nprovide you data available only for fully synced nodes like `eth_getBalance`.\n\nThe `Nethermind.HealthChecks.dll`plugin will be automatically loaded on Nethermind start.\n\n## Enabling and configuring Health Checks\n\nThe health checks need to be additionally enabled which can be done either through `--HealthChecks.*` flags or by adding\na `\"HealthChecks\"` section to the config file.&#x20;\n\n``` json title=\"HealthChecks config section example\" \n  \"HealthChecks\": {\n    \"Enabled\": true,\n    \"WebhooksEnabled\": true,\n    \"WebhooksUri\": \"https://slack.webhook\",\n    \"UIEnabled\": true,\n    \"PollingInterval\": 10,\n    \"Slug\": \"/api/health\"\n  }\n```\n\n:::danger\nJSON RPC Service needs to be enabled in order for health checks to work `--JsonRpc.Enabled true`\n:::\n\nEach configuration option is described [here](../fundamentals/configuration#healthchecks).\n\n#### Enabling Health Checks without UI&#x20;\n\n```bash\n./Nethermind.Runner --HealthChecks.Enabled true\n```\n\nThe `health` endpoint is now available at `localhost:8545/health`  by default (if your `--JsonRpc.Port` is `8545`).\nThe `health` endpoint can be configured via `--HealthChecks.Slug` parameter e.g. `--HealthChecks.Slug /api/health`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1868, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67605b52-aa9f-4923-be93-c89a41b9033c": {"__data__": {"id_": "67605b52-aa9f-4923-be93-c89a41b9033c", "embedding": null, "metadata": {"file_path": "./phala_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb19153c-e7f9-470a-85f9-844a58ac3f06", "node_type": "1", "metadata": {}, "hash": "8dc9ae1a7e5858f0beb6cada43ae1f20e0096560f3d9d417b2e77b8bb9b7297a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6c303be-52bd-4f4d-98e2-af6539830b32", "node_type": "1", "metadata": {}, "hash": "c8ab35d15255f7dfe6d12be724f6f3b728c825a45a03b6de4e39f96f1f3c8b22", "class_name": "RelatedNodeInfo"}}, "text": "We\ncan if it is working with `curl`:\n\n```bash\n// Request\ncurl localhost:8545/health\n\n// Example of response for Unhealthy node\n{\"status\":\"Unhealthy\",\"totalDuration\":\"00:00:00.0015582\",\"entries\":{\"node-health\":{\"data\":{},\"description\":\"The node has 0 peers connected\",\"duration\":\"00:00:00.0003881\",\"status\":\"Unhealthy\",\"tags\":[]}}}\n\n// Example of response for Healthy node\n{\"status\":\"Healthy\",\"totalDuration\":\"00:00:00.0015582\",\"entries\":{\"node-health\":{\"data\":{},\"description\":\"The node is now fully synced with a network, number of peers: 99\",\"duration\":\"00:00:00.0003881\",\"status\":\"Healthy\",\"tags\":[]}}}\n```\n\n:::info\n\n* **Unhealthy** returns **503** (Service Unavailable) status code\n:::\n\n:::info\n* **Healthy** returns **200** status code\n:::\n\n#### Enabling Health Checks UI\n\n```bash\n./Nethermind.Runner --HealthChecks.Enabled true --HealthChecks.UIEnabled true\n```\n\nEnabling UI will expose an additional endpoint `/healthchecks-ui`and will allow seeing node's health on a nice UI. To\nview the UI simply go to `http://localhost:8545/healthchecks-ui`.\n\n![Unhealthy status reported on UI page](</img/image(76).png>)\n\n#### Enabling Slack reports\n\nWe may also add Slack Webhook endpoint to which our node's health will be reported. We need to pass\nthe `--HealthChecks.WebhooksEnabled true` and add the `--HealthChecks.WebhooksUri` which can be found in your Slack app\nconfiguration.\n\n```bash\nnethermind --HealthChecks.Enabled true --HealthChecks.UIEnabled true --HealthChecks.WebhooksEnabled true --HealthChecks.WebhooksUri https://hooks.slack.com/\n```\n\nIf your node will be **Unhealthy** you should receive a message similar to this:\n\n![Unhealthy](/img/unhealthy.png)\n\nwith description of why the node is unhealthy, node's name and information about the machine on which the node is\nrunning.\\\nWhen it becomes **Healthy** (**synced** and with **peers**) you should receive:\n\n!", "mimetype": "text/plain", "start_char_idx": 1869, "end_char_idx": 3743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6c303be-52bd-4f4d-98e2-af6539830b32": {"__data__": {"id_": "e6c303be-52bd-4f4d-98e2-af6539830b32", "embedding": null, "metadata": {"file_path": "./phala_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67605b52-aa9f-4923-be93-c89a41b9033c", "node_type": "1", "metadata": {}, "hash": "cfe00b3f3cdf3e92be0daae4f0474d88d35a6e8ca67a44361e6d180bc2bc5b29", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f33421c-5f70-4998-aba0-49ea01702e7f", "node_type": "1", "metadata": {}, "hash": "b1722e20c6eab0d1afcdd15ca0e27e13ef1fbf686f5976254d32089518bb45b8", "class_name": "RelatedNodeInfo"}}, "text": "[Healthy](</img/image(46).png>)\n\n#### Consensus Client health\n\nThis check verifies if the client receives messages from the CL. If you see this warning in your logs, it means that\nthere is something wrong with CL/Nethermind communication. Check more about setting up Nethermind and\nCL [here](../get-started/consensus-clients.md).\n\n```\nNo incoming messages from Consensus Client. Consensus Client is required to sync the node. Please make sure that it's working properly.\n```\n\n:::warning\nNote that Consensus Client is required for normal node operations.\n:::\n\n#### health\\_nodeStatus\n\nHealth checks via JSON RPC requests were introduced in version v.1.10.18. For that,  `HealthChecks.Enabled` should be\nset to true.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\">\n\n\n```\n{ \"jsonrpc\":\"2.0\",\"method\":\"health_nodeStatus\",\"params\":[],\"id\":67 }\n```\n\n</TabItem>\n<TabItem label=\"Response\" value=\"response\">\n\n\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"healthy\": false,\n        \"messages\": [\n            \"Sync degraded\",\n            \"No messages from CL\"\n        ],\n        \"errors\": [\n            \"SyncDegraded\",\n            \"ClUnavailable\"\n        ],\n        \"isSyncing\": true\n    },\n    \"id\": 67\n}\n```\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 3743, "end_char_idx": 4969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f33421c-5f70-4998-aba0-49ea01702e7f": {"__data__": {"id_": "5f33421c-5f70-4998-aba0-49ea01702e7f", "embedding": null, "metadata": {"file_path": "./phala_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6c303be-52bd-4f4d-98e2-af6539830b32", "node_type": "1", "metadata": {}, "hash": "c8ab35d15255f7dfe6d12be724f6f3b728c825a45a03b6de4e39f96f1f3c8b22", "class_name": "RelatedNodeInfo"}}, "text": "#### Monitoring available storage space\n\nFeature which is helping to track free disk space is enabled by default and monitors a drive which has been used to\nconfigure database location. There are two new configuration options available:\n\n* `--HealthChecks.LowStorageSpaceWarningThreshold` - Percentage of free disk space below which a warning will be\n  displayed. If Health Checks UI is enabled, it will also be reported under node's health. Default value is 5 - meaning\n  5% of free disk space.\n* `--HealthChecks.LowStorageSpaceShutdownThreshold` - Percentage of available disk space below which node will shutdown\n  to avoid database corruption. Default value is 1 - meaning 1% of free disk space.\n\n```bash\nnethermind --HealthChecks.LowStorageSpaceWarningThreshold 5 --HealthChecks.LowStorageSpaceShutdownThreshold 1\n```\n\n#### HealthChecks for producing and processing blocks\n\nThere are two fields for HealthChecks config: MaxIntervalWithoutProcessedBlock and MaxIntervalWithoutProducedBlock. The\nnode will return unhealthy status if the interval elapsed without processing or producing a block. Let's use the below\nconfig as an example. If the node doesn't process a block for 15 seconds, we will return unhealthy status. Analogically,\nwe will be waiting 45 seconds for a newly produced block.\n\n``` json title=\"HealthChecks config section example\" \n\n  \"HealthChecks\": {\n    \"Enabled\": true,\n    \"WebhooksEnabled\": true,\n    \"UIEnabled\": true,\n    \"Slug\": \"/api/health\",\n    \"MaxIntervalWithoutProcessedBlock \": 15,\n    \"MaxIntervalWithoutProducedBlock\": 45\n  }\n```\n\nIf those fields are not set in a config, application will try to use them based on seal engine specification. If there\nis infinite time, unhealthy status can still be reported if processing or producing threads stopped.", "mimetype": "text/plain", "start_char_idx": 4972, "end_char_idx": 6760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec472a0e-55c9-4e63-bc5e-fced94decaf1": {"__data__": {"id_": "ec472a0e-55c9-4e63-bc5e-fced94decaf1", "embedding": null, "metadata": {"file_path": "./phala_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa3a23f5-9238-4c4b-b752-79c6e0ca58a7", "node_type": "1", "metadata": {}, "hash": "ff616b034bb490d94a11cb233255c1c391cf5e3bc4560ecd55dd9962216309aa", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Plugins\nsidebar_position: 1\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\nNethermind plugins is a powerful way of extending your local node capabilities.\n\n\\(see also an article\nhere: [https://medium.com/nethermind-eth/writing-your-first-nethermind-plugin-a9e04d81cf59](https://medium.com/nethermind-eth/writing-your-first-nethermind-plugin-a9e04d81cf59)\\)\n\nPlugins that you can write:\n\n| Plugin Type         | What can it be used for?                                                                                                                                                                       |\n|:--------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| RPC                 | Adding additional RPC modules to the client that have full access to the internal Nethermind APIs and can extend capabilities of the node when integrating with your infrastructure / systems. |\n| Block Tree Visitors | Code allowing you to analyze entire block tree from genesis to the head block and execute aggregated calculations and checks.                                                                  |\n| Devp2p              | Allows you to create additional devp2p network protocol for your nodes to communicate over TCP/IP. You can also build custom products that will run attached to Nethermind nodes.              |\n| State Visitors      | Allow you to run aggregated analysis on the entire raw format state \\(or just some accounts storages\\).                                                                                        |\n| Config              | You can add additional configuration categories to our config files and then use them in env variables, json files or command line to configure behaviour of your plugins.                     |\n| TxPool              | TxPool behaviours and listeners.                                                                                                                                                               |\n| Tracers             | Custom, powerful EVM tracers capable of extracting elements of EVM execution in real time.                                                                                                     |\n| CLI                 | Additional modules for Nethermind CLI that can allow you build some quick scratchpad style JavaScript based behaviors.                                                                         |\n\n**Note:** When writing a plugin be carefull about exceptions you throw. Especially if you are hooking up event handlers\non some core objects like BlockProcessor or BlockTree. Those exceptions can bring the node down. This is by design. Its\nresponsibility of plugin writer to correctly handle those exceptions.\n\nHow to build a plugin? We included an example inside the Nethermind.Analytics plugin:\n\n!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa3a23f5-9238-4c4b-b752-79c6e0ca58a7": {"__data__": {"id_": "fa3a23f5-9238-4c4b-b752-79c6e0ca58a7", "embedding": null, "metadata": {"file_path": "./phala_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec472a0e-55c9-4e63-bc5e-fced94decaf1", "node_type": "1", "metadata": {}, "hash": "c74c9426f3ad1aa5c319de328a29eefc438f6621cb8c507399d28f2d6356ee22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe6117fd-00dd-4c97-8d83-32f3a352d108", "node_type": "1", "metadata": {}, "hash": "6493ab4ee8d48147d44b2161c958f8c4371a0b90f895efd1d68076a863885fb6", "class_name": "RelatedNodeInfo"}}, "text": "[](/img/image(133).png)\n\n## RPC Plugin example:\n\n```csharp\n    [RpcModule(ModuleType.Clique)]\n    public interface IAnalyticsModule : IModule\n    {\n        [JsonRpcMethod(Description = \"Retrieves ETH supply counted from state.\", IsImplemented = true)]\n        ResultWrapper<UInt256> analytics_verifySupply();\n\n        [JsonRpcMethod(Description = \"Retrieves ETH supply counted from rewards.\", IsImplemented = true)]\n        ResultWrapper<UInt256> analytics_verifyRewards();\n    }\n```\n\n## CLI Plugin example:\n\n```csharp\n[CliModule(\"analytics\")]\npublic class AnalyticsCliModule : CliModuleBase\n{\n    [CliFunction(\"analytics\", \"verifySupply\")]\n    public string VerifySupply()\n    {\n        return NodeManager.Post<string>(\"analytics_verifySupply\").Result;\n    }\n\n    [CliFunction(\"analytics\", \"verifyRewards\")]\n    public string VerifyRewards()\n    {\n        return NodeManager.Post<string>(\"analytics_verifyRewards\").Result;\n    }\n\n    public AnalyticsCliModule(ICliEngine cliEngine, INodeManager nodeManager)\n        : base(cliEngine, nodeManager) { }\n}\n```\n\n## Block Tree Visitor Plugin example:\n\n```csharp\n    public class RewardsVerifier : IBlockTreeVisitor\n    {\n        private ILogger _logger;\n        public bool PreventsAcceptingNewBlocks => true;\n        public long StartLevelInclusive => 0;\n        public long EndLevelExclusive { get; }\n\n        private UInt256 _genesisAllocations = UInt256.Parse(\"72009990499480000000000000\");\n        private UInt256 _uncles;\n\n        public UInt256 BlockRewards { get; private set; }\n\n        public RewardsVerifier(ILogManager logManager, long endLevelExclusive)\n        {\n            _logger = logManager.GetClassLogger();\n            EndLevelExclusive = endLevelExclusive;\n            BlockRewards = _genesisAllocations;\n        }\n\n        private RewardCalculator _rewardCalculator = new RewardCalculator(MainnetSpecProvider.Instance);\n\n        public Task<BlockVisitOutcome> VisitBlock(Block block, CancellationToken cancellationToken)\n        {\n            BlockReward[] rewards = _rewardCalculator.CalculateRewards(block);\n            for (int i = 0; i < rewards.Length; i++)\n            {\n                if (rewards[i].RewardType == BlockRewardType.", "mimetype": "text/plain", "start_char_idx": 2992, "end_char_idx": 5199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe6117fd-00dd-4c97-8d83-32f3a352d108": {"__data__": {"id_": "fe6117fd-00dd-4c97-8d83-32f3a352d108", "embedding": null, "metadata": {"file_path": "./phala_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa3a23f5-9238-4c4b-b752-79c6e0ca58a7", "node_type": "1", "metadata": {}, "hash": "ff616b034bb490d94a11cb233255c1c391cf5e3bc4560ecd55dd9962216309aa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec00f952-98ec-4524-90e5-78ed5f277fae", "node_type": "1", "metadata": {}, "hash": "67d994c57e12f2476b3c73389cd7304c6cad900eb18b7d240b9a31c9dea73a5a", "class_name": "RelatedNodeInfo"}}, "text": "Uncle)\n                {\n                    _uncles += rewards[i].Value;\n                }\n                else\n                {\n                    BlockRewards += rewards[i].Value;\n                }\n            }\n\n            _logger.Info($\"Visiting block {block.Number}, total supply is (genesis + miner rewards + uncle rewards) | {_genesisAllocations} + {BlockRewards} + {_uncles}\");\n            return Task.FromResult(BlockVisitOutcome.None);\n        }\n\n        public Task<LevelVisitOutcome> VisitLevelStart(ChainLevelInfo chainLevelInfo, CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);\n\n        public Task<bool> VisitMissing(Keccak hash, CancellationToken cancellationToken)\n            => Task.FromResult(true);\n\n        public Task<HeaderVisitOutcome> VisitHeader(BlockHeader header, CancellationToken cancellationToken)\n            => Task.FromResult(HeaderVisitOutcome.None);\n\n        public Task<LevelVisitOutcome> VisitLevelEnd(CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);\n    }\n```\n\n## Config plugin example:\n\n```csharp\npublic class AnalyticsConfig : IAnalyticsConfig\n{\n    public bool PluginsEnabled { get; set; }\n    public bool StreamTransactions { get; set; }\n    public bool StreamBlocks { get; set; }\n    public bool LogPublishedData { get; set; }\n}\n```\n\n## State Tree Visitor example:\n\n```csharp\npublic class SupplyVerifier : ITreeVisitor\n{\n    private readonly ILogger _logger;\n    private HashSet<Keccak> _ignoreThisOne = new HashSet<Keccak>();\n    private int _accountsVisited;\n    private int _nodesVisited;\n\n    public SupplyVerifier(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public UInt256 Balance { get; set; } = UInt256.Zero;\n\n    public bool ShouldVisit(Keccak nextNode)\n    {\n        if (_ignoreThisOne.Count > 16)\n        {\n            _logger.Warn($\"Ignore count leak -> {_ignoreThisOne.Count}\");\n        }\n\n        if (_ignoreThisOne.Contains(nextNode))\n        {\n            _ignoreThisOne.Remove(nextNode);\n            return false;\n        }\n\n        return true;\n    }\n\n    public void VisitTree(Keccak rootHash,", "mimetype": "text/plain", "start_char_idx": 5199, "end_char_idx": 7362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec00f952-98ec-4524-90e5-78ed5f277fae": {"__data__": {"id_": "ec00f952-98ec-4524-90e5-78ed5f277fae", "embedding": null, "metadata": {"file_path": "./phala_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe6117fd-00dd-4c97-8d83-32f3a352d108", "node_type": "1", "metadata": {}, "hash": "6493ab4ee8d48147d44b2161c958f8c4371a0b90f895efd1d68076a863885fb6", "class_name": "RelatedNodeInfo"}}, "text": "TrieVisitContext trieVisitContext)\n    {\n    }\n\n    public void VisitMissingNode(Keccak nodeHash, TrieVisitContext trieVisitContext)\n    {\n        _logger.Warn($\"Missing node {nodeHash}\");\n    }\n\n    public void VisitBranch(TrieNode node, TrieVisitContext trieVisitContext)\n    {\n        _logger.Info($\"Balance after visiting {_accountsVisited} accounts and {_nodesVisited} nodes: {Balance}\");\n        _nodesVisited++;\n\n        if (trieVisitContext.IsStorage)\n        {\n            for (int i = 0; i < 16; i++)\n            {\n                Keccak childHash = node.GetChildHash(i);\n                if (childHash != null)\n                {\n                    _ignoreThisOne.Add(childHash);\n                }\n            }\n        }\n    }\n\n    public void VisitExtension(TrieNode node, TrieVisitContext trieVisitContext)\n    {\n        _nodesVisited++;\n        if (trieVisitContext.IsStorage)\n        {\n            _ignoreThisOne.Add(node.GetChildHash(0));\n        }\n    }\n\n    public void VisitLeaf(TrieNode node, TrieVisitContext trieVisitContext, byte[] value = null)\n    {\n        _nodesVisited++;\n\n        if (trieVisitContext.IsStorage)\n        {\n            return;\n        }\n\n        AccountDecoder accountDecoder = new AccountDecoder();\n        Account account = accountDecoder.Decode(node.Value.AsRlpStream());\n        Balance += account.Balance;\n        _accountsVisited++;\n\n        _logger.Info($\"Balance after visiting {_accountsVisited} accounts and {_nodesVisited} nodes: {Balance}\");\n    }\n\n    public void VisitCode(Keccak codeHash, TrieVisitContext trieVisitContext)\n    {\n        _nodesVisited++;\n    }\n}\n```", "mimetype": "text/plain", "start_char_idx": 7363, "end_char_idx": 8988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a408983-2f71-4271-b19b-d6af44a83666": {"__data__": {"id_": "6a408983-2f71-4271-b19b-d6af44a83666", "embedding": null, "metadata": {"file_path": "./phala_dist/security.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "27ae54aa-ccef-4038-b7f3-8e2fc06af1aa", "node_type": "4", "metadata": {}, "hash": "72180a8070cb40183a7a39d2808f35d5a7dfa440f8df2ed6a7ed1a0cac7b88d9", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Security\nsidebar_position: 3\n---\n\n## General security considerations\n\n:::tip\nAlthough Nethermind is thoroughly tested, the more popular it becomes, the more likely it will be a target of client-specific attacks. Generally, we recommend you always consider running backup client nodes from another developer for any critical operations.\n:::\n\n:::warning\nEnable only the [JSON-RPC namespaces](../interacting/json-rpc-server.md) you absolutely need. This is particularly important for namespaces like `admin` and `debug`, as they can be exploited to get elevated access to your node or for DOS attacks.\n:::\n\n:::danger\nThe private key the node id is derived from is stored on the disk as plaintext.\n:::\n\n## Networking security\n\nThese rules are **highly recommended** to be applied to your firewall:\n\n- Block all traffic to the port `8545`, or whatever port is defined for JSON-RPC interface, except for traffic from explicitly defined trusted sources.\n- Allow traffic to the TCP port `30303` or whatever port is defined for P2P communication. This allows the node to connect to peers.\n- Allow traffic to the UDP port `30303` or whatever port ia defined for P2P communication. This allows node discovery.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d49133dc-d7a8-43b0-bb7d-b593d238304a": {"__data__": {"id_": "d49133dc-d7a8-43b0-bb7d-b593d238304a", "embedding": null, "metadata": {"file_path": "./phala_dist/invoke-other-agents.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d47e6453-a474-46e5-a63f-0f7eb777221e", "node_type": "4", "metadata": {}, "hash": "4c9c49723593d414cdb31ba4e6b7680b99f12266514ba9aa6484118069191fb6", "class_name": "RelatedNodeInfo"}}, "text": "# Invoke Other Agents\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 113, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d53184b-8a44-4b35-8183-478e529b1c6e": {"__data__": {"id_": "9d53184b-8a44-4b35-8183-478e529b1c6e", "embedding": null, "metadata": {"file_path": "./phala_dist/get-an-api-key-for-the-graph.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "71600ebf-0b95-4bca-85b0-3a80708bc817", "node_type": "4", "metadata": {}, "hash": "a3a8b6fe9e6cdb7fab2e7515de794cba85bdaa5c060d04d627da0ddd2280e545", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udddd\ufe0f Get an API Key for The Graph\n\nTo acquire an API Key from the graph, you will need to connect your wallet to [The Graph Studio Web UI](https://bit.ly/subgraph-api-key).\n\nYou'll see a tab named API Keys where you will generate or find your existing API Keys.\n\n<figure><img src=\"../../../../.gitbook/assets/Screenshot 2023-12-12 at 14.57.36.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d715c2b7-6596-4de4-bb6e-59d5c26f3bed": {"__data__": {"id_": "d715c2b7-6596-4de4-bb6e-59d5c26f3bed", "embedding": null, "metadata": {"file_path": "./phala_dist/next-step.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ff6f1298-0577-4eee-b3d4-da4cac731036", "node_type": "4", "metadata": {}, "hash": "dcca686287d426e5fb6d58b0b17fff13b883bc3f1ca7c4172e1f7dc3aedfb031", "class_name": "RelatedNodeInfo"}}, "text": "# Next Step\n\nNow you have experienced the deployment of your first Phat Contract and invoked it on the serverless Phala computing cloud.\n\nYour next step can be:\n\n* Begin with [stateless applications](build-on-phat-contract/build-stateless-backend.md) and learn how to use Phat Contract\u2019s unique capabilities like\n  * send HTTP requests;\n  * handle users' requests with no gas fee and low latency;\n* Learn where to [store your contract states](build-on-phat-contract/store-contract-states.md) including\n  * store contract states on-chain;\n  * store your data in decentralized storage;\n  * use local memory to cache the data;\n* Learn about the [infrastructure](../../../developers/getting-started/broken-reference/) to know where your contract is deployed and how your privacy is protected.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f222f363-65f4-4090-8425-13d2c1eb91bb": {"__data__": {"id_": "f222f363-65f4-4090-8425-13d2c1eb91bb", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration-migrate-from-prbv2-to-v3.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f924bc4d-7935-4c7d-8d7c-6d68528540e3", "node_type": "4", "metadata": {}, "hash": "7ee8290f9e1aed257186f0ce8acd30c8ae469613887045cbe2b7a7f00ccdd25d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4f473d1-6f3c-4d16-a18c-bdd802111e69", "node_type": "1", "metadata": {}, "hash": "cb0f77f1fc8bfdbf8d88339061477e250fc9384c9ea1d53ac165a1b7bf4975ca", "class_name": "RelatedNodeInfo"}}, "text": "# Configuration migrate from PRBv2 to v3\n\nThis guide will show you how to migrate a PRBv2 deployment to PRBv3 using Docker Compose.\n\n### Deploy PRBv3\n\nFirst, we should create a clean PRBv3 deployment by referring to this page: [PRBv3 Deployment Guide](../run-workers-on-phala/prbv3-deployment.md)&#x20;\n\nMake sure it's running and the `wm` should be running and listening on port 3001 by default.\n\n### Update PRBv2 docker image\n\nCheck your `.yml` file of PRBv2 and set the docker image of `lifecycle` component to `phalanetwork/prb:git-current-v2` to receive the bundled migration script.\n\nIn the `lifecycle` , the component\u2019s docker-compose configuration file should be like:\n\n```yaml\nlifecycle:\n    network_mode: host\n    image: phalanetwork/prb:git-current-v2\n\t\t# leave other things as is\n```\n\nThen run `sudo docker compose pull`.\n\nYour will see the `lifecycle should pull a new image and restart.`\n\n### Run the migration script\n\nIn the docker-compose folder of PRBv2's `lifecycle` component, run:\n\n```bash\ndocker compose down\n# Change PRB3_API_ENDPOINT to your actual endpoint of prb3-wm\ndocker compose run -e \"PRB3_API_ENDPOINT=http://127.0.0.1:3001\" --entrypoint \"yarn migrate_to_prb3\" lifecycle\n```\n\nTo stop the PRBv2 and to run the migration script.\n\n> There you should use the same endpoint of what you wrote in wm.yml to replace the \\`http://127.0.0.1:3001\\`.\n\nNow the migration is done, click `Restart All`  button on the Worker Status page of the monitor, then wait for 15 seconds for the worker's beginning to start.\n\n<figure><img src=\"../../.gitbook/assets/image (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Limitations of Migration\n\n#### Duplicated worker name\n\nBefore Migration, you must ensure that there can be no duplicate items in the names of the pools and workers. Includes but is not limited to worker names being equal to pool names.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1868, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4f473d1-6f3c-4d16-a18c-bdd802111e69": {"__data__": {"id_": "a4f473d1-6f3c-4d16-a18c-bdd802111e69", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration-migrate-from-prbv2-to-v3.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f924bc4d-7935-4c7d-8d7c-6d68528540e3", "node_type": "4", "metadata": {}, "hash": "7ee8290f9e1aed257186f0ce8acd30c8ae469613887045cbe2b7a7f00ccdd25d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f222f363-65f4-4090-8425-13d2c1eb91bb", "node_type": "1", "metadata": {}, "hash": "4453e0df84495ce7c9d70f6c2a2c9f7021a9beac8a731a4a46fde3e458f6c306", "class_name": "RelatedNodeInfo"}}, "text": "#### PID #0 error\n\nPRBv2 does not support PID #0, but PRBv3 supports it.&#x20;\n\nThis makes the migration fail if you want to migrate PID #0 from PRBv2 to PRBv3.\n\n#### Database conflicts\n\nIf your PRBv3 is running and migration from PRBv2 is also necessary. Before your migration, check it to avoid the 2 limitations above.&#x20;\n\nIf your PRBv3 is brand new but may have some test data or you failed to migrate before, the previous test data or half-imported dirty data will result in poor synchronization results. Therefore, you need to:\n\n* First, stop PRBv3 by `sudo docker compose down`\n* Delete the `inv` and `po` folders.\n* Start the normal synchronization process from the start of this article.", "mimetype": "text/plain", "start_char_idx": 1870, "end_char_idx": 2569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d87a0cdf-6892-4488-8ae5-e7edacfd8391": {"__data__": {"id_": "d87a0cdf-6892-4488-8ae5-e7edacfd8391", "embedding": null, "metadata": {"file_path": "./phala_dist/custom-analytic-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "864465e1-26e6-487e-bb9a-28c3c7faeaaf", "node_type": "4", "metadata": {}, "hash": "a9c92b808f68ec7e4c57bb1a348c89a4d774a52a9a4b643fb5d3354bba859977", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "77f86f2a-f846-4494-b4cb-d235b754b182", "node_type": "1", "metadata": {}, "hash": "6a6b8542c94dbd8b1450345a39d9722255b9597316d860b0995d9041f94c186d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Custom analytic tools\nsidebar_position: 2\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\nCheck plugins for some easy addition of analytical tools\n\n:::info\n[Learn more about Plugins](plugins.md)\n:::\n\nYou can also read more about some useful interfaces below:\n\nThere are multiple extension points where you can add custom analytics to your Nethermind node if you know some C#.\nBelow you will find an example of using two very useful interfaces - `IBlockVisitor` and `ITreeVisitor`.\n\nJust to execute the code I have added one new initialization step that invokes two custom verifiers that I have used for\ncalculating total supply in two different ways - by calculating mining rewards and by summing up all account balances:\n\n```\n    [RunnerStepDependencies(typeof(ReviewBlockTree))]\n    public class RunCustomTools : IStep\n    {\n        private readonly EthereumRunnerContext _context;\n\n        public RunCustomTools(EthereumRunnerContext context)\n        {\n            _context = context;\n        }\n\n        public Task Execute(CancellationToken cancellationToken)\n        {\n            ILogger logger = _context.LogManager.GetClassLogger();\n            IInitConfig initConfig = _context.Config<IInitConfig>();\n\n            switch (initConfig.DiagnosticMode)\n            {\n                case DiagnosticMode.VerifySupply:\n                {\n                    logger.Info(\"Genesis supply:\");\n                    SupplyVerifier supplyVerifier = new SupplyVerifier(logger);\n                    StateDb stateDb = new StateDb(_context.DbProvider.StateDb.Innermost);\n                    StateDb codeDb = new StateDb(_context.DbProvider.StateDb.Innermost);\n                    StateReader stateReader = new StateReader(stateDb, codeDb, _context.LogManager);\n                    stateReader.RunTreeVisitor(supplyVerifier, _context.BlockTree!.Genesis.StateRoot);\n\n                    Block head = _context.BlockTree!.Head;\n                    logger.Info($\"Head ({head.Number}) block supply:\");\n                    supplyVerifier = new SupplyVerifier(logger);\n                    stateReader.RunTreeVisitor(supplyVerifier, head.StateRoot);\n                    break;\n                }\n                case DiagnosticMode.VerifyRewards:\n                    _context.BlockTree!.Accept(new RewardsVerifier(_context.LogManager), cancellationToken);\n                    break;\n            }\n\n            return Task.CompletedTask;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77f86f2a-f846-4494-b4cb-d235b754b182": {"__data__": {"id_": "77f86f2a-f846-4494-b4cb-d235b754b182", "embedding": null, "metadata": {"file_path": "./phala_dist/custom-analytic-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "864465e1-26e6-487e-bb9a-28c3c7faeaaf", "node_type": "4", "metadata": {}, "hash": "a9c92b808f68ec7e4c57bb1a348c89a4d774a52a9a4b643fb5d3354bba859977", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d87a0cdf-6892-4488-8ae5-e7edacfd8391", "node_type": "1", "metadata": {}, "hash": "73ed9c36e5d9d2dd2fb99ae6e2e3307447d55a59f12411df756b6cf6fe12d07e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5fa8520c-6322-4668-a5cf-e00631a15d25", "node_type": "1", "metadata": {}, "hash": "6212fc1ecbfeb43779209a61c524db2ec37b900ca36917563fb7f2399ebcc470", "class_name": "RelatedNodeInfo"}}, "text": "}\n    }\n```\n\nBelow you will see an example of using ITreeVisitor that allows to check all the blocks, including some of the discarded\nbranches if you wish so:\n\n```\n    public class RewardsVerifier : IBlockTreeVisitor\n    {\n        private ILogger _logger;\n        public bool PreventsAcceptingNewBlocks => true;\n        public long StartLevelInclusive => 0;\n        public long EndLevelExclusive => 10618000;\n\n        private UInt256 _genesisAllocations = UInt256.Parse(\"72009990499480000000000000\");\n        private UInt256 _uncles;\n        private UInt256 _blockRewards;\n\n        public RewardsVerifier(ILogManager logManager)\n        {\n            _logger = logManager.GetClassLogger();\n        }\n\n        private RewardCalculator _rewardCalculator = new RewardCalculator(MainnetSpecProvider.Instance);\n\n        public Task<BlockVisitOutcome> VisitBlock(Block block, CancellationToken cancellationToken)\n        {\n            BlockReward[] rewards = _rewardCalculator.CalculateRewards(block);\n            for (int i = 0; i < rewards.Length; i++)\n            {\n                if (rewards[i].RewardType == BlockRewardType.Uncle)\n                {\n                    _uncles += rewards[i].Value;\n                }\n                else\n                {\n                    _blockRewards += rewards[i].Value;\n                }\n            }\n\n            _logger.Info($\"Visiting block {block.Number}, total supply is (genesis + miner rewards + uncle rewards) | {_genesisAllocations} + {_blockRewards} + {_uncles}\");\n            return Task.FromResult(BlockVisitOutcome.None);\n        }\n\n        public Task<LevelVisitOutcome> VisitLevelStart(ChainLevelInfo chainLevelInfo, CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);\n\n        public Task<bool> VisitMissing(Keccak hash, CancellationToken cancellationToken)\n            => Task.FromResult(true);\n\n        public Task<bool> VisitHeader(BlockHeader header, CancellationToken cancellationToken)\n            => Task.FromResult(true);\n\n        public Task<LevelVisitOutcome> VisitLevelEnd(CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);", "mimetype": "text/plain", "start_char_idx": 2460, "end_char_idx": 4634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fa8520c-6322-4668-a5cf-e00631a15d25": {"__data__": {"id_": "5fa8520c-6322-4668-a5cf-e00631a15d25", "embedding": null, "metadata": {"file_path": "./phala_dist/custom-analytic-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "864465e1-26e6-487e-bb9a-28c3c7faeaaf", "node_type": "4", "metadata": {}, "hash": "a9c92b808f68ec7e4c57bb1a348c89a4d774a52a9a4b643fb5d3354bba859977", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "77f86f2a-f846-4494-b4cb-d235b754b182", "node_type": "1", "metadata": {}, "hash": "6a6b8542c94dbd8b1450345a39d9722255b9597316d860b0995d9041f94c186d", "class_name": "RelatedNodeInfo"}}, "text": "}\n```\n\nAnd here you will find an example of a tree visitor that sums up all the account balances:\n\n```\n    public class SupplyVerifier : ITreeVisitor\n    {\n        private readonly ILogger _logger;\n        private UInt256 _balance = UInt256.Zero;\n        private int _accountsVisited;\n\n        public SupplyVerifier(ILogger logger)\n        {\n            _logger = logger;\n        }\n\n        public bool ShouldVisit(Keccak nextNode) { return true; }\n\n        public void VisitTree(Keccak rootHash, TrieVisitContext trieVisitContext) { }\n\n        public void VisitMissingNode(Keccak nodeHash, TrieVisitContext trieVisitContext) { }\n\n        public void VisitBranch(TrieNode node, TrieVisitContext trieVisitContext) { }\n\n        public void VisitExtension(TrieNode node, TrieVisitContext trieVisitContext) { }\n\n        public void VisitLeaf(TrieNode node, TrieVisitContext trieVisitContext, byte[] value = null)\n        {\n            if (trieVisitContext.IsStorage)\n            {\n                return;\n            }\n\n            AccountDecoder accountDecoder = new AccountDecoder();\n            Account account = accountDecoder.Decode(node.Value.AsRlpStream());\n            _balance += account.Balance;\n            _accountsVisited++;\n\n            _logger.Info($\"Balance after visiting {_accountsVisited}: {_balance}\");\n        }\n\n        public void VisitCode(Keccak codeHash, TrieVisitContext trieVisitContext) { }\n    }\n```", "mimetype": "text/plain", "start_char_idx": 4639, "end_char_idx": 6064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e457cf0-02c8-4e7c-9ffc-d455591969fc": {"__data__": {"id_": "7e457cf0-02c8-4e7c-9ffc-d455591969fc", "embedding": null, "metadata": {"file_path": "./phala_dist/generate-test-account.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "57b167ae-5dd1-4260-b054-6b44b4c7c3d9", "node_type": "4", "metadata": {}, "hash": "bdcddd6a65bf3dd1c4cfbcfa6cbebfdf2587e84da3cd4540e7e561b482e50353", "class_name": "RelatedNodeInfo"}}, "text": "# Generate Test Account\n\nTo deploy your contract to any testnet, you will first need to\n\n* generate your own test account;\n* transfer some test tokens to it to ensure you can pay for the deployment transaction fee.\n\nIn the following tutorial, we use the [Polkadot.js extension](https://polkadot.js.org/extension/) as the default wallet. Other wallets are available here.\n\n### Creating a Test Account with Polkadot.js <a href=\"#create-test-account-with-polkadotjs\" id=\"create-test-account-with-polkadotjs\"></a>\n\n> Never use your personal accounts for testing in case of unexpected financial losses.\n\n1. Install [Polkadot.js extension](https://polkadot.js.org/extension/);\n2. Click on the Polkadot.js extension;\n3.  Click \u201c+\u201d, and choose \u201cCreate new account\u201d;\\\\\n\n    <figure><img src=\"../../../.gitbook/assets/new-account.png\" alt=\"\"><figcaption></figcaption></figure>\n4. Keep mnemonic seed safe;\n5.  Under Network, select \u201cAllow use on any chain\u201d, submit a name and password, and click \u201cAdd the account with the generated seed\u201d.\\\\\n\n    <figure><img src=\"../../../.gitbook/assets/choose-network.png\" alt=\"\"><figcaption></figcaption></figure>\n\n> You can refer to the Polkadot.js [official tutorial](https://wiki.polkadot.network/docs/learn-account-generation#polkadotjs-browser-extension) for more usages.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1302, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06f1aebc-8da3-4389-aaf4-309e1a776dd0": {"__data__": {"id_": "06f1aebc-8da3-4389-aaf4-309e1a776dd0", "embedding": null, "metadata": {"file_path": "./phala_dist/README.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b643caca-fdbe-4063-8357-9e6824b2a37a", "node_type": "4", "metadata": {}, "hash": "3dfd6668cd5a6cd16eb0938d9d1cdaab5ddb72661b4a22fb0c412e5e4bd570e5", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udc50 Delegation\n\n## Start Delegating <a href=\"#start-delegating\" id=\"start-delegating\"></a>\n\nAs soon as you have:\n\n* [x] PHA Tokens\n* [x] Khala Account\n* [x] [Polkadot{.js}](https://polkadot.js.org/extension/)<img src=\"../../../.gitbook/assets/polkadot-js.svg\" alt=\"\" data-size=\"line\">Extension\n\nYou are ready to over to the <img src=\"../../../.gitbook/assets/phala_logo.png\" alt=\"\" data-size=\"line\">[Phala App](https://app.phala.network/) & start to \ud83d\udc49 [Delegate](https://app.phala.network/delegate/).\n\n> If you have issues Delegating, feel free to check our [detailed guide](delegate-to-stakepool.md).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21b0c76c-2e28-4f3b-9215-8565792c181e": {"__data__": {"id_": "21b0c76c-2e28-4f3b-9215-8565792c181e", "embedding": null, "metadata": {"file_path": "./phala_dist/system-contract-and-drivers.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "111651e9-6874-4d8f-92b1-5250950751ab", "node_type": "4", "metadata": {}, "hash": "97bb1f2063410f70390445c3184ac3b63b24458488083bb4a4c181814b52ab29", "class_name": "RelatedNodeInfo"}}, "text": "# System Contract and Drivers\n\n## Introduction <a href=\"#introduction\" id=\"introduction\"></a>\n\nThe system contract is responsible for the access control of each cluster. Only the cluster owner is able to implement and deploy the system contract during the creation of the cluster.\n\nAlso, the enable the flexible management of the future features of Phat Contract, we refer to the design of the Linux kernel and enable cluster owner to dynamically register drivers to system contract to different things. For example, the Phat Contract tokenomics is implemented as a [driver](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink-drivers/tokenomic) so each cluster owner can replace it with his/her own tokenomics in the future.\n\n> This feature is not finalized yet so can be changed any time.\n\n## System Contract Examples <a href=\"#system-contract-examples\" id=\"system-contract-examples\"></a>\n\nCheck our [crates](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink-drivers) for the current implementation of the system contract and drivers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54e115d5-f3a7-43fd-8444-f8867e3dfbec": {"__data__": {"id_": "54e115d5-f3a7-43fd-8444-f8867e3dfbec", "embedding": null, "metadata": {"file_path": "./phala_dist/handling-secrets.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e8c3fb4-14f2-4740-bc7c-f0458b883506", "node_type": "4", "metadata": {}, "hash": "0e4a16deaf7de72175e9c5d92e9bbcb61f14c050209803a88908d6529800db69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73f1ac90-6092-4e31-8a60-74c78e62d30e", "node_type": "1", "metadata": {}, "hash": "9084dc7415da38b0d757af2f5369cacb4e56ca230f7dd4d4413c2402b260d3d5", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: How to set your secrets in core settings for your Phat Contract.\n---\n\n# \ud83e\udd2b Handling Secrets\n\n## Storing Secrets in Your Application: A Step-by-Step Guide\n\nIn the world of software development, it's crucial to keep certain pieces of information, such as API keys, passwords, and other sensitive data, hidden and secure. This is where the concept of `secrets` comes into play. In this guide, we'll walk you through the process of storing secrets in your Phat Contract using the `secrets` parameter in `main(request: HexString, secrets: string)` function.\n\n> **Note**:\\\n> The example provided is a simple example, but the customization of passing secrets and the variable names is solely up to the developer.\n>\n> The `secrets` are passed via end-to-end encrypted communication between the deployer and a secure off-chain worker in a cluster of workers on Phala Network. Security and privacy of the `secrets` are guaranteed by Intel SGX Trusted Execution Environment. To learn more about Phala's decentralized off-chain computation architecture, read our docs [here](https://docs.phala.network/developers/advanced-topics/blockchain-infrastructure).\n\n### Step 1: Passing a JSON String\n\nThe first step in this process involves using the `secrets` parameter. This parameter is designed to accept a string that is in JSON format. JSON, or JavaScript Object Notation, is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.\n\nHere's how you can pass a JSON string using the `secrets` parameter:\n\n```typescript\nlet secrets = JSON.stringify({\n    apiUrl: \"http://myapi.com\",\n    superSecret: \"mySuperSecret\",\n    secretProof: \"mySecretProof\"\n});\n```\n\nIn this example, we're creating a JSON string that contains three properties: `apiUrl`, `superSecret`, and `secretProof`. If you are setting your `secrets` in the Phat Contract 2.0 UI, you will set the `secrets` like this in the \"Settings\" of your deployed Phat Contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1998, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73f1ac90-6092-4e31-8a60-74c78e62d30e": {"__data__": {"id_": "73f1ac90-6092-4e31-8a60-74c78e62d30e", "embedding": null, "metadata": {"file_path": "./phala_dist/handling-secrets.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e8c3fb4-14f2-4740-bc7c-f0458b883506", "node_type": "4", "metadata": {}, "hash": "0e4a16deaf7de72175e9c5d92e9bbcb61f14c050209803a88908d6529800db69", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54e115d5-f3a7-43fd-8444-f8867e3dfbec", "node_type": "1", "metadata": {}, "hash": "ce2b8d3d31789496f523c44e21372e85d19e342dc5aeafec3f6535c19c4cf14a", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/StoreSecrets.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Step 2: Parsing the JSON String\n\nOnce you've passed the JSON string, the next step is to parse it. Parsing is the process of analyzing a string of symbols, either in natural language, computer languages or data structures. In this case, we're parsing the JSON string to store variables for `apiUrl`, `superSecret`, and `secretProof`.\n\nHere's how you can parse the JSON string:\n\n```typescript\nlet parsedSecrets = JSON.parse(secrets);\n```\n\nIn this example, we're using the `JSON.parse()` method to convert the JSON string back into an object, which allows us to store the variables.\n\n### Step 3: Understanding the Variables\n\nNow that we've parsed the JSON string, let's take a closer look at the variables we've stored:\n\n1. **apiUrl**: This variable is used to store the URL of your API. It's where your application will send requests to retrieve or manipulate data.\n2. **superSecret**: This variable is typically used to store a secret key or password. It's crucial to keep this information secure as it can be used to authenticate your application and protect sensitive data.\n3. **secretProof**: This variable is often used as an additional layer of security. It can be used to verify the authenticity of the 'superSecret' variable.\n\n### The Main Function\n\nThe function that brings all these steps together looks like this:\n\n```javascript\nexport default function main(request: HexString, secrets: string): HexString {\n    let parsedSecrets = JSON.parse(secrets);\n    // use parsedSecrets.apiUrl, parsedSecrets.superSecret, parsedSecrets.secretProof\n}\n```\n\nIn this function, we're accepting two parameters: `request` and `secrets`. The `request` parameter is a hexadecimal string, while the `secrets` parameter is a string that we parse into a JSON object. The function then returns a hexadecimal string.\n\nAnd there you have it! You've successfully stored secrets in your application. Remember, keeping your sensitive data secure is crucial in software development, so always make sure to handle your secrets with care.", "mimetype": "text/plain", "start_char_idx": 2000, "end_char_idx": 4129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e469d44-b7c0-4ee3-b937-f88c3116af66": {"__data__": {"id_": "3e469d44-b7c0-4ee3-b937-f88c3116af66", "embedding": null, "metadata": {"file_path": "./phala_dist/lensapi-oracle-agent.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c48226af-dcdc-4d0f-9b61-de4c62f0de7b", "node_type": "4", "metadata": {}, "hash": "1fe9597f1c38707b553a9708a94644cfb4af4b27dd5c81e93f716b75d81805d1", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83c\udf31 LensAPI Oracle Agent\n\n<figure><img src=\"../../.gitbook/assets/LensAPIOracle.jpg\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\nThe LensAPI Oracle connects your smart contract to Lens, one of the most popular Web3 social graphs. It supports customized GraphQL queries to Lens API and allows you to easily process the response data to make them digestible to your smart contract.\n\n### Features and Benefits\n\n* Wide support for consumer smart contracts on all mainstream blockchains\n* **Verifiable and decentralized**: your Oracle is running on decentralized infrastructure that require no operations and can be easily verified\n* **Support private data**: your Oracle state is protected by cryptography and hardware\n* **No extra cost**: the only cost is the gas fee of response data which is sent as a transaction\n* **High frequency**: the request is synced to Oracle within one minute, and the latency of response is only limited by blockchain\u2019s block interval\n\n### Resources\n\n* [**LensAPI Oracle AI Agent Template**](https://github.com/Phala-Network/lensapi-oracle-consumer-contract)\n* [**What is an Oracle**](https://bit.ly/3PE6ymF)\n* [**Technical Design Doc**](https://bit.ly/3ZAzdxE)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a7aac36-7281-412a-9391-3095faa19a5c": {"__data__": {"id_": "8a7aac36-7281-412a-9391-3095faa19a5c", "embedding": null, "metadata": {"file_path": "./phala_dist/join-the-council.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f075429-058c-48a2-9a6d-b39f9249eab9", "node_type": "4", "metadata": {}, "hash": "bb889e289b2cba9fcad1b04feb1f4648a96f304e78dbea2661fb08b920f1045b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ea3c5b6-7866-4ced-95d2-5154e251438e", "node_type": "1", "metadata": {}, "hash": "f3fe99e67217d5b6a793d9f22e5e6d172b17408875c881fce8fb455bf85a84e3", "class_name": "RelatedNodeInfo"}}, "text": "# Join the Council\n\nThe council is an elected body of on-chain accounts that are intended to represent the passive stakeholders of Phala and/or Khala. The council has two major tasks in governance: proposing referenda and vetoing dangerous or malicious referenda. For more information on the council, see the governance page. This guide will walk you through entering your candidacy to the council.\n\n## Submit Candidacy <a href=\"#submit-candidacy\" id=\"submit-candidacy\"></a>\n\nSubmitting your candidacy for the council requires a small bond of PHA / K-PHA. Unless your candidacy wins, the bond will be forfeited. You can receive your bond back if you manually renounce your candidacy before losing. Runners-up are selected after every round and are reserved members in case one of the winners gets forcefully removed.\n\n> Currently the bond for submitting a council candidacy on Phala/Khala is 10 PHA/K-PHA.\n\nIt is a good idea to announce your council intention before submitting your candidacy so that your supporters will know when they can start to vote for you. You can also vote for yourself in case no one else does.\n\nGo to Khala Dashboard and navigate to the \u201cCouncil\u201d tab. Click the button on the right that says \u201cSubmit Candidacy.\u201d\n\n![](https://i.imgur.com/H6UFk1Z.png)\n\nAfter making the transaction, you will see your account appear underneath the row \u201cCandidates.\u201d\n\n![](https://i.imgur.com/wEBQitI.png)\n\nIt is a good idea now to lead by example and give yourself a vote.\n\n## Voting on Candidates <a href=\"#voting-on-candidates\" id=\"voting-on-candidates\"></a>\n\nNext to the button to submit candidacy is another button titled \u201cVote.\u201d You will click this button to make a vote for yourself (optional).\n\n![](https://i.imgur.com/3VT6sK2.png)\n\nThe council uses Phragm\u00e9n approval voting, which is also used in the validator elections. This means that you can choose up to 5 distinct candidates to vote for and your stake will equalize between them. For this guide, choose to approve your own candidacy by clicking on the switch next to your account and changing it to say \u201cAye.\u201d\n\n!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ea3c5b6-7866-4ced-95d2-5154e251438e": {"__data__": {"id_": "8ea3c5b6-7866-4ced-95d2-5154e251438e", "embedding": null, "metadata": {"file_path": "./phala_dist/join-the-council.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f075429-058c-48a2-9a6d-b39f9249eab9", "node_type": "4", "metadata": {}, "hash": "bb889e289b2cba9fcad1b04feb1f4648a96f304e78dbea2661fb08b920f1045b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a7aac36-7281-412a-9391-3095faa19a5c", "node_type": "1", "metadata": {}, "hash": "e7dbc1b86d5e79621c7bc95b13de7c76cf87aa8df43ff5d2f6d017cb1047a81f", "class_name": "RelatedNodeInfo"}}, "text": "[](https://i.imgur.com/mBT7jb1.png)\n\n## Winning <a href=\"#winning\" id=\"winning\"></a>\n\nIf you are one of the lucky ones to win a council election you will see your account move underneath the row \u201cMembers\u201d.\n\n![](https://i.imgur.com/Wp2Zxqn.png)\n\nNow you are able to participate on the council by making motions or voting proposals. To join in on the active discussions, join the [Phala Direction channel](https://forum.phala.network/).", "mimetype": "text/plain", "start_char_idx": 2083, "end_char_idx": 2517, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b606388-b52e-40f1-923d-231f9b979f4a": {"__data__": {"id_": "6b606388-b52e-40f1-923d-231f9b979f4a", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-the-worker.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3620abf0-5332-4971-9fd3-639407477dcc", "node_type": "4", "metadata": {}, "hash": "5c9256b562a0c8f881a439280b1d787a3de49387565b973c7e88262dc34c101e", "class_name": "RelatedNodeInfo"}}, "text": "# Deploy the Worker\n\n## Start Mining\n\n```\nsudo phala start\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 62, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7c94996-62bc-498f-9d11-68eb2086d299": {"__data__": {"id_": "f7c94996-62bc-498f-9d11-68eb2086d299", "embedding": null, "metadata": {"file_path": "./phala_dist/tanssi-dancebox-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "68b89cd8-9859-4e0b-bec8-37ad1d583769", "node_type": "4", "metadata": {}, "hash": "dd3ec3373c0089bc206f53c3fd3c0f14769ca5b25f32da2c3edeb11acdc321e6", "class_name": "RelatedNodeInfo"}}, "text": "# Tanssi Dancebox Testnet\n\nTanssi is an appchain infrastructure protocol that equips developers with a broad set of infrastructure tools and services specifically designed to make appchain deployment swift and effortless.\n\nFind out more about Tanssi Appchains by reading their docs [here](https://docs.tanssi.network/learn/tanssi/overview/).\n\n| Asset Pair  | Contract Address                           |\n| ----------- | ------------------------------------------ |\n| AAVE to USD | 0x2E1640853bB2dD9f47831582665477865F9240DB |\n| BTC to USD  | 0x89BC5048d634859aef743fF2152363c0e83a6a49 |\n| CRV to USD  | 0xf38b25b79A72393Fca2Af88cf948D98c64726273 |\n| DAI to USD  | 0x1f56d8c7D72CE2210Ef340E00119CDac2b05449B |\n| ETH to USD  | 0x739d71fC66397a28B3A3b7d40eeB865CA05f0185 |\n| USDC to USD | 0x4b8331Ce5Ae6cd33bE669c10Ded9AeBA774Bf252 |\n| USDT to USD | 0x5018c16707500D2C89a0446C08f347A024f55AE3 |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba4ca35b-813d-4c0a-8c0d-3337eac19746": {"__data__": {"id_": "ba4ca35b-813d-4c0a-8c0d-3337eac19746", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06429055-282a-4fc3-8f22-dd5ea159ecbc", "node_type": "1", "metadata": {}, "hash": "438946cbbba1f32423a32dd4900536272f7a8abd66fe74a9a7368a67c9d7bcc4", "class_name": "RelatedNodeInfo"}}, "text": "# Khala Treasury\n\n## Current mechanisms <a href=\"#current-mechanisms\" id=\"current-mechanisms\"></a>\n\n### Spending Proposals <a href=\"#spending-proposals\" id=\"spending-proposals\"></a>\n\nThe Treasury is also used to fund spending proposals submitted by community members. These need to be approved by the Council and have the goal of developing ideas that give traction to the network, maintaining infrastructure deployment, security operations, and marketing activities, among others.\n\n### Tipping <a href=\"#tipping\" id=\"tipping\"></a>\n\nTips can be suggested by anyone holding PHA and are endorsed by Council members. Tips do not have any fixed value: The final value is decided based on the median of all tips issued by the councilors.\n\n### Bounty Spending <a href=\"#bounty-spending\" id=\"bounty-spending\"></a>\n\nBounties Spending proposals aim to delegate the curation activity of spending proposals to experts called Curators\n\n## Treasury <a href=\"#treasury\" id=\"treasury\"></a>\n\nThe Treasury is a pot of funds collected through transaction fees, slashing, Secure Worker mining rate (20%) , etc. The funds held in the Treasury can be spent by making a spending proposal that, if approved by the Council, will enter a waiting period before distribution. This waiting period is known as the budget period, and its duration is subject to governance, with the current default set to 1 day. The Treasury attempts to spend as many proposals in the queue as it can without running out of funds.\n\nIf the Treasury ends a budget period without spending all of its funds, it suffers a burn of a percentage of its funds \u2013 thereby causing deflationary pressure. This percentage is currently at 0% on Phala.\n\nWhen a stakeholder wishes to propose a spend from the Treasury, they must reserve a deposit of at least 5% of the proposed spend (see below for variations). This deposit will be slashed if the proposal is rejected, and returned if it is accepted.\n\nProposals may consist of (but are not limited to):\n\n* Infrastructure deployment and continued operation.\n* Network security operations (monitoring services, continuous auditing).\n* Ecosystem provisions (collaborations with friendly chains).\n* Marketing activities (advertising, paid features, collaborations).\n* Community events and outreach (meetups, pizza parties, hackerspaces).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06429055-282a-4fc3-8f22-dd5ea159ecbc": {"__data__": {"id_": "06429055-282a-4fc3-8f22-dd5ea159ecbc", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba4ca35b-813d-4c0a-8c0d-3337eac19746", "node_type": "1", "metadata": {}, "hash": "22eb683f1bb363e4f246d6de66eb9a94d2967768703729f1b2c424e48f19b2ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c688479-c764-4fac-94c4-2c82a9492eb6", "node_type": "1", "metadata": {}, "hash": "6c18374bdaa556d61b1dd95b55094f9cc4cbe5c5a61b905557204b17d6cf0cb7", "class_name": "RelatedNodeInfo"}}, "text": "* Software development (wallets and wallet integration, clients and client upgrades).\n\nThe Treasury is ultimately controlled by the Council, and how the funds will be spent is up to their judgment.\n\nThe Treasury is funded from different sources:\n\n1. Slashing: When a Secure Worker or Gatekeepers is slashed for any reason, the slashed amount is sent to the Treasury with a reward going to the entity that reported the validator (another validator). The reward is taken from the slash amount and varies per offense and number of reporters.\n2. Transaction fees: A portion of each block\u2019s transaction fees goes to the Treasury, with the remainder going to the block author.\n3. 70% of the PHA will be used for Secure Worker Mining, and following the progress of the Khala and Phala networks, 20% of the mining rewards generated by each block will be used to fund treasury.\n\n### Creating a Treasury Proposal <a href=\"#creating-a-treasury-proposal\" id=\"creating-a-treasury-proposal\"></a>\n\nThe proposer has to deposit 5% of the requested amount or 1 PHA (whichever is higher) as an anti-spam measure. This amount is burned if the proposal is rejected, or refunded otherwise. These values are subject to governance so they may change in the future.\n\nPlease note that there is no way for a user to revoke a treasury proposal after it has been submitted. The Council will either accept or reject the proposal, and if the proposal is rejected, the bonded funds are burned.\n\n### Announcing the Proposal <a href=\"#announcing-the-proposal\" id=\"announcing-the-proposal\"></a>\n\nTo minimize storage on chain, proposals don\u2019t contain contextual information. When a user submits a proposal, they will probably need to find an off-chain way to explain the proposal. Most discussion takes place on the following platforms:\n\n* It is recommended that post the contextual information in Phala forum first to explain the details. Those who do not publish the contextual information will not be discussed as serious proposals.\n* Many community members participate in discussion in the [Phala Discord #Proposal channel](https://discord.gg/YsRUMpvvxs) or [Phala Forum](https://forum.phala.network/c/51-category/51).", "mimetype": "text/plain", "start_char_idx": 2321, "end_char_idx": 4507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c688479-c764-4fac-94c4-2c82a9492eb6": {"__data__": {"id_": "2c688479-c764-4fac-94c4-2c82a9492eb6", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06429055-282a-4fc3-8f22-dd5ea159ecbc", "node_type": "1", "metadata": {}, "hash": "438946cbbba1f32423a32dd4900536272f7a8abd66fe74a9a7368a67c9d7bcc4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82383155-362a-49cf-bd3b-ec61d6173156", "node_type": "1", "metadata": {}, "hash": "584dab8f90de3fdc72c02ff7ee2eba2908b48c21b8fb66eb0ee53a59b35bb940", "class_name": "RelatedNodeInfo"}}, "text": "Spreading the word about the proposal\u2019s explanation is ultimately up to the proposer - the recommended way is using official Discord channels like the [Phala Discord #Proposal channel](https://discord.gg/YsRUMpvvxs) .\n\n### Creating the Proposal <a href=\"#creating-the-proposal\" id=\"creating-the-proposal\"></a>\n\nOne way to create the proposal is to use the Polkadot-JS Apps [website](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/explorer). From the website, use either the [extrinsics tab](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/extrinsics) and select the Treasury pallet, then `proposeSpend` and enter the desired amount and recipient:\n\n![](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e93580b2-3f2b-461d-b965-5052b3c289ec/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256\\&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20211012%2Fus-west-2%2Fs3%2Faws4\\_request\\&X-Amz-Date=20211012T151146Z\\&X-Amz-Expires=86400\\&X-Amz-Signature=b45aa607091a5bdc703bd9e282edaf983fcc7134f9db7b4bb0dc7fbaba7d8b55\\&X-Amz-SignedHeaders=host\\&response-content-disposition=filename%20%3D%22Untitled.png%22)\n\nor use the [Treasury tab](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala.api.onfinality.io%2Fpublic-ws#/treasury) and its dedicated Submit Proposal button:\n\n!", "mimetype": "text/plain", "start_char_idx": 4509, "end_char_idx": 5844, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82383155-362a-49cf-bd3b-ec61d6173156": {"__data__": {"id_": "82383155-362a-49cf-bd3b-ec61d6173156", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c688479-c764-4fac-94c4-2c82a9492eb6", "node_type": "1", "metadata": {}, "hash": "6c18374bdaa556d61b1dd95b55094f9cc4cbe5c5a61b905557204b17d6cf0cb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "85e9fc25-0192-486d-8278-9dcd0a2224a0", "node_type": "1", "metadata": {}, "hash": "f9a5c2ff4dee6a72f3d41dfe986ae4e9e2086aa065cd9ccc1ad46652b00bf822", "class_name": "RelatedNodeInfo"}}, "text": "[](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7f02ba48-6e65-40df-9b3a-49e0bb916c58/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256\\&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20211012%2Fus-west-2%2Fs3%2Faws4\\_request\\&X-Amz-Date=20211012T151120Z\\&X-Amz-Expires=86400\\&X-Amz-Signature=ac29c0129134152af20b1bec4cd59012663d9e10b796e00cc63fa9b9d7b32e91\\&X-Amz-SignedHeaders=host\\&response-content-disposition=filename%20%3D%22Untitled.png%22)\n\nThe system will automatically take the required deposit, picking the higher of the two values mentioned [above](../../../pha-token/governance/broken-reference/).\n\nOnce created, your proposal will become visible in the Treasury screen and the Council can start voting on it.\n\nRemember that the proposal has no metadata, so it\u2019s up to the proposer to create a description and purpose that the Council could study and base their votes on.\n\nAt this point, a Council member can create a motion to accept or to reject the treasury proposal. It is possible that one motion to accept and another motion to reject are both created. The proportions to accept and reject Council proposals vary between accept or reject, and possibly depend on which network the Treasury is implemented.\n\nThe threshold for accepting a treasury proposal is at least three-fifths of the Council. On the other hand, the threshold for rejecting a proposal is at least one-half of the Council.\n\n!", "mimetype": "text/plain", "start_char_idx": 5844, "end_char_idx": 7258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85e9fc25-0192-486d-8278-9dcd0a2224a0": {"__data__": {"id_": "85e9fc25-0192-486d-8278-9dcd0a2224a0", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82383155-362a-49cf-bd3b-ec61d6173156", "node_type": "1", "metadata": {}, "hash": "584dab8f90de3fdc72c02ff7ee2eba2908b48c21b8fb66eb0ee53a59b35bb940", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6ea4865-f774-458d-9a60-333bb57aec72", "node_type": "1", "metadata": {}, "hash": "e65726d7630f7444a49443087704d316086ff139635247f193157294f43ac958", "class_name": "RelatedNodeInfo"}}, "text": "[https://wiki.polkadot.network/assets/images/motion-f2fc13da7c5579a8d07062ea229791f6.png](https://wiki.polkadot.network/assets/images/motion-f2fc13da7c5579a8d07062ea229791f6.png)\n\n## Tipping <a href=\"#tipping-1\" id=\"tipping-1\"></a>\n\nNext to the proposals process, a separate system for making tips exists for the Treasury. Tips can be suggested by anyone and are supported by members of the Council. Tips do not have any definite value; the final value of the tip is decided based on the median of all tips issued by the tippers.\n\nCurrently, the tippers are the same as the members of the Council. However, being a tipper is not the direct responsibility of the Council, and at some point the Council and the tippers may be different groups of accounts.\n\nA tip will enter a closing phase when more than a half plus one of the tipping group have endorsed a tip. During that timeframe, the other members of the tipping group can still issue their tips, but do not have to. Once the window closes, anyone can call the `close_tip` extrinsic, and the tip will be paid out.\n\nThere are two types of tips: public and tipper-initiated. With public tips, a small bond is required to place them. This bond depends on the tip message length, and a fixed bond constant defined on chain, currently 1. Public tips carry a finder\u2019s fee of 20% which is paid out from the total amount. Tipper-initiated tips, i.e. tips that a Council member published, do not have a finder\u2019s fee or a bond.\n\nTo better understand the process a tip goes through until it is paid out, let\u2019s consider an example.\n\n### Example <a href=\"#example\" id=\"example\"></a>\n\nBob has done something great for Phala . Alice has noticed this and decides to report Bob as deserving a tip from the Treasury. The Council is composed of three members Charlie, Dave, and Eve.\n\nAlice begins the process by issuing the `report_awesome` extrinsic. This extrinsic requires two arguments, a reason and the address to tip.", "mimetype": "text/plain", "start_char_idx": 7258, "end_char_idx": 9216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6ea4865-f774-458d-9a60-333bb57aec72": {"__data__": {"id_": "e6ea4865-f774-458d-9a60-333bb57aec72", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "85e9fc25-0192-486d-8278-9dcd0a2224a0", "node_type": "1", "metadata": {}, "hash": "f9a5c2ff4dee6a72f3d41dfe986ae4e9e2086aa065cd9ccc1ad46652b00bf822", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "877975f5-2811-4799-ad58-735577b08241", "node_type": "1", "metadata": {}, "hash": "513617fc0f1a33c6fb964f9500c3abc023a8fac4cfdcd6cb089ff53289a681b1", "class_name": "RelatedNodeInfo"}}, "text": "Alice submits Bob\u2019s address with the reason being a UTF-8 encoded URL to a post on [Phala forum](https://forum.phala.network/c/51-category/51) that explains her reasoning for why Bob deserves the tip.\n\nAs mentioned above, Alice must also lock up a deposit for making this report. The deposit is the base deposit as set in the chain\u2019s parameter list plus the additional deposit per byte contained in the reason. This is why Alice submitted a URL as the reason instead of the explanation directly, it was cheaper for her to do so.\n\nFor her trouble, Alice is able to claim the eventual finder\u2019s fee if the tip is approved by the tippers.\n\nSince the tipper group is the same as the Council, the Council must now collectively (but also independently) decide on the value of the tip that Bob deserves.\n\nCharlie, Dave, and Eve all review the report and make tips according to their personal valuation of the benefit Bob has provided for Phala.\n\nCharlie tips 10 PHA . Dave tips 30 PHA . Eve tips 100 PHA.\n\nThe tip could have been closed out with only two of the three tippers. Once more than half of the tippers group have issued tip valuations, the countdown to close the tip will begin. In this case, the third tipper issued their tip before the end of the closing period, so all three were able to make their tip valuations known.\n\nNow the actual tip that will be paid out to Bob is the median of these tips, so Bob will be paid out 30 PHA from the Treasury.\n\nIn order for Bob to be paid his tip, some account must call the `close_tip` extrinsic at the end of the closing period for the tip. This extrinsic may be called by anyone.\n\n## Bounties Spending <a href=\"#bounties-spending\" id=\"bounties-spending\"></a>\n\nThere are practical limits to Council Members curation capabilities when it comes to treasury proposals: Council members likely do not have the expertise to make a proper assessment of the activities described in all proposals. Even if individual Councilors have that expertise, it is highly unlikely that a majority of members are capable in such diverse topics.", "mimetype": "text/plain", "start_char_idx": 9217, "end_char_idx": 11287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "877975f5-2811-4799-ad58-735577b08241": {"__data__": {"id_": "877975f5-2811-4799-ad58-735577b08241", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6ea4865-f774-458d-9a60-333bb57aec72", "node_type": "1", "metadata": {}, "hash": "e65726d7630f7444a49443087704d316086ff139635247f193157294f43ac958", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "de7c8698-b13a-4685-a1b5-9844cd17b1d5", "node_type": "1", "metadata": {}, "hash": "732e54cb6e3b39cbedd3d3c7ec65056cf45e710385848aac91adb3db4e3c8659", "class_name": "RelatedNodeInfo"}}, "text": "Bounties Spending proposals aim to delegate the curation activity of spending proposals to experts called Curators: They can be defined as addresses with agency over a portion of the Treasury with the goal of fixing a bug or vulnerability, developing a strategy, or monitoring a set of tasks related to a specific topic: all for the benefit of the Phala ecosystem.\n\nA proposer can submit a bounty proposal for the Council to pass, with a curator to be defined later, whose background and expertise is such that they are capable of determining when the task is complete. Curators are selected by the Council after the bounty proposal passes, and need to add an upfront payment to take the position. This deposit can be used to punish them if they act maliciously. However, if they are successful in their task of getting someone to complete the bounty work, they will receive their deposit back and part of the bounty reward.\n\nWhen submitting the value of the bounty, the proposer includes a reward for curators willing to invest their time and expertise in the task: this amount is included in the total value of the bounty. In this sense, the curator\u2019s fee can be defined as the result of subtracting the value paid to the bounty reward from the total value of the bounty.\n\nIn general terms, curators are expected to have a well-balanced track record related to the issues the bounty tries to resolve: they should be at least knowledgeable on the topics the bounty touches, and show project management skills or experience. These recommendations ensure an effective use of the mechanism. A Bounty Spending is a reward for a specified body of work - or specified set of objectives - that needs to be executed for a predefined treasury amount to be paid out. The responsibility of assigning a payout address once the specified set of objectives is completed is delegated to the curator.\n\nAfter the Council has activated a bounty, it delegates the work that requires expertise to the curator who gets to close the active bounty. Closing the active bounty enacts a delayed payout to the payout address and a payout of the curator fee. The delay phase allows the Council to act if any issues arise.\n\nTo minimize storage on chain in the same way as any proposal, bounties don\u2019t contain contextual information. When a user submits a bounty spending proposal, they will probably need to find an off-chain way to explain the proposal (any of the available community forums serve this purpose).", "mimetype": "text/plain", "start_char_idx": 11289, "end_char_idx": 13774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de7c8698-b13a-4685-a1b5-9844cd17b1d5": {"__data__": {"id_": "de7c8698-b13a-4685-a1b5-9844cd17b1d5", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "877975f5-2811-4799-ad58-735577b08241", "node_type": "1", "metadata": {}, "hash": "513617fc0f1a33c6fb964f9500c3abc023a8fac4cfdcd6cb089ff53289a681b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb658af4-f1eb-4a5a-9f73-4a29ca58b1f4", "node_type": "1", "metadata": {}, "hash": "1b3b071b32208563c641a44f0a91e30415ed736e0ef860f4241cbb6b5ad77a95", "class_name": "RelatedNodeInfo"}}, "text": "[This template](https://docs.google.com/document/d/1dQtjfFTkOcTXTt8pIpH2GYLNc9vc03teYfR1r8NfGO0/edit?usp=sharing) can help as a checklist of all needed information for the Council to make an informed decision.\n\nThe bounty has a predetermined duration of 90 days with the possibility of being extended by the curator. Aiming to maintain flexibility on the tasks\u2019 curation, the curator will be able to create sub-bounties for more granularity and allocation in the next iteration of the mechanism.\n\n### Creating a Bounty Proposal <a href=\"#creating-a-bounty-proposal\" id=\"creating-a-bounty-proposal\"></a>\n\nAnyone can create a Bounty proposal using Polkadot JS Apps: Users are able to submit a proposal on the dedicated Bounty section under Governance. The development of a robust user interface to view and manage bounties in the Phala Apps is still under development and it will serve Council members, Curators and Beneficiaries of the bounties, as well as all users observing the on-chain treasury governance. For now, the help of a Councillor is needed to open a bounty proposal as a motion to be voted.\n\nTo submit a bounty, please visit [Polkadot JS Apps](https://polkadot.js.org/apps) and click on the Governance tab in the options bar on the top of the site. After, click on \u2018Bounties\u2019 and find the button \u2018+ Add Bounty\u2019 on the upper-right side of the interface. Complete the bounty title, the requested allocation (including curator\u2019s fee) and confirm the call.\n\nAfter this, a Council member will need to assist you to pass the bounty proposal for vote as a motion. You can contact the Council by joining the #Khala-Direction [channel](https://discord.gg/MsqTGfu5Uy) in Discord server and publishing a short description of your bounty, with a link to one of the [forums](https://forum.phala.network/c/51-category/51) for contextual information.\n\nA bounty can be cancelled by deleting the earmark for a specific treasury amount or be closed if the tasks have been completed. On the opposite side, the 90 days life of a bounty can be extended by amending the expiry block number of the bounty to stay active.", "mimetype": "text/plain", "start_char_idx": 13775, "end_char_idx": 15886, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb658af4-f1eb-4a5a-9f73-4a29ca58b1f4": {"__data__": {"id_": "cb658af4-f1eb-4a5a-9f73-4a29ca58b1f4", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de7c8698-b13a-4685-a1b5-9844cd17b1d5", "node_type": "1", "metadata": {}, "hash": "732e54cb6e3b39cbedd3d3c7ec65056cf45e710385848aac91adb3db4e3c8659", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2ba37a7-3153-4b29-a3a7-2cee59d371ce", "node_type": "1", "metadata": {}, "hash": "8e86e56b5a25e57f24927747b63b9beb4a61fd8c854a99207edd7cfd357da7ce", "class_name": "RelatedNodeInfo"}}, "text": "### Closing a bounty <a href=\"#closing-a-bounty\" id=\"closing-a-bounty\"></a>\n\nThe curator can close the bounty once they approve the completion of its tasks. The curator should make sure to set up the payout address on the active bounty beforehand. Closing the Active bounty enacts a delayed payout to the payout address and a payout of the curator fee.\n\nA bounty can be closed by using the extrinsics tab and selecting the Treasury pallet, then `Award_bounty`, making sure the right bounty is to be closed and finally sign the transaction. It is important to note that those who received a reward after the bounty is completed, must claim the specific amount of the payout from the payout address, by calling `Claim_bounty` after the curator closed the allocation.\n\n## FAQ <a href=\"#faq\" id=\"faq\"></a>\n\n### What prevents the Treasury from being captured by a majority of the Council? <a href=\"#what-prevents-the-treasury-from-being-captured-by-a-majority-of-the-council\" id=\"what-prevents-the-treasury-from-being-captured-by-a-majority-of-the-council\"></a>\n\nThe majority of the Council can decide the outcome of a treasury spend proposal. In an adversarial mindset, we may consider the possibility that the Council may at some point go rogue and attempt to steal all of the treasury funds. It is a possibility that the treasury pot becomes so great, that a large financial incentive would present itself.\n\nIt is the case on Phala that the Council is composed of mainly well-known members of the community. Remember, the Council is voted in by the token holders, so they must do some campaigning or otherwise be recognized to earn votes. In the scenario of an attack, the Council members would lose their social credibility. Furthermore, members of the Council are usually externally motivated by the proper operation of the chain. This external motivation is either because they run businesses that depend on the chain, or they have direct financial gain (through their holdings) of the token value remaining steady.\n\nConcretely, there are a couple on-chain methods that resist this kind of attack. One, the Council majority may not be the token majority of the chain. This means that the token majority could vote to replace the Council if they attempted this attack - or even reverse the treasury spend. They would do this through a normal referendum.", "mimetype": "text/plain", "start_char_idx": 15888, "end_char_idx": 18241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2ba37a7-3153-4b29-a3a7-2cee59d371ce": {"__data__": {"id_": "c2ba37a7-3153-4b29-a3a7-2cee59d371ce", "embedding": null, "metadata": {"file_path": "./phala_dist/khala-treasury.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8", "node_type": "4", "metadata": {}, "hash": "7324c47fd5a1857ad21910b64a3a3c7e714645cfaf80b10c1770eca2d955f9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb658af4-f1eb-4a5a-9f73-4a29ca58b1f4", "node_type": "1", "metadata": {}, "hash": "1b3b071b32208563c641a44f0a91e30415ed736e0ef860f4241cbb6b5ad77a95", "class_name": "RelatedNodeInfo"}}, "text": "Two, there are time delays to treasury spends. They are only enacted every spend period. This means that there will be some time to observe this attack is taking place. The time delay then allows chain participants time to respond. The response may take the form of governance measures or - in the most extreme cases a liquidation of their holdings and a migration to a minority fork. However, the possibility of this scenario is quite low.", "mimetype": "text/plain", "start_char_idx": 18242, "end_char_idx": 18682, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c6c1cbb-77ae-46a9-b56e-7b8832752d59": {"__data__": {"id_": "1c6c1cbb-77ae-46a9-b56e-7b8832752d59", "embedding": null, "metadata": {"file_path": "./phala_dist/voting-for-councillors.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fa6b931e-cccf-43d6-8b65-03d217b4718b", "node_type": "4", "metadata": {}, "hash": "f674e808bacd15371c33ab94a2b31771f793159868c8c359168d4441e630730d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1304be64-8ffe-418e-b9af-70cea86a20df", "node_type": "1", "metadata": {}, "hash": "3bc3f1b304dce787a5bee3519b0d091ad71ac5966eb73fc2c57f1a9518e3f887", "class_name": "RelatedNodeInfo"}}, "text": "# Voting for Councillors\n\nThe council is an elected body of on-chain accounts that are intended to represent the passive stakeholders of Phala and/or Khala. The council has two major tasks in governance: proposing referenda and vetoing dangerous or malicious referenda. For more information on the council, see the Governance page. This guide will walk you through voting for councillors in the elections.\n\n## Voting for Councillors <a href=\"#voting-for-councillors\" id=\"voting-for-councillors\"></a>\n\nVoting for councillors requires you to lock 5 PHA on Phala or **5** K-PHA on Khala for the duration of your vote.\n\n> NOTE: Voting and staking locks **can overlap** A user can use staked funds to vote for Councillors and/or use those funds in referenda). A user is only prohibited from transferring these funds to another account.\n\n> Warning: If your balance is vesting, you cannot use unvested tokens for this lock. You will have to wait until you have at least that many **free** tokens to vote.\n\nLike the validator elections, you can approve up to **5** different councillors and your vote will be equalized among the chosen group. Unlike validator elections, there is no unbonding period for your reserved tokens. Once you remove your vote, your tokens will be liquid again.\n\n> Warning: It is your responsibility not to put your entire balance into the reserved value when you make a vote for councillors. It\u2019s best to keep at least enough PHA/K-PHA to pay for transaction fees.\n\nGo to the Khala Dashboard and click on the \u201cCouncil\u201d tab. On the right side of the window there are two blue buttons, click on the one that says \u201cVote.\u201d\n\nSince the council uses approval voting, when you vote you signal which of the candidates you approve of and your voted tokens will be equalized among the selected candidates. Select up to **5** council candidates by moving the slider to \u201cAye\u201d for each one that you want to be elected. When you\u2019ve made the proper configuration submit your transaction.\n\nYou should see your vote appear in the interface immediately after your transaction is included.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1304be64-8ffe-418e-b9af-70cea86a20df": {"__data__": {"id_": "1304be64-8ffe-418e-b9af-70cea86a20df", "embedding": null, "metadata": {"file_path": "./phala_dist/voting-for-councillors.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fa6b931e-cccf-43d6-8b65-03d217b4718b", "node_type": "4", "metadata": {}, "hash": "f674e808bacd15371c33ab94a2b31771f793159868c8c359168d4441e630730d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c6c1cbb-77ae-46a9-b56e-7b8832752d59", "node_type": "1", "metadata": {}, "hash": "07eba782db34a6eb6425c40b0f4cb2a912ce76d9df5511d0351e7b7ea7495650", "class_name": "RelatedNodeInfo"}}, "text": "## Removing your Vote <a href=\"#removing-your-vote\" id=\"removing-your-vote\"></a>\n\nIn order to get your reserved tokens back, you will need to remove your vote. Only remove your vote when you\u2019re done participating in elections and you no longer want your reserved tokens to count for the councillors that you approve.\n\nGo to the \u201cGovernance\u201d > \u201cCouncil\u201d tab on the Polkadot-JS Apps Dashboard.\n\nUnder the \u201cOverview\u201d tab, click on \u201cVote\u201d.issue the \u201cunvote all\u201d option.\n\n![](https://i.imgur.com/Uln8z8p.png)\n\nWhen the transaction is included in a block you should have your reserved tokens made liquid again and your vote will no longer be counting for any councillors in the elections starting in the next term.", "mimetype": "text/plain", "start_char_idx": 2089, "end_char_idx": 2797, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e389bc02-48b9-41ec-af0d-b20301b9f38d": {"__data__": {"id_": "e389bc02-48b9-41ec-af0d-b20301b9f38d", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b669dc99-a25d-489e-8848-373a2fe7524c", "node_type": "1", "metadata": {}, "hash": "59cad867b1ac86e6c1f2875c64eadc105a49dc0c74397cfa8d0a2ed53a4a328a", "class_name": "RelatedNodeInfo"}}, "text": "# \u2694\ufe0f Connect Phat Contract to EVM Consumer Contract\n\n## Overview <a href=\"#user-content-overview\" id=\"user-content-overview\"></a>\n\nThis project represents a basic EVM Consumer Contract that is compatible with a deployed Oracle written in TypeScript on Phala Network.\n\n> **Note**: For simplicity, we will utilize Polygon Mumbai and Polygon Mainnet for the following examples.\n\n## Prerequisites <a href=\"#user-content-prerequisites\" id=\"user-content-prerequisites\"></a>\n\n* Active Phala Profile with version `>= 1.0.1` via [Phala Dashboard](https://bit.ly/3LHccmR)\n* [Hardhat](https://bit.ly/469uyW5)\n* For EVM Mainnet deployments:\n  * Ex: Polygonscan API Key that can be generated on [polygonscan](https://bit.ly/3rBkypp)\n* RPC Endpoint for EVM Chain Mainnet & EVM Chain Testnet\n  * [Alchemy](https://bit.ly/46uObaH) - This repo example uses Alchemy's API Key.\n  * [Infura](https://bit.ly/3PXXCtN)\n  * Personal RPC Node (Ex. [ProjectPi](https://bit.ly/3RGf7QS))\n* Polkadot Account for Phala PoC6 Testnet and Mainnet deployment\n  * [Phala Faucet](https://bit.ly/3Tomopi)\n* Node >= 18.x\n\n### Environment Variables: <a href=\"#user-content-environment-variables\" id=\"user-content-environment-variables\"></a>\n\nCheck out the environment variables here in [.env.local](https://bit.ly/3ZAA814) file.\n\n## Getting Started <a href=\"#user-content-getting-started\" id=\"user-content-getting-started\"></a>\n\n> \ud83d\udea8 **Note** \ud83d\udea8:\n>\n> If you cloned this repo or created a template, skip to [Create a Phala Profile](connect-phat-contract-to-evm-consumer-contract.md#user-content-create-a-phala-profile).\n\nFirst you will need to install the `@phala/fn` CLI tool using your node package manager (`npm`) or use node package execute (`npx`). In this tutorial we use `npx`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b669dc99-a25d-489e-8848-373a2fe7524c": {"__data__": {"id_": "b669dc99-a25d-489e-8848-373a2fe7524c", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e389bc02-48b9-41ec-af0d-b20301b9f38d", "node_type": "1", "metadata": {}, "hash": "9520ccb995efb674b6e35f230506f350c015fed13c8fce9f52602c81b580f655", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba25020f-f755-4f5a-a7a2-89aa57c5b0c3", "node_type": "1", "metadata": {}, "hash": "5f9f0016f89499e8b0003a02573f857b8901d7659bbc5c3b5c34a561c27e34fa", "class_name": "RelatedNodeInfo"}}, "text": "Now create your first template with the CLI tool command:\n\n```sh\nnpx @phala/fn@latest init userJourney\n```\n\nSelect one of the template and press enter to see something similar to the example below:\n\n```sh\nnpx @phala/fn@latest init userJourney\n? Please select one of the templates for your \"userJourney\" project: \n\u276f phat-contract-starter-kit: Send data from any API to your smart contract with Javascript. \n  lensapi-oracle-consumer-contract: Send data from Lens API to your smart contract to empower your Web3 Social dApp. \n  vrf-oracle: TEE-guarded Verifiable Random Function template to bring randomness to your smart contract. \n  airstack-phat-contract: Request an account\u2019s data from Airstack\u2019s API to compute trust score and send to your Web3 dApp on-chain. \n  thegraph-phat-contract: Connect your subgraphs from The Graph to your on-chain dApps via Phat Contract.  \n```\n\n`cd` into the newly created template and `ls` the directory which will look similar to below.\n\n```sh\ncd userJourney\nls\n# total 736\n# drwxr-xr-x  18 hashwarlock  staff   576B Sep  6 15:32 .\n# drwxr-xr-x  35 hashwarlock  staff   1.1K Sep  6 15:32 .\n# -rw-r--r--   1 hashwarlock  staff   2.1K Sep  6 15:32 .env.local\n# -rw-r--r--   1 hashwarlock  staff   227B Sep  6 15:32 .gitignore\n# -rw-r--r--   1 hashwarlock  staff    34K Sep  6 15:32 LICENSE\n# -rw-r--r--   1 hashwarlock  staff   8.9K Sep  6 15:32 README.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba25020f-f755-4f5a-a7a2-89aa57c5b0c3": {"__data__": {"id_": "ba25020f-f755-4f5a-a7a2-89aa57c5b0c3", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b669dc99-a25d-489e-8848-373a2fe7524c", "node_type": "1", "metadata": {}, "hash": "59cad867b1ac86e6c1f2875c64eadc105a49dc0c74397cfa8d0a2ed53a4a328a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae7b5d5b-a51e-4de8-a4eb-dfd5dd264775", "node_type": "1", "metadata": {}, "hash": "af3a34ad39d29eaad58b3d5d26788eec70ca5c0e5257436066a9651ffaeeb86c", "class_name": "RelatedNodeInfo"}}, "text": "md\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 abis\n# drwxr-xr-x   4 hashwarlock  staff   128B Sep  6 15:32 assets\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 contracts\n# -rw-r--r--   1 hashwarlock  staff   1.3K Sep  6 15:32 hardhat.config.ts\n# -rw-r--r--   1 hashwarlock  staff    95B Sep  6 15:32 mumbai.arguments.ts\n# -rw-r--r--   1 hashwarlock  staff   2.6K Sep  6 15:32 package.json\n# -rw-r--r--   1 hashwarlock  staff    96B Sep  6 15:32 polygon.arguments.ts\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 scripts\n# drwxr-xr-x   3 hashwarlock  staff    96B Sep  6 15:32 src\n# drwxr-xr-x   3 hashwarlock  staff    96B Sep  6 15:32 test\n# -rw-r--r--   1 hashwarlock  staff   201B Sep  6 15:32 tsconfig.json\n# -rw-r--r--   1 hashwarlock  staff   290K Sep  6 15:32 package-lock.json\n```\n\n## Create a Phala Profile <a href=\"#user-content-create-a-phala-profile\" id=\"user-content-create-a-phala-profile\"></a>\n\nThis step requires you to have a Polkadot account.", "mimetype": "text/plain", "start_char_idx": 3130, "end_char_idx": 4123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae7b5d5b-a51e-4de8-a4eb-dfd5dd264775": {"__data__": {"id_": "ae7b5d5b-a51e-4de8-a4eb-dfd5dd264775", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba25020f-f755-4f5a-a7a2-89aa57c5b0c3", "node_type": "1", "metadata": {}, "hash": "5f9f0016f89499e8b0003a02573f857b8901d7659bbc5c3b5c34a561c27e34fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f9f813d3-1c3c-45b7-a6f6-465403bd2073", "node_type": "1", "metadata": {}, "hash": "aeaa01fe673895d56e9d6393740f08c4926c71f36c4958d4c5ae34cfebd723bf", "class_name": "RelatedNodeInfo"}}, "text": "You can get an account from one of the following:\n\n* [Polkadot.js Wallet Extension](https://bit.ly/3RMUjqy)\n* [Talisman Wallet](https://bit.ly/3ZzAPYD)\n* [SubWallet](https://bit.ly/3tjS8R7) (**Support for iOS/Android**)\n\nFirst, create your Phala Profile account on the [Phala Dashboard](https://bit.ly/3LHccmR). Here is a quick 1 minute [YouTube video](https://bit.ly/46clfo4) on setting up from scratch. Here is what your Phala Profile account overview should look like:\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/BricksProfileCheck.png\" alt=\"\"><figcaption></figcaption></figure>\n\n**Option 1: Export Polkadot account as json file**\n\nGo to your browser and click on the polkadot.js extension. Select your account and click \"Export Account\". Next, you will be prompted for your password before saving the file to your project directory. **Note** this is what will be set to `POLKADOT_WALLET_ACCOUNT_PASSPHRASE`. Make sure to save the file as `polkadot-account.json` in the root of your project directory.\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/ExportAccount.png\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/ExportTypePass.png\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/SaveAccount.png\" alt=\"\"><figcaption></figcaption></figure>\n\n**Option 2: Set mnemonic phrase to `POLKADOT_WALLET_SURI`**\n\nAfter creating your Phala Profile, set your `.env` variable `POLKADOT_WALLET_SURI` to the mnemonic phrase from generating the new Polkadot Account.", "mimetype": "text/plain", "start_char_idx": 4124, "end_char_idx": 5852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9f813d3-1c3c-45b7-a6f6-465403bd2073": {"__data__": {"id_": "f9f813d3-1c3c-45b7-a6f6-465403bd2073", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae7b5d5b-a51e-4de8-a4eb-dfd5dd264775", "node_type": "1", "metadata": {}, "hash": "af3a34ad39d29eaad58b3d5d26788eec70ca5c0e5257436066a9651ffaeeb86c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2df48700-1f3b-4f60-b2d7-cefe472d34e0", "node_type": "1", "metadata": {}, "hash": "82c566e5cd60127c06a6665be1b56908ee3dafd97ba37a24eddaad6871c18435", "class_name": "RelatedNodeInfo"}}, "text": "Here is a screenshot of how to set `POLKADOT_WALLET_SURI`:\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/PolkadotAccountSuri.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Testing Locally <a href=\"#user-content-testing-locally\" id=\"user-content-testing-locally\"></a>\n\n#### Test Default Phat Contract Locally <a href=\"#user-content-test-default-phat-contract-locally\" id=\"user-content-test-default-phat-contract-locally\"></a>\n\nWith a template created and a basic default Phat Contract example ready to test, let\u2019s step through the process of preparing your repo to execute the test locally.\n\nFirst step is to install the package dependencies with the following command:\n\n```sh\nnpm install\n```\n\nEverything should go smoothly and produce similar output below:\n\n```\nnpm install\n# [1/4] \ud83d\udd0d  Resolving packages...\n# [2/4] \ud83d\ude9a  Fetching packages...\n# [3/4] \ud83d\udd17  Linking dependencies...\n# warning \" > @typechain/ethers-v5@10.1.0\" has unmet peer dependency \"@ethersproject/bytes@^5.0.0\".\n# [4/4] \ud83d\udd28  Building fresh packages...\n# \u2728  Done in 4.95s.\n```\n\nNow that the package dependencies are installed, lets build the default Phat Contract which is located in [`./src/index.ts`](https://bit.ly/3PBnP02).\n\nFor those want to understand what the contents of `./src/index.ts` mean, go [here](customizing-your-phat-contract.md) read more. If you are already familiar with the concepts then you can proceed to with the deployment process.\n\nBuild the default Phat Contract with this command:\n\n```bash\nnpx @phala/fn build\n```\n\nYou will see output similar to the example below. and a file in `./dist/index.js` will be generated.\n\n```bash\nnpx @phala/fn build\n# \u2713 Compiled successfully.\n#   17.66 KB  dist/index.js\n```\n\nWith our default Phat Contract built, we can run some initial tests. First test will be simple.", "mimetype": "text/plain", "start_char_idx": 5854, "end_char_idx": 7693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2df48700-1f3b-4f60-b2d7-cefe472d34e0": {"__data__": {"id_": "2df48700-1f3b-4f60-b2d7-cefe472d34e0", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9f813d3-1c3c-45b7-a6f6-465403bd2073", "node_type": "1", "metadata": {}, "hash": "aeaa01fe673895d56e9d6393740f08c4926c71f36c4958d4c5ae34cfebd723bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f14d20ce-85e3-4d4e-aeac-d4d0498c5dbd", "node_type": "1", "metadata": {}, "hash": "9af974acc53c76eec44aa0175eecb211c33436468bcd92ba6f4d51b680275f90", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nnpx @phala/fn run dist/index.js\n```\n\nIt was expected for it to fail like this:\n\n```bash\nnpx @phala/fn run dist/index.js\n# handle req: undefined\n# Malformed request received\n# {\"output\":\"0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"}\n# \u2728  Done in 0.96s.\n```\n\nNotice that the test fails and reports that a `Malformed request received` was emitted and the request was `undefined`. This is expected as you will need to define the parameters by adding a `-a abi.encode(requestId, profileId) https://api-v2-mumbai-live.lens.dev` to your command.\n\nTo simulate the expected result locally, run the Phala Oracle function now with this command:\n\n```bash\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000 https://api-v2-mumbai-live.lens.dev\n```\n\n> **What are the ingredients for the `npx @phala/fn run` command?**\n>\n> Our Phat Contract script, now fully constructed, is ready for a trial run. This simulation mirrors the live script's operation when deployed on the Phala Network.\n>\n> The command's first parameter is a HexString, representing a tuple of types `[uint, bytes]`. This serves as the entry function. The second parameter is a `string`, embodying the configurable secrets fed into the main function.\n>\n> The `Coders.decode` function deciphers these parameters, yielding the decoded `requestId` and `encodedReqStr`. These decoded elements then become the raw material for the rest of the custom logic within the script.", "mimetype": "text/plain", "start_char_idx": 7695, "end_char_idx": 9516, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f14d20ce-85e3-4d4e-aeac-d4d0498c5dbd": {"__data__": {"id_": "f14d20ce-85e3-4d4e-aeac-d4d0498c5dbd", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2df48700-1f3b-4f60-b2d7-cefe472d34e0", "node_type": "1", "metadata": {}, "hash": "82c566e5cd60127c06a6665be1b56908ee3dafd97ba37a24eddaad6871c18435", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80925a49-7ccd-46db-92ec-99fb1f63e186", "node_type": "1", "metadata": {}, "hash": "4d8e7548d803962695deb63e465bdb11f84429873d731eeef04910895b2b38a1", "class_name": "RelatedNodeInfo"}}, "text": ">\n> ```typescript\n> export default function main(request: HexString, settings: string): HexString {\n>   console.log(`handle req: ${request}`);\n>   let requestId, encodedReqStr;\n>   try {\n>     [requestId, encodedReqStr] = decodeRequest(decodeRequestAbiParams, request);\n>   } catch (error) {\n>     console.info(\"Malformed request received\");\n>   }\n> // .\n> } \n> ```\n\n<details>\n\n<summary>How the query looks under the hood</summary>\n\n* HTTP Endpoint: [https://api-v2-mumbai-live.lens.dev](https://api-mumbai.lens.dev/)\n* Profile ID: `0x01`\n* Expected Graphql Query:\n\n```graphql\nquery Profile {\n    profile(request: { forProfileId: \"0x01\" }) {\n      stats {\n          followers\n          following\n          comments\n          countOpenActions\n          posts\n          quotes\n          mirrors\n          publications\n          reacted\n          reactions\n      }\n    }\n}\n```\n\n* Expected Output:\n\n```graphql\n{\n  \"data\": {\n    \"profile\": {\n      \"stats\": {\n        \"followers\": 2,\n        \"following\": 0,\n        \"comments\": 0,\n        \"countOpenActions\": 1,\n        \"posts\": 14,\n        \"quotes\": 0,\n        \"mirrors\": 0,\n        \"publications\": 14,\n        \"reacted\": 0,\n        \"reactions\": 0\n    }\n  }\n}\n```\n\n</details>\n\nYou will see:\n\n```bash\nnpx @phala/fn run dist/index.js -a 0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000\n00000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000 https://api-mumbai.lens.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80925a49-7ccd-46db-92ec-99fb1f63e186": {"__data__": {"id_": "80925a49-7ccd-46db-92ec-99fb1f63e186", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f14d20ce-85e3-4d4e-aeac-d4d0498c5dbd", "node_type": "1", "metadata": {}, "hash": "9af974acc53c76eec44aa0175eecb211c33436468bcd92ba6f4d51b680275f90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9444f85e-475f-4633-a00b-e81f5e306631", "node_type": "1", "metadata": {}, "hash": "87b4c5060fb6a729d95626739af4cda91a98397a01e08f11d0d2bf24f2ff666c", "class_name": "RelatedNodeInfo"}}, "text": "dev\n# handle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000\n# Request received for profile 0x01\n# response: 0,1,201\n# {\"output\":\"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c9\"}\n# \u2728  Done in 1.42s.\n```\n\nWe have now successfully tested the default Phat Contract and ran a test to verify the function returns a response as expected.\n\n### Testing Default Phat Contract with Local Hardhat Node <a href=\"#user-content-testing-default-phat-contract-with-local-hardhat-node\" id=\"user-content-testing-default-phat-contract-with-local-hardhat-node\"></a>\n\nPreviously we showed how to test the default Phat Contract locally without a running node, but we can also run two other tests.\n\n1. Run the default mocha e2e tests.\n2. Run local hardhat node and watch the requests that are pushed and see how the Phat Contract transforms the data.\n\n**Run the default mocha e2e tests**\n\nLets\u2019s start with the first test case.\n\n> Note: You will need to ensure you configure your local vars `POLYGON_RPC_URL` and `MUMBAI_RPC_URL` `.env` file. You can do this with `cp .env.local .env` then edit the `.env` with your information.\n\n```sh\nnpm run localhost-test\n```\n\nYou will now see that all test cases have passed.\n\n```sh\nnpm run localhost-test\n# Compiled 14 Solidity files successfully\n#\n#  OracleConsumerContract.sol\n#    \u2714 Push and receive message (1664ms)\n#\n#  1 passing (2s)\n#\n# \u2728  Done in 3.29s.", "mimetype": "text/plain", "start_char_idx": 11083, "end_char_idx": 12824, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9444f85e-475f-4633-a00b-e81f5e306631": {"__data__": {"id_": "9444f85e-475f-4633-a00b-e81f5e306631", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80925a49-7ccd-46db-92ec-99fb1f63e186", "node_type": "1", "metadata": {}, "hash": "4d8e7548d803962695deb63e465bdb11f84429873d731eeef04910895b2b38a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53df2bfd-efcf-4143-a20a-a59c29a9edd3", "node_type": "1", "metadata": {}, "hash": "3c29e396e52ace39e971aecec6b93eaf987a865b55b9649f583123e6fa3c600d", "class_name": "RelatedNodeInfo"}}, "text": "```\n\nThis is how the e2e mocha test will look like. You can customize this file at `OracleConsumerContract.ts`.\n\n**Run local hardhat node and watch the requests that are pushed and see how the Phat Contract transforms the data**\n\nFirst we will start a local hardhat node.\n\n```sh\nnpm run localhost-node\n```\n\nWith our hardhat node running locally, we can now deploy the `OracleConsumerContract.sol` contract to the local hardhat network.\n\n<pre class=\"language-sh\"><code class=\"lang-sh\"><strong>npm run localhost-deploy \n</strong></code></pre>\n\n```sh\nnpm run localhost-deploy\n# Deploying...\n# Deployed { consumer: '0x0165878A594ca255338adfa4d48449f69242Eb8F' }\n# \u2728  Done in 0.94s.\n```\n\nMake sure to copy the deployed contract address when you deploy your own contract locally. Note you contract address will be different than `0x0165878A594ca255338adfa4d48449f69242Eb8F`. We will now start watching the hardhat node deployed contract for any new requests.\n\n```sh\nnpx @phala/fn watch 0x0165878A594ca255338adfa4d48449f69242Eb8F artifacts/contracts/OracleConsumerContract.sol/OracleConsumerContract.json dist/index.js -a https://api-mumbai.lens.dev/\n```\n\n```sh\nnpx @phala/fn watch 0x0165878A594ca255338adfa4d48449f69242Eb8F artifacts/contracts/OracleConsumerContract.sol/OracleConsumerContract.json dist/index.js -a https://api-mumbai.lens.dev/\n# Listening for OracleConsumerContract.sol MessageQueued events...\n```\n\nLet\u2019s now make a new request and see what happens with the listener\u2019s output. In separate tab, you will push a request with the following.", "mimetype": "text/plain", "start_char_idx": 12825, "end_char_idx": 14374, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53df2bfd-efcf-4143-a20a-a59c29a9edd3": {"__data__": {"id_": "53df2bfd-efcf-4143-a20a-a59c29a9edd3", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9444f85e-475f-4633-a00b-e81f5e306631", "node_type": "1", "metadata": {}, "hash": "87b4c5060fb6a729d95626739af4cda91a98397a01e08f11d0d2bf24f2ff666c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a47ebed-a137-4835-8aec-e6caaf77879c", "node_type": "1", "metadata": {}, "hash": "4636291467e601742054e8dcc4a2c7137f556e2bfc16c794d92bd075ee0b2b78", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x0165878A594ca255338adfa4d48449f69242Eb8F npm run localhost-push-request\n```\n\n```sh\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x0165878A594ca255338adfa4d48449f69242Eb8F npm run localhost-push-request\n# Pushing a request...\n# Received event [ResponseReceived]: {\n#  reqId: BigNumber { value: \"1\" },\n#  input: '0x01',\n#  value: BigNumber { value: \"1597\" }\n# }\n# \u2728  Done in 4.99s.\n```\n\nIf we look back at the listener tab, we will see output has been appended.", "mimetype": "text/plain", "start_char_idx": 14376, "end_char_idx": 14870, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a47ebed-a137-4835-8aec-e6caaf77879c": {"__data__": {"id_": "2a47ebed-a137-4835-8aec-e6caaf77879c", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53df2bfd-efcf-4143-a20a-a59c29a9edd3", "node_type": "1", "metadata": {}, "hash": "3c29e396e52ace39e971aecec6b93eaf987a865b55b9649f583123e6fa3c600d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aee7dbac-c318-4bf6-91fb-c70af7e177a6", "node_type": "1", "metadata": {}, "hash": "9ba79ab6d9a561f3a396437cd2dbee8557e36c9e43ba3cc76d2858b52a34c9f1", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nListening for OracleConsumerContract MessageQueued events...\nReceived event [MessageQueued]: {\n  tail: 0n,\n  data: '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000'\n}\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000\nRequest received for profile 0x01\nresponse: 201\nJS Execution output: 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c9\n```\n\n## Deployment <a href=\"#user-content-deployment\" id=\"user-content-deployment\"></a>\n\nNow that you have the prerequisites to deploy a Polygon Consumer Contract on Polygon, lets begin with some initials tasks.", "mimetype": "text/plain", "start_char_idx": 14872, "end_char_idx": 16002, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aee7dbac-c318-4bf6-91fb-c70af7e177a6": {"__data__": {"id_": "aee7dbac-c318-4bf6-91fb-c70af7e177a6", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a47ebed-a137-4835-8aec-e6caaf77879c", "node_type": "1", "metadata": {}, "hash": "4636291467e601742054e8dcc4a2c7137f556e2bfc16c794d92bd075ee0b2b78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf04292d-5984-4a73-9096-895fec76acff", "node_type": "1", "metadata": {}, "hash": "66378a3c2c028c4b6b1171972558f8be829d69b3c0ac9168169dce38b143b27e", "class_name": "RelatedNodeInfo"}}, "text": "### Install Dependencies & Compile Contracts <a href=\"#user-content-install-dependencies--compile-contracts\" id=\"user-content-install-dependencies--compile-contracts\"></a>\n\n```sh\n# install dependencies\n$ npm install\n\n# compile contracts\n$ npm run compile\n```\n\n### Deploy to Polygon Mumbai Testnet <a href=\"#user-content-deploy-to-polygon-mumbai-testnet\" id=\"user-content-deploy-to-polygon-mumbai-testnet\"></a>\n\n{% hint style=\"danger\" %}\n**Important**\n\nThis guide references the `mumbai` testnet chain.&#x20;\n\nThe`mumbai` testnet is [deprecated since 2024/04/08](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos), meaning the steps to deploy to a testnet will no longer work out of the box.\n\nYou can opt to use the [`amoy`](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos) testnet or any other EVM testnet instead.\n{% endhint %}\n\nWith the contracts successfully compiled, now we can begin deploying first to Polygon Mumbai Testnet. If you have not gotten `MATIC` for Mumbai Testnet then get `MATIC` from a [faucet](https://bit.ly/3ZyFoT3). Ensure to save the address after deploying the Consumer Contract because this address will be use in the \"Configure Client\" section of Phat Bricks UI. The deployed address will also be set to the environment variable `MUMBAI_CONSUMER_CONTRACT_ADDRESS`.", "mimetype": "text/plain", "start_char_idx": 16004, "end_char_idx": 17352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf04292d-5984-4a73-9096-895fec76acff": {"__data__": {"id_": "cf04292d-5984-4a73-9096-895fec76acff", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aee7dbac-c318-4bf6-91fb-c70af7e177a6", "node_type": "1", "metadata": {}, "hash": "9ba79ab6d9a561f3a396437cd2dbee8557e36c9e43ba3cc76d2858b52a34c9f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f15ad6fa-d5e1-4b78-abd3-f742e2cd9f67", "node_type": "1", "metadata": {}, "hash": "1c30512ba8c9a7077eab3aeccba36ae6504296a65c787aa1549ad3a58f7b6f06", "class_name": "RelatedNodeInfo"}}, "text": "<pre class=\"language-sh\"><code class=\"lang-sh\"><strong>npm run test-deploy\n</strong></code></pre>\n\n```sh\n# deploy contracts to testnet mumbai\nnpm run test-deploy\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://mumbai.polygonscan.com/address/0x10FA409109E073C15b77A8352cB6A89C12CD1605\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# MUMBAI_CONSUMER_CONTRACT_ADDRESS=0x10FA409109E073C15b77A8352cB6A89C12CD1605\n#\n# Configuring...\n# Done\n# \u2728  Done in 8.20s.\n```\n\n### **(Optional) Verify Contract on Polygon Mumbai Testnet**\n\nEnsure to update the `mumbai.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `mumbai.arguments.ts` file.\n\n> **Note**: Your contract address will be different than `0x090E8fDC571d65459569BC87992C1026121DB955` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run test-deploy`.\n\n```sh\nnpm run test-verify -- <MUMBAI_CONSUMER_CONTRACT_ADDRESS>\n```\n\n```sh\nnpm run test-verify -- 0x090E8fDC571d65459569BC87992C1026121DB955\n# $ hardhat verify --network mumbai --constructor-args mumbai.arguments.ts 0x090E8fDC571d65459569BC87992C1026121DB955\n# Nothing to compile\n# No need to generate any newer typings.\n# Successfully submitted source code for contract\n# contracts/OracleConsumerContract.sol:OracleConsumerContract.sol at 0x090E8fDC571d65459569BC87992C1026121DB955\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract OracleConsumerContract.sol on Etherscan.", "mimetype": "text/plain", "start_char_idx": 17354, "end_char_idx": 19072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f15ad6fa-d5e1-4b78-abd3-f742e2cd9f67": {"__data__": {"id_": "f15ad6fa-d5e1-4b78-abd3-f742e2cd9f67", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf04292d-5984-4a73-9096-895fec76acff", "node_type": "1", "metadata": {}, "hash": "66378a3c2c028c4b6b1171972558f8be829d69b3c0ac9168169dce38b143b27e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "629d5f8b-2e61-482f-8c4c-b1692b3bcd72", "node_type": "1", "metadata": {}, "hash": "50e3ba82b35ad6366acbeeae0589243ea08a0d06ca222f93802706bc9a24033d", "class_name": "RelatedNodeInfo"}}, "text": "# https://mumbai.polygonscan.com/address/0x090E8fDC571d65459569BC87992C1026121DB955#code\n# \u2728  Done in 5.91s.\n```\n\n### Deploy Phat Contract to PoC6 Testnet <a href=\"#user-content-deploy-phat-contract-to-poc5-testnet\" id=\"user-content-deploy-phat-contract-to-poc5-testnet\"></a>\n\nFor customizing your Phat Contract, checkout Phat Contract custom configurations in [Customizing Your Phat Contract](customizing-your-phat-contract.md) to learn more before deploying to PoC6 testnet.\n\nNow that are Phat Contract has built successfully, let's deploy to Phala PoC6 Testnet with the following command:\n\n```shell\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --coreSettings=https://api-v2-mumbai-live.lens.dev/\n# If polkadot-account.json is in the root of project\nnpx @phala/fn upload -a ./polkadot-account.json --coreSettings=https://api-v2-mumbai-live.lens.dev/\n```\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```shell\nnpx @phala/fn upload -a ./polkadot-account.json --coreSettings=https://api-v2-mumbai-live.lens.dev/\n# ? Please enter your client RPC URL https://polygon-mumbai.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# ? Please enter your consumer address 0xA4Be456Fd0d41968a52b34Cdb8Ba875F2281134a\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 19073, "end_char_idx": 20528, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "629d5f8b-2e61-482f-8c4c-b1692b3bcd72": {"__data__": {"id_": "629d5f8b-2e61-482f-8c4c-b1692b3bcd72", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f15ad6fa-d5e1-4b78-abd3-f742e2cd9f67", "node_type": "1", "metadata": {}, "hash": "1c30512ba8c9a7077eab3aeccba36ae6504296a65c787aa1549ad3a58f7b6f06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5c8b62f-d255-4f17-8309-ab9582b6f278", "node_type": "1", "metadata": {}, "hash": "5c361685366177631ddac3f443dcd17b02eea0119e341b2c8480b8b7784d152a", "class_name": "RelatedNodeInfo"}}, "text": "#\n#  17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://poc6.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Instantiating the ActionOffchainRollup contract... done\n# The ActionOffchainRollup contract has been instantiated: 0x9c777c16b0a185caa895835b8f3b9e8d67be9f5e30197f71b4d32d2b8fde4b3b\n# Setting up the actions... done\n# \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks-poc6.phala.network/workflows/0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd/3\n# Your Attestor address: 0x2b5fe2920cce2f522d69613adaa9378ba43b687d\n# Your WORKFLOW_ID: 3\n# \u2728  Done in 73.22s.\n```\n\nGo to the [Phala Dashboard](https://dashboard.phala.network) and you can see your newly deployed Phat Contract.\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/Function-added.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### **Interact with Consumer Contract on Polygon Mumbai**\n\nTest Consumer Contract on Mumbai with a few tests to check for malformed requests failures, successful requests, and set the attestor.", "mimetype": "text/plain", "start_char_idx": 20529, "end_char_idx": 21744, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5c8b62f-d255-4f17-8309-ab9582b6f278": {"__data__": {"id_": "c5c8b62f-d255-4f17-8309-ab9582b6f278", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "629d5f8b-2e61-482f-8c4c-b1692b3bcd72", "node_type": "1", "metadata": {}, "hash": "50e3ba82b35ad6366acbeeae0589243ea08a0d06ca222f93802706bc9a24033d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a010dc9-9852-4fa2-91f2-9153240144e1", "node_type": "1", "metadata": {}, "hash": "d0189e7ffc69a79ae82d2988bd73bdd31f26f23725a8b2a761c2019447aa7fd2", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run test-set-attestor\n```\n\n```sh\nnpm run test-set-attestor\n# $ hardhat run --network mumbai ./scripts/mumbai/set-attestor.ts\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Bricks \ud83e\uddf1 UI dashboard (https://bricks-poc6.phala.network)\n# - Go to 'Configure Client' section where a text box reads 'Add Consumer Smart Contract'\n# - Set value to 0x090E8fDC571d65459569BC87992C1026121DB955\n# Done\n# \u2728  Done in 2.69s.\n```\n\nTest pushing a malform request.\n\n```sh\nnpm run test-push-malformed-request\n```\n\n```sh\nnpm run test-push-malformed-request\n# $ hardhat run --network mumbai ./scripts/mumbai/push-malformed-request.ts\n# Pushing a malformed request...\n# Done\n# \u2728  Done in 2.48s.\n```\n\nTest pushing a valid request.\n\n```sh\nnpm run test-push-request\n```\n\n```sh\nnpm run test-push-request\n# Pushing a request...\n# Done\n# \u2728  Done in 2.97s.\n```\n\n### Update Phat Contract on Phala PoC6 Testnet <a href=\"#user-content-update-phat-contract-on-phala-poc5-testnet\" id=\"user-content-update-phat-contract-on-phala-poc5-testnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. We now allow you to update your Phat Contract easily in the commandline. Now let's update the Phat Contract with the following command:\n\n```shell\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update -a ./polkadot-account.json\n```\n\n```shell\nnpx @phala/fn update -a ./polkadot-account.json\n# ?", "mimetype": "text/plain", "start_char_idx": 21746, "end_char_idx": 23385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a010dc9-9852-4fa2-91f2-9153240144e1": {"__data__": {"id_": "4a010dc9-9852-4fa2-91f2-9153240144e1", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5c8b62f-d255-4f17-8309-ab9582b6f278", "node_type": "1", "metadata": {}, "hash": "5c361685366177631ddac3f443dcd17b02eea0119e341b2c8480b8b7784d152a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cbb3b51-bcbb-4c7b-b14d-a9008fcacca8", "node_type": "1", "metadata": {}, "hash": "1b4435a603040803f9f18aee04626c5c3c37dc8da06190b8476802bd843f700d", "class_name": "RelatedNodeInfo"}}, "text": "Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.\n#\n#   17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://poc6.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Checking your workflow settings... done\n# Updating... done\n# The Phat Function for workflow 1 has been updated.\n# \u2728  Done in 10.82s.\n```\n\nCongrats! You've now successfully updated your Phat Contract!\n\n### Deploy to Polygon Mainnet <a href=\"#user-content-deploy-to-polygon-mainnet\" id=\"user-content-deploy-to-polygon-mainnet\"></a>\n\nEnsure to save the address after deploying the Consumer Contract because this address will be used in the \"[Configure Client](https://docs.phala.network/developers/bricks-and-blueprints/featured-blueprints/lensapi-oracle#step-4-configure-the-client-address)\" section of Phat Bricks UI. The deployed address will also be set to the environment variable `POLYGON_CONSUMER_CONTRACT_ADDRESS`.\n\n> **Note**: Your contract address will be different than `0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run main-deploy`.\n\n```sh\nnpm run main-deploy\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://polygonscan.com/address/0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# POLYGON_CONSUMER_CONTRACT_ADDRESS=0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n#\n# Configuring...\n# Done\n# \u2728  Done in 8.20s.", "mimetype": "text/plain", "start_char_idx": 23386, "end_char_idx": 25097, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cbb3b51-bcbb-4c7b-b14d-a9008fcacca8": {"__data__": {"id_": "3cbb3b51-bcbb-4c7b-b14d-a9008fcacca8", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a010dc9-9852-4fa2-91f2-9153240144e1", "node_type": "1", "metadata": {}, "hash": "d0189e7ffc69a79ae82d2988bd73bdd31f26f23725a8b2a761c2019447aa7fd2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c01d4ba8-a4fb-4cbf-a880-45e001694da1", "node_type": "1", "metadata": {}, "hash": "40995b1425da1ea83f4d29998d7f69f2ad093b96cd1bd8f99a479f981d7ca707", "class_name": "RelatedNodeInfo"}}, "text": "```\n\n### **(Optional) Verify Contract on Polygon Mainnet**\n\nEnsure to update the `polygon.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `polygon.arguments.ts` file.\n\n```sh\nnpm run main-verify -- 0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n# Nothing to compile\n# No need to generate any newer typings.\n# Successfully submitted source code for contract\n# contracts/OracleConsumerContract.sol.sol:OracleConsumerContract.sol.sol.sol at 0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract OracleConsumerContract.sol on Etherscan.\n# https://polygonscan.com/address/0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4#code\n# Done in 8.88s.\n```\n\n### Deploy Phat Contract to Phala Mainnet <a href=\"#user-content-deploy-phat-contract-to-phala-mainnet\" id=\"user-content-deploy-phat-contract-to-phala-mainnet\"></a>\n\nFor customizing your Phat Contract, Phat Contract custom configurations can be found here in [Customizing Your Phat Contract](customizing-your-phat-contract.md) to learn more before deploying to Phala Mainnet.\n\nNow that are Phat Contract has built successfully, let's deploy to Phala Mainnet with the following command:\n\n```shell\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --mode=production --coreSettings=https://api-v2.lens.dev/\n# If polkadot-account.json is in the root of project\nnpx @phala/fn upload --mode=production -a ./polkadot-account.json --coreSettings=https://api-v2.lens.dev/\n```\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.", "mimetype": "text/plain", "start_char_idx": 25098, "end_char_idx": 26912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c01d4ba8-a4fb-4cbf-a880-45e001694da1": {"__data__": {"id_": "c01d4ba8-a4fb-4cbf-a880-45e001694da1", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cbb3b51-bcbb-4c7b-b14d-a9008fcacca8", "node_type": "1", "metadata": {}, "hash": "1b4435a603040803f9f18aee04626c5c3c37dc8da06190b8476802bd843f700d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd948bc3-3f98-4cc1-a09a-7493c56d911f", "node_type": "1", "metadata": {}, "hash": "7829e681b52830b1bdf26ea62aced9c6c62caf74d2ba706263cf30165b046962", "class_name": "RelatedNodeInfo"}}, "text": "```shell\nnpx @phala/fn upload --mode=production -a ./polkadot-account.json --coreSettings=https://api-v2.lens.dev/\n# ? Please enter your client RPC URL https://polygon.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# ? Please enter your consumer address 0xA4Be456Fd0d41968a52b34Cdb8Ba875F2281134a\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.\n#\n#  17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://api.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Instantiating the ActionOffchainRollup contract... done\n# The ActionOffchainRollup contract has been instantiated: 0x9c777c16b0a185caa895835b8f3b9e8d67be9f5e30197f71b4d32d2b8fde4b3b\n# Setting up the actions... done\n# \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks-poc6.phala.network/workflows/0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd/3\n# Your Attestor address: 0x2b5fe2920cce2f522d69613adaa9378ba43b687d\n# Your WORKFLOW_ID: 2\n# \u2728  Done in 73.22s.\n```\n\n### **Interact with Consumer Contract on Polygon Mainnet**\n\nExecute Scripts to Consumer Contract on Polygon Mainnet. The Consumer Contract on Polygon Mainnet with a few actions to mimic a malformed request, successful requests, and set the attestor.", "mimetype": "text/plain", "start_char_idx": 26914, "end_char_idx": 28328, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd948bc3-3f98-4cc1-a09a-7493c56d911f": {"__data__": {"id_": "bd948bc3-3f98-4cc1-a09a-7493c56d911f", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c01d4ba8-a4fb-4cbf-a880-45e001694da1", "node_type": "1", "metadata": {}, "hash": "40995b1425da1ea83f4d29998d7f69f2ad093b96cd1bd8f99a479f981d7ca707", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e6d64c8-a6d1-47a6-a7c9-17ef1b91ef1e", "node_type": "1", "metadata": {}, "hash": "d2ec4ac5af20ff2aacb240db35fa2b1c9c81bc7d29af45961b6a6dfe0c6fd058", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run main-set-attestor\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Bricks \ud83e\uddf1 UI dashboard (https://bricks-poc6.phala.network)\n# - Go to 'Configure Client' section where a text box reads 'Add Consumer Smart Contract'\n# - Set value to 0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n# Done\n# \u2728  Done in 1.56s.\n# execute push-malformed-request\nnpm run main-push-malformed-request\n# Pushing a malformed request...\n# Done\n# execute push-request\nnpm run main-push-request\n# Pushing a request...\n# Done\n```\n\n### Update Phat Contract on Phala Mainnet <a href=\"#user-content-update-phat-contract-on-phala-mainnet\" id=\"user-content-update-phat-contract-on-phala-mainnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. We now allow you to update your Phat Contract easily in the command line. Now let's update the Phat Contract with the following command:\n\n```shell\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update --mode=production\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update --mode=production -a ./polkadot-account.json\n```\n\n```shell\nnpx @phala/fn update --mode=production -a ./polkadot-account.json\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 28330, "end_char_idx": 29785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e6d64c8-a6d1-47a6-a7c9-17ef1b91ef1e": {"__data__": {"id_": "8e6d64c8-a6d1-47a6-a7c9-17ef1b91ef1e", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2", "node_type": "4", "metadata": {}, "hash": "d6c52e6918e4efa036800710048b7298616e38c28a6a29a243ccf1a24c68e41f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd948bc3-3f98-4cc1-a09a-7493c56d911f", "node_type": "1", "metadata": {}, "hash": "7829e681b52830b1bdf26ea62aced9c6c62caf74d2ba706263cf30165b046962", "class_name": "RelatedNodeInfo"}}, "text": "#\n#   17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://api.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Checking your workflow settings... done\n# Updating... done\n# The Phat Function for workflow 1 has been updated.\n# \u2728  Done in 10.82s.\n```\n\n:tada: Congrats! You've now successfully updated your Phat Contract!\n\n## Closing <a href=\"#user-content-closing\" id=\"user-content-closing\"></a>\n\nOnce you have stored, the deployed address of the Consumer Contract and set the value in the \"Configure Client\" section of the deployed Phala Oracle, you will now have a basic boilerplate example of how to connect your Polygon dApp to a LensAPI Oracle Blueprint. Execute a new requests and check if your configuration is correct like below:\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/polygonscan-ex.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 29786, "end_char_idx": 30813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e0f9652-2491-4a46-948e-fb3db2c95d13": {"__data__": {"id_": "5e0f9652-2491-4a46-948e-fb3db2c95d13", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-phala-mining-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c64dbd33-f9b7-452d-9aed-c5edff6e0a2d", "node_type": "4", "metadata": {}, "hash": "32b4ad302017feea4b1370276bf6feb7277edd724fc5adc02d791277662bfc56", "class_name": "RelatedNodeInfo"}}, "text": "# Installing Khala Solo Scripts\n\n## Prerequisites <a href=\"#prerequisites\" id=\"prerequisites\"></a>\n\nBefore you go further, please ensure that your have correct setup your hardware, BIOS and operating system according to the previous section.\n\n## Download the Khala Scripts <a href=\"#download-the-phala-scripts\" id=\"download-the-phala-scripts\"></a>\n\nThe Khala Solo Scripts are available on our [Phala Mining Script](https://github.com/Phala-Network/solo-mining-scripts/) repository on GitHub, it can be downloaded with `wget` by executing the following commands in the terminal:\n\n```\nsudo apt update && sudo apt upgrade -y && sudo apt autoremove -y\nsudo apt install wget unzip\ncd ~\nwget https://github.com/Phala-Network/solo-mining-scripts/archive/refs/heads/main.zip\nunzip main.zip\n```\n\n## Activate the Intel\u00ae SGX Software <a href=\"#activate-the-intel-sgx-software\" id=\"activate-the-intel-sgx-software\"></a>\n\n> \u2139 You may have already enabled the Intel\u00ae SGX Extensions during your hardware setup in the [previous section](broken-reference). Skip and proceed to \ud83d\udc49[Install Phala Tools](installing-phala-mining-tools.md#install-phala-tools) if already activated.\n\nExecute the following commands in the terminal, the computer should reboot after execution.\n\n```\ncd ~/solo-mining-scripts-main/tools\nsudo ./sgx_enable\nsudo reboot\n```\n\n## Install Phala Tools\n\nExecute the following commands in your terminal:\n\n```\ncd ~/solo-mining-scripts-main\nsudo ./phala.sh install\n```\n\n> This will install the Phala CLI\n\n\\\n\ud83c\udf89 Congratulations! You have successfully installed the required Phala tools.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2462aa1d-bd4b-441d-ad44-cbb36d5b6e44": {"__data__": {"id_": "2462aa1d-bd4b-441d-ad44-cbb36d5b6e44", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc8753a0-9772-45b6-90c6-bac4e5d07ccf", "node_type": "1", "metadata": {}, "hash": "1bbc3da6dbdc8a1cd577ce0fbb2b34ad9847a9c262f2720e0493f166a6c7f499", "class_name": "RelatedNodeInfo"}}, "text": "# Swanky Phala CLI Tool\n\n> **Note:** Feedback and contributions are welcome. Please add issues for any features or bugs found. Join our [discord](https://discord.gg/phala-network) and jump in our `#dev` channel to speak with our devs.\n\n## Contract Build Requirements\n\nEnsure your rust toolchain requirements are installed correctly to ensure your contracts can be built correctly.\n\n| Rust Toolchain | Requirement                                 |\n| -------------- | ------------------------------------------- |\n| cargo          | <= `cargo 1.72.0`                           |\n| cargo-contract | <= `3.2.0-unknown-x86_64-unknown-linux-gnu` |\n| target         | `wasm32-unknown-unknown`                    |\n| component      | `rust-src`                                  |\n\n## Swanky Suite\n\n[Swanky Suite](https://docs.astar.network/docs/build/wasm/swanky-suite/) aims to be an \"all-in-one\" tool for Wasm smart contract developers. It is modeled on existing tools like `cargo contract CLI` and `polkadot.js`. The `swanky-cli` tool is built with the `oclif` (Open CLI Framework [repo](https://oclif.io/docs/introduction)).\n\nBuilding with `oclif` allows for the `swanky-cli` to be extended through the [plugin-plugin](https://github.com/oclif/plugin-plugins) feature. Now the `swanky-plugin-phala` plugin can be added to the `swanky-cli` (note: must install `swanky-cli`first) with the command `swanky plugins:link [PATH_TO_REPO]`. Specific installation instructions and examples will be displayed later, so do not worry about getting this set up now.\n\n## DevPHAse\n\n[DevPHAse](https://github.com/l00k/devphase) is a developer tool built and maintained by Phala community member 100k. DevPhase is a command line utility that enables a developer building Phat Contracts to:\n\n* Install binaries for phala-node, pherry and pruntime.\n* Install local testnet configuration files to allow for Phat Contracts to be deployed into a cluster with a systems contract to enable SideVM for logging.\n* Create testnet accounts.\n* Start the local testnet.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2035, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc8753a0-9772-45b6-90c6-bac4e5d07ccf": {"__data__": {"id_": "cc8753a0-9772-45b6-90c6-bac4e5d07ccf", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2462aa1d-bd4b-441d-ad44-cbb36d5b6e44", "node_type": "1", "metadata": {}, "hash": "ef18232cbdc24edf7dc4ec634bf8ed1c9cc7dca5b16f5e626adbdfb3124a5017", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08e6b0de-e5f7-4526-865c-03b5698035ba", "node_type": "1", "metadata": {}, "hash": "ef33e9749a162fcacfaa65ec67f62adec4bdee95650d8723811899f2a14d9a8d", "class_name": "RelatedNodeInfo"}}, "text": "* Configure the local testnet by:\n  * Registering Workers and their endpoints\n  * Register Gatekeeper\n  * Upload systems contract code\n  * Deploy a Cluster with the `su` account (Default: Alice)\n  * Deploy driver contract code\n    * Phat Contract Tokenomics\n    * SideVm Deployer\n  * Authorize Logger SideVM Contract\n  * Upload SideVM Logger to cluster and Deploy SideVM Logger\n* Compile Phat contracts into a `.wasm`, `metadata.json` and `.contract` file(combines the `.wasm` and `metadata.json` file into one `.contract` file).\n* Upload and Instantiate a compiled Phat Contract to a cluster on the local testnet.\n* Call (queries and transactions) instantiated Phat Contracts directly.\n* Check local dev environment setup.\n\n## Getting Started\n\n### Installation\n\n> _Currently `swanky phala` will only support Ubuntu Linux. Other Linux operating systems are support, but this requires downloading and compiling `phala-node`, `pherry` and `pruntime` binaries locally. Then copy the binaries to the `stacks/` folder._\n\n#### Install Swanky CLI\n\nFollow the instructions from Astar Network wiki [here](https://docs.astar.network/docs/build/wasm/swanky-suite/cli/#installing).\n\n#### Install Swanky Phala Plugin\n\n**npm**\n\n```bash\nnpm install @phala/swanky-plugin-phala\n```\n\nor\n\n```bash\nnpx @phala/swanky-plugin-phala\n```\n\n**locally**\n\nClone the `swanky-plugin-phala` GitHub repository.", "mimetype": "text/plain", "start_char_idx": 2036, "end_char_idx": 3413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08e6b0de-e5f7-4526-865c-03b5698035ba": {"__data__": {"id_": "08e6b0de-e5f7-4526-865c-03b5698035ba", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc8753a0-9772-45b6-90c6-bac4e5d07ccf", "node_type": "1", "metadata": {}, "hash": "1bbc3da6dbdc8a1cd577ce0fbb2b34ad9847a9c262f2720e0493f166a6c7f499", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bbd6027-5936-40cf-a6ae-a5ccecaecf8c", "node_type": "1", "metadata": {}, "hash": "be76bd650bfde980bc2d7c9c5501329b49b7c842b4c2f344851b45f8d25f5929", "class_name": "RelatedNodeInfo"}}, "text": "```bash\ngit clone git@github.com:Phala-Network/swanky-plugin-phala.git\ncd swanky-plugin-phala\nyarn install\nyarn build\n```\n\n#### Add `swanky-plugin-phala` to `swanky` CLI\n\nUse `plugins:install` for **npm**\n\n```bash\nswanky plugins:install @phala/swanky-plugin-phala\n```\n\nor **GitHub URL**\n\n```bash\nswanky plugins:install https://github.com/Phala-Network/swanky-plugin-phala.git\n```\n\nIf installed and built **locally** then use `plugins:link` to link `swanky` to the local path to `swanky-plugin-phala`\n\n```bash\nswanky plugins:link [PATH_TO_REPO]\n```\n\nexample:\n\n```bash\nswanky plugins:link ~/Projects/swanky-plugin-phala\n\n@astar-network/swanky-cli: linking plugin @phala/swanky-plugin-phala... done\n```\n\n### Commands\n\nNow there should be a `swanky phala` CLI available. Execute the `swanky phala --help` command to check available commands.\n\n```bash\nswanky phala --help\n```\n\nExpected output:\n\n```bash\nSwanky plugin to setup Phala developer environment for Phat Contracts.\n\nUSAGE\n  $ swanky phala COMMAND\n\nTOPICS\n  phala account   Create or list accounts.\n  phala contract  Create, compile, deploy, test or call Phat Contracts.\n  phala node      Download binaries to start local testnet and configure for Phat Contract development.\n\nCOMMANDS\n  phala check  Not Available\n  phala init   Generate a new Phat Contract environment\n```\n\n### Initialize a Project\n\nEasily get started with a new Phat Contract project by executing `swanky phala init [PROJECT_NAME]`\n\n```bash\nswanky phala init test-swanky-phala\n```\n\nThis will initiate a round of questions to get your Phat Contract template configured. First question will ask:\n\n```bash\n? Which contract language should we use? (Use arrow keys)\n\u276f pink\n```\n\nAt this moment, `pink` is the only contract language option at this time. `pink` is the Phala `ink` library to support rust-based [ink!", "mimetype": "text/plain", "start_char_idx": 3415, "end_char_idx": 5245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bbd6027-5936-40cf-a6ae-a5ccecaecf8c": {"__data__": {"id_": "8bbd6027-5936-40cf-a6ae-a5ccecaecf8c", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08e6b0de-e5f7-4526-865c-03b5698035ba", "node_type": "1", "metadata": {}, "hash": "ef33e9749a162fcacfaa65ec67f62adec4bdee95650d8723811899f2a14d9a8d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebe996ac-9a84-4fc6-8f58-33d9878650c7", "node_type": "1", "metadata": {}, "hash": "e700f135905195480f977140025cb18cf1e6f979f00647f2cdccb626a44fae45", "class_name": "RelatedNodeInfo"}}, "text": "language](https://paritytech.github.io/ink/) in Phala\u2019s `pRuntime` workers.\n\nNext you\u2019ll be asked the what contract template to use (`blank`, `http_client`, or `phat_hello` more to come!).\n\n```bash\n? Which contract template should we use? (Use arrow keys)\n  blank \n\u276f http_client \n  phat_hello\n```\n\nNow that you have a Phat Contract language and template picked, you will be asked to create a name for the PC. (_**default is the template name**_)\n\n```bash\n? What should we name your contract? (http_client)\n```\n\nAfter you select a name, you\u2019ll be asked for your `git` username (default is `git config --get user.name`) and email.\n\n```bash\n? What is your name? (HashWarlock)\n? What is your email?\n```\n\nAn expected final output will display when the template files and project directory is created.\n\n```bash\n? Which contract language should we use? pink\n? Which contract template should we use? phat_hello\n? What should we name your contract? phat_hello\n? What is your name? hashwarlock\n? What is your email? \n\u2714 Checking dependencies OK\nInitializing\n\u2714 Copying template files OK\n\u2714 Processing templates OK\n\u2714 Initializing git OK\n\u2714 Installing dependencies OK\n\u280b Copying devphase config files[Initializer] Creating directories\n[Initializer] Creating files\n[Initializer] devphase.config.ts\n[Initializer] accounts.json\n[Initializer] scripts\n[Initializer] Creating sample contract\n[ContractManager] Contract created in:\n[ContractManager] /home/hashwarlock/Projects/Phala/Swanky/demo/swanky-plugin-phala/test-swanky-phala/contracts/flipper\n\u2714 Copying devphase config files OK\n\u280b Installing phala node, pruntime and pherry binaries[StackBinaryDownloader] Preparing Phala stack release\n[StackBinaryDownloader] Creating stack directory\n  \u2714 Checking releases directory\n  \u2714 Checking target release binaries\n\u2714 Installing phala node, pruntime and pherry binaries OK\n\ud83d\ude0e Phat Contract project successfully initialised! \ud83d\ude0e\n```\n\nExecute `ls` to list the new project directory called `test-swanky-phala` in the current working directory.", "mimetype": "text/plain", "start_char_idx": 5246, "end_char_idx": 7254, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebe996ac-9a84-4fc6-8f58-33d9878650c7": {"__data__": {"id_": "ebe996ac-9a84-4fc6-8f58-33d9878650c7", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8bbd6027-5936-40cf-a6ae-a5ccecaecf8c", "node_type": "1", "metadata": {}, "hash": "be76bd650bfde980bc2d7c9c5501329b49b7c842b4c2f344851b45f8d25f5929", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f74b5d2-17a7-4529-8bad-2458dd7a4a74", "node_type": "1", "metadata": {}, "hash": "2936b2d55907a640f84bda61728e6a2a9ad1b515e9ce7bfbefd0e2e30756d1c1", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nls\n```\n\nExpected output:\n\n```bash\ntotal 0\ndrwxr-xr-x   3 hashwarlock  staff    96B Jan 19 20:45 .\ndrwxr-xr-x   5 hashwarlock  staff   160B Jan 19 18:37 ..\ndrwxr-xr-x  15 hashwarlock  staff   480B Jan 19 20:46 test-swanky-phala\n```\n\n`cd` into `test-swanky-phala` and execute `ls`.\n\n```bash\ncd test-swanky-phala\nls\n```\n\nExpected output:\n\n```bash\ntotal 152\ndrwxr-xr-x. 1 hashwarlock hashwarlock    254 Apr  4 16:27 .\ndrwxr-xr-x. 1 hashwarlock hashwarlock    468 Apr  4 16:27 ..\n-rw-r--r--. 1 hashwarlock hashwarlock    143 Apr  4 16:27 accounts.json\ndrwxr-xr-x. 1 hashwarlock hashwarlock     34 Apr  4 16:27 contracts\ndrwxr-xr-x. 1 hashwarlock hashwarlock     26 Apr  4 16:27 .devphase\n-rw-r--r--. 1 hashwarlock hashwarlock   4582 Apr  4 16:27 devphase.config.json\ndrwxr-xr-x. 1 hashwarlock hashwarlock     98 Apr  4 16:26 .git\n-rw-r--r--. 1 hashwarlock hashwarlock   3595 Apr  4 16:26 .gitignore\ndrwxr-xr-x. 1 hashwarlock hashwarlock   6116 Apr  4 16:27 node_modules\n-rw-r--r--. 1 hashwarlock hashwarlock    255 Apr  4 16:26 package.json\ndrwxr-xr-x. 1 hashwarlock hashwarlock     18 Apr  4 16:27 scripts\ndrwxr-xr-x. 1 hashwarlock hashwarlock     36 Apr  4 16:27 stacks\ndrwxr-xr-x.", "mimetype": "text/plain", "start_char_idx": 7256, "end_char_idx": 8442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f74b5d2-17a7-4529-8bad-2458dd7a4a74": {"__data__": {"id_": "4f74b5d2-17a7-4529-8bad-2458dd7a4a74", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebe996ac-9a84-4fc6-8f58-33d9878650c7", "node_type": "1", "metadata": {}, "hash": "e700f135905195480f977140025cb18cf1e6f979f00647f2cdccb626a44fae45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02b58da2-b890-4edf-99ac-93a55d44991f", "node_type": "1", "metadata": {}, "hash": "9e912cf7c60dee4d0ca0173da5a3099284bdd7762fd6472890aaaa0e8d3a46ac", "class_name": "RelatedNodeInfo"}}, "text": "1 hashwarlock hashwarlock     20 Apr  4 16:26 tests\n-rw-r--r--. 1 hashwarlock hashwarlock    520 Apr  4 16:26 tsconfig.json\n-rw-r--r--. 1 hashwarlock hashwarlock 130190 Apr  4 16:27 yarn.lock\n```\n\nHere is an example of how the directory structure looks like:\n\n```bash\nls stacks/nightly*\n```\n\nExpected output:\n\n```bash\ntotal 116256\ndrwxr-xr-x. 1 hashwarlock hashwarlock      272 Apr  4 16:27 .\ndrwxr-xr-x. 1 hashwarlock hashwarlock       36 Apr  4 16:27 ..\n-rw-r--r--. 1 hashwarlock hashwarlock  6411768 Apr  4 16:27 libpink.so.1.0\n-rw-r--r--. 1 hashwarlock hashwarlock    59475 Apr  4 16:27 log_server.contract\n-rw-r--r--. 1 hashwarlock hashwarlock  2278251 Apr  4 16:27 log_server.sidevm.wasm\n-rwxr-xr-x. 1 hashwarlock hashwarlock 68365760 Apr  4 16:27 phala-node\n-rwxr-xr-x. 1 hashwarlock hashwarlock 14814056 Apr  4 16:27 pherry\n-rwxr-xr-x. 1 hashwarlock hashwarlock 26937712 Apr  4 16:27 pruntime\n-rw-r--r--. 1 hashwarlock hashwarlock    41568 Apr  4 16:27 sidevm_deployer.contract\n-rw-r--r--. 1 hashwarlock hashwarlock    79326 Apr  4 16:27 system.contract\n-rw-r--r--.", "mimetype": "text/plain", "start_char_idx": 8443, "end_char_idx": 9516, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02b58da2-b890-4edf-99ac-93a55d44991f": {"__data__": {"id_": "02b58da2-b890-4edf-99ac-93a55d44991f", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4f74b5d2-17a7-4529-8bad-2458dd7a4a74", "node_type": "1", "metadata": {}, "hash": "2936b2d55907a640f84bda61728e6a2a9ad1b515e9ce7bfbefd0e2e30756d1c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29b38c37-07b4-423f-9af5-9576f598892d", "node_type": "1", "metadata": {}, "hash": "279b5a79e8570cbec498c8e45495df1c96284004a058440a8437a256238bdb23", "class_name": "RelatedNodeInfo"}}, "text": "1 hashwarlock hashwarlock    39543 Apr  4 16:27 tokenomic.contract\n```\n\n### Start a Phala Local Testnet\n\n`swanky phala node start` will check if the following exists in the current directory or up:\n\n* `devphase.config.json`\n* `stack/`\n  * `phala-node`\n  * `pruntime`\n  * `pherry`\n\nOnce verified file are downloaded and there is not an instance running currently, the local testnet will start.\n\n```bash\nswanky phala node start\n```\n\nExpected output:\n\n```bash\nStarting local tesnet stack\n[StackBinaryDownloader] Preparing Phala stack release\n  \u2714 Checking releases directory\n  \u2714 Checking target release binaries\n[StackManager] Starting stack\n  \u2714 Start node component\n  \u2714 Start pRuntime component\n  \u2714 Start pherry component\n```\n\n### Configure the Running Local Testnet for Phat Contract Deployment\n\nA Phala local testnet needs the following for Phat Contracts to be deployed and instantiated to a cluster:\n\n* Register the Workers and setup their endpoints;\n* Register the Gatekeepers;\n* Create Cluster `0x01` with`Alice`as the owner and the System contract above;\n* Register two Drivers to the System contract\n  * the log server printing all the Phat contracts' log;\n  * the SideVM deployer controlling which contracts can start the SideVM;\n\nThis is accomplished by executing `swanky phala node setup`.", "mimetype": "text/plain", "start_char_idx": 9517, "end_char_idx": 10814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29b38c37-07b4-423f-9af5-9576f598892d": {"__data__": {"id_": "29b38c37-07b4-423f-9af5-9576f598892d", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02b58da2-b890-4edf-99ac-93a55d44991f", "node_type": "1", "metadata": {}, "hash": "9e912cf7c60dee4d0ca0173da5a3099284bdd7762fd6472890aaaa0e8d3a46ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4943be20-08f8-4a48-9afd-42f5f438e673", "node_type": "1", "metadata": {}, "hash": "22cd490f7f25cef63b571e4b1cdd7b0514ede6adfb3c739cc8974edb48509f96", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nswanky phala node setup\n```\n\nExpected output:\n\n```bash\nSetting up Phala local testnet stack\n\u280b Setting up local testnet stack[StackSetupService] Starting stack setup with default version\n  \u2714 Fetch worker info\n  \u2714 Load system contracts\n  \u2193 Register worker [skipped]\n  \u2193 Register gatekeeper [skipped]\n  \u2193 Upload Pink system code [skipped]\n  \u2714 Verify cluster\n  \u2193 Create cluster [skipped]\n  \u2714 Wait for cluster to be ready\n  \u2714 Create system contract API\n  \u2714 Deploy tokenomic driver\n  \u2714 Deploy SideVM driver\n  \u2714 Calculate logger server contract ID\n  \u2714 Prepare chain for logger server\n  \u2714 Deploy logger server\nStack is ready\nCluster Id\n0x0000000000000000000000000000000000000000000000000000000000000001\n\u2714 Setting up local testnet stack OK\n\u2714 Cleanup OK\n\ud83d\ude0e Phala local testnet configured successfully! \ud83d\ude0e\n```\n\n### Compile Your Contract\n\nWe have accomplished the following:\n\n* Created a project directory with a configured template Phat Contract.\n* Downloaded Phala binaries, drivers, system contracts and sideVM programs.\n* Started and set up a local testnet to start deploying Phat Contracts to a worker node in the deployed `0x01` cluster.\n\nLet\u2019s begin the process of deploying the Phat Contract, but first the PC must be compiled to get the `contract.wasm`, `metadata.json` and `contract.contract` files that will be used to upload and instantiate the PC to the local testnet cluster.\n\n> **Note:** Follow these [installation steps](https://wiki.phala.network/en-us/build/stateless/setup/) before continuing to ensure you can compile your Phat Contract.", "mimetype": "text/plain", "start_char_idx": 10816, "end_char_idx": 12367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4943be20-08f8-4a48-9afd-42f5f438e673": {"__data__": {"id_": "4943be20-08f8-4a48-9afd-42f5f438e673", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29b38c37-07b4-423f-9af5-9576f598892d", "node_type": "1", "metadata": {}, "hash": "279b5a79e8570cbec498c8e45495df1c96284004a058440a8437a256238bdb23", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9810b5ff-be65-41f3-9397-257992f29012", "node_type": "1", "metadata": {}, "hash": "a8a1ce0071322d4f2a721f78b31e755dd60c99da8f1dc60ce0ba6bc704abe46d", "class_name": "RelatedNodeInfo"}}, "text": "We can compile the PC with `swanky phala contract compile -c [CONTRACT_NAME]` and will look like the follow:\n\n```bash\nswanky phala contract compile -c phat_hello\n```\n\nExpected output:\n\n```bash\nCompile contract(s)\n\u280b Compiling Phat Contract phat_hello[MultiContractExecutor] Criteria: phat_hello\n[MultiContractExecutor] Matched contracts:\n[MultiContractExecutor] phat_hello\n[MultiContractExecutor] \n  \u276f phat_hello\n  \u2714 phat_hello\n\u2714 Compiling Phat Contract phat_hello OK\n\ud83d\ude0e Phat Contract compiled successfully! \ud83d\ude0e\n```\n\n### Generate Types for Contract\n\nIf you have compiled your contract already, the types will be auto-generated at the end of a successful compilation. In the case that the types were not generated for the contract, execute the `swanky phala contract typegen [CONTRACT_NAME]`.\n\nAn example of the output will create `typings/` folder with a TypeScript file of the contract's generated types.\n\n```bash\nswanky phala contract typegen phat_hello\n```\n\nExpected output:\n\n```bash\nCreate type bindings for contracts\n\u280b Creating type bindings for Phat Contract phat_hello[TypeBinder] Generating type bindings for: phat_hello\n\u2714 Creating type bindings for Phat Contract phat_hello OK\n\ud83d\ude0e Phat Contract types generated successfully! \ud83d\ude0e\n```\n\n### Validate Your Compiled WASM Contract\n\nSometimes there are difficult to find errors that lie within a succesfully compiled wasm blob. The command `swanky phala contract validate -c [CONTRACT_NAME]` will do a preliminary check to verify if the compiled contract is valid for deployment.\n\n```bash\nswanky phala contract validate -c phat_hello\n```\n\nExpected output:\n\n```\nValidating compiled WASM of phat_hello contract...\nphat_hello.wasm validated successfully!\n\ud83d\ude0e Phat Contract validated successfully!", "mimetype": "text/plain", "start_char_idx": 12369, "end_char_idx": 14104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9810b5ff-be65-41f3-9397-257992f29012": {"__data__": {"id_": "9810b5ff-be65-41f3-9397-257992f29012", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4943be20-08f8-4a48-9afd-42f5f438e673", "node_type": "1", "metadata": {}, "hash": "22cd490f7f25cef63b571e4b1cdd7b0514ede6adfb3c739cc8974edb48509f96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02dec6c3-c9d6-4736-8c8e-191e40f6eab4", "node_type": "1", "metadata": {}, "hash": "19c6c5ff7bc200ce2f36297f99e77dec15152588338af7c20281c847c3a05330", "class_name": "RelatedNodeInfo"}}, "text": "\ud83d\ude0e\n```\n\n### Deploy and Instantiate Contract\n\n```bash\nswanky phala contract deploy --help\n```\n\nExpected output:\n\n```bash\nDeploy contract\n\nUSAGE\n  $ swanky phala contract deploy -c <value> -o <value> [-t InkCode|SidevmCode|IndeterministicInkCode] [-n <value>] [-l <value>] [-a <value>] [-p <value>]\n\nFLAGS\n  -a, --account=<value>      [default: alice] Account used to deploy (managed account key)\n  -c, --contract=<value>     (required) Contract name\n  -l, --cluster=<value>      Target cluster Id\n  -n, --network=<value>      [default: local] Target network to deploy (local default)\n  -o, --constructor=<value>  (required) Contract constructor to call (name)\n  -p, --params=<value>...    [default: ] Arguments supplied to the message\n  -t, --type=<option>        [default: InkCode]\n                             <options: InkCode|SidevmCode|IndeterministicInkCode>\n\nDESCRIPTION\n  Deploy contract\n\nEXAMPLES\n  $ swanky phala contract deploy -c [CONTRACT_NAME] -t [CONTRACT_TYPE] -o [CONSTRUCTOR] -n [NETWORK] -l [CLUSTER_ID] -a [ACCOUNT] -p [..Args]\n```\n\nLet's deploy the `phat_hello` contract to the local testnet in cluster `0x0000000000000000000000000000000000000000000000000000000000000001`. Note if there is no account defined then `alice` will deploy the Phat Contract by default.", "mimetype": "text/plain", "start_char_idx": 14105, "end_char_idx": 15387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02dec6c3-c9d6-4736-8c8e-191e40f6eab4": {"__data__": {"id_": "02dec6c3-c9d6-4736-8c8e-191e40f6eab4", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9810b5ff-be65-41f3-9397-257992f29012", "node_type": "1", "metadata": {}, "hash": "a8a1ce0071322d4f2a721f78b31e755dd60c99da8f1dc60ce0ba6bc704abe46d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78d97621-b7e9-4172-a46c-c3d1b25db945", "node_type": "1", "metadata": {}, "hash": "144a66c4c05dd98eb0ec521601bec3fbf5c1383846942a8199406a41010c5847", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nswanky phala contract deploy -c phat_hello -o new -l 0x0000000000000000000000000000000000000000000000000000000000000001\n```\n\nExpected output:\n\n```bash\nDeploy contract\n\u2827 Deploying contract phat_helloContract deployed\nContract Id: 0x2e11166f9a623f7536434b5f4456b2311d3bb06717dd91a376380a61b8f9b0a8\nCluster Id:  0x0000000000000000000000000000000000000000000000000000000000000001\n\u2714 Deploying contract phat_hello OK\n\ud83d\ude0e Phat Contract deployed successfully! \ud83d\ude0e\n```\n\n### Interact with Deployed Contract\n\nThere are 2 ways to interact with a contract.\n\n* **Query**: if flag `-r` is not defined then `query` is default contract call.\n* **Transaction**: must define `-r` with the value `tx` to ensure the call is a transaction.", "mimetype": "text/plain", "start_char_idx": 15389, "end_char_idx": 16110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78d97621-b7e9-4172-a46c-c3d1b25db945": {"__data__": {"id_": "78d97621-b7e9-4172-a46c-c3d1b25db945", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02dec6c3-c9d6-4736-8c8e-191e40f6eab4", "node_type": "1", "metadata": {}, "hash": "19c6c5ff7bc200ce2f36297f99e77dec15152588338af7c20281c847c3a05330", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b31d31cc-bf1a-4572-9d7c-63cb16809562", "node_type": "1", "metadata": {}, "hash": "41234bcac8b1190e96ca1c5699bd7eb722dcf70879d82d65e3773a1258258977", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nswanky phala contract call --help\n```\n\nExpected output:\n\n```bash\nCall a Phat Contract\n\nUSAGE\n  $ swanky phala contract call -c <value> -i <value> -m <value> [-t InkCode|SidevmCode|IndeterministicInkCode] [-r query|tx] [-n <value>] [-l <value>] [-a <value>] [-p <value>]\n\nFLAGS\n  -a, --account=<value>    [default: alice] Account used to call (managed account key)\n  -c, --contract=<value>   (required) Contract name\n  -i, --id=<value>         (required) Contract ID\n  -l, --cluster=<value>    Target cluster Id\n  -m, --method=<value>     (required) Contract method to call (name)\n  -n, --network=<value>    [default: local] Target network to deploy (local default)\n  -p, --params=<value>...  [default: ] Arguments supplied to the message\n  -r, --request=<option>   [default: query] Request type: transaction or query\n                           <options: query|tx>\n  -t, --type=<option>      [default: InkCode]\n                           <options: InkCode|SidevmCode|IndeterministicInkCode>\n\nDESCRIPTION\n  Call a Phat Contract\n\nEXAMPLES\n  $ swanky phala contract call -c [CONTRACT_NAME] -t [CONTRACT_TYPE] -i [CONTRACT_ID] -r [REQUEST_TYPE] -m [METHOD] -n [NETWORK] -l [CLUSTER_ID] -a [ACCOUNT] -p [..ARGS]\n```\n\nNow we can interact with our deployed contract by taking the `Contract Id: 0x2e11166f9a623f7536434b5f4456b2311d3bb06717dd91a376380a61b8f9b0a8` returned from deploying `phat_hello` successfully. There is a function called `get_eth_balance` that takes a hex string of the account address. This is how the composed call would look like.", "mimetype": "text/plain", "start_char_idx": 16112, "end_char_idx": 17664, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b31d31cc-bf1a-4572-9d7c-63cb16809562": {"__data__": {"id_": "b31d31cc-bf1a-4572-9d7c-63cb16809562", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "78d97621-b7e9-4172-a46c-c3d1b25db945", "node_type": "1", "metadata": {}, "hash": "144a66c4c05dd98eb0ec521601bec3fbf5c1383846942a8199406a41010c5847", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8939f96e-243a-45cd-926f-49292d5f84be", "node_type": "1", "metadata": {}, "hash": "27f2b9b64b8fea03f086638f4493ec55f1e73ab850b861911ab5bd51d0682f91", "class_name": "RelatedNodeInfo"}}, "text": "> **Note:**&#x20;\n>\n> ETH address has to be converted to the Hex representation `0x307844306645333136423966303141336235666436373930463838433244353337333946383042343634` of the account opposed to using the Account ID `0xD0fE316B9f01A3b5fd6790F88C2D53739F80B464`. This can be retrieved through the `@polkadot/util` method `stringToHex(0xD0fE316B9f01A3b5fd6790F88C2D53739F80B464)`. Check the phat\\_hello.test.ts for the example.\n\n```bash\nswanky phala contract call -c phat_hello -l 0x0000000000000000000000000000000000000000000000000000000000000001 -i 0x2e11166f9a623f7536434b5f4456b2311d3bb06717dd91a376380a61b8f9b0a8 -m getEthBalance -p 0x307844306645333136423966303141336235666436373930463838433244353337333946383042343634\n```\n\nExpected output:\n\n```bash\nExecuting call to Phat Contract\nCall result:\n{\n  output: { ok: { ok: '20950198739626844' } },\n  debugMessage: '',\n  result: {\n    ok: { flags: [], data: '0x0000443230393530313938373339363236383434' }\n  },\n  gasConsumed: { refTime: 1342177279, proofSize: 0 },\n  gasRequired: { refTime: 65766686719, proofSize: 0 },\n  storageDeposit: { charge: 2047 }\n}\n```\n\n### Create a New Contract\n\nTo add a new contract there is the `swanky phala contract new [CONTRACT_NAME]` command. This can be done at the root of your new project folder and would look like the following.\n\n```bash\nswanky phala contract new new_contract\n```\n\nExpected output:\n\n```bash\nCreating new Phat Contract\n? Which contract language should we use? pink\n?", "mimetype": "text/plain", "start_char_idx": 17666, "end_char_idx": 19135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8939f96e-243a-45cd-926f-49292d5f84be": {"__data__": {"id_": "8939f96e-243a-45cd-926f-49292d5f84be", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b31d31cc-bf1a-4572-9d7c-63cb16809562", "node_type": "1", "metadata": {}, "hash": "41234bcac8b1190e96ca1c5699bd7eb722dcf70879d82d65e3773a1258258977", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8fff030c-c820-4452-9706-6b7b1a28891a", "node_type": "1", "metadata": {}, "hash": "2792c3193705df7703b3566d6a5ba8856700d741af95a09ed4a931b3ed68b211", "class_name": "RelatedNodeInfo"}}, "text": "Which contract template should we use? flipper\n? What should we name your contract? new_contract\n? What is your name? hashwarlock\n? What is your email? \n\u2714 Checking dependencies OK\nInitializing\n\u2714 Copying template files OK\n\u2714 Processing templates OK\n\ud83d\ude0e Successfully created new Phat Contract! \ud83d\ude0e\n\u2514\u2500[$]> ls contracts\ntotal 0\ndrwxr-xr-x. 1 hashwarlock hashwarlock  58 Apr  4 17:16 .\ndrwxr-xr-x. 1 hashwarlock hashwarlock 362 Apr  4 17:16 ..\ndrwxr-xr-x. 1 hashwarlock hashwarlock  26 Apr  4 17:16 new_contract\ndrwxr-xr-x. 1 hashwarlock hashwarlock  58 Apr  4 16:45 phat_hello\n```\n\n### Create/List Accounts\n\nThere is a basic dev account generation that can be protected by a configured password if desired. By default, the list of accounts can be seen with `swanky phala account list`.", "mimetype": "text/plain", "start_char_idx": 19136, "end_char_idx": 19912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fff030c-c820-4452-9706-6b7b1a28891a": {"__data__": {"id_": "8fff030c-c820-4452-9706-6b7b1a28891a", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8939f96e-243a-45cd-926f-49292d5f84be", "node_type": "1", "metadata": {}, "hash": "27f2b9b64b8fea03f086638f4493ec55f1e73ab850b861911ab5bd51d0682f91", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4518d9fc-ea68-406f-98e1-cc722f800c64", "node_type": "1", "metadata": {}, "hash": "c1b2a595da77fbae69cfb8f52b34f4ab9ceab97c4d539b97016af43d3ef925a4", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nswanky phala account list\n```\n\nExpected output:\n\n```bash\n\u2714 Stored dev accounts:\n Alias   Address                                          Protected \n \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n alice   45R2pfjQUW2s9PQRHU48HQKLKHVMaDja7N3wpBtmF28UYDs2 false     \n bob     43qsYbZGLn2xzNuurY6BY4QNDSUU7gLEcXuckpm6B3DEmEx9 false     \n charlie 43tXcmhJfmvbczKaPKgWXirf3a9r6zD63KAxHq4CTSPm4DRf false     \n dave    41iFgxEGsnyGv5Abdo6Uq6n6BjoLS3p1UMKv9GvwMVuY5er7 false     \n eve     45ppQG9QcAkUdh2AP25CxDAnBAK1EACefQA2rMtbApzu6UXa false     \n ferdie  41GUHy9gmjhst2edhhoWCZcf6rqCheD5XMGTUF53CWJTePuc false  \n```\n\nCreating a new account is simple and can be done with `swanky phala account create -a [ALIAS]`.\n\n```bash\nswanky phala account create -a hash\n```\n\nExpected output:\n\n```bash\n? Account passphrase (leave empty if to save as plain text)\nAccount created\n\n Alias Address                                          Islocked \n \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n hash  41b5ANRroHu44tKDoF3rtJnHFtdQnyTt72uXhad1vhja2oNQ          \n\ud83d\ude0e Account created successfully!", "mimetype": "text/plain", "start_char_idx": 19914, "end_char_idx": 21034, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4518d9fc-ea68-406f-98e1-cc722f800c64": {"__data__": {"id_": "4518d9fc-ea68-406f-98e1-cc722f800c64", "embedding": null, "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2367bfd0-268b-48cc-8249-885d81853ac9", "node_type": "4", "metadata": {}, "hash": "c12ab28f6fa09dd854e5281550b12cabd4fe43f0a6d6c5719ce07eb8efff7595", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8fff030c-c820-4452-9706-6b7b1a28891a", "node_type": "1", "metadata": {}, "hash": "2792c3193705df7703b3566d6a5ba8856700d741af95a09ed4a931b3ed68b211", "class_name": "RelatedNodeInfo"}}, "text": "\ud83d\ude0e\n\u2514\u2500[$]> swanky phala account list\n\u2714 Stored dev accounts:\n Alias   Address                                          Protected \n \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n alice   45R2pfjQUW2s9PQRHU48HQKLKHVMaDja7N3wpBtmF28UYDs2 false     \n bob     43qsYbZGLn2xzNuurY6BY4QNDSUU7gLEcXuckpm6B3DEmEx9 false     \n charlie 43tXcmhJfmvbczKaPKgWXirf3a9r6zD63KAxHq4CTSPm4DRf false     \n dave    41iFgxEGsnyGv5Abdo6Uq6n6BjoLS3p1UMKv9GvwMVuY5er7 false     \n eve     45ppQG9QcAkUdh2AP25CxDAnBAK1EACefQA2rMtbApzu6UXa false     \n ferdie  41GUHy9gmjhst2edhhoWCZcf6rqCheD5XMGTUF53CWJTePuc false     \n hash    41b5ANRroHu44tKDoF3rtJnHFtdQnyTt72uXhad1vhja2oNQ false \n```", "mimetype": "text/plain", "start_char_idx": 21035, "end_char_idx": 21713, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e387ffa8-1e44-4dd9-84d9-33405cd46a6c": {"__data__": {"id_": "e387ffa8-1e44-4dd9-84d9-33405cd46a6c", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3413355b-e06a-499f-8da4-592c50298cb9", "node_type": "1", "metadata": {}, "hash": "add8d95ed30d369caa63a34e03568149b31e3eb0c48bb3d63032a5933fbb7e30", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: Host your AI Agent Contract on Phala's decentralized serverless cloud.\n---\n\n# Build Your AI Agent Contract with LangChain\n\n## [AI Agent Contract Template with LangChain](https://github.com/Phala-Network/ai-agent-template-langchain)\n\n### Architecture Overview\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2024-04-04 at 11.02.11.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## \ud83e\udd16 What Is This?!\n\n***\n\n<div align=\"center\">\n\n<img src=\"https://www.jlwranglerforums.com/forum/attachments/zoolander-gif.325299/\" alt=\"\" height=\"240\">\n\n</div>\n\nThe LangChain AI Agent template is a **MINIMAL** template to build an AI Agent that can be hosted on Phala Network's decentralized hosting protocol. Unlike Vercel or other FaaS, it allows you to publish your AI Agent compiled code to IPFS and hosts it on a fully decentralized FaaS cloud with the following benefits:\n\n* \ud83d\udca8 **Ship Fast**: Build and ship with familiar toolchain in minutes\n* \u26d1\ufe0f **Secure**: Execution guarded by rock solid TEE / Intel SGX\n* \ud83d\udd12 **Private**: Host API keys and user privacy at ease\n* \ud83d\udc8e **Unstoppable**: Powered by IPFS and Phala's 35k+ decentralized TEE workers\n\n## Getting Started\n\n{% hint style=\"info\" %}\nFor this template to work, you will need to signup for a developer account on OpenAI and get and [OpenAI API Key](https://platform.openai.com/account/api-keys).\n{% endhint %}\n\n### Prepare\n\nClone git repo or use [degit](https://www.npmjs.com/package/degit) to get the source code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3413355b-e06a-499f-8da4-592c50298cb9": {"__data__": {"id_": "3413355b-e06a-499f-8da4-592c50298cb9", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e387ffa8-1e44-4dd9-84d9-33405cd46a6c", "node_type": "1", "metadata": {}, "hash": "b4c520370c4d95bd2bb155c079a56bb76b212a0932dd5f6c25659956759ea91a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b5c64857-c8cc-466b-aee8-2e99bf60f226", "node_type": "1", "metadata": {}, "hash": "f2a89f61184a80eeaa9ca8ef608aeea9ddc8db583a5094e5c98f464d5ad54413", "class_name": "RelatedNodeInfo"}}, "text": "{% tabs %}\n{% tab title=\"git\" %}\n```sh\ngit clone https://github.com/Phala-Network/ai-agent-template-langchain.git\n```\n{% endtab %}\n\n{% tab title=\"degit\" %}\n```bash\nnpx degit github:Phala-Network/ai-agent-template-langchain#main ai-agent-template-langchain\n```\n{% endtab %}\n{% endtabs %}\n\nInstall dependencies\n\n```shell\nnpm install\n```\n\n### Testing Locally\n\nCreate `.env` file with the default ThirdWeb API key for publishing your Agent Contract to IPFS\n\n```sh\ncp .env.example .env\n```\n\nBuild your Agent\n\n```sh\nnpm run build\n```\n\nTest your Agent locally\n\n```sh\nnpm run test\n```\n\nExpected Test Results\n\n```sh\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{\"chatQuery\":[\"Who are you?\"]},\"secret\":{\"openaiApiKey\":\"OPENAI_API_KEY\"},\"headers\":{}}\nGET RESULT: {\n  status: 200,\n  body: '{\"message\":\"I am Marvin Tong, a thought leader and innovator specializing in blockchain, AI, and decentralized technologies. I often share insights and groundbreaking ideas about these fields on platforms like Twitter, collaborating with prominent names and organizations to advance the multi-agent world and decentralized ecosystems. My proposals aim to integrate AI agents into environments like Phala Network and future scenarios, leveraging technologies such as Zero-Knowledge Proofs (ZKP) and Trusted Execution Environments (TEE). My vision includes creating practical and impactful advancements that shape the future of technology, exemplified through my work and presentations at prominent events such as ETHDenver.\"}',\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{\"chatQuery\":[\"What the latest direction of Phala?\"]},\"secret\":{\"openaiApiKey\":\"OPENAI_API_KEY\"},\"headers\":{}}\nGET RESULT: {\n  status: 200,\n  body: `{\"message\":\"The latest direction of Phala Network primarily revolves around enhancing and integrating secure, decentralized computation with privacy-preserving technologies. Here are some of the key pillars of their current focus:\\\\n\\\\n1.", "mimetype": "text/plain", "start_char_idx": 1475, "end_char_idx": 3524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5c64857-c8cc-466b-aee8-2e99bf60f226": {"__data__": {"id_": "b5c64857-c8cc-466b-aee8-2e99bf60f226", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3413355b-e06a-499f-8da4-592c50298cb9", "node_type": "1", "metadata": {}, "hash": "add8d95ed30d369caa63a34e03568149b31e3eb0c48bb3d63032a5933fbb7e30", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20ba33bf-0bd3-41d8-90dc-3dfcd9a4ccbf", "node_type": "1", "metadata": {}, "hash": "ca962012869222167dd4bea16922a71ad82c750c2d1fba155a2f0f96c88ef544", "class_name": "RelatedNodeInfo"}}, "text": "**Multi-Agent AI Integration**: Phala Network is pushing towards creating and hosting AI agents using secure smart contracts, fostering a Multi-Agent world where different agents can operate and interact in a decentralized, privacy-preserving manner.\\\\n\\\\n2. **TEE and ZK Proofs Combination**: Recently, Phala has made strides in integrating Trusted Execution Environments (TEE) with Zero-Knowledge Proofs (ZKP). This combination aims to fortify the privacy and security guarantees of decentralized computations, offering a robust multi-prover strategy.\\\\n\\\\n3. **Expansion into Financial Markets**: There is a community-driven effort to get $PHA listed on the Binance futures market, indicating Phala Network's ambition to capture a larger slice of the cryptocurrency financial market and increase token utility.\\\\n\\\\n4. **Bug Bounty Programs**: Security remains a top priority, with substantial bounties being offered (totaling $60,500) for identifying and resolving runtime bugs within Phala's network, ensuring the platform's resilience and reliability.\\\\n\\\\n5. **AI and Decentralized Services**: Phala Network is actively involved in the decentralized AI space. Their work at events like ETHDenver highlights their commitment to developing practical, real-world AI solutions that leverage decentralization for enhanced security and privacy.\\\\n\\\\n6. **Community Engagement and Development**: Phala Network continues to invest in its community, promoting collaborative projects, hackathons, and educational events to foster innovation and collective growth.\\\\n\\\\nThese directions underscore Phala Network's commitment to creating a secure, scalable, and user-friendly platform that integrates advanced privacy technologies into the heart of decentralized applications.\"}`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nNow you are ready to publish your agent, add secrets, and interact with your agent in the following steps:\n- Execute: 'npm run publish-agent'\n- Set secrets: 'npm run set-secrets'\n- Go to the url produced by setting the secrets (e.g.", "mimetype": "text/plain", "start_char_idx": 3525, "end_char_idx": 5631, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20ba33bf-0bd3-41d8-90dc-3dfcd9a4ccbf": {"__data__": {"id_": "20ba33bf-0bd3-41d8-90dc-3dfcd9a4ccbf", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b5c64857-c8cc-466b-aee8-2e99bf60f226", "node_type": "1", "metadata": {}, "hash": "f2a89f61184a80eeaa9ca8ef608aeea9ddc8db583a5094e5c98f464d5ad54413", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cba583e9-7ba8-4324-abf9-7e5d0e9f5748", "node_type": "1", "metadata": {}, "hash": "4f783e2ec4d8c858c76d171ef50eca66a3f09f6264fa938b5fd2441210c6662c", "class_name": "RelatedNodeInfo"}}, "text": "https://wapo-testnet.phala.network/ipfs/QmPQJD5zv3cYDRM25uGAVjLvXGNyQf9Vonz7rqkQB52Jae?key=b092532592cbd0cf)\n```\n\n### Publishing Your Agent\n\nUpload your compiled AI Agent code to IPFS.\n\n```sh\nnpm run publish-agent\n```\n\nUpon a successful upload, the command should show the URL to access your AI Agent.\n\n```sh\nRunning command: npx thirdweb upload dist/index.js\nThis may require you to log into thirdweb and will take some time to publish to IPFS...\n\n    $$\\     $$\\       $$\\                 $$\\                         $$\\       \n    $$ |    $$ |      \\__|                $$ |                        $$ |      \n  $$$$$$\\   $$$$$$$\\  $$\\  $$$$$$\\   $$$$$$$ |$$\\  $$\\  $$\\  $$$$$$\\  $$$$$$$\\  \n  \\_$$  _|  $$  __$$\\ $$ |$$  __$$\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\ $$  __$$\\ \n    $$ |    $$ |  $$ |$$ |$$ |  \\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\n    $$ |$$\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\n    \\$$$$  |$$ |  $$ |$$ |$$ |      \\$$$$$$$ |\\$$$$$\\$$$$  |\\$$$$$$$\\ $$$$$$$  |\n     \\____/ \\__|  \\__|\\__|\\__|       \\_______| \\_____\\____/  \\_______|\\_______/ \n\n \ud83d\udc8e thirdweb v0.14.12 \ud83d\udc8e\n\n- Uploading file to IPFS. This may take a while depending on file sizes.\n\n\u2714 Successfully uploaded file to IPFS.", "mimetype": "text/plain", "start_char_idx": 5632, "end_char_idx": 6865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cba583e9-7ba8-4324-abf9-7e5d0e9f5748": {"__data__": {"id_": "cba583e9-7ba8-4324-abf9-7e5d0e9f5748", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20ba33bf-0bd3-41d8-90dc-3dfcd9a4ccbf", "node_type": "1", "metadata": {}, "hash": "ca962012869222167dd4bea16922a71ad82c750c2d1fba155a2f0f96c88ef544", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "166c813e-e77d-4a9e-8f9e-7cc128137f29", "node_type": "1", "metadata": {}, "hash": "99826a017f605efa928e24866cda37cca329bb2c18b129d847ae417bc4ced139", "class_name": "RelatedNodeInfo"}}, "text": "\u2714 Files stored at the following IPFS URI: ipfs://QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu\n\u2714 Open this link to view your upload: https://b805a9b72767504353244e0422c2b5f9.ipfscdn.io/ipfs/bafybeie6giqpm4fmxt4vzdfi6jlbxxlvjlal3cm57auubgcmuvm7xcqtli/\n\nAgent Contract deployed at: https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu\n\nIf your agent requires secrets, ensure to do the following:\n1) Edit the ./secrets/default.json file or create a new JSON file in the ./secrets folder and add your secrets to it.\n2) Run command: 'npm run set-secrets' or 'npm run set-secrets [path-to-json-file]'\nLogs folder created.\nDeployment information updated in ./logs/latestDeployment.json\n```\n\n{% hint style=\"info\" %}\n\n\n**Note** that your latest deployment information will be logged to in file [`./logs/latestDeployment.json`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/latestDeployment.json). This file is updated every time you publish a new Agent Contract to IPFS. This file is also used to get the IPFS CID of your Agent Contract when setting secrets for your Agent Contract.\n\nHere is an example:\n\n```\n{\n  \"date\": \"2024-08-29T18:47:55.108Z\",\n  \"cid\": \"QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\",\n  \"url\": \"https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\"\n}\n```\n{% endhint %}\n\n{% hint style=\"warning\" %}\n\n\n**Did Thirdweb fail to publish?", "mimetype": "text/plain", "start_char_idx": 6866, "end_char_idx": 8307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "166c813e-e77d-4a9e-8f9e-7cc128137f29": {"__data__": {"id_": "166c813e-e77d-4a9e-8f9e-7cc128137f29", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cba583e9-7ba8-4324-abf9-7e5d0e9f5748", "node_type": "1", "metadata": {}, "hash": "4f783e2ec4d8c858c76d171ef50eca66a3f09f6264fa938b5fd2441210c6662c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2468832-f9bf-44c7-b4b6-a5b4e65649ec", "node_type": "1", "metadata": {}, "hash": "b6b187b8f1941f1dcbe21e0659eeb6f0b5958d92b1c5a609c2b26edb32dce9e6", "class_name": "RelatedNodeInfo"}}, "text": "**\n\nIf ThirdWeb fails to publish, please signup for your own ThirdWeb account to publish your Agent Contract to IPFS. Signup or login at [https://thirdweb.com/dashboard/](https://thirdweb.com/dashboard/)\n\nWhenever you log into ThirdWeb, create a new API key and replace the default API Key with yours in the [.env](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/.env) file.\n\n```\nTHIRDWEB_API_KEY=\"YOUR_THIRDWEB_API_KEY\"\n```\n{% endhint %}\n\n### Accessing The Published Agent\n\nOnce published, your AI Agent is available at the URL: `https://wapo-testnet.phala.network/ipfs/<your-cid>`. You can get it from the \"Publish to IPFS\" step.\n\nYou can test it with `curl`.\n\n```sh\ncurl https://wapo-testnet.phala.network/ipfs/<your-cid>\n```\n\n### Adding Secrets\n\nBy default, all the compiled JS code is visible for anyone to view if they look at IPFS CID. This makes private info like API keys, signer keys, etc. vulnerable to be stolen. To protect devs from leaking keys, we have added a field called `secret` in the `Request` object. It allows you to store secrets in a vault for your AI Agent to access.\n\nTo add your secrets,\n\n1. Edit the [default.json](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/secrets/default.json) file or create a new JSON file in the `./secrets` folder and add your secrets to it.\n\n```sh\n{\n  \"apiKey\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n\n2.", "mimetype": "text/plain", "start_char_idx": 8307, "end_char_idx": 9700, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2468832-f9bf-44c7-b4b6-a5b4e65649ec": {"__data__": {"id_": "f2468832-f9bf-44c7-b4b6-a5b4e65649ec", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "166c813e-e77d-4a9e-8f9e-7cc128137f29", "node_type": "1", "metadata": {}, "hash": "99826a017f605efa928e24866cda37cca329bb2c18b129d847ae417bc4ced139", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95984a1f-27f1-4cd7-886e-6751f75db55c", "node_type": "1", "metadata": {}, "hash": "14a5a66f01372ed775dd6c82d8633a6baad70225055bdaa8138d8830565b4156", "class_name": "RelatedNodeInfo"}}, "text": "Run command to set the secrets\n\n```sh\nnpm run set-secrets\n# or if you have a custom JSON file\nnpm run set-secrets <path-to-json-file>\n```\n\nExpected output:\n\n```sh\nUse default secrets...\nStoring secrets...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   199    0    68  100   131    121    234 --:--:-- --:--:-- --:--:--   356\n{\"token\":\"5d9faaed6be5414a\",\"key\":\"a3a8a4ef2c057d5c\",\"succeed\":true}\n\nSecrets set successfully. Go to the URL below to interact with your agent:\nhttps://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c\nLog entry added to secrets.log\n```\n\n{% hint style=\"info\" %}\n**Note** that all your secrets will be logged in file [`./logs/secrets.log`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/secrets.log). This file is updated every time you add new secrets to your Agent Contract. If you have not published an Agent Contract, yet, this command will fail since there is not a CID to map the secrets to.", "mimetype": "text/plain", "start_char_idx": 9701, "end_char_idx": 10817, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95984a1f-27f1-4cd7-886e-6751f75db55c": {"__data__": {"id_": "95984a1f-27f1-4cd7-886e-6751f75db55c", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2468832-f9bf-44c7-b4b6-a5b4e65649ec", "node_type": "1", "metadata": {}, "hash": "b6b187b8f1941f1dcbe21e0659eeb6f0b5958d92b1c5a609c2b26edb32dce9e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "004d7e06-c33b-407b-8ec3-c29560099fa6", "node_type": "1", "metadata": {}, "hash": "3e49c90212a201f94bde82164a8c4dcf110492e4955ad340104868bbe25f3ac3", "class_name": "RelatedNodeInfo"}}, "text": "Here is an example:\n\n```sh\n2024-08-29T18:54:16.643Z, CID: [QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc], Token: [5d9faaed6be5414a], Key: [a3a8a4ef2c057d5c], URL: [https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c]\n```\n{% endhint %}\n\nThe API returns a `token` and a `key`. The `key` is the id of your secret. It can be used to specify which secret you are going to pass to your frame. The `token` can be used by the developer to access the raw secret. You should never leak the `token`.\n\nTo verify the secret, run the following command where `key` and `token` are replaced with the values from adding your `secret` to the vault.\n\n```sh\ncurl https://wapo-testnet.phala.network/vaults/<key>/<token>\n```\n\nExpected output:\n\n```sh\n{\"data\":{\"openaiApiKey\":\"<OPENAI_API_KEY>\"},\"succeed\":true}\n```\n\n### Accessing Queries\n\nTo help create custom logic, we have an array variable named `queries` that can be accessed in the `Request` class. To access the `queries` array variable `chatQuery` value at index `0`, the syntax will look as follows:\n\n```sh\nconst query = req.queries.chatQuery[0] as string;\n```\n\nHere is an example of adding a URL query named `chatQuery` with a value of `Who are you`. `queries` can have any field name, so `chatQuery` is just an example of a field name and not a mandatory name, but remember to update your `index.ts` file logic to use your expected field name.", "mimetype": "text/plain", "start_char_idx": 10819, "end_char_idx": 12258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "004d7e06-c33b-407b-8ec3-c29560099fa6": {"__data__": {"id_": "004d7e06-c33b-407b-8ec3-c29560099fa6", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95984a1f-27f1-4cd7-886e-6751f75db55c", "node_type": "1", "metadata": {}, "hash": "14a5a66f01372ed775dd6c82d8633a6baad70225055bdaa8138d8830565b4156", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "526c1ae7-ed10-48aa-95dd-a805eb088692", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "> &#x20;[https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu?key=815cab7189f6110e&<mark style=\"background-color:yellow;\">chatQuery</mark>=Who%20are%20you](https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu?key=815cab7189f6110e\\&chatQuery=Who%20are%20you)&#x20;\n\n### Debugging Your Agent\n\nTo debug your agent, you can use the following command:\n\n```\ncurl https://wapo-testnet.phala.network/logs/all/ipfs/<CID>\n```\n\nAfter executing this command then you should see some output in the terminal to show the logs of requests to your agent.\n\n```\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] END Request: Duration: 166ms\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Is signature valid? ' true\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Verifying Signature with PublicKey ' '0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540'\n2024-09-04T03:18:34.", "mimetype": "text/plain", "start_char_idx": 12260, "end_char_idx": 13246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "526c1ae7-ed10-48aa-95dd-a805eb088692": {"__data__": {"id_": "526c1ae7-ed10-48aa-95dd-a805eb088692", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "004d7e06-c33b-407b-8ec3-c29560099fa6", "node_type": "1", "metadata": {}, "hash": "3e49c90212a201f94bde82164a8c4dcf110492e4955ad340104868bbe25f3ac3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f3df5c1-27f0-4f04-998e-139a15fb5d1c", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=verify&data=tintinland%20message%20to%20sign&signature=0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] END Request: Duration: 183ms\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signature: 0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b'\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signing data [tintinland message to sign] with Account [0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540]'\n2024-09-04T03:17:15.", "mimetype": "text/plain", "start_char_idx": 13246, "end_char_idx": 14097, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f3df5c1-27f0-4f04-998e-139a15fb5d1c": {"__data__": {"id_": "1f3df5c1-27f0-4f04-998e-139a15fb5d1c", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552", "node_type": "4", "metadata": {}, "hash": "73bb1982411e25e4d845b3614146731179c5a153abd0de2131747e1dc9b9709f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "526c1ae7-ed10-48aa-95dd-a805eb088692", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=sign&data=tintinland%20message%20to%20sign\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] END Request: Duration: 169ms\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] END Request: Duration: 158ms\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64\na1e805bfd\n```\n\nTo create logs in your Agent Contract, you can use the following syntax in your `index.ts` file.\n\n```\n// info logs\nconsole.log('info log message!')\n// error logs\nconsole.error('error log message!')\n```\n\nFor more information check the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/console) on `console` object.", "mimetype": "text/plain", "start_char_idx": 14097, "end_char_idx": 15156, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b12f715e-f978-4f6e-8401-daf4f10e573b": {"__data__": {"id_": "b12f715e-f978-4f6e-8401-daf4f10e573b", "embedding": null, "metadata": {"file_path": "./phala_dist/base-sepolia-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4ade6753-36ad-4681-afe7-50d0d0cd83d6", "node_type": "4", "metadata": {}, "hash": "dcc779294b47c0db670f3ef064f64633e4b7be7558a3bcb7c801dc957069dc33", "class_name": "RelatedNodeInfo"}}, "text": "# Base Sepolia Testnet\n\nCoinbase has developed Base to work with Ethereum's second layer (L2). For more details, please visit their documentation page: [https://docs.base.org/](https://docs.base.org/)\n\n| Asset Pair  | Contract Address                           |\n| ----------- | ------------------------------------------ |\n| AAVE to USD | 0x739d71fC66397a28B3A3b7d40eeB865CA05f0185 |\n| BTC to USD  | 0x1e73C20c42a7de166868da4c47963d137030492A |\n| CRV to USD  | 0xf38b25b79A72393Fca2Af88cf948D98c64726273 |\n| DAI to USD  | 0xB842f535a88021F95e1a94245Fa549a7f75084Dc |\n| ETH to USD  | 0x2E1640853bB2dD9f47831582665477865F9240DB |\n| USDC to USD | 0x49899fBd9be6b23d5e4AF697a92dc1E6C695862b |\n| USDT to USD | 0x92E9b9348949455580EB820ba041f4cAaB998e3f |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e45eea7b-c238-4e63-bcee-2b5b4e35a4f2": {"__data__": {"id_": "e45eea7b-c238-4e63-bcee-2b5b4e35a4f2", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2da7b23d-04d9-4ee6-a9ea-d87bd1a23ff9", "node_type": "1", "metadata": {}, "hash": "20a5cdb8d17ae4cc624424f17c2e0f0beeb8550c3368ee49b82be67cb07e38fa", "class_name": "RelatedNodeInfo"}}, "text": "# Build An Agent to Transact Onchain\n\nIf you like video tutorials, here is one of our latest workshops on building an Agent to transact onchain using the [Viem SDK](https://viem.sh) with the AI Agent Contract Template. In this tutorial, you will learn:\n\n* How to test the WapoJS functions like `deriveSecret(salt)`to derive an ECDSA key based on your `secret` added to your Agent Contract's secret vault.\n* Build and deploy your Agent Contract to IPFS then add your secret salt that will derive an ECDSA key for your deployed agent.\n* Sign and verify a message using the `viem` SDK with your agent's derived ECDSA key.&#x20;\n* Debug your Agent Contract due to a failed transaction on Base Sepolia.\n* Resolve the error and execute a successful transaction on Base Sepolia.\n\n{% embed url=\"https://youtu.be/YBaF1ivSuVE?si=0J1vnEPyluGqxnxv\" %}\n\n## Getting Started\n\n### Prepare\n\nClone git repo or use [degit](https://www.npmjs.com/package/degit) to get the source code.\n\n{% tabs %}\n{% tab title=\"git\" %}\n```sh\ngit clone https://github.com/Phala-Network/ai-agent-contract-viem.git\n```\n{% endtab %}\n\n{% tab title=\"degit\" %}\n```bash\nnpx degit github:Phala-Network/ai-agent-contract-viem#main ai-agent-contract-viem\n```\n{% endtab %}\n{% endtabs %}\n\nInstall dependencies\n\n```shell\nnpm install\n```\n\n### Testing Locally\n\nCreate `.env` file with the default ThirdWeb API key for publishing your Agent Contract to IPFS\n\n```sh\ncp .env.example .env\n```\n\nBuild your Agent\n\n```sh\nnpm run build\n```\n\nTest your Agent locally\n\n```sh\nnpm run test\n```\n\nExpected Test Results\n\n```sh\nNow you are ready to publish your agent, add secrets, and interact with your agent in the following steps:\n- Execute: 'npm run publish-agent'\n- Set secrets: 'npm run set-secrets'\n- Go to the url produced by setting the secrets (e.g.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1790, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2da7b23d-04d9-4ee6-a9ea-d87bd1a23ff9": {"__data__": {"id_": "2da7b23d-04d9-4ee6-a9ea-d87bd1a23ff9", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e45eea7b-c238-4e63-bcee-2b5b4e35a4f2", "node_type": "1", "metadata": {}, "hash": "3b37e286acf70a19dcf536a1978916ee1daa1568a2e6919d72fd7cdc3d34694f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad199b2a-9225-4d37-b856-87c52ea04047", "node_type": "1", "metadata": {}, "hash": "d7734839c04e616429cfa2a09ad32ee1f30b7db6e15a2cdc9da46baa7cc60998", "class_name": "RelatedNodeInfo"}}, "text": "https://wapo-testnet.phala.network/ipfs/QmPQJD5zv3cYDRM25uGAVjLvXGNyQf9Vonz7rqkQB52Jae?key=b092532592cbd0cf)\n\n \u2713 tests/index.test.ts (5) 7035ms\n   \u2713 Test Viem SDK AI Agent Contract (5) 7035ms\n     \u2713 Derive Account\n     \u2713 Sign Message Data\n     \u2713 Verify Signature\n     \u2713 Send TX on Base Sepolia 6991ms\n     \u2713 POST /\n\n Test Files  1 passed (1)\n      Tests  5 passed (5)\n   Start at  16:40:10\n   Duration  7.39s (transform 34ms, setup 6ms, collect 181ms, tests 7.04s, environment 0ms, prepare 42ms)\n```\n\n### Publishing Your Agent\n\nUpload your compiled AI Agent code to IPFS.\n\n```sh\nnpm run publish-agent\n```\n\nUpon a successful upload, the command should show the URL to access your AI Agent.\n\n```sh\n- Uploading file to IPFS. This may take a while depending on file sizes.\n\n\u2714 Successfully uploaded file to IPFS.\n\u2714 Files stored at the following IPFS URI: ipfs://QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g\n\u2714 Open this link to view your upload: https://b805a9b72767504353244e0422c2b5f9.ipfscdn.io/ipfs/bafybeidhk5nzutxyx3xusgjl4v6nkvscdoiowzofc7hqnf3l4xipieshie/\n\nAgent Contract deployed at: https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g\n\nIf your agent requires secrets, ensure to do the following:\n1) Edit the ./secrets/default.json file or create a new JSON file in the ./secrets folder and add your secrets to it.", "mimetype": "text/plain", "start_char_idx": 1791, "end_char_idx": 3145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad199b2a-9225-4d37-b856-87c52ea04047": {"__data__": {"id_": "ad199b2a-9225-4d37-b856-87c52ea04047", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2da7b23d-04d9-4ee6-a9ea-d87bd1a23ff9", "node_type": "1", "metadata": {}, "hash": "20a5cdb8d17ae4cc624424f17c2e0f0beeb8550c3368ee49b82be67cb07e38fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8e243cc-0f4a-462c-9397-2791a6e1ef40", "node_type": "1", "metadata": {}, "hash": "636ef37ca407cc1c72058193d6f674d3072f3a0bb5306d5c28eca34a41c2fdb4", "class_name": "RelatedNodeInfo"}}, "text": "2) Run command: 'npm run set-secrets' or 'npm run set-secrets [path-to-json-file]'\nDeployment information updated in ./logs/latestDeployment.json\n```\n\n{% hint style=\"info\" %}\n\n\n**Note** that your latest deployment information will be logged to in file [`./logs/latestDeployment.json`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/latestDeployment.json). This file is updated every time you publish a new Agent Contract to IPFS. This file is also used to get the IPFS CID of your Agent Contract when setting secrets for your Agent Contract.\n\nHere is an example:\n\n```json\n{\n  \"date\": \"2024-08-29T03:55:04.278Z\",\n  \"cid\": \"Qmb2Mn72sY9h8ew6Ld5bW13Fknzge3hssRetJTUWyyoma7\",\n  \"url\": \"https://wapo-testnet.phala.network/ipfs/Qmb2Mn72sY9h8ew6Ld5bW13Fknzge3hssRetJTUWyyoma7\"\n}\n```\n{% endhint %}\n\n{% hint style=\"warning\" %}\n\n\n**Did Thirdweb fail to publish?**\n\nIf ThirdWeb fails to publish, please signup for your own ThirdWeb account to publish your Agent Contract to IPFS. Signup or login at [https://thirdweb.com/dashboard/](https://thirdweb.com/dashboard/)\n\nWhenever you log into ThirdWeb, create a new API key and replace the default API Key with yours in the [.env](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/.env) file.\n\n```\nTHIRDWEB_API_KEY=\"YOUR_THIRDWEB_API_KEY\"\n```\n{% endhint %}\n\n### Accessing The Published Agent\n\nOnce published, your AI Agent is available at the URL: `https://wapo-testnet.phala.network/ipfs/<your-cid>`. You can get it from the \"Publish to IPFS\" step.\n\nYou can test it with `curl`.\n\n```sh\ncurl https://wapo-testnet.phala.network/ipfs/<your-cid>\n```\n\n### Adding Secrets\n\nBy default, all the compiled JS code is visible for anyone to view if they look at IPFS CID.", "mimetype": "text/plain", "start_char_idx": 3146, "end_char_idx": 4886, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8e243cc-0f4a-462c-9397-2791a6e1ef40": {"__data__": {"id_": "e8e243cc-0f4a-462c-9397-2791a6e1ef40", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad199b2a-9225-4d37-b856-87c52ea04047", "node_type": "1", "metadata": {}, "hash": "d7734839c04e616429cfa2a09ad32ee1f30b7db6e15a2cdc9da46baa7cc60998", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f4db508-2c99-40d8-95f0-210dd43a493a", "node_type": "1", "metadata": {}, "hash": "20df50fa0eeeda52a06bdca552b1bbb84033fe540c6a531e671953fdb852c3d6", "class_name": "RelatedNodeInfo"}}, "text": "This makes private info like API keys, signer keys, etc. vulnerable to be stolen. To protect devs from leaking keys, we have added a field called `secret` in the `Request` object. It allows you to store secrets in a vault for your AI Agent to access.\n\nTo add your secrets,\n\n1. Edit the [default.json](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/secrets/default.json) file or create a new JSON file in the `./secrets` folder and add your secrets to it.\n\n```sh\n{\n  \"secretSalt\": \"SALTY_BAE\"\n}\n```\n\n2. Run command to set the secrets\n\n```sh\nnpm run set-secrets\n# or if you have a custom JSON file\nnpm run set-secrets <path-to-json-file>\n```\n\nExpected output:\n\n```sh\nUse default secrets...\nStoring secrets...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   199    0    68  100   131    121    234 --:--:-- --:--:-- --:--:--   356\n{\"token\":\"5d9faaed6be5414a\",\"key\":\"a3a8a4ef2c057d5c\",\"succeed\":true}\n\nSecrets set successfully. Go to the URL below to interact with your agent:\nhttps://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c\nLog entry added to secrets.log\n```\n\n{% hint style=\"info\" %}\n**Note** that all your secrets will be logged in file [`./logs/secrets.log`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/secrets.log). This file is updated every time you add new secrets to your Agent Contract. If you have not published an Agent Contract, yet, this command will fail since there is not a CID to map the secrets to.", "mimetype": "text/plain", "start_char_idx": 4887, "end_char_idx": 6527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f4db508-2c99-40d8-95f0-210dd43a493a": {"__data__": {"id_": "9f4db508-2c99-40d8-95f0-210dd43a493a", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8e243cc-0f4a-462c-9397-2791a6e1ef40", "node_type": "1", "metadata": {}, "hash": "636ef37ca407cc1c72058193d6f674d3072f3a0bb5306d5c28eca34a41c2fdb4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ef02331-3a8c-4baa-9ca0-a0c8dd967624", "node_type": "1", "metadata": {}, "hash": "2d1b3d7a87fe11a446bdcbb6d0e52f5b46f9c5b8de95dc276636913ee7e41282", "class_name": "RelatedNodeInfo"}}, "text": "Here is an example:\n\n```sh\n2024-08-28T19:31:07.011Z, CID: [QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh], Token: [fc908693f43dbe2f], Key: [18ba50e9c1d5822a], URL: [https://wapo-testnet.phala.network/ipfs/QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh?key=18ba50e9c1d5822a]\n2024-08-29T03:22:11.453Z, CID: [QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh], Token: [d0e96601ea38b6be], Key: [2b5fd724a4de3652], URL: [https://wapo-testnet.phala.network/ipfs/QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh?key=2b5fd724a4de3652]\n2024-08-29T03:37:10.033Z, CID: [QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh], Token: [ec667a69d0df6653], Key: [63d145b3bddf56b4], URL: [https://wapo-testnet.phala.network/ipfs/QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh?key=63d145b3bddf56b4]\n2024-08-29T03:53:54.735Z, CID: [QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh], Token: [b9b53656b1e0293b],", "mimetype": "text/plain", "start_char_idx": 6529, "end_char_idx": 7407, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ef02331-3a8c-4baa-9ca0-a0c8dd967624": {"__data__": {"id_": "7ef02331-3a8c-4baa-9ca0-a0c8dd967624", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f4db508-2c99-40d8-95f0-210dd43a493a", "node_type": "1", "metadata": {}, "hash": "20df50fa0eeeda52a06bdca552b1bbb84033fe540c6a531e671953fdb852c3d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "169e5105-438b-4745-b485-5a4bff6d0bbc", "node_type": "1", "metadata": {}, "hash": "dd750ec16e7c2ba94f22987461269290a38ce6bfff7d0498e9a379119ecf8240", "class_name": "RelatedNodeInfo"}}, "text": "Key: [31db5184579e3427], URL: [https://wapo-testnet.phala.network/ipfs/QmYNXZ7tGijMHvweRjcx5vGPjmMBCfqnaBS7AHQDipymqh?key=31db5184579e3427]\n2024-08-29T03:55:14.959Z, CID: [Qmb2Mn72sY9h8ew6Ld5bW13Fknzge3hssRetJTUWyyoma7], Token: [beb2e71cd4c7997d], Key: [e189f4deee88dcc1], URL: [https://wapo-testnet.phala.network/ipfs/Qmb2Mn72sY9h8ew6Ld5bW13Fknzge3hssRetJTUWyyoma7?key=e189f4deee88dcc1]\n```\n{% endhint %}\n\nThe API returns a `token` and a `key`. The `key` is the id of your secret. It can be used to specify which secret you are going to pass to your frame. The `token` can be used by the developer to access the raw secret. You should never leak the `token`.\n\nTo verify the secret, run the following command where `key` and `token` are replaced with the values from adding your `secret` to the vault.\n\n```sh\ncurl https://wapo-testnet.phala.network/vaults/<key>/<token>\n```\n\nExpected output:\n\n```sh\n{\"data\":{\"secretSalt\":\"<YOUR_SECRET_SALT>\"},\"succeed\":true}\n```\n\n#### Accessing Your Secrets in Your Code\n\n```typescript\nlet vault: Record<string, string> = {}\ntry {\n  vault = JSON.parse(process.env.secret || '')\n} catch (e) {\n  console.error(e)\n  return c.json({ error: \"Failed to parse secrets\" })\n}\nconst secretSalt = (vault.secretSalt) ?", "mimetype": "text/plain", "start_char_idx": 7408, "end_char_idx": 8648, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "169e5105-438b-4745-b485-5a4bff6d0bbc": {"__data__": {"id_": "169e5105-438b-4745-b485-5a4bff6d0bbc", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ef02331-3a8c-4baa-9ca0-a0c8dd967624", "node_type": "1", "metadata": {}, "hash": "2d1b3d7a87fe11a446bdcbb6d0e52f5b46f9c5b8de95dc276636913ee7e41282", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8d2632da-4099-4aa6-abc4-c17c34b9bf21", "node_type": "1", "metadata": {}, "hash": "dadb3c9c0a496bd9a8de3cd7a8cce2591c8038fc09920ca31499d59cc91204cc", "class_name": "RelatedNodeInfo"}}, "text": "vault.secretSalt as string : 'SALTY_BAE'\n```\n\n### Example HTTP Requests\n\nBelow are some example HTTP Requests to a deployed Agent Contract without any changes made to the template.&#x20;\n\n{% hint style=\"warning\" %}\nNote that if the transaction fails for the onchain transaction agent, try sending some test ETH to the [derived address](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272) of the Agent.\n{% endhint %}\n\n{% hint style=\"info\" %}\nURL queries are highlighted in <mark style=\"background-color:yellow;\">yellow</mark>.\n{% endhint %}\n\n*   [Derived ECDSA Key](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272)\n\n    > URL: [https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?<mark style=\"background-color:yellow;\">key</mark>=6978ea391960e272](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272)\n*   [Sign 'signedByTEE'](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272\\&type=sign\\&data=signedByTEE)\n\n    > URL: [https://wapo-testnet.phala.", "mimetype": "text/plain", "start_char_idx": 8649, "end_char_idx": 9860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d2632da-4099-4aa6-abc4-c17c34b9bf21": {"__data__": {"id_": "8d2632da-4099-4aa6-abc4-c17c34b9bf21", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "169e5105-438b-4745-b485-5a4bff6d0bbc", "node_type": "1", "metadata": {}, "hash": "dd750ec16e7c2ba94f22987461269290a38ce6bfff7d0498e9a379119ecf8240", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c968b7ab-66f9-4afa-b6fc-b170c435256a", "node_type": "1", "metadata": {}, "hash": "34ececba3ca20aa5bc98d7728fcc29361a821f4b48bfb876649b7358c894490a", "class_name": "RelatedNodeInfo"}}, "text": "network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?<mark style=\"background-color:yellow;\">key</mark>=6978ea391960e272&<mark style=\"background-color:yellow;\">type</mark>=sign&<mark style=\"background-color:yellow;\">data</mark>=signedByTEE](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272\\&type=sign\\&data=signedByTEE)\n*   [Verify Signature](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272\\&type=verify\\&data=signedByTEE\\&signature=0x9b1b413f1573da2ada426f4da99416b6081ef7246a23990c0c13d764f566083920a4b07636b7d7a582fbc3d98ad42bedc26410764a4cd2963058792121a5d63d1b)\n\n    > URL: [https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?<mark style=\"background-color:yellow;\">key</mark>=6978ea391960e272&<mark style=\"background-color:yellow;\">type</mark>=verify&<mark style=\"background-color:yellow;\">data</mark>=signedByTEE&<mark style=\"background-color:yellow;", "mimetype": "text/plain", "start_char_idx": 9860, "end_char_idx": 10877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c968b7ab-66f9-4afa-b6fc-b170c435256a": {"__data__": {"id_": "c968b7ab-66f9-4afa-b6fc-b170c435256a", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8d2632da-4099-4aa6-abc4-c17c34b9bf21", "node_type": "1", "metadata": {}, "hash": "dadb3c9c0a496bd9a8de3cd7a8cce2591c8038fc09920ca31499d59cc91204cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "27e03cb3-9428-4187-a163-df6682ecd5a8", "node_type": "1", "metadata": {}, "hash": "575d725241b3947b63cac53f1e93d6708a24a2b74d2ce8bd578b8749289f4a32", "class_name": "RelatedNodeInfo"}}, "text": "\">signature</mark>=0x9b1b413f1573da2ada426f4da99416b6081ef7246a23990c0c13d764f566083920a4b07636b7d7a582fbc3d98ad42bedc26410764a4cd2963058792121a5d63d1b](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272\\&type=verify\\&data=signedByTEE\\&signature=0x9b1b413f1573da2ada426f4da99416b6081ef7246a23990c0c13d764f566083920a4b07636b7d7a582fbc3d98ad42bedc26410764a4cd2963058792121a5d63d1b)\n*   [Send TX on Base Sepolia](https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272\\&type=sendTx\\&to=0xC5227Cb20493b97bb02fADb20360fe28F52E2eff\\&gweiAmount=420)\n\n    > URL: [https://wapo-testnet.phala.network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?<mark style=\"background-color:yellow;\">key</mark>=6978ea391960e272&<mark style=\"background-color:yellow;\">type</mark>=sendTx&<mark style=\"background-color:yellow;\">to</mark>=0xC5227Cb20493b97bb02fADb20360fe28F52E2eff&<mark style=\"background-color:yellow;\">gweiAmount</mark>=420](https://wapo-testnet.phala.", "mimetype": "text/plain", "start_char_idx": 10877, "end_char_idx": 11935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27e03cb3-9428-4187-a163-df6682ecd5a8": {"__data__": {"id_": "27e03cb3-9428-4187-a163-df6682ecd5a8", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c968b7ab-66f9-4afa-b6fc-b170c435256a", "node_type": "1", "metadata": {}, "hash": "34ececba3ca20aa5bc98d7728fcc29361a821f4b48bfb876649b7358c894490a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30ad034d-003c-4537-a118-17090247f30b", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "network/ipfs/QmVJ3xknfRevUkc68iZc4RdPSLL2gLD8WagwMQCdGMyC4g?key=6978ea391960e272\\&type=sendTx\\&to=0xC5227Cb20493b97bb02fADb20360fe28F52E2eff\\&gweiAmount=420)\n\n### Handling Requests\n\nCheck the [`Hono` docs](https://hono.dev/docs) for information on accessing URL `queries` or `body` from a `post` request.\n\n{% hint style=\"info\" %}\nWe recommend using @hono/tiny to avoid a large bundle size and the 20MB final artifact limitation.\n{% endhint %}\n\n**Example**\n\n```typescript\n// Access query value for a URL query named `type`\nlet queries = c.req.queries() || {}\nconst getType = (queries.type) ? queries.type[0] as string : ''\n// Access body from post request\nconst data = await c.req.json()\n```\n\n### Debugging Your Agent\n\nTo debug your agent, you can use the following command:\n\n```\ncurl https://wapo-testnet.phala.network/logs/all/ipfs/<CID>\n```\n\nAfter executing this command then you should see some output in the terminal to show the logs of requests to your agent.\n\n```\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] END Request: Duration: 166ms\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Is signature valid? ' true\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Verifying Signature with PublicKey ' '0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540'\n2024-09-04T03:18:34.", "mimetype": "text/plain", "start_char_idx": 11935, "end_char_idx": 13280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30ad034d-003c-4537-a118-17090247f30b": {"__data__": {"id_": "30ad034d-003c-4537-a118-17090247f30b", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27e03cb3-9428-4187-a163-df6682ecd5a8", "node_type": "1", "metadata": {}, "hash": "575d725241b3947b63cac53f1e93d6708a24a2b74d2ce8bd578b8749289f4a32", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a8284dbc-d673-47d7-97bc-1139a476d419", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=verify&data=tintinland%20message%20to%20sign&signature=0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] END Request: Duration: 183ms\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signature: 0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b'\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signing data [tintinland message to sign] with Account [0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540]'\n2024-09-04T03:17:15.", "mimetype": "text/plain", "start_char_idx": 13280, "end_char_idx": 14131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8284dbc-d673-47d7-97bc-1139a476d419": {"__data__": {"id_": "a8284dbc-d673-47d7-97bc-1139a476d419", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30ad034d-003c-4537-a118-17090247f30b", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f858c656-6e60-4c9b-9baf-a6d54f2c85a3", "node_type": "1", "metadata": {}, "hash": "00b1baa99f16a84f9d706d133a2d4d77be1ee14670bedc3ae341524a86b26e88", "class_name": "RelatedNodeInfo"}}, "text": "238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=sign&data=tintinland%20message%20to%20sign\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] END Request: Duration: 169ms\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] END Request: Duration: 158ms\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64\na1e805bfd\n```\n\nTo create logs in your Agent Contract, you can use the following syntax in your `index.ts` file.\n\n```\n// info logs\nconsole.log('info log message!')\n// error logs\nconsole.error('error log message!')\n```\n\nFor more information check the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/console) on `console` object.", "mimetype": "text/plain", "start_char_idx": 14131, "end_char_idx": 15190, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f858c656-6e60-4c9b-9baf-a6d54f2c85a3": {"__data__": {"id_": "f858c656-6e60-4c9b-9baf-a6d54f2c85a3", "embedding": null, "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9519784-6638-42d2-8517-e98a18661f7d", "node_type": "4", "metadata": {}, "hash": "794f0748362f038436c10ec2bf53465f15c2a4fa74ae4adb9165d443384f20e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a8284dbc-d673-47d7-97bc-1139a476d419", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "### Run a Local Testnet With Docker\n\nRun a local testnet with [`docker` support](https://docs.docker.com/desktop/). All you need to do to get a local testnet started is run:\n\n{% hint style=\"danger\" %}\nRunning the local testnet may return an error if port **`8000`** is already in use.\n{% endhint %}\n\n```shell\nnpm run dev\n```\n\n**Make a Request to Your Local Build**\n\n```shell\n# GET request\ncurl http://127.0.0.1:8000/local\n# GET request with URL queries\ncurl http://127.0.0.1:8000/local?query1=one&query2=two\n# POST request\ncurl http://127.0.0.1:8000/local -X POST -H 'content-type: application/json' -d '{\"foo\": \"bar\"}'\n```\n\n**Add Secrets to Your Local Build**\n\n```shell\ncurl http://127.0.0.1:8000/vaults -H 'Content-Type: application/json' -d '{\"cid\": \"local\", \"data\": {\"secretKey\":\"secretValue\"}}'\n```\n\n**Check The Logs of Your Local Build**\n\n```shell\ncurl 'http://127.0.0.1:8000/logs/all/local'\n```\n\nCongratulations! You have deployed and transacted on Base Sepolia! You now have the tools to connect to any top LLM API with the RedPill Agent Contract template and perform onchain actions with the `viem` SDK.", "mimetype": "text/plain", "start_char_idx": 15192, "end_char_idx": 16304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c810d9b5-85d2-4d2c-bfeb-b9cdfa127f9f": {"__data__": {"id_": "c810d9b5-85d2-4d2c-bfeb-b9cdfa127f9f", "embedding": null, "metadata": {"file_path": "./phala_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3ee601c-3810-4328-a334-5ffe388051d3", "node_type": "1", "metadata": {}, "hash": "41aeea325fce3f81db171215a881022e98103fb0d4c39c379d10e5c2bec8498d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Logs\nsidebar_position: 4\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n## Log config file location\n\nLogging in Nethermind is done via NLog library that can be configured by editing the NLog.config file.\n\n| Environment Type                                                                  | NLog.config location                                                   |\n|-----------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| built from src - Debug mode                                                       | src\\Nethermind\\Nethermind.Runner\\bin\\Debug\\netcoreapp3.1\\NLog.config   |\n| built from src - Release mode                                                     | src\\Nethermind\\Nethermind.Runner\\bin\\Release\\netcoreapp3.1\\NLog.config |\n| PPA                                                                               | /usr/share/nethermind/NLog.config                                      |\n| Docker                                                                            | /nethermind/NLog.config                                                |\n| from [downloads page](https://downloads.nethermind.io)                            | top level directory after unzipping the package                        |\n| from [GitHub releases page](https://github.com/NethermindEth/nethermind/releases) | top level directory after unzipping the package                        |\n| dAppNode                                                                          | ? \\[to be documented]                                                  |\n\n## Log config file syntax\n\nDetailed NLog configuration options can be found\nhere: [https://nlog-project.org/config/](https://nlog-project.org/config/)\n\n## Config or CLI log rules\n\nSimple logging rules can be added through configuration file or command line argument.\n\nFor example this would add `Trace` level logs to any logger under `Synchronization` module and `Debug` level logs\nfor `BlockTree` from `Blockchain` module:\\\n`--Init.LogRules Synchronization.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3ee601c-3810-4328-a334-5ffe388051d3": {"__data__": {"id_": "f3ee601c-3810-4328-a334-5ffe388051d3", "embedding": null, "metadata": {"file_path": "./phala_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c810d9b5-85d2-4d2c-bfeb-b9cdfa127f9f", "node_type": "1", "metadata": {}, "hash": "bb6beb51cf9885ea27c7d65f43d9bafa2a9f248c3b1dc998b67c8c6f34b0104f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58ad1d4f-1148-4a58-b3c2-408b26c63b6a", "node_type": "1", "metadata": {}, "hash": "71223cfd6fcc9ef1183047554bc98815baa7c15d1c1dfbe2a66cc9b13f7990dc", "class_name": "RelatedNodeInfo"}}, "text": "*:Trace;Blockchain.BlockTree:Debug`\n\n## Global logging override\n\nAdditionally there are global logging override that you can use temporarily:\n\n| Command line override                            | Log level |\n|--------------------------------------------------|-----------|\n| ./Nethermind.Runner --config mainnet --log TRACE | TRACE     |\n| ./Nethermind.Runner --config mainnet --log DEBUG | DEBUG     |\n| ./Nethermind.Runner --config mainnet --log INFO  | INFO      |\n| ./Nethermind.Runner --config mainnet --log WARN  | WARN      |\n| ./Nethermind.Runner --config mainnet --log ERROR | ERROR     |\n\n## JSON RPC logging level\n\nThis can be done by including these lines in the logging configuration file:\n\n```\n<logger name=\"JsonRpc.*\" minlevel=\"Error\" writeTo=\"file-async\"/>\n<logger name=\"JsonRpc.*\" minlevel=\"Error\" writeTo=\"auto-colored-console-async\" final=\"true\"/>\n<logger name=\"JsonRpc.*\" final=\"true\"/>\n```\n\n## Enterprise Logging\n\nSee how to configure Seq [here](https://docs.nethermind.io/nethermind/enterprise/seq)\n\n## Explaining Nethermind logs\n\nYou can check the supported operating systems, architectures and hardware requirements\nhere: [system-requirements.md](../get-started/system-requirements.md)\n\nAfter the node starts, you will see some initial info about the node and then the sync will start. G\u00f6rli fast sync uses\na `fast blocks` sync mode initially. The `fast blocks` sync picks some known `pivot block` from the past and\ndownloads `headers`, `bodies`, and `receipts` downwards all the way to `genesis block`. All blocks from 0 to\nthe `pivot block` are showed as `Old Headers` in the `fast blocks sync` logs. The console display shows the number\ngrowing from 0 to pivot, but this is just to make the display more user-friendly.\n\nYou will see some information about the sync progress, like below:\n\n1. Shows the number of already downloaded `headers`, `bodies` and `receipts` under the name `Downloaded` out of all to\n   be downloaded in the fast blocks stage.\n2. Shows the current queue of already downloaded `blocks`, `headers` and `receipts` waiting for being saved to the\n   database.", "mimetype": "text/plain", "start_char_idx": 2130, "end_char_idx": 4234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58ad1d4f-1148-4a58-b3c2-408b26c63b6a": {"__data__": {"id_": "58ad1d4f-1148-4a58-b3c2-408b26c63b6a", "embedding": null, "metadata": {"file_path": "./phala_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3ee601c-3810-4328-a334-5ffe388051d3", "node_type": "1", "metadata": {}, "hash": "41aeea325fce3f81db171215a881022e98103fb0d4c39c379d10e5c2bec8498d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c653e31-9d01-48d5-864d-f7be2c5a39da", "node_type": "1", "metadata": {}, "hash": "d61e677191b0ec5cb9ed4e5e9dfb3d2b7a9809965aeb2c8b082eeacc59c4ce01", "class_name": "RelatedNodeInfo"}}, "text": "3. Shows the current download speed (blocks per second - bps).\n4. Shows the average download speed (blocks per second - bps).\n\n![Fast blocks sync logs](/img/getting\\_started\\_log\\_0.png)\n\nWhen the fast blocks stage finishes, there will be some period of downloading blocks between the `pivot` and\nthe`latest blocks` which will have some additional info:\n\n1. Shows the last entry from the fast blocks stage.\n2. Shows the mode transition moment.\n3. Displays the speed (in blocks per second) of all `headers`, `bodies` and `receipts` at the same time.\n4. Additional info will appear every 30000 blocks with information about the G\u00f6rli epoch being stored.\n\n![G\u00f6rli fast sync logs](/img/getting\\_started\\_7.png)\n\nAfter the `fast sync` part finished, the node will transition to the `state sync stage` when the `state trie` is being\ndownloaded. Much information is displayed about the progress, as this process may take a long time on mainnet (a few\nhours).\n\n1. Total elapsed time in `state sync` is displayed.\n2. The total percentage of downloaded DB size is displayed (on mainnet the sync finishes around 34GB in March 2020, on\n   G\u00f6rli around 800MB).\n3. `branches` stands for the percentage of downloaded branches.\n4. Download speed in kilobytes per second is displayed.\n5. `accounts` stands for the number of accounts data downloaded already.\n6. `nodes` stands for the number of `Patricia trie nodes` downloaded by the sync process.\n7. `diagnostic` shows the time spent in the DB write / read access. The higher the value, the worse. It may get much\n   worse if you restart the node during the sync process, as we need to recreate some caches then by reading data from\n   the DB.\n\n![G\u00f6rli state sync logs](/img/getting\\_started\\_8.png)\n\nWhen the state sync is nearing completion, you may see a series of `branch sync` information reloading many times from\n0% to nearly 100%. This is the node trying to retrieve the few remaining state nodes and progressing with the head block\nrapidly:\n\n!", "mimetype": "text/plain", "start_char_idx": 4235, "end_char_idx": 6221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c653e31-9d01-48d5-864d-f7be2c5a39da": {"__data__": {"id_": "4c653e31-9d01-48d5-864d-f7be2c5a39da", "embedding": null, "metadata": {"file_path": "./phala_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58ad1d4f-1148-4a58-b3c2-408b26c63b6a", "node_type": "1", "metadata": {}, "hash": "71223cfd6fcc9ef1183047554bc98815baa7c15d1c1dfbe2a66cc9b13f7990dc", "class_name": "RelatedNodeInfo"}}, "text": "[G\u00f6rli branch sync logs](/img/getting\\_started\\_26.png)\n\nAt some point, the entire state is downloaded and the node enters the `full sync` mode and will allow you to issue CLI /\nWeb3 queries and send / receive transactions\ud83e\udd73\n\n1. The `root` is saved at the moment when the entire `Patricia trie` is downloaded.\n2. We also clearly state that the node transitions to the `full sync`.\n3. When you see the block being processed, then you are in the `full sync` and the newly arrived block is being\n   calculated.\n4. Every two minutes you will see a summary of connected peers with their client version, IP address, highest synced\n   block, and data download speeds.\n\n![G\u00f6rli full sync logs](/img/getting\\_started\\_9.png)\n\nAlso, every now and then, a peer report will appear like below:\n\n![](</img/Screenshot2022-08-10205144.png>)\n\n1. First bracket is for Allocated contexts. It has possible values of `H` for Headers, `B` for Bodies, `R` for\n   Receipts, `N` for State, `S` for Snap, and `W` for Witness.\n2. Second bracket is for Sleeping contexts. It has possible values of `H` for Headers, `B` for Bodies, `R` for\n   Receipts, `N` for State, `S` for Snap, and `W` for Witness.\n3. Third bracket contains Peer Info.\n4. Fourth bracket is for Speeds as Follows:\n    * Latency\n    * Headers Transfer\n    * Bodies Transfer\n    * Receipts Transfer\n    * Node Data Transfer\n    * Snap Ranges Transfer\n5. Fifth bracket is for Client Info like Client Name, Client Version, Operating System and Language Version.", "mimetype": "text/plain", "start_char_idx": 6221, "end_char_idx": 7718, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b39eec91-9f4b-4d08-a4cb-1ac25b0b4873": {"__data__": {"id_": "b39eec91-9f4b-4d08-a4cb-1ac25b0b4873", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91b5207f-f577-488f-b0c0-84e530cd61c6", "node_type": "1", "metadata": {}, "hash": "d6bc9f9ae44a27da8a547462d477d0c7d8ed4388fe3f2862066bdb2385d4c70e", "class_name": "RelatedNodeInfo"}}, "text": "# Run Local Testnet\n\n## Overview <a href=\"#overview\" id=\"overview\"></a>\n\nIn this tutorial, we\u2019re going to set up a development environment. We are going to deploy a full stack of the core blockchain and connect the Web UI to the blockchain. By the end of the tutorial, you will be able to:\n\n* Send confidential Commands and Queries\n* Get a ready-to-hack version of Phala Network for building your confidential DApps\n\nA full Phala Network stack has three components, with an optional Javascript SDK. The core components are available at [Phala-Network/phala-blockchain](https://github.com/Phala-Network/phala-blockchain):\n\n* `phala-node`: The Substrate blockchain node\n* `pRuntime`: The TEE runtime. Contracts run in `pRuntime`\n* `pherry`: The Substrate-TEE bridge relayer. Connects the blockchain and `pRuntime`\n\n<figure><img src=\"../../.gitbook/assets/simple_architecture.png\" alt=\"\"><figcaption><p>(Phala architecture overview)</p></figcaption></figure>\n\nThe Javascript SDK is at [Phala-Network/js-sdk](https://github.com/Phala-Network/js-sdk). The Web UI based on our SDK needs to connect to both the blockchain and the `pRuntime` to send Commands and Queries.\n\n## Setting up <a href=\"#setting-up\" id=\"setting-up\"></a>\n\nIn this tutorial, we assume the operating system is **Ubuntu 22.04**. Other Linux distributions should also work, but the instructions or commands may vary. **4 cores** and **8GB RAM** is the minimal requirement to build the project including the core blockchain.\n\n{% hint style=\"warning\" %}\nThe Apple M-Series chips do not support the deployment of a local testnet at this time. If you are using a machine with these chips, you will have to deploy to the [Phala PoC6 Testnet](https://phat.phala.network/).\n{% endhint %}\n\n## Deployment Options\n\nThere are 2 ways to deploy a local testnet.\n\n1. [devPHAse](https://github.com/l00k/devphase) or [Swanky Phala](https://github.com/Phala-Network/swanky-plugin-phala) CLI Tools\n2.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91b5207f-f577-488f-b0c0-84e530cd61c6": {"__data__": {"id_": "91b5207f-f577-488f-b0c0-84e530cd61c6", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b39eec91-9f4b-4d08-a4cb-1ac25b0b4873", "node_type": "1", "metadata": {}, "hash": "99514fcbcd329900200ff727014e5e73c0865a1768912ffe3d53018e9a9e8e21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e58e425-2005-4f91-8d1a-548bad9bbe1e", "node_type": "1", "metadata": {}, "hash": "92ec1de4b1acc7577dd26740b09cbecb3d47ad2aa211554dd1e200c324aadba9", "class_name": "RelatedNodeInfo"}}, "text": "Build from Source (Most time-consuming)\n\n## Environment Setup\n\nMake sure to go through the environment setup before continuing.\n\nNext, install the following on your system:\n\n* [GCC](https://gcc.gnu.org/)\n* [Protobuf](https://github.com/protocolbuffers/protobuf) compiler\n* [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config)\n* [OpenSSL](https://www.openssl.org/) development package\n\n{% tabs %}\n{% tab title=\"apt\" %}\n```bash\nsudo apt install -y build-essential pkg-config libssl-dev protobuf-compiler\n```\n{% endtab %}\n\n{% tab title=\"dnf\" %}\n```bash\nsudo dnf install -y gcc protobuf-compiler pkg-config openssl-devel openssl1.1\n```\n{% endtab %}\n{% endtabs %}\n\n## Deploy via devPHAse\n\nIn this section, you will deploy your local testnet using the DevPHAse CLI Tool. First, you will need to create a new workspace folder on your system and execute the following:\n\n{% hint style=\"warning\" %}\nWhen using `npm`, you will see conflicting/duplicated packages. `yarn` will not have these errors. Until this problem is solved, it is best to use `yarn`.\n{% endhint %}\n\n{% hint style=\"danger\" %}\nCurrently, `npm` and `npx` commands do not work and will report an error `invalid format for V0 (detected) contract metadata`. Opt to use `yarn` until the problem is resolved.", "mimetype": "text/plain", "start_char_idx": 1946, "end_char_idx": 3220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e58e425-2005-4f91-8d1a-548bad9bbe1e": {"__data__": {"id_": "4e58e425-2005-4f91-8d1a-548bad9bbe1e", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91b5207f-f577-488f-b0c0-84e530cd61c6", "node_type": "1", "metadata": {}, "hash": "d6bc9f9ae44a27da8a547462d477d0c7d8ed4388fe3f2862066bdb2385d4c70e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "667f28b0-8709-4d45-b9a0-f4d268e06aad", "node_type": "1", "metadata": {}, "hash": "d2690ceb734153215c96de9929f7d0a5b026b3b79f8e8385c255e00256e58a21", "class_name": "RelatedNodeInfo"}}, "text": "{% endhint %}\n\n### 1) Install devPHAse and required libs\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn init\nyarn add -D typescript ts-node\nyarn add -D @devphase/cli\nyarn add -D @devphase/service\n```\n{% endtab %}\n\n{% tab title=\"npm\" %}\n```bash\nnpm init\nnpm install -D typescript ts-node\nnpm install -D @devphase/cli\nnpm install -D @devphase/service\n```\n{% endtab %}\n{% endtabs %}\n\n### 2) Init project\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase init\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase init\n```\n{% endtab %}\n{% endtabs %}\n\nYour directory will be initiated with all required files and template Flipper contract.\n\n```\n- .devphase/        # devPHAse cache directory\n- contracts/        # here you store your contracts\n    - flipper/          # template Flipper contract\n        - Cargo.toml        # rust project file\n        - lib.rs            # contract source\n- scripts/          # scripts which you can all with devPHAse environment\n    - deploy.ts         # sample deployment script\n    - get-logs.ts       # sample demonstrating how to get contract logs\n- tests/            # here you store e2e tests for contracts\n    - flipper/          # flipper related test suite\n        - flipper.test.ts   # flipper tests example\n```\n\n### 3) Prepare environment\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase check\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase check\n```\n{% endtab %}\n{% endtabs %}\n\nThis command will ensure the proper stack (node, pruntime, pherry) is ready to run. Download stack from official repository. Verify dependencies.", "mimetype": "text/plain", "start_char_idx": 3221, "end_char_idx": 4823, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "667f28b0-8709-4d45-b9a0-f4d268e06aad": {"__data__": {"id_": "667f28b0-8709-4d45-b9a0-f4d268e06aad", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e58e425-2005-4f91-8d1a-548bad9bbe1e", "node_type": "1", "metadata": {}, "hash": "92ec1de4b1acc7577dd26740b09cbecb3d47ad2aa211554dd1e200c324aadba9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ea4b160-a8c3-45bb-ac35-3afcf0088e96", "node_type": "1", "metadata": {}, "hash": "9177f1fadd123fdb175806945a11b0e0444986dc1b43fa5025f0dfda9bcca517", "class_name": "RelatedNodeInfo"}}, "text": "#### Output:\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase check\n[StackBinaryDownloader] Creating stack directory\n  \u2714 Checking configuration file\n  \u2714 Check dependencies\n  \u2714 Checking Phala stack binaries\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase check\n[StackBinaryDownloader] Creating stack directory\n  \u2714 Checking configuration file\n  \u2714 Check dependencies\n  \u2714 Checking Phala stack binaries\n```\n{% endtab %}\n{% endtabs %}\n\nYou will see a new directory called `stacks/` has been created\n\n```\n- stacks/                 # here all prepared stacks will be stored\n  - nightly-2024-03-07/     # bases on your configuration it will latest available stack or any specific you choose\n      - phala-node            # node binary\n      - pherry                # pherry binary\n      - pruntime              # pruntime binary\n      - *.so.*                # multiple requried libs\n      - *.contract            # system contracts\n```\n\nNow you are ready to go.\n\n### 4) Compile contract\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase contract compile -c flipper\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase contract compile -c flipper\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase contract compile -c flipper\n[MultiContractExecutor] Criteria: flipper\n[MultiContractExecutor] Matched contracts:\n[MultiContractExecutor] flipper\n[MultiContractExecutor]\n  \u276f flipper\n  \u2714 flipper\nDone in 32.49s.", "mimetype": "text/plain", "start_char_idx": 4825, "end_char_idx": 6309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ea4b160-a8c3-45bb-ac35-3afcf0088e96": {"__data__": {"id_": "0ea4b160-a8c3-45bb-ac35-3afcf0088e96", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "667f28b0-8709-4d45-b9a0-f4d268e06aad", "node_type": "1", "metadata": {}, "hash": "d2690ceb734153215c96de9929f7d0a5b026b3b79f8e8385c255e00256e58a21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1cda67e-2bbf-4be8-b603-18b47416b32f", "node_type": "1", "metadata": {}, "hash": "7618724fad48abe5fef577729e1de7453d529a3c0cecd043cd0fa5bd82b45c3f", "class_name": "RelatedNodeInfo"}}, "text": "```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase contract compile -c flipper\n[MultiContractExecutor] Criteria: flipper\n[MultiContractExecutor] Matched contracts:\n[MultiContractExecutor] flipper\n[MultiContractExecutor]\n  \u276f flipper\n  \u2714 flipper\n```\n{% endtab %}\n{% endtabs %}\n\nThis command will:\n\n* install contract dependencies\n* compile contract (only flipper in this case) and save output to ./contracts/flipper/target\n* copy contract artificats\n* generate typescript bindings which you can use in scripts and tests\n\nNew files:\n\n```\n- artifacts/            # here devPHAse will store compiled contract artifacts\n  - flipper/              # specific contract\n    - flipper.contract\n    - flipper.json\n    - flipper.wasm\n- typings/              # here devPHAse will store ts bindings\n  - Flipper.ts\n```\n\n### 5) Run tests\n\n{% hint style=\"danger\" %}\nCurrently, `npm` and `npx` commands do not work and will report an error `invalid format for V0 (detected) contract metadata`. Opt to use `yarn` until the problem is resolved.\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"yarn w/o logger\" %}\n```bash\nyarn devphase contract test -t flipper\n```\n{% endtab %}\n\n{% tab title=\"yarn w/ logger\" %}\n```bash\nyarn devphase contract test -t flipper -m 3\n```\n{% endtab %}\n\n{% tab title=\"npx w/o logger \" %}\n```bash\nnpx devphase contract test -t flipper\n```\n{% endtab %}\n\n{% tab title=\"npx w/ logger\" %}\n```basic\nyarn devphase contract test -t flipper -m 3\n```\n{% endtab %}\n{% endtabs %}\n\ndevPHAse in default config will:\n\n* check stack dependencies\n* start local stack\n* configure local environment (with minimal required deps)\n* execute tests\n* save logs into files\n\n#### Output:\n\n{% tabs %}\n{% tab title=\"yarn w/o logger\" %}\n```bash\nyarn devphase contract test -t flipper\n[StackBinaryDownloader] Preparing Phala stack release", "mimetype": "text/plain", "start_char_idx": 6310, "end_char_idx": 8126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1cda67e-2bbf-4be8-b603-18b47416b32f": {"__data__": {"id_": "d1cda67e-2bbf-4be8-b603-18b47416b32f", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ea4b160-a8c3-45bb-ac35-3afcf0088e96", "node_type": "1", "metadata": {}, "hash": "9177f1fadd123fdb175806945a11b0e0444986dc1b43fa5025f0dfda9bcca517", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e322d306-0c5a-4eac-94f8-99fc6756baae", "node_type": "1", "metadata": {}, "hash": "888da603d66adc8ab9138e2d36ad9714d526433610b40e05c8da06e7d53c4771", "class_name": "RelatedNodeInfo"}}, "text": "nightly-2024-03-13\n  \u2714 Checking releases directory\n  \u2714 Checking target release binaries\n \n \n[Test] Global setup start\n[Test] Preparing dev stack\n[StackManager] Starting stack nightly-2024-03-13\n  \u2714 Start node component\n  \u2714 Start pRuntime component\n  \u2714 Start pherry component\n[Test] Init API\n[Test] Setup environment\n[StackSetupService] Starting stack setup with default version\n  \u2714 Fetch worker info\n  \u2714 Load system contracts\n  \u2193 Register worker [skipped]\n  \u2714 Register gatekeeper\n  \u2714 Upload Pink system code\n  \u2714 Verify cluster\n  \u2714 Create cluster\n  \u2714 Wait for cluster to be ready\n  \u2714 Add worker endpoint\n  \u2714 Create system contract API\n[Test] Global setup done\n[Test] Starting tests\n  Flipper\n    default constructor\n      \u2714 Should be created with proper intial value\n      \u2714 Should be able to flip value (2572ms)\n    new constructor\n      \u2714 Should be created with proper intial value\n \n[Test] Global teardown start\n[Test] Internal clean up\n[Test] Stopping stack\n[Test] Global teardown done\n \n  3 passing (27s)\n \n[StackManager] pherry exited\n[StackManager] pruntime exited\n[StackManager] node exited\nDone in 33.00s.", "mimetype": "text/plain", "start_char_idx": 8127, "end_char_idx": 9240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e322d306-0c5a-4eac-94f8-99fc6756baae": {"__data__": {"id_": "e322d306-0c5a-4eac-94f8-99fc6756baae", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1cda67e-2bbf-4be8-b603-18b47416b32f", "node_type": "1", "metadata": {}, "hash": "7618724fad48abe5fef577729e1de7453d529a3c0cecd043cd0fa5bd82b45c3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26fae753-87e9-4f78-92ac-41094f425fa9", "node_type": "1", "metadata": {}, "hash": "7ec813fff9a33ce9f6a851559344ec7664b07f456c49b6c486d13dc0933d6906", "class_name": "RelatedNodeInfo"}}, "text": "```\n{% endtab %}\n\n{% tab title=\"yarn w/ logger\" %}\n```bash\nyarn devphase contract test -t flipper -m 3\n[StackBinaryDownloader] Preparing Phala stack release nightly-2024-03-13\n  \u2714 Checking releases directory\n  \u2714 Checking target release binaries\n \n \n[Test] Global setup start\n[Test] Preparing dev stack\n[StackManager] Starting stack nightly-2024-03-13\n  \u2714 Start node component\n  \u2714 Start pRuntime component\n  \u2714 Start pherry component\n[Test] Init API\n[Test] Setup environment\n[StackSetupService] Starting stack setup with default version\n  \u2714 Fetch worker info\n  \u2714 Load system contracts\n  \u2193 Register worker [skipped]\n  \u2714 Register gatekeeper\n  \u2714 Upload Pink system code\n  \u2714 Verify cluster\n  \u2714 Create cluster\n  \u2714 Wait for cluster to be ready\n  \u2714 Add worker endpoint\n  \u2714 Create system contract API\n  \u2714 Deploy tokenomic driver\n  \u2714 Deploy SideVM driver\n  \u2714 Calculate logger server contract ID\n  \u2714 Prepare chain for logger server\n  \u2714 Deploy logger server\n[Test] Global setup done\n[Test] Starting tests\n  Flipper\n    default constructor\n      \u2714 Should be created with proper intial value\nLogs from pink server:\n#366\tTX\tinfo\t\tResource uploaded to cluster, by 8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48 (5FHneW46.), type=InkCode,", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26fae753-87e9-4f78-92ac-41094f425fa9": {"__data__": {"id_": "26fae753-87e9-4f78-92ac-41094f425fa9", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e322d306-0c5a-4eac-94f8-99fc6756baae", "node_type": "1", "metadata": {}, "hash": "888da603d66adc8ab9138e2d36ad9714d526433610b40e05c8da06e7d53c4771", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0500d3c7-37ef-478c-bed5-dde897bc7306", "node_type": "1", "metadata": {}, "hash": "060133becba9a16ad371b4ef69ac68e7133afab25904a603d55d3e4bd092b71c", "class_name": "RelatedNodeInfo"}}, "text": "hash=0xcbf8151426f6ce308a875a1c5cc6e2a4f4c0bca3be4371a15b0d25bcca336f55\n#376\tEST\tinfo\t\tinstantiated\n#392\tTX\tinfo\t\tinstantiated\n      \u2714 Should be able to flip value (2636ms)\nLogs from pink server:\n#402\tEST\tinfo\t\tinstantiated\n#422\tTX\tinfo\t\tinstantiated\n    new constructor\n      \u2714 Should be created with proper intial value\nLogs from pink server:\n#456\tEST\tinfo\t\tinstantiated\n#473\tTX\tinfo\t\tinstantiated\n \n[Test] Global teardown start\n[Test] Internal clean up\n[Test] Stopping stack\n[Test] Global teardown done\n \n  3 passing (54s)\n \n[StackManager] pherry exited\n[StackManager] pruntime exited\n[StackManager] node exited\nDone in 59.67s.\n```\n{% endtab %}\n{% endtabs %}\n\nNew directories created for logs.\n\n```\n- logs/             # here devPHAse will store execution logs\n  - 2024-03-07T16:09:43.421Z/     # single execution\n    - node.log\n    - pherry.log\n    - pruntime.log\n    - pink_logger.log               # if stack setup with logger here all logs will be stored\n```\n\nRunning tests this way is nice but only if it is single execution. If you are developing new feature it may be required to continuously test it. In this case default procedure is time-consuming, because setting up stack takes \\~40s.\n\nNothing blocks you from using the same running node for multiple tests.\n\n### 6) Long-running local environment\n\nThis command will start and keep running all stack components. However, network is not configured yet to accept contracts.\n\n{% hint style=\"danger\" %}\nCurrently, `npm` and `npx` commands do not work and will report an error `invalid format for V0 (detected) contract metadata`. Opt to use `yarn` until the problem is resolved.", "mimetype": "text/plain", "start_char_idx": 10482, "end_char_idx": 12120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0500d3c7-37ef-478c-bed5-dde897bc7306": {"__data__": {"id_": "0500d3c7-37ef-478c-bed5-dde897bc7306", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26fae753-87e9-4f78-92ac-41094f425fa9", "node_type": "1", "metadata": {}, "hash": "7ec813fff9a33ce9f6a851559344ec7664b07f456c49b6c486d13dc0933d6906", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a31201a6-3e53-4933-aef0-528d4721ccf6", "node_type": "1", "metadata": {}, "hash": "7670ab9fba968822f2df4a8e1acee01809085c1d179b87e1cbcd3b7d51ba75bc", "class_name": "RelatedNodeInfo"}}, "text": "{% endhint %}\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase stack run --save-logs\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase stack run --save-logs\n```\n{% endtab %}\n{% endtabs %}\n\n### 7) Configure network\n\nNow let's configure the network to enable your local environment to deploy a Phat Contract and collect logs.\n\n{% hint style=\"danger\" %}\nCurrently, `npm` and `npx` commands do not work and will report an error `invalid format for V0 (detected) contract metadata`. Opt to use `yarn` until the problem is resolved.\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase stack setup -m 3\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase stack setup -m 3\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n```bash\nyarn devphase stack setup -m 3\n[StackSetupService] Starting stack setup with default version\n  \u2714 Fetch worker info\n  \u2714 Load system contracts\n  \u2193 Register worker [skipped]\n  \u2714 Register gatekeeper\n  \u2714 Upload Pink system code\n  \u2714 Verify cluster\n  \u2714 Create cluster\n  \u2714 Wait for cluster to be ready\n  \u2714 Add worker endpoint\n  \u2714 Create system contract API\n  \u2714 Deploy tokenomic driver\n  \u2714 Deploy SideVM driver\n  \u2714 Calculate logger server contract ID\n  \u2714 Prepare chain for logger server\n  \u2714 Deploy logger server\n[StackSetup] Stack is ready\n[StackSetup] Cluster Id\n[StackSetup] 0x0000000000000000000000000000000000000000000000000000000000000001\nDone in 38.52s.\n```\n\nNow all required network components should be ready for Phat Contract deployment.\n\n### 8) Run tests using long-running local environment\n\n`-e` flag will make devPHAse to execute test without setting up temporary stack but using existing one.\n\n{% hint style=\"danger\" %}\nCurrently, `npm` and `npx` commands do not work and will report an error `invalid format for V0 (detected) contract metadata`.", "mimetype": "text/plain", "start_char_idx": 12121, "end_char_idx": 13938, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a31201a6-3e53-4933-aef0-528d4721ccf6": {"__data__": {"id_": "a31201a6-3e53-4933-aef0-528d4721ccf6", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0500d3c7-37ef-478c-bed5-dde897bc7306", "node_type": "1", "metadata": {}, "hash": "060133becba9a16ad371b4ef69ac68e7133afab25904a603d55d3e4bd092b71c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc0ec8ae-3217-4f67-a4bb-cd0db1017d9f", "node_type": "1", "metadata": {}, "hash": "84d691162304342a3a630bede6c1c024c6afab3c66f53c2d47cc039c39051578", "class_name": "RelatedNodeInfo"}}, "text": "Opt to use `yarn` until the problem is resolved.\n{% endhint %}\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase contract test -t flipper -e\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase contract test -t flipper -e\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n```bash\nyarn devphase contract test -t flipper -e\n[Test] Global setup start\n[Test] Init API\n[Test] Setup environment\n[StackSetupService] Starting stack setup with default version\n  \u2714 Fetch worker info\n  \u2714 Load system contracts\n  \u2193 Register worker [skipped]\n  \u2193 Register gatekeeper [skipped]\n  \u2193 Upload Pink system code [skipped]\n  \u2714 Verify cluster\n  \u2193 Create cluster [skipped]\n  \u2714 Wait for cluster to be ready\n  \u2193 Add worker endpoint [skipped]\n  \u2714 Create system contract API\n[Test] Global setup done\n[Test] Starting tests\n  Flipper\n    default constructor\n      \u2714 Should be created with proper intial value\nLogs from pink server:\n#996\tTX\tinfo\t\tResource uploaded to cluster, by 8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48 (5FHneW46...), type=InkCode, hash=0xcbf8151426f6ce308a875a1c5cc6e2a4f4c0bca3be4371a15b0d25bcca336f55\n#999\tEST\tinfo\t\tinstantiated\n#1007\tTX\tinfo\t\tinstantiated\n      \u2714 Should be able to flip value (2390ms)\nLogs from pink server:\n#1009\tEST\tinfo\t\tinstantiated\n#1021\tTX\tinfo\t\tinstantiated\n    new constructor\n      \u2714 Should be created with proper intial value\nLogs from pink server:\n#1036\tEST\tinfo\t\tinstantiated\n#1044\tTX\tinfo\t\tinstantiated\n \n[Test] Global teardown start\n[Test] Internal clean up\n[Test] Global teardown done\n \n  3 passing (18s)\n \nDone in 24.33s.", "mimetype": "text/plain", "start_char_idx": 13939, "end_char_idx": 15519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc0ec8ae-3217-4f67-a4bb-cd0db1017d9f": {"__data__": {"id_": "fc0ec8ae-3217-4f67-a4bb-cd0db1017d9f", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a31201a6-3e53-4933-aef0-528d4721ccf6", "node_type": "1", "metadata": {}, "hash": "7670ab9fba968822f2df4a8e1acee01809085c1d179b87e1cbcd3b7d51ba75bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6bc229c3-d06d-4cad-9b6d-99a871e314d7", "node_type": "1", "metadata": {}, "hash": "2c133347f604c1a0147dfa348354c1c38de97284cc2851693a1e40a99dbfc1f6", "class_name": "RelatedNodeInfo"}}, "text": "```\n\n### 9) Running Scripts\n\nDevPHAse will run script on specified environment. If environment provides a PinkLogger - logs will be saved locally.\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase script scripts/deploy.ts\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase script scripts/deploy.ts\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n```bash\nyarn devphase script scripts/deploy.ts\n[Script] Executing /home/hashwarlock/Templates/YarnTest/scripts/deploy.ts\nContract ID: 0x8e132d6bdebe37824b31df98669063d52d25d7eb0c40358c7f0e47876bc8a879\n{ Ok: false }\n{\n  Finalized: '0xda06fe993f51260a4bd726d721ae34ec7d1b939cb9a425a0dd4fd9c24831d023'\n}\n{ Ok: true }\nDone in 9.62s.\n```\n\n**Get logs locally**\n\nUsing the contract ID from the previous script `0x8e132d6bdebe37824b31df98669063d52d25d7eb0c40358c7f0e47876bc8a879` modify contractIds variable in `scripts/get-logs.ts` then execute the script to get logs.\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase script scripts/get-logs.ts\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase script scripts/get-logs.ts\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n```bash\nyarn devphase script scripts/get-logs.ts\n[Script] Executing /home/hashwarlock/Templates/YarnTest/scripts/get-logs.ts\n0x8e132d6bdebe37824b31df98669063d52d25d7eb0c40358c7f0e47876bc8a879\n[\n  {\n    sequence: 50,\n    type: 'Log',\n    blockNumber: 1714,", "mimetype": "text/plain", "start_char_idx": 15520, "end_char_idx": 16916, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bc229c3-d06d-4cad-9b6d-99a871e314d7": {"__data__": {"id_": "6bc229c3-d06d-4cad-9b6d-99a871e314d7", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc0ec8ae-3217-4f67-a4bb-cd0db1017d9f", "node_type": "1", "metadata": {}, "hash": "84d691162304342a3a630bede6c1c024c6afab3c66f53c2d47cc039c39051578", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b9fdfa1-a7b3-4c8d-873d-6244d3c47be8", "node_type": "1", "metadata": {}, "hash": "9aba5592a7b094616696bfcc6913ecbe86f0c8373f1f1c1e28761269007b61d4", "class_name": "RelatedNodeInfo"}}, "text": "contract: '0x8e132d6bdebe37824b31df98669063d52d25d7eb0c40358c7f0e47876bc8a879',\n    entry: '0x8e132d6bdebe37824b31df98669063d52d25d7eb0c40358c7f0e47876bc8a879',\n    execMode: 'transaction',\n    timestamp: 2024-03-14T05:40:24.365Z,\n    level: 3,\n    message: 'instantiated'\n  },\n  {\n    sequence: 55,\n    type: 'MessageOutput',\n    blockNumber: 1723,\n    origin: '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d',\n    contract: '0x8e132d6bdebe37824b31df98669063d52d25d7eb0c40358c7f0e47876bc8a879',\n    nonce: '0xacac9d33a106f1051887b243f82755276d8443c070fb4c9987018674cbbe478b',\n    output: {\n      gasConsumed: { refTime: 440059308, proofSize: 67027 },\n      gasRequired: { refTime: 65728937984, proofSize: 10485760 },\n      storageDeposit: { charge: 0 },\n      debugMessage: '',\n      result: { ok: { flags: [], data: '0x00' } }\n    }\n  }\n]\n```\n\n### 10) Run devPHAse on PoC6 Testnet or Phala Mainnet\n\nYou can specify to run commands on any network - including PoC6 Testnet or Phala Mainnet. Check commands help for further details.", "mimetype": "text/plain", "start_char_idx": 16921, "end_char_idx": 17972, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b9fdfa1-a7b3-4c8d-873d-6244d3c47be8": {"__data__": {"id_": "6b9fdfa1-a7b3-4c8d-873d-6244d3c47be8", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6bc229c3-d06d-4cad-9b6d-99a871e314d7", "node_type": "1", "metadata": {}, "hash": "2c133347f604c1a0147dfa348354c1c38de97284cc2851693a1e40a99dbfc1f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e5fbb81-8df6-4a8e-9fbf-7bbabca07016", "node_type": "1", "metadata": {}, "hash": "796c449a459d7bcbfc338b149184f96da0a35d9ba7dc05854bacf9ef903dadc6", "class_name": "RelatedNodeInfo"}}, "text": "#### Deploy contract command\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase help contract deploy\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase help contract deploy\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n```bash\nDeploy contract\n \nUSAGE\n  $ devphase contract deploy [ARGS] -c <value> -o <value> [-t InkCode|SidevmCode|IndeterministicInkCode] [-n\n    <value>] [-l <value>] [-a <value>]\n \nARGUMENTS\n  ARGS  Constructor arguments\n \nFLAGS\n  -a, --account=<value>   [default: alice] Account used to deploy (managed account key)\n  -c, --contract=<value>  (required) Contract name\n  -l, --cluster=<value>   Target cluster Id\n  -n, --network=<value>   [default: local] Target network to deploy (local default)\n  -o, --ctor=<value>      (required) Contract constructor to call (name)\n  -t, --type=<option>     [default: InkCode]\n                          <options: InkCode|SidevmCode|IndeterministicInkCode>\n \nDone in 0.99s.\n```\n\n#### Call contract command\n\n{% tabs %}\n{% tab title=\"yarn\" %}\n```bash\nyarn devphase help contract call\n```\n{% endtab %}\n\n{% tab title=\"npx\" %}\n```bash\nnpx devphase help contract call\n```\n{% endtab %}\n{% endtabs %}\n\n#### Output:\n\n```bash\nCall contract\n \nUSAGE\n  $ devphase contract call [ARGS] -c <value> -i <value> -m <value> [-t InkCode|SidevmCode|IndeterministicInkCode]\n    [-a query|tx] [-n <value>] [-l <value>] [-a <value>]\n \nARGUMENTS\n  ARGS  Call arguments\n \nFLAGS\n  -a, --accessor=<option>  [default: query] Method type: transaction or query\n                           <options: query|tx>\n  -a, --account=<value>    [default: alice] Account used to call (managed account key)\n  -c,", "mimetype": "text/plain", "start_char_idx": 17974, "end_char_idx": 19615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e5fbb81-8df6-4a8e-9fbf-7bbabca07016": {"__data__": {"id_": "3e5fbb81-8df6-4a8e-9fbf-7bbabca07016", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b9fdfa1-a7b3-4c8d-873d-6244d3c47be8", "node_type": "1", "metadata": {}, "hash": "9aba5592a7b094616696bfcc6913ecbe86f0c8373f1f1c1e28761269007b61d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b4055ac-6938-4d48-ae2c-988234af3a8d", "node_type": "1", "metadata": {}, "hash": "e1d8289bd667ef306da17bb9c62dfef8d6a26230a24cd6d08c37ca6c8f476391", "class_name": "RelatedNodeInfo"}}, "text": "--contract=<value>   (required) Contract name\n  -i, --id=<value>         (required) Contract ID\n  -l, --cluster=<value>    Target cluster Id\n  -m, --method=<value>     (required) Contract method to call (name)\n  -n, --network=<value>    [default: local] Target network to deploy (local default)\n  -t, --type=<option>      [default: InkCode]\n                           <options: InkCode|SidevmCode|IndeterministicInkCode>\n \nDone in 1.00s\n```\n\n## Build from source <a href=\"#build-from-source\" id=\"build-from-source\"></a>\n\nThe Phala-Network/phala-blockchain repository always contains [the latest build instructions](https://github.com/Phala-Network/phala-blockchain#native-build), at the time of writing (December 26, 2022), we use the following commands to set up development environment:\n\n```\n# First clone the repository\ngit clone https://github.com/Phala-Network/phala-blockchain.git\n# Change to the repository directory\ncd phala-blockchain\n# Install system dependencies:\nsudo apt install -y build-essential pkg-config libssl-dev protobuf-compiler\n# Install Rust\ncurl https://sh.rustup.rs -sSf | sh\n# Install dependencies for Substrate development\ngit submodule update --init\nsh ./scripts/init.sh\n# Installl LLVM 14\nwget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\n./llvm.sh 14\n```\n\nThen run the following command to build the Phala blockchain:\n\n```\ncargo build --release\n```\n\nIt takes approximately 20 minutes to complete the building process on a laptop equipped with an AMD Ryzen 7 4700U processor with 8 cores, 8 threads, and 32GB of RAM.\n\n### Start the local testnet <a href=\"#start-the-local-testnet\" id=\"start-the-local-testnet\"></a>\n\nWe have a dedicate set of scripts to get the blockchain to run, checkout out [this page](https://github.com/Phala-Network/phala-blockchain/tree/master/scripts/run) for full details.", "mimetype": "text/plain", "start_char_idx": 19616, "end_char_idx": 21444, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b4055ac-6938-4d48-ae2c-988234af3a8d": {"__data__": {"id_": "8b4055ac-6938-4d48-ae2c-988234af3a8d", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e5fbb81-8df6-4a8e-9fbf-7bbabca07016", "node_type": "1", "metadata": {}, "hash": "796c449a459d7bcbfc338b149184f96da0a35d9ba7dc05854bacf9ef903dadc6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2d2c014-e9a4-45ff-afc6-24c2dfe66aed", "node_type": "1", "metadata": {}, "hash": "5ec653d2f98c3862368c65e95484f0a458be8818aa761a5fa1586ceab0402226", "class_name": "RelatedNodeInfo"}}, "text": "For simplicity we can start as simple as follows:\n\nWe might want to clean up runtime data to have to clean starting environment, from the root of the `phala-blockchain` project, run this to clean things up:\n\n```\n./scripts/run/clear-pruntime.sh\n```\n\nThen go ahead and run these 3 commands in 3 separate terminals:\n\n```\n./scripts/run/node.sh\n./scripts/run/pruntime.sh\n./scripts/run/pherry.sh\n```\n\nNow you have a full node at [ws://localhost:19944](ws://localhost:19944/), and the pruntime is at [http://localhost:18000](http://localhost:18000/).\n\nAfter you start the node and the pruntime, you need set up Phat Contract environment once. This can be done with our [phala-blockchain-setup repo](https://github.com/shelvenzhou/phala-blockchain-setup):\n\n```\ngit clone https://github.com/shelvenzhou/phala-blockchain-setup.git\ncd phala-blockchain-setup\nyarn\n\nENDPOINT=ws://localhost:19944 \\\nWORKERS=http://localhost:18000 \\\nGKS=http://localhost:18000 \\\nyarn setup:drivers\n```\n\nAfter all, you testnet is ready. You can continue with the [Connect the polkadot app to the local testnet](../../developers/advanced-topics/broken-reference/) section.\n\n## Connect the Phat UI to the local testnet <a href=\"#connect-the-phat-ui-to-the-local-testnet\" id=\"connect-the-phat-ui-to-the-local-testnet\"></a>\n\nWe have a client-side application at [https://phat.phala.network/](https://phat.phala.network/), you can follow the instructions from [Phat Contract Console](../../.gitbook/assets/awesome%20phat%20contracts%20\\(2\\)/) to connect the application to the local testnet.\n\n<figure><img src=\"../../.gitbook/assets/phat-ui-to-testnet.png\" alt=\"\"><figcaption></figcaption></figure>\n\nAs the above figure shows, we first click the green dot at the upper-right cornor to set the `RPC Endpoint` to `ws://localhost:19944`, or `ws://localhost:9944` if you start the chain via the devPHAse approach, and change the PRuntime field accordingly.", "mimetype": "text/plain", "start_char_idx": 21445, "end_char_idx": 23359, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2d2c014-e9a4-45ff-afc6-24c2dfe66aed": {"__data__": {"id_": "b2d2c014-e9a4-45ff-afc6-24c2dfe66aed", "embedding": null, "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "427dd787-4557-44c4-90ec-902538208d2e", "node_type": "4", "metadata": {}, "hash": "9a846be0a24447db5ca950100d1dc7cfe6262893afc809cc32fcf427cb1c2bd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b4055ac-6938-4d48-ae2c-988234af3a8d", "node_type": "1", "metadata": {}, "hash": "e1d8289bd667ef306da17bb9c62dfef8d6a26230a24cd6d08c37ca6c8f476391", "class_name": "RelatedNodeInfo"}}, "text": "Don\u2019t forget to claim some `Test-PHA`s, they\u2019re required to deploy Phat Contracts and send transactions.\n\n## Connect the polkadot app to the local testnet <a href=\"#connect-the-polkadot-app-to-the-local-testnet\" id=\"connect-the-polkadot-app-to-the-local-testnet\"></a>\n\nOpen up [https://polkadot.js.org/apps](https://polkadot.js.org/apps/#/explorer), click the upper-left corner to call forth the endpoint setup menu:\n\n<figure><img src=\"../../.gitbook/assets/phat-ui-to-polkadot-app.png\" alt=\"\"><figcaption></figcaption></figure>\n\nSet the field `custom endpoint` to `ws://localhost:9944` and then click the `switch` button to connect to it.\n\nCongratulations! Now you have a fully qualified local development environment!", "mimetype": "text/plain", "start_char_idx": 23361, "end_char_idx": 24080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce1987b2-4be4-45e3-8fac-b345a4d07a15": {"__data__": {"id_": "ce1987b2-4be4-45e3-8fac-b345a4d07a15", "embedding": null, "metadata": {"file_path": "./phala_dist/use-rust-crates.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "82057350-0cbf-47a2-a169-81130a050b99", "node_type": "4", "metadata": {}, "hash": "e178f20b7280f2aea9483b407e14eb5f665552059dc6068c7119f06cc390a6f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d9b146a-a9a6-4dcb-b6d3-319b32a50fc9", "node_type": "1", "metadata": {}, "hash": "3683e7e2a9b791a0e778c1078d6f046aa3e674ca6d0f838db99fc5a36ae6e3e8", "class_name": "RelatedNodeInfo"}}, "text": "# Use Rust Crates\n\n## What Crates Can Be Used <a href=\"#what-crates-can-be-used\" id=\"what-crates-can-be-used\"></a>\n\nNot every Rust crate can be used in Phat Contract. This is because the contracts are running inside the ink! runtime, which is different from operating systems like Linux. In general, there are two requirements:\n\n* The crate has `no_std` support (learn [more](https://docs.rust-embedded.org/book/intro/no-std.html) about the differences between `std` and `no_std`);\n* The crate is in Pure Rust and does not require pre-compiled libraries.\n\n## Crate Recommendations <a href=\"#crate-recommendations\" id=\"crate-recommendations\"></a>\n\nThe pink-extension contains the fundamental functions of the Phat Contract. There are also many useful crates and repositories which make developing Phat Contract easy.\n\n### Use Storage Services <a href=\"#use-storage-services\" id=\"use-storage-services\"></a>\n\n[pink-s3](https://crates.io/crates/pink-s3) enables you to store data to any storage service with S3-API support. Such storage service providers include:\n\n* [Amazon S3](https://aws.amazon.com/s3/) - 5GB, 12 months free\n* [4everland](https://www.4everland.org/bucket/) - 5GB free on IPFS and 100MB Free on Arweave\n* [Storj](https://www.storj.io/) - 150GB free\n* [Filebase](https://filebase.com/) - 5GB free\n\n### Cross-chain Operations <a href=\"#cross-chain-operations\" id=\"cross-chain-operations\"></a>\n\nWith its confidentiality and HTTP request support, you can safely store like an ETH account in Phat Contract and use it to operate an Ethereum RPC node to do any cross-chain operations. Such a pattern can be easily extended to support other blockchains.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d9b146a-a9a6-4dcb-b6d3-319b32a50fc9": {"__data__": {"id_": "1d9b146a-a9a6-4dcb-b6d3-319b32a50fc9", "embedding": null, "metadata": {"file_path": "./phala_dist/use-rust-crates.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "82057350-0cbf-47a2-a169-81130a050b99", "node_type": "4", "metadata": {}, "hash": "e178f20b7280f2aea9483b407e14eb5f665552059dc6068c7119f06cc390a6f6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ce1987b2-4be4-45e3-8fac-b345a4d07a15", "node_type": "1", "metadata": {}, "hash": "f4f05b7f3f304dbbb166ded2a352f9dab3beec57923e0198e6cf8ca4261fd9c3", "class_name": "RelatedNodeInfo"}}, "text": "* [pink-web3](https://crates.io/crates/pink-web3) provides the basic cross-chain operation support for EVM-compatible chains;\n* [subrpc](https://github.com/Phala-Network/phat-offchain-rollup/tree/sub0-workshop/phat/crates/subrpc) provides the basic support for Substrate-based chains;\n* [stateful-rollup](https://github.com/Phala-Network/phat-offchain-rollup/tree/sub0-workshop) enables reliable cross-chain request processing based on the crates above.\n\n### Other Crates <a href=\"#other-crates\" id=\"other-crates\"></a>\n\n* [phat-contract-examples](https://github.com/Phala-Network/phat-contract-examples) contains the official examples of Phat Contract. The examples are up-to-date, and may use some not-yet-released features;\n* [awesome-phat-contracts](https://github.com/Phala-Network/awesome-phat-contracts) collects the learning materials and some Phat Contract examples from previous hackathon submissions.", "mimetype": "text/plain", "start_char_idx": 1663, "end_char_idx": 2573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2201727-ecd0-419c-91a7-1952ead0a83e": {"__data__": {"id_": "e2201727-ecd0-419c-91a7-1952ead0a83e", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-confidence-level.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be28c864-d1b8-419b-a228-08d728cd351f", "node_type": "4", "metadata": {}, "hash": "987ae369ba50cef37d437b3956f8d9f585fb8b8eb4ca22bc0da8db80ac9b3b7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a6ded14-5d21-4e15-bd4b-690b3a4ca487", "node_type": "1", "metadata": {}, "hash": "16c1d6c4dda095ba9075d1c118ad8096ab89473475a65c5ec0e9a9001eb311c7", "class_name": "RelatedNodeInfo"}}, "text": "# Worker Confidence Level\n\n## Test your Intel\u00ae SGX Capability <a href=\"#test-your-intel-sgx-capability\" id=\"test-your-intel-sgx-capability\"></a>\n\nThe confidence level impacts your worker\u2019s score. Before configuring your worker, the necessary drivers are required, and the `sgx-test` option determines your Intel\u00ae SGX Capability alongside the confidence level.\n\n```\nsudo phala sgx-test\n```\n\n> This command will install \ud83d\udc33 Docker, the required Intel\u00ae SGX drivers, and pull all the necessary Docker images for your Phala worker \ud83e\udea8\u26cf\ufe0f.\n>\n> * Please follow the instruction during installation.\n\nInformation about the checks conducted during execution of the command:\n\n1. SGX system software \u2192 Able to launch enclaves \u2192 `Production Mode`\n2. Flexible launch control \u2192 `Able to launch production mode enclave`\n3. `isvEnclaveQuoteStatus` and `advisoryIDs` (explained in the next section)\n\nAmong them, **the first one is a must to run Phala Network pRuntime**. If it\u2019s not supported (tagged as \u2718 in the report example below), we are afraid you can\u2019t mine PHA with this setup. You may want to replace the motherboard and/or the CPU.\n\nThe latter two are not a must, though it is suggested to be checked as it would be essential to install the DCAP driver.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a6ded14-5d21-4e15-bd4b-690b3a4ca487": {"__data__": {"id_": "7a6ded14-5d21-4e15-bd4b-690b3a4ca487", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-confidence-level.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be28c864-d1b8-419b-a228-08d728cd351f", "node_type": "4", "metadata": {}, "hash": "987ae369ba50cef37d437b3956f8d9f585fb8b8eb4ca22bc0da8db80ac9b3b7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2201727-ecd0-419c-91a7-1952ead0a83e", "node_type": "1", "metadata": {}, "hash": "a2b21af28a351fb19515ff49be7a2e128ff0be77d4795f256197ad9837844346", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9af1ee05-600f-41f6-884c-1393052dabd1", "node_type": "1", "metadata": {}, "hash": "53ec6e55756a3cd43d2416905443b5fa6106da8e89f54a0f992014f5455778e7", "class_name": "RelatedNodeInfo"}}, "text": "The example below shows a positive result:\n\n```\nDetecting SGX, this may take a minute...\n\u2714  SGX instruction set\n  \u2714  CPU support\n  \u2714  CPU configuration\n  \u2714  Enclave attributes\n  \u2714  Enclave Page Cache\n  SGX features\n    \u2714  SGX2  \u2714  EXINFO  \u2718  ENCLV  \u2718  OVERSUB  \u2718  KSS\n    Total EPC size: 94.0MiB\n\u2714  Flexible launch control\n  \u2714  CPU support\n  \uff1f CPU configuration\n  \u2714  Able to launch production mode enclave\n\u2714  SGX system software\n  \u2714  SGX kernel device (/dev/sgx/enclave)\n  \u2714  libsgx_enclave_common\n  \u2714  AESM service\n  \u2714  Able to launch enclaves\n    \u2714  Debug mode\n    \u2714  Production mode\n    \u2714  Production mode (Intel whitelisted)\n\nYou are all set to start running SGX programs!\nGenerated machine id:\n[162, 154, 220, 15, 163, 137, 184, 233, 251, 203, 145, 36, 214, 55, 32, 54]\n\nTesting RA.\naesm_service[15]: [ADMIN]EPID Provisioning initiated\naesm_service[15]: The Request ID is 09a2bed647d24f909d4a3990f8e28b4a\naesm_service[15]: The Request ID is 8d1aa4104b304e12b7312fce06881260\naesm_service[15]: [ADMIN]EPID Provisioning successful\nisvEnclaveQuoteStatus = GROUP_OUT_OF_DATE\nplatform_info_blob { sgx_epid_group_flags: 4, sgx_tcb_evaluation_flags: 2304, pse_evaluation_flags: 0, latest_equivalent_tcb_psvn: [15, 15, 2, 4, 1, 128, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], latest_pse_isvsvn: [0, 11], latest_psda_svn: [0, 0, 0, 2],", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9af1ee05-600f-41f6-884c-1393052dabd1": {"__data__": {"id_": "9af1ee05-600f-41f6-884c-1393052dabd1", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-confidence-level.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be28c864-d1b8-419b-a228-08d728cd351f", "node_type": "4", "metadata": {}, "hash": "987ae369ba50cef37d437b3956f8d9f585fb8b8eb4ca22bc0da8db80ac9b3b7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a6ded14-5d21-4e15-bd4b-690b3a4ca487", "node_type": "1", "metadata": {}, "hash": "16c1d6c4dda095ba9075d1c118ad8096ab89473475a65c5ec0e9a9001eb311c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "334bf31f-e63d-4aa8-a5b0-f3777d7008ca", "node_type": "1", "metadata": {}, "hash": "09e01dbf72ee47f34e07c63c0c72d36885ee3b768463124d2927b13bdd4e32be", "class_name": "RelatedNodeInfo"}}, "text": "xeid: 0, gid: 2919956480, signature: sgx_ec256_signature_t { gx: [99, 239, 225, 171, 96, 219, 216, 210, 246, 211, 20, 101, 254, 193, 246, 66, 170, 40, 255, 197, 80, 203, 17, 34, 164, 2, 127, 95, 41, 79, 233, 58], gy: [141, 126, 227, 92, 128, 3, 10, 32, 239, 92, 240, 58, 94, 167, 203, 150, 166, 168, 180, 191, 126, 196, 107, 132, 19, 84, 217, 14, 124, 14, 245, 179] } }\nadvisoryURL = https://security-center.intel.com\nadvisoryIDs = \"INTEL-SA-00219\", \"INTEL-SA-00289\", \"INTEL-SA-00320\", \"INTEL-SA-00329\"\nconfidenceLevel = 5\n```\n\nIf you can not run Phala pRuntime with both of them tagged as \u2714, you may have to check whether your BIOS is the latest version with latest security patches. If you still can\u2019t run Phala pRuntime docker with the latest BIOS of your motherboard manufacturer, we are afraid you can\u2019t mine PHA for now with this motherboard.\n\nYour confidence level, referred to as the \u201cTier\u201d in the table below, will appear in the last line of the report after executing `sudo phala sgx-test`.", "mimetype": "text/plain", "start_char_idx": 2570, "end_char_idx": 3570, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "334bf31f-e63d-4aa8-a5b0-f3777d7008ca": {"__data__": {"id_": "334bf31f-e63d-4aa8-a5b0-f3777d7008ca", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-confidence-level.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be28c864-d1b8-419b-a228-08d728cd351f", "node_type": "4", "metadata": {}, "hash": "987ae369ba50cef37d437b3956f8d9f585fb8b8eb4ca22bc0da8db80ac9b3b7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9af1ee05-600f-41f6-884c-1393052dabd1", "node_type": "1", "metadata": {}, "hash": "53ec6e55756a3cd43d2416905443b5fa6106da8e89f54a0f992014f5455778e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30611024-e523-4e0e-a17f-e12190daf970", "node_type": "1", "metadata": {}, "hash": "3f3e0a7fb2de7b802f44f036c90db2dc3a603f9d12c23f7dc2a6b33a7429e7e3", "class_name": "RelatedNodeInfo"}}, "text": "## Confidence Level of a Worker <a href=\"#confidence-level-of-a-worker\" id=\"confidence-level-of-a-worker\"></a>\n\n| Level  | isvEnclaveQuoteStatus                                            | advisoryIDs               |\n| ------ | ---------------------------------------------------------------- | ------------------------- |\n| Tier 1 | OK                                                               | None                      |\n| Tier 2 | SW\\_HARDENING\\_NEEDED                                            | None                      |\n| Tier 3 | CONFIGURATION\\_NEEDED, CONFIGURATION\\_AND\\_SW\\_HARDENING\\_NEEDED | Whitelisted\\*             |\n| Tier 4 | CONFIGURATION\\_NEEDED, CONFIGURATION\\_AND\\_SW\\_HARDENING\\_NEEDED | Some beyond the whitelist |\n| Tier 5 | GROUP\\_OUT\\_OF\\_DATE                                             | Any value                 |\n\nThe confidence level measures how secure the SGX Enclave execution environment is. It\u2019s determined by the Remote Attestation report from Intel. Among them, `isvEnclaveQuoteStatus` indicates if the platform is vulnerable to some known problems, and `advisoryIDs` indicates the actual affected problems.\n\nNot all the `advisoryIDs` are problematic. Some advisories doesn\u2019t affect Phala\u2019s security assumption, and therefore are whitelisted:\n\n* INTEL-SA-00219\n* INTEL-SA-00334\n* INTEL-SA-00381\n* INTEL-SA-00389\n\nTier 1, 2, 3 are considered with the best security level because they are either not affected by any known vulnerability, or the adversary is known trivial. It\u2019s good to run highest valuable apps on these workers, for instance:\n\n* Financial apps: privacy-preserving DEX, DeFi ,etc\n* Secret key management: wallet, node KMS, password manager\n* Phala Gatekeeper\n\nTier 4, 5 are considered with reduced security, because these machines requires some configuration fix in the BIOS or BIOS firmware (CONFIGURATION\\_NEEDED, CONFIGURATION\\_AND\\_SW\\_HARDENING\\_NEEDED), or their microcode or the corresponding BIOS firmware are out-of-date (GROUP\\_OUT\\_OF\\_DATE). Therefore we cannot assume the platform is suitable for highest security scenarios. However it\u2019s still good to run batch processing jobs, apps dealing with ephemeral privacy data, and traditional blockchain apps:\n\n* Data analysis jobs (e.g.", "mimetype": "text/plain", "start_char_idx": 3572, "end_char_idx": 5829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30611024-e523-4e0e-a17f-e12190daf970": {"__data__": {"id_": "30611024-e523-4e0e-a17f-e12190daf970", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-confidence-level.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be28c864-d1b8-419b-a228-08d728cd351f", "node_type": "4", "metadata": {}, "hash": "987ae369ba50cef37d437b3956f8d9f585fb8b8eb4ca22bc0da8db80ac9b3b7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "334bf31f-e63d-4aa8-a5b0-f3777d7008ca", "node_type": "1", "metadata": {}, "hash": "09e01dbf72ee47f34e07c63c0c72d36885ee3b768463124d2927b13bdd4e32be", "class_name": "RelatedNodeInfo"}}, "text": "Web3 Analytics)\n* On-chain PvP games\n* VPN\n* Web2.0 apps\n* Blockchain Oracle\n* DApps\n\nOnce Phala is open for developers to deploy their apps, there will be an option for them to choose which tiers they will accept. Since Tier 1, 2, 3 have better security, they can potentially get higher chance to win the confidential contract assignment. However, Tier 4, 5 are useful in other use cases, and therefore can be a more economic choice for the developers.\n\nIf your worker is in tier 4 or 5, please check the FAQ page for potential fixes.", "mimetype": "text/plain", "start_char_idx": 5830, "end_char_idx": 6365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "730cf4c3-d563-412f-9718-c043a26d8ace": {"__data__": {"id_": "730cf4c3-d563-412f-9718-c043a26d8ace", "embedding": null, "metadata": {"file_path": "./phala_dist/prb-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda", "node_type": "4", "metadata": {}, "hash": "77ab9dce170c795cfe833c167b394dd8c62837282015cba461e4cd9911804900", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6fc6f7e5-0fea-4b95-8df4-5e0756822aca", "node_type": "1", "metadata": {}, "hash": "79ba1063ecf17a6ffb3c870830d55fe38460aa65ae7cc7666f93fbebcd038b47", "class_name": "RelatedNodeInfo"}}, "text": "# PRB Worker Deployment\n\n## Basic requirements\n\nApart from the reduced requirements for hard disk and memory space, the process of deploying a PRB worker is the same as deploying a solo worker. The only difference is that the PRB worker only needs to run pRuntime, while the solo worker needs to run node and pherry additionally.\n\nFor details of solo worker deployment, please refer to: [Solo worker deployment](https://wiki.phala.network/en-us/mine/phala-worker/solo-worker-deployment/)\n\nTherefore, the requirements for running a PRB worker are:\n\n* Support for SGX function\n* Ubuntu 22.04.2 LTS system with a kernel of 5.13 and above\n* 4 or more CPU cores\n* 8GB memory\n* 128GB NVME hard disk\n\n## Worker deployment\n\n### Preparations\n\nAfter installing the OS, first install the necessary docker programs\n\n```undefined\nsudo apt update && sudo apt upgrade -y && sudo apt autoremove -y\nsudo apt install docker-compose\n```\n\nThen create a folder locally, and create a docker-compose document within it.\n\n```bash\nmkdir khala-deployment\ncd ./khala-deployment\ntouch docker-compose.yml\n```\n\n### Document Editing\n\nEdit the docker-compose document using the following commands:\n\n```bash\nvim ./docker-compose.yml \n```\n\nAfter entering, you will access the document.\n\nAt this point, enter `a` and you will start editing the document. Paste the following content into the document.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fc6f7e5-0fea-4b95-8df4-5e0756822aca": {"__data__": {"id_": "6fc6f7e5-0fea-4b95-8df4-5e0756822aca", "embedding": null, "metadata": {"file_path": "./phala_dist/prb-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda", "node_type": "4", "metadata": {}, "hash": "77ab9dce170c795cfe833c167b394dd8c62837282015cba461e4cd9911804900", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "730cf4c3-d563-412f-9718-c043a26d8ace", "node_type": "1", "metadata": {}, "hash": "7f13deb5f0f31d472ac038cd650f1c4f296629192a3b998ad222b12a8f15073a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58b6f8ae-f5a4-4809-bb28-a7644500bed3", "node_type": "1", "metadata": {}, "hash": "795243fbfd7edf2708a2d578316d86cb4264e22d9a9aa2d7d837c20edfcfad69", "class_name": "RelatedNodeInfo"}}, "text": "(Please note that the file content remains consistent and the indentation alignment of each line is consistent with this document)\n\n```javascript\nversion: \"3\"\nservices:\n  phala-pruntime:\n    image: phalanetwork/phala-pruntime:latest\n    container_name: phala-pruntime\n    hostname: phala-pruntime\n    ports:\n    - \"8000:8000\"\n    devices:\n    - /dev/sgx_enclave:/dev/sgx_enclave\n    - /dev/sgx_provision:/dev/sgx_provision\n    environment:\n    - EXTRA_OPTS=--cores={core_num} --checkpoint-interval=3600\n    - ROCKET_ADDRESS=0.0.0.0\n    volumes:\n    - /root/pruntime/khala/pruntime:/root/data\n\n```\n\n> A parameter needs to be customized by yourself: In phala-pruntime, change \u2013cores={core\\_num} to the number of cores of your machine, such as \u2013cores=4.\n\nAfter entering, complete the following steps to finish the text editing and save successfully.\n\n```javascript\n1\u3001Click \"esc\"\n2\u3001Enter \":wq\"\n3\u3001Click \"Enter\"\uff0cquit the editing page\n```\n\n### Program Execution\n\nInside the newly created folder, run docker-compose, and the essential components for Solo worker will run successfully.\n\n```undefined\nsudo docker-compose up -d\n```\n\n## Status Check\n\nEnter the following command to get the most recent 100 lines of pRuntime log information:\n\n```bash\nsudo docker logs phala-pruntime --tail 100\n```\n\n> If you have changed the component name through customizing docker-compose.yml, please replace \u201cphala-pruntime\u201d to your customized name in the command.", "mimetype": "text/plain", "start_char_idx": 1366, "end_char_idx": 2804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58b6f8ae-f5a4-4809-bb28-a7644500bed3": {"__data__": {"id_": "58b6f8ae-f5a4-4809-bb28-a7644500bed3", "embedding": null, "metadata": {"file_path": "./phala_dist/prb-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda", "node_type": "4", "metadata": {}, "hash": "77ab9dce170c795cfe833c167b394dd8c62837282015cba461e4cd9911804900", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6fc6f7e5-0fea-4b95-8df4-5e0756822aca", "node_type": "1", "metadata": {}, "hash": "79ba1063ecf17a6ffb3c870830d55fe38460aa65ae7cc7666f93fbebcd038b47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df13d2c2-8a61-4c64-b997-cb6425328768", "node_type": "1", "metadata": {}, "hash": "fb765643f43e424b69aef04d37d4e36636a9d2efaa69183d458e628908651c95", "class_name": "RelatedNodeInfo"}}, "text": "A typical pRuntime log in sync will look like this:\n\n```yaml\n2023-05-10T11:55:38.478826Z  INFO phactory::prpc_service: State synced\n2023-05-10T11:55:38.479089Z  INFO phactory::storage::storage_ext: Got 17 messages from OutboundMessages    \n2023-05-10T11:55:38.479330Z  INFO phactory::prpc_service: Dispatching block=440838\n2023-05-10T11:55:38.482465Z  INFO phactory::prpc_service: State synced\n2023-05-10T11:55:38.482647Z  INFO phactory::storage::storage_ext: Got 11 messages from OutboundMessages    \n2023-05-10T11:55:38.482825Z  INFO pruntime::runtime: pRPC returned code=200 size=4\n2023-05-10T11:55:38.482881Z  INFO prpc_measuring: POST /prpc/PhactoryAPI.DispatchBlocks cost 18221 microseconds, status: 200   \n```\n\nYou can determine whether the synchronization is proceeding normally by checking the synchronized height and progress.\n\n## Configuration for adding worker to PRB server\n\nAll on-chain information configuration, including transaction accounts, pool master\u2019s information, etc., can be done through the PRBv3 configuration interface.\n\nAt this stage, you only need to record the IP of this worker to be filled into the PRB database.\n\n## How to Find the Local IP Address:\n\nInstall the net-tools package.", "mimetype": "text/plain", "start_char_idx": 2806, "end_char_idx": 4021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df13d2c2-8a61-4c64-b997-cb6425328768": {"__data__": {"id_": "df13d2c2-8a61-4c64-b997-cb6425328768", "embedding": null, "metadata": {"file_path": "./phala_dist/prb-worker-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda", "node_type": "4", "metadata": {}, "hash": "77ab9dce170c795cfe833c167b394dd8c62837282015cba461e4cd9911804900", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58b6f8ae-f5a4-4809-bb28-a7644500bed3", "node_type": "1", "metadata": {}, "hash": "795243fbfd7edf2708a2d578316d86cb4264e22d9a9aa2d7d837c20edfcfad69", "class_name": "RelatedNodeInfo"}}, "text": "```undefined\nsudo apt install net-tools\n```\n\nThen Use this command to search the IP\n\n```undefined\nifconfig\n```\n\nThe result will look like this:\n\n```yaml\nbr-0cec631198c9: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet xxx.xxx.xxx.xxx  netmask 255.255.240.0  broadcast 111.111.111.111\n        ...\n\nbr-2493ab4f406b: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet xxx.xxx.xxx.xxx  netmask 255.255.0.0  broadcast 111.111.111.111\n        ...\n\nbr-2990701611a3: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet xxx.xxx.xxx.xxx  netmask 255.255.240.0  broadcast 111.111.111.111\n        ...\n```\n\nYou can find your public or private IP after each `inet`.\n\n## Create a connection between Worker and PRB <a href=\"#create-a-connection-between-worker-and-prb\" id=\"create-a-connection-between-worker-and-prb\"></a>\n\nFor more details, please refer to the [Using PRBv3](using-prbv3-ui.md)", "mimetype": "text/plain", "start_char_idx": 4023, "end_char_idx": 4923, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c45b95a-c888-4caf-b266-0695ecacc0f7": {"__data__": {"id_": "1c45b95a-c888-4caf-b266-0695ecacc0f7", "embedding": null, "metadata": {"file_path": "./phala_dist/conclusion-and-future-developments.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "582e5a6c-4ef2-43d0-94dd-630714f526d6", "node_type": "4", "metadata": {}, "hash": "68a8c93743f4842325e0a1dc108196138a8a707842f699602860dcb59cbd610c", "class_name": "RelatedNodeInfo"}}, "text": "# Conclusion & Future Developments\n\nOur exploration of multi-proof systems has underscored its immense potential to revolutionize the blockchain sector. Seamlessly integrating TEE-Proof and ZK-Proof heightens efficiency, scalability, security, and interoperability, reshaping blockchain functionality.\n\nAs the blockchain ecosystem evolves, the need for advanced computational models becomes imminent. Multi-proof technology emerges as the answer, promising a future where scalability difficulties and security vulnerabilities are significantly minimized.\n\nAs we look to the future, our mission is clear. By relentlessly refining and enhancing our multi-proof technology, we aim to meet the ever-growing needs of the dynamic blockchain sector.\n\n## Research\n\n### A Multi-proof Based FastMode Solution for Rollup\n\nComing soon\u2026\n\n## References & Additional Resources\n\nTo explore more about the universe of multi-proof systems, we recommend the following resources:\n\n1. [Hardening rollups with multi-proofs](https://hackmd.io/@vbuterin/zk\\_slides\\_20221010#/) - talk by Vitalik Buterin\n2. [2FA zk-rollups using SGX](https://ethresear.ch/t/2fa-zk-rollups-using-sgx/14462) \u2014 by Justin Drake\n3. [Beyond ZK](https://www.youtube.com/watch?v=HNdbw4UH7s8) - talk by Andrew Miller\n4. [Scaling Security: Multi-Prover Implementation on Scroll](https://scroll.io/blog/scaling-security) \u2014 by Scroll\\&Automata\n5. [SGX 101](https://sgx101.gitbook.io/sgx101) - by SSLab", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2020a06f-69dc-4fc2-b667-397f08488885": {"__data__": {"id_": "2020a06f-69dc-4fc2-b667-397f08488885", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-from-autonolas-plugin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bdd9faf9-7db4-40eb-8b2a-f85372f19cdc", "node_type": "4", "metadata": {}, "hash": "c11c3152e866578f3a117b30a09d329205a5cf053ca3160670e5d558ed22a87c", "class_name": "RelatedNodeInfo"}}, "text": "# Connect from Autonolas Plugin\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db04bb37-1470-4a6a-874a-fecfb0268ba7": {"__data__": {"id_": "db04bb37-1470-4a6a-874a-fecfb0268ba7", "embedding": null, "metadata": {"file_path": "./phala_dist/buy-and-sell-keys.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0218bb64-3611-47b5-98ee-f6bf33b0135e", "node_type": "4", "metadata": {}, "hash": "6bea51bbd406336b8dfdb326e6ed5527069f74b67429401e18582da838f31c3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "308a5f19-7cc7-4e36-868b-9b830f7e63f8", "node_type": "1", "metadata": {}, "hash": "757e6bea8230f4d01fa6d58b32540bb9811620d21fedc8d51270aa265ef9bb8f", "class_name": "RelatedNodeInfo"}}, "text": "# Buy and Sell Keys\n\nKeys are the NFT associated with each agent. You must own at least one key of an agent to unlock unlimited chat with it. Otherwise, you only have 5 free chats with the agent.\n\nKeys can be purchased or sold at any time. You can profit by trading keys. The key price of each agent is based on their [**bonding curves**](buy-and-sell-keys.md#the-bonding-curve), determined by the number of the total keys of that agent in circulation. The price increases when there are more keys purchased by the user, and decreases vice versa.\n\n## How to buy a key\n\nYou can easily buy keys on AgentWar Dapp\n\n1.  Click the Agent you want to buy on the Explore page\n\n    <figure><img src=\"../../.gitbook/assets/image.png\" alt=\"\"><figcaption></figcaption></figure>\n2.  You can find the details of the key on the Agent page. Note that the free chats are limited without a key.\n\n    <figure><img src=\"../../.gitbook/assets/image (1).png\" alt=\"\"><figcaption></figcaption></figure>\n3.  Click \"Trade\" button. In the popup, you can choose how many keys to buy. If you want to switch between ETH (default) and PHA payment, you can click \"Switch to PHA\" or \"Switch to ETH\" button.\\\n\n\n    <figure><img src=\"../../.gitbook/assets/image (2).png\" alt=\"\" width=\"375\"><figcaption></figcaption></figure>\n4. Click \"BUY\" to buy the key. You will sign one or more transactions in your connected wallet. (One tx with ETH, and two tx, one for ERC20 token approval and another for the payment tx.)\n5.  After buying the key, you can find the number of keys you hold in the \"Holders\" tab.\\\n\n\n    <figure><img src=\"../../.gitbook/assets/image (3).png\" alt=\"\" width=\"375\"><figcaption></figcaption></figure>\n\n## How to sell a key\n\n1. Click \"Trade\" button in the detail page of the agent you want to sell\n2.  Select \"SELL\" tab. You can see how many keys you own and choose how many to sell. You can also choose to sell to ETH (default) or PHA token.\\", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1923, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "308a5f19-7cc7-4e36-868b-9b830f7e63f8": {"__data__": {"id_": "308a5f19-7cc7-4e36-868b-9b830f7e63f8", "embedding": null, "metadata": {"file_path": "./phala_dist/buy-and-sell-keys.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0218bb64-3611-47b5-98ee-f6bf33b0135e", "node_type": "4", "metadata": {}, "hash": "6bea51bbd406336b8dfdb326e6ed5527069f74b67429401e18582da838f31c3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db04bb37-1470-4a6a-874a-fecfb0268ba7", "node_type": "1", "metadata": {}, "hash": "7c7930158545da33d1eda038f97abe65869ef4993d732c140777c62e65016ae5", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../.gitbook/assets/image (4).png\" alt=\"\" width=\"375\"><figcaption></figcaption></figure>\n3. Click \"SELL\" button to confirm the onchain transaction.  You will sign it in your connected wallet.\n4. Congratulations! Now you have sold the key to earn the profit.\n\n## Key Bonding Curve\n\nThe price of an agent key follows a formula defined in the smart contract. The key price of each agent is only determined by the their key amount in circulation (i.e. the current total number of keys). The more keys, the higher price.\n\n| Total Keys | Price in PHA | Price in USD (PHA @ 0.15) |\n| ---------- | ------------ | ------------------------- |\n| 1          | 0.05         | 0.0075                    |\n| 10         | 5            | 0.75                      |\n| 50         | 125          | 18.75                     |\n| 500        | 2974         | 446.10                    |\n| 1000       | 4009         | 601.35                    |\n\nWhen an agent is created, the first key will be minted to the agent creator. Once created, anyone can buy and sell keys at any time, following the bonding curve. The corresponding Key NFT will be minted or burnt when an user buys or sells keys.\n\n{% hint style=\"info\" %}\nThe bonding curve is defined based on PHA token. The table above shows the corresponding USD value assuming PHA is at $0.15.\n\nThe smart contract supports buying and selling in ETH or other token. When using tokens other than PHA, it automatically uses Uniswap v3 on Base to swap against PHA. For example, when buying keys with ETH, the smart contract will receive ETH from the user, and instantly swap to the corresponding PHA based on the bonding curve.\n\nSwapping is based on Uniswap. So the process may subject to additional trading fee, price fluctuation, and potential MEV risk.\n{% endhint %}\n\nTo learn the details of the formula, please refer to [#agent-keys](../agent-war-tokenomics.md#agent-keys \"mention\").", "mimetype": "text/plain", "start_char_idx": 1930, "end_char_idx": 3858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9eb2cc30-341b-4e58-a402-6645f6067665": {"__data__": {"id_": "9eb2cc30-341b-4e58-a402-6645f6067665", "embedding": null, "metadata": {"file_path": "./phala_dist/txpool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "75508e74-aee4-4807-88b9-03469ba21647", "node_type": "4", "metadata": {}, "hash": "9d480a4246e34db64643e3d0325e5c6b60949996cf938ff91ed919e5a7165d4a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72705740-5e56-4f77-8a2a-6c30350f1497", "node_type": "1", "metadata": {}, "hash": "224ca5b74557224775deb5cccfb77f38283dfc892f9df5d47a604bcc5dfa77c7", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: txpool namespace\nsidebar_label: txpool\nsidebar_position: 9\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### txpool_content\n\nReturns tx pool content.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"txpool_content\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `pending`: map of map of *object*\nmap of *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72705740-5e56-4f77-8a2a-6c30350f1497": {"__data__": {"id_": "72705740-5e56-4f77-8a2a-6c30350f1497", "embedding": null, "metadata": {"file_path": "./phala_dist/txpool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "75508e74-aee4-4807-88b9-03469ba21647", "node_type": "4", "metadata": {}, "hash": "9d480a4246e34db64643e3d0325e5c6b60949996cf938ff91ed919e5a7165d4a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9eb2cc30-341b-4e58-a402-6645f6067665", "node_type": "1", "metadata": {}, "hash": "6eab88dbfedd2611dd33708238196531daab612b8d25b44239597078dca82db4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58bb1819-586b-4667-837c-5aa84abadd0c", "node_type": "1", "metadata": {}, "hash": "0da47972f564e83a15828c2b3b85f293c8f97b1ec247556d9ec92b32c168e0de", "class_name": "RelatedNodeInfo"}}, "text": "- `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n  - `queued`: map of map of *object*\nmap of *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### txpool_inspect\n\nReturns a detailed info on tx pool transactions.", "mimetype": "text/plain", "start_char_idx": 1504, "end_char_idx": 2852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58bb1819-586b-4667-837c-5aa84abadd0c": {"__data__": {"id_": "58bb1819-586b-4667-837c-5aa84abadd0c", "embedding": null, "metadata": {"file_path": "./phala_dist/txpool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "75508e74-aee4-4807-88b9-03469ba21647", "node_type": "4", "metadata": {}, "hash": "9d480a4246e34db64643e3d0325e5c6b60949996cf938ff91ed919e5a7165d4a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72705740-5e56-4f77-8a2a-6c30350f1497", "node_type": "1", "metadata": {}, "hash": "224ca5b74557224775deb5cccfb77f38283dfc892f9df5d47a604bcc5dfa77c7", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"txpool_inspect\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `pending`: map of map of *string*\n  - `queued`: map of map of *string*\n\n</TabItem>\n</Tabs>\n\n### txpool_status\n\nReturns a tx pool status.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"txpool_status\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `pending`: *string* (hex integer)\n  - `queued`: *string* (hex integer)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 2854, "end_char_idx": 3885, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6daf5864-91b7-40b7-873f-c22b7274e4a7": {"__data__": {"id_": "6daf5864-91b7-40b7-873f-c22b7274e4a7", "embedding": null, "metadata": {"file_path": "./phala_dist/supported-assets.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d835b739-6f52-48eb-9c41-097866b233f4", "node_type": "4", "metadata": {}, "hash": "f14ba779839499c4e942dee8967d1691509df8dc5af7091c5fb6eaf544c36527", "class_name": "RelatedNodeInfo"}}, "text": "# Supported Assets\n\nAn asset id of type _uint32_ is allocated for each registered asset. Each asset except PHA on Khala/Phala will have an unique asset id. You can use [pallet-assets](https://github.com/paritytech/substrate/tree/master/frame/assets) to transfer asset to any accounts within Khala and Phala Network.\n\n* Assets on the Khala network\n\nForeign assets are managed by pallet-assets, supported assets can be found at [here](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala-api.phala.network%2Fws#/assets). On the Khala network, PHA can be transferred between parachain and Ethereum, and ZLK can be transferred to Moonriver and vice versa.\n\n* Assets on the Phala network\n\nForeign assets are managed by pallet-assets, supported assets can be found at [here](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fapi.phala.network%2Fws#/assets). On the Phala network, only PHA can be transferred between parachain and Ethereum.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 928, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6840d38-51b7-45a4-8353-31be12bbe4a8": {"__data__": {"id_": "b6840d38-51b7-45a4-8353-31be12bbe4a8", "embedding": null, "metadata": {"file_path": "./phala_dist/getting-started.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11f1acdc-d52c-4a0b-9ce6-e5d664a02513", "node_type": "4", "metadata": {}, "hash": "761ee19ed3dc08c6aaca97ee8e55a18233f86de54df3992ddca83223d1f9d8ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a35aacf5-035c-4746-81ad-02ea14ba97ed", "node_type": "1", "metadata": {}, "hash": "fc1d6e27ddff594240a844cc564598e869b5da07e0c68081956aa763bac11309", "class_name": "RelatedNodeInfo"}}, "text": "# Getting Started\n\nThe Mirrored Price Feed aims to work well with ChainLink's ABI. This means you can easily use it on any blockchain that supports EVM. To start using it, simply [find the right contract address here](https://docs-git-build-coprocessor-phala.vercel.app/solutions/mirrored-price-feed/feed-addresses).\n\nThe learn more about Chainlink's `AggregatorV3Interface`, you can check out their [API Reference](https://docs.chain.link/data-feeds/api-reference).\n\n## Reading data feeds onchain\n\nHere is some code snippets to demostrate how to use Mirrored Price Feed on-chain.\n\n### Getting the latest data\n\n```solidity\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n \nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n \n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED\n * VALUES FOR CLARITY.\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\ncontract DataConsumerV3 {\n    AggregatorV3Interface internal dataFeed;\n \n    /**\n     * Network: Base Sepolia\n     * Aggregator: BTC/USD\n     * Address: 0x1e73C20c42a7de166868da4c47963d137030492A\n     */\n    constructor() {\n        dataFeed = AggregatorV3Interface(\n            0x1e73C20c42a7de166868da4c47963d137030492A\n        );\n    }\n \n    /**\n     * Returns the latest answer.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a35aacf5-035c-4746-81ad-02ea14ba97ed": {"__data__": {"id_": "a35aacf5-035c-4746-81ad-02ea14ba97ed", "embedding": null, "metadata": {"file_path": "./phala_dist/getting-started.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11f1acdc-d52c-4a0b-9ce6-e5d664a02513", "node_type": "4", "metadata": {}, "hash": "761ee19ed3dc08c6aaca97ee8e55a18233f86de54df3992ddca83223d1f9d8ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6840d38-51b7-45a4-8353-31be12bbe4a8", "node_type": "1", "metadata": {}, "hash": "e2ca367fdc7ac998fc8a096fd4c202c4ca224af24ead5870dae80baa2b13a433", "class_name": "RelatedNodeInfo"}}, "text": "*/\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n}\n```\n\n### Getting the historial data\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n \nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n \n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\ncontract HistoricalDataConsumerV3 {\n    AggregatorV3Interface internal dataFeed;\n \n    /**\n     * Network: Base Sepolia\n     * Aggregator: BTC/USD\n     * Address: 0x1e73C20c42a7de166868da4c47963d137030492A\n     */\n    constructor() {\n        dataFeed = AggregatorV3Interface(\n            0x1e73C20c42a7de166868da4c47963d137030492A\n        );\n    }\n \n    /**\n     * Returns historical data for a round ID.\n     * roundId is NOT incremental. Not all roundIds are valid.\n     * You must know a valid roundId before consuming historical data.\n     *\n     * ROUNDID VALUES:\n     *    InValid:      18446744073709562300\n     *    Valid:        18446744073709554683\n     *\n     * @dev A timestamp with zero value means the round is not complete and should not be used.\n     */\n    function getHistoricalData(uint80 roundId) public view returns (int256) {\n        // prettier-ignore\n        (\n            /*uint80 roundID*/,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.getRoundData(roundId);\n        return answer;\n    }\n}\n```", "mimetype": "text/plain", "start_char_idx": 1356, "end_char_idx": 3217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c64dff8-96d4-4832-aefc-0536d5b68171": {"__data__": {"id_": "9c64dff8-96d4-4832-aefc-0536d5b68171", "embedding": null, "metadata": {"file_path": "./phala_dist/agent-war-tokenomics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "403e304b-82df-475d-ba84-c6933d35c0e8", "node_type": "4", "metadata": {}, "hash": "1918f6bf1e7a0800c13bf7b24562b45d51b4d4bf82d57ed808af60e4f04f0a02", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30fb66e3-640d-4b19-879b-292386c2091d", "node_type": "1", "metadata": {}, "hash": "cc8b4d030953f4675dc5b1fa2b510694c7970280ef886c9ae0e4b4249265694a", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udcb8 Agent War Tokenomics\n\n## Roles\n\nIn this game, there are two roles:\n- Agent Creator, who creates the agent and will take the full income from every sold key;\n- Key Holder, who holds a share of the agent and will benefit from the rise of key price when the agent attracts more buyers.\n\n## Create Your Agent\n\nYou are free to create agents no matter who owns the X accounts only if you are the first. Each agent is a standard ERC-721 NFT on Base chain. Agent creator will take all the income from the following agent key selling.\n\nIn Agent Wars, each agent is a unique avatar tied to an X account. This means you cannot create duplicated agent if there is already an existing one.\n\nWe introduce a one-time payment process for agent creation where all tokens will be used to cover the agent hosting cost, eliminating the need for further charges.\n\n### You own the X account\n\nIf you own the X account and you are the first to create the agent for it, congratulation!\n\nAfter verification you just need to pay for a fixed price of **400 PHA** to create your agent no matter how many followers there are.\n\n### Normal X account\n\nX accounts with less than 100k followers are considered as normal. You need to pay for the creation fee to create the agent.\n\nThe creation fee is based on the number of followers of that X account.\n\n$$Price = max(400, 8.75 * \\sqrt FollowerNum - 3750)$$\n\n<figure><img src=\"../.gitbook/assets/agent-wars-create-price.png\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\nFor example, the price for all accounts with fewer than 225k followers will be 400 PHA, 500k followers is ~2400 PHA, 800k followers is ~4000 PHA\n\n### Popular X account\n\nX accounts with more than 100k followers are considered as popular. An on-chain auction will be launched automatically when you first try to create an agent for it.\n\nThe minimal bid amount is based on the number of followers of that X account.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30fb66e3-640d-4b19-879b-292386c2091d": {"__data__": {"id_": "30fb66e3-640d-4b19-879b-292386c2091d", "embedding": null, "metadata": {"file_path": "./phala_dist/agent-war-tokenomics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "403e304b-82df-475d-ba84-c6933d35c0e8", "node_type": "4", "metadata": {}, "hash": "1918f6bf1e7a0800c13bf7b24562b45d51b4d4bf82d57ed808af60e4f04f0a02", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c64dff8-96d4-4832-aefc-0536d5b68171", "node_type": "1", "metadata": {}, "hash": "2a030fdb3171fc010e8d0e3a7217aaf46c12cac6029db4e039012a49abccddcb", "class_name": "RelatedNodeInfo"}}, "text": "$$MinBid = 8.75 * \\sqrt FollowerNum - 3750$$\n\n<figure><img src=\"../.gitbook/assets/agent-wars-auction-bid.png\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\nFor example, to create an agent for X account with 1 million followers, the minimal bid will be 5000 PHA; to create Elon Musk agent (with 1.8 billion followers) will take at least 113600 PHA.\n\n## Agent Keys\n\nEven if you are not the agent creator, you can still benefit from agent getting popular by owning its keys. Agent key is standarad ERC-1155 token on Base chain, and it represents your shares of the agent.\n\nThe price of agent key increases with the increasing supply of the keys. The more buyers there are, the higher the price will become. The key selling income will go to agent creator, and 10% will be taken as trading fee.\n\nEveryone is free to buy a unlimited number of keys of a certain agent. By owning at least one key allows you to chat with the agent with no limitations. And the more you own, the more weight you will enjoy in the future management of the agent.\n\nBoth buy and sell price follow the curve of\n\n$$KeyPrice = \\begin{cases}KeyNum^2 / 20   &  KeyNum <=200 \\\\4000 + 2000 * 200 * 199 * (1/KeyNum - 1/(KeyNum-1)) & KeyNum>200 \\end{cases}$$\n\n<figure><img src=\"../.gitbook/assets/agent-wars-key-price.png\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\nFor example, the first key, owned by the agent creator, is free. The 2nd key is 0.2 PHA, the 10th is 5 PHA, and the 200th is 2000 PHA. The key price will never exceed 4000 PHA.\n\n## Agent Management\n\n### :construction\\_site: **Coming Soon!**", "mimetype": "text/plain", "start_char_idx": 1912, "end_char_idx": 3503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d4ccd08-00c2-4624-a75f-bb7caf17675f": {"__data__": {"id_": "2d4ccd08-00c2-4624-a75f-bb7caf17675f", "embedding": null, "metadata": {"file_path": "./phala_dist/store-contract-states.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2", "node_type": "4", "metadata": {}, "hash": "9a82dbca7078c31212769b4129f445b252a0e17214739df408c05d3a28753815", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac968540-e184-4bfa-9337-c9670bb5f157", "node_type": "1", "metadata": {}, "hash": "ae4eeff7207511e151224d3eb0247e6e2264225961af4c223d4635b7e9f57bf8", "class_name": "RelatedNodeInfo"}}, "text": "# Store Contract States\n\n## Storage Hierarchy\n\n## Overview <a href=\"#overview\" id=\"overview\"></a>\n\nA Phat contract can utilize three kinds of storage solutions: local cache, contract state, and any external storage services with HTTP requests. We list the differences between the two native storage solutions in Phat Contract as follows.\n\n<table><thead><tr><th width=\"157\"></th><th width=\"109\">Persistent</th><th width=\"113\">Consistent</th><th width=\"221\">Transparently Encrypted</th><th>Cost</th></tr></thead><tbody><tr><td>Local Cache</td><td>\u274c</td><td>\u274c</td><td>\u2705</td><td>Zero</td></tr><tr><td>Contract State</td><td>\u2705</td><td>\u2705</td><td>\u2705</td><td>Gas fee</td></tr></tbody></table>\n\n### Local Cache <a href=\"#local-cache\" id=\"local-cache\"></a>\n\nThe local cache is stored in the worker\u2019s memory. As its name, it should only be used as a cache since all cached data is not shared across different workers, and can be lost if the worker is down. Also, you may experience unexpected value cleanup if the memory usage of the worker is high.\n\nThe cache can be easily accessed in [Pink extension](use-pink-extension.md). You can read and write cache in query handlers, but reading cache in transaction handlers is forbidden: the result of cache reading is nondeterministic.\n\n```rust\nuse pink::chain_extension::pink_extension_instance as ext;\n\n#[ink(message)]\npub fn test(&self) {\n    assert!(ext().cache_set(b\"key\", b\"value\").is_ok());\n    assert_eq!(ext().cache_get(b\"key\"), Some(b\"value\".to_vec()));\n    assert_eq!(ext().cache_remove(b\"key\"), Some(b\"value\".to_vec()));\n    assert_eq!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1580, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac968540-e184-4bfa-9337-c9670bb5f157": {"__data__": {"id_": "ac968540-e184-4bfa-9337-c9670bb5f157", "embedding": null, "metadata": {"file_path": "./phala_dist/store-contract-states.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2", "node_type": "4", "metadata": {}, "hash": "9a82dbca7078c31212769b4129f445b252a0e17214739df408c05d3a28753815", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d4ccd08-00c2-4624-a75f-bb7caf17675f", "node_type": "1", "metadata": {}, "hash": "0a54f739fed2f3b13be6cc42a34a1f5f40271aabaa04e6cff15b46570746c324", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3764414c-d26a-4d16-92e4-6733803fede6", "node_type": "1", "metadata": {}, "hash": "afc60a51fda4a27f1ff9eff577c21114c345f60b1337a2eec97493aea6683182", "class_name": "RelatedNodeInfo"}}, "text": "(ext().cache_get(b\"key\"), None);\n}\n```\n\n### Contract State <a href=\"#contract-state\" id=\"contract-state\"></a>\n\nHere is how you store simple values as your contract state:\n\n```rust\n#[ink(storage)]\npub struct MyContract {\n    // Store a bool\n    my_bool: bool,\n    // Store some number\n    my_number: u32,\n}\n```\n\nUnlike other ink contracts in which such values are stored publicly on-chain, in Phat Contract, all your contract state is transparently encrypted for you.\n\n> Technically speaking, your Phat contract state is not persistently stored anywhere (not even on chain). In Phat contract, any transaction handler functions must be deterministic, so any worker can restore the contract state by replaying all the historical transactions in order (since they are stored on chain). Such design is called Event Sourcing and you can learn more about it in Section 2.2 of our [whitepaper](https://files.phala.network/phala-paper.pdf).\n\n#### External Storage Services <a href=\"#external-storage-services\" id=\"external-storage-services\"></a>\n\nWith its HTTP support, you can connect to any storage services you like in your Phat contract.\n\nFor simple key-value storage, [pink-s3](https://crates.io/crates/pink-s3) enables you to store data in any storage service with S3-API support.\n\n```rust\nfn s3_example() {\n\n    use pink_s3 as s3;\n\n    let endpoint = \"s3.ap-southeast-1.amazonaws.com\";\n    let region = \"ap-southeast-1\";\n    let access_key = \"<Put your S3 access key here>\";\n    let secret_key = \"<Put your S3 access secret key here>\";\n\n    let s3 = s3::S3::new(endpoint, region, access_key, secret_key)\n        .unwrap()\n        .virtual_host_mode(); // virtual host mode is required for newly created AWS S3 buckets.\n\n    let bucket = \"my-wallet\";\n    let object_key = \"path/to/foo\";\n    let value = b\"bar\";\n\n    s3.put(bucket, object_key, value).unwrap();\n\n    let head = s3.head(bucket, object_key).unwrap();\n    assert_eq!(head.content_length, value.len() as u64);\n\n    let v = s3.get(bucket, object_key).unwrap();\n    assert_eq!", "mimetype": "text/plain", "start_char_idx": 1580, "end_char_idx": 3612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3764414c-d26a-4d16-92e4-6733803fede6": {"__data__": {"id_": "3764414c-d26a-4d16-92e4-6733803fede6", "embedding": null, "metadata": {"file_path": "./phala_dist/store-contract-states.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2", "node_type": "4", "metadata": {}, "hash": "9a82dbca7078c31212769b4129f445b252a0e17214739df408c05d3a28753815", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac968540-e184-4bfa-9337-c9670bb5f157", "node_type": "1", "metadata": {}, "hash": "ae4eeff7207511e151224d3eb0247e6e2264225961af4c223d4635b7e9f57bf8", "class_name": "RelatedNodeInfo"}}, "text": "(v, value);\n\n    s3.delete(bucket, object_key).unwrap();\n\n}\n```\n\nSuch storage service providers include:\n\n* [Amazon S3](https://aws.amazon.com/s3/) - 5GB, 12 months free\n* [4everland](https://www.4everland.org/bucket/) - 5GB free on IPFS and 100MB Free on Arweave\n* [Storj](https://www.storj.io/) - 150GB free\n* [Filebase](https://filebase.com/) - 5GB free\n\nIf you want a relational database like MySql, you can also use DBaaS services like\n\n* [PingCap](https://www.pingcap.com/), which is based on TiDB", "mimetype": "text/plain", "start_char_idx": 3612, "end_char_idx": 4115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9c150dd-24fd-4992-870b-1fdb02a42065": {"__data__": {"id_": "d9c150dd-24fd-4992-870b-1fdb02a42065", "embedding": null, "metadata": {"file_path": "./phala_dist/builders-program.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c47512f5-3bda-4496-b52b-24afa736b57f", "node_type": "4", "metadata": {}, "hash": "d86abcfeebf97db79492f4ac4ba5be1cfb142bc9cefcec00e29ebd8d52476e44", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c9a7b38-af38-4057-9b7a-321547c0dced", "node_type": "1", "metadata": {}, "hash": "6d0dcd6d2d4779d8c6154227867de068a82b27eaacde48349497795107eb9741", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udc68\u200d\ud83d\ude80 Builders Program\n\n## _**About the Phala Builders Program**_ <a href=\"#about-the-phala-builders-program\" id=\"about-the-phala-builders-program\"></a>\n\n> _Funding and supporting innovative projects building with the Phala Compute Cloud via Phat Contract._\n\nThe Phala Builders Program provides funding, guidance, and support to developers that want to build high-value projects with Phat Contract, and add functionality to Phat Contract itself.\n\n### **Why you should apply:** <a href=\"#why-you-should-apply\" id=\"why-you-should-apply\"></a>\n\n**You want to Build Impossible Dapps**\n\n* You want to push the limits of what smart contracts are capable of by incorporating an off-chain computation solution that utilizes a self-executing and tamper-proof model.\n\n**You care about Decentralization**\n\n* You\u2019re passionate about the need for decentralized web services and user-controlled digital infrastructure.\n\n**You need a Scalable Trustless Infrastructure**\n\n* You\u2019re seeking a computation solution that can handle any level of compute demand, and perform your computation securely, privately, and trustlessly.\n\n### **What do we offer?** <a href=\"#what-do-we-offer\" id=\"what-do-we-offer\"></a>\n\n**Funding**\n\n* Up to $50,000 USD value in PHA token, paid out on-chain at agreed-upon intervals dictated by the Builder Agreement.\n\n**Technical Assistance**\n\n* Deep technical support from lead Phat Contract developers during the design, testing, and deployment phases of project development.\n\n**Marketing and Network Support**\n\n* Phala will promote your project through our own channels and within our community, and make introductions to relevant ecosystem partners. We will make sure your developed application receives the attention it deserves.\n\n### **Guidelines for Potential Applicants** <a href=\"#guidelines-for-potential-applicants\" id=\"guidelines-for-potential-applicants\"></a>\n\nThe Phala Builders Program supports high-quality teams that have a solid understanding of the Phat Contract platform and a clear vision of how they will utilize Phat Contract within their project. Projects that come into the application process with a MVP or some level of existing development with Phat Contract are more likely to be successful in securing funding.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c9a7b38-af38-4057-9b7a-321547c0dced": {"__data__": {"id_": "1c9a7b38-af38-4057-9b7a-321547c0dced", "embedding": null, "metadata": {"file_path": "./phala_dist/builders-program.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c47512f5-3bda-4496-b52b-24afa736b57f", "node_type": "4", "metadata": {}, "hash": "d86abcfeebf97db79492f4ac4ba5be1cfb142bc9cefcec00e29ebd8d52476e44", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9c150dd-24fd-4992-870b-1fdb02a42065", "node_type": "1", "metadata": {}, "hash": "37d97dff96936b95fa5da4a23076822664a624eb055175c51fc20e200421c959", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d92d4ba7-6423-4077-9e4a-3dddd96dfac5", "node_type": "1", "metadata": {}, "hash": "c98680351fa79066565de4915e9ca60367ed567cc1a66e946aaa0a322d67b039", "class_name": "RelatedNodeInfo"}}, "text": "### **What we look for:**\n\n**Compelling Teams**\n\n* Teams with strong technical backgrounds that have a clear vision for their project, including a growth strategy and structured plan of development.\n\n**Innovative Ideas**\n\n* As Phat Contract represents a new tool in the kit of Web3 developers, we\u2019re looking to support projects that seek to push the envelope of what can be built on blockchain. We want to support new ideas that add something novel to the space.\n\n**Contributions to Phat Contract Tooling**\n\n* Phat Contract is a highly composable developer resource, we value teams that seek to build out new tooling and primitives within the SDK.\n\n### **Funding Levels** <a href=\"#funding-levels\" id=\"funding-levels\"></a>\n\n**Tier One** _Maximum Value: $20,000 USD value paid in PHA_ Criteria: Development of a compelling project involving significant usage of Phat Contract.\n\n**Tier Two** _Maximum Value: $50,000 USD value paid in PHA_ Criteria: Development of a compelling project or projects involving significant usage of Phat Contract, and the development of new tooling for Phat Contract.\n\n## **Application Process** <a href=\"#application-process\" id=\"application-process\"></a>\n\n_The application process for both tier one and tier two funding is the same, however tier two applicants can expect a more rigorous evaluation._\n\n<figure><img src=\"../.gitbook/assets/builders-program.png\" alt=\"\"><figcaption></figcaption></figure>\n\n**1. Application**\n\n* Fill out and submit an application [form](https://docs.google.com/forms/d/e/1FAIpQLSdaWa5YA-YJL7Cc0b0\\_cbpCdOvu1Ra7uJI95cudSLIduMrv\\_A/viewform?usp=sf\\_link).\n\n**2. Introductory Call**\n\n* The Phala Builders Program Committee will schedule a call with compelling applicants to review the details of their application and determine whether or not to move forward. _Timeline: Applicants will hear from the Committee via email within one week of submitting an application, at which time successful applicants will schedule an introductory call with the team._\n\n**3. Evaluatory Call**\n\n* Applicants will present the technical side of their project in depth to the Phat Contract development team.", "mimetype": "text/plain", "start_char_idx": 2246, "end_char_idx": 4391, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d92d4ba7-6423-4077-9e4a-3dddd96dfac5": {"__data__": {"id_": "d92d4ba7-6423-4077-9e4a-3dddd96dfac5", "embedding": null, "metadata": {"file_path": "./phala_dist/builders-program.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c47512f5-3bda-4496-b52b-24afa736b57f", "node_type": "4", "metadata": {}, "hash": "d86abcfeebf97db79492f4ac4ba5be1cfb142bc9cefcec00e29ebd8d52476e44", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c9a7b38-af38-4057-9b7a-321547c0dced", "node_type": "1", "metadata": {}, "hash": "6d0dcd6d2d4779d8c6154227867de068a82b27eaacde48349497795107eb9741", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23f1eb7a-4ab0-4079-8721-92e284cb47c7", "node_type": "1", "metadata": {}, "hash": "920af2db9e6d53f1092ed6fe211684e21a08082e4b48aaf99bcefc93a2344bb8", "class_name": "RelatedNodeInfo"}}, "text": "In this call, applicants will demonstrate how their project leverages Phat Contract to create an innovative product that brings value to Phala and present a potential milestone structure. _Timeline: Scheduled within one week following a successful introductory call._\n\n**4. Committee Review**\n\n* The Phala Builders Program Committee will review the application and determine an appropriate funding amount, milestone and payment structure, and overall expectations for successful applicants, to be incorporated into a Builders Agreement. _Timeline: Within two weeks of Evaluatory Call._\n\n**5. Execution and Partnership**\n\n* Upon accepting the terms of the Builders Agreement, successful applicants will start working towards milestones with an agreed-upon level of involvement and support from the Phala developer team. _Timeline: Applicants will receive a Builders Agreement immediately following the Committee Review._\n\n**Maximum total time from application submission to Builders Agreement offer: one month.**\n\nThe Phala Builders Program is a unique opportunity to receive funding and support to build with Phat Contract, however we encourage applicants to seek support from complimentary grant programs or accelerators as well. The Phala Builders Program Committee will endeavor to be as collaborative as possible, and may offer support to successful applicants in securing external funding.\n\nIf you have questions about the Phala Builders Program or application process, please reach out to us at \\[email protected] or in our [Discord](https://discord.gg/phala-network).", "mimetype": "text/plain", "start_char_idx": 4392, "end_char_idx": 5966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23f1eb7a-4ab0-4079-8721-92e284cb47c7": {"__data__": {"id_": "23f1eb7a-4ab0-4079-8721-92e284cb47c7", "embedding": null, "metadata": {"file_path": "./phala_dist/builders-program.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c47512f5-3bda-4496-b52b-24afa736b57f", "node_type": "4", "metadata": {}, "hash": "d86abcfeebf97db79492f4ac4ba5be1cfb142bc9cefcec00e29ebd8d52476e44", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d92d4ba7-6423-4077-9e4a-3dddd96dfac5", "node_type": "1", "metadata": {}, "hash": "c98680351fa79066565de4915e9ca60367ed567cc1a66e946aaa0a322d67b039", "class_name": "RelatedNodeInfo"}}, "text": "If you\u2019d like to learn more about Phat Contract and our developer tooling, please explore our developer library below:\n\n* Detailed documents and more code examples as your reference\n  * [https://github.com/Phala-Network/awesome-phat-contracts](https://github.com/Phala-Network/awesome-phat-contracts)\n  * [https://github.com/Phala-Network/phat-contract-examples](https://github.com/Phala-Network/phat-contract-examples)\n* Developer toolings\n  * Web console: [https://phat.phala.network](https://phat.phala.network/)\n    * Build out a frontend where you can deploy and interact with your contract\n  * Project manager\n    * Quickly get a blank template and spin up a local cluster for testing with [https://github.com/l00k/devphase](https://github.com/l00k/devphase)\n    * Swanky CLI integration (wraps devphase into a swanky plugin) [https://github.com/Phala-Network/swanky-plugin-phala](https://github.com/Phala-Network/swanky-plugin-phala)\n* Basic Libraries\n  * Storage support: Wrapped Filecoin, Arweave, Storj and Amazon S3 with a S3-standard API\n    * [https://crates.io/crates/pink-s3](https://crates.io/crates/pink-s3)\n  * Cross-chain transaction support: ETH Queries & Transactions\n    * [https://crates.io/crates/pink-web3](https://crates.io/crates/pink-web3)\n* Advanced Library\n  * Stateful rollup: reliable cross-chain request processing\n    * Allows you to monitor the requests from EVM contracts and Substrate-based chains and reliably send cross-chain transactions as replies\n    * [https://github.com/Phala-Network/phat-stateful-rollup](https://github.com/Phala-Network/phat-stateful-rollup)", "mimetype": "text/plain", "start_char_idx": 5968, "end_char_idx": 7573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "533002f2-6608-4555-ab9d-d03d63eec165": {"__data__": {"id_": "533002f2-6608-4555-ab9d-d03d63eec165", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e9ba9f1-b4b7-4977-9a63-ee31586bfc7a", "node_type": "1", "metadata": {}, "hash": "ba4f407b5597d2fe31731014cae3ce77e46a3a43e2bf11dd4d56b7dad1949499", "class_name": "RelatedNodeInfo"}}, "text": "# Integrate with 3rd Party API with HTTP Request\n\nNow that we have been able to deploy a couple of template AI Agents, let's connect our AI Agent to a 3rd party API through HTTP request. We will use the [OpenAI AI Agent Contract](build-your-ai-agent-contract-with-openai.md) for this example.\n\n{% hint style=\"info\" %}\nView the example code [here](https://github.com/HashWarlock/ai-agent-template-hello). The code is based on the [guide](https://cookbook.openai.com/examples/how\\_to\\_build\\_an\\_agent\\_with\\_the\\_node\\_sdk) on how to build an agent from the OpenAI Cookbook.\n{% endhint %}\n\n## Overview\n\nIn this tutorial, you will learn how to create an agent with 2 functions to enable [function calling](https://platform.openai.com/docs/guides/function-calling) for your agent. The 2 functions we will implement are:\n\n* `getLocation()`  - Get the current location (latitude, longitude) based on the IP of the worker node if no location is described in the user prompt.\n* `getWeatherData(latitude, longitude)` - Get the current weather data based on the latitude and longitude retrieved from `getLocation()`.&#x20;\n\nThese two functions will be described for your agent to understand the purpose of the functions. Then we will set the system prompt for the agent with:\n\n```\nYou are a helpful assistant. Only use the functions you have been provided with.\n```\n\n## Getting Started\n\n### Prepare\n\nClone git repo or use [degit](https://www.npmjs.com/package/degit) to get the source code.\n\n{% tabs %}\n{% tab title=\"git\" %}\n```sh\ngit clone https://github.com/Phala-Network/ai-agent-template-openai.git\n```\n{% endtab %}\n\n{% tab title=\"degit\" %}\n```sh\nnpx degit github:Phala-Network/ai-agent-template-openai#main ai-agent-template-openai\n```\n{% endtab %}\n{% endtabs %}\n\nInstall dependencies\n\n```\nnpm install\n```\n\n## Creating Your Functions\n\nIn this step, we will create our 2 functions `getLocation()` and `getWeatherData(latitude, longitude)` then we will describe our functions for the agent to understand how to use the functions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2023, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e9ba9f1-b4b7-4977-9a63-ee31586bfc7a": {"__data__": {"id_": "2e9ba9f1-b4b7-4977-9a63-ee31586bfc7a", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "533002f2-6608-4555-ab9d-d03d63eec165", "node_type": "1", "metadata": {}, "hash": "817d19c30e0ac84746bfb686ac5a9ef29974b4dc3f147877cb17ee3b4f579c5c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4b75af1-6554-4fb7-810b-fb313a631205", "node_type": "1", "metadata": {}, "hash": "1f0843e6a545b4a9c3c34b3174249b8049d97da37a0e1f5c398cb3618f0dea81", "class_name": "RelatedNodeInfo"}}, "text": "Go to your `src/index.ts` file, your initial file should look like the following.\n\n<details>\n\n<summary>src/index.ts</summary>\n\n```typescript\nimport { Request, Response, route } from './httpSupport'\nimport { renderHtml } from './uiSupport'\n\nimport OpenAI from 'openai'\n\nasync function GET(req: Request): Promise<Response> {\n    const secret = req.queries?.key ?? '';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const completion = await openai.chat.completions.create({\n        messages: [{ role: \"system\", content: `${query}` }],\n        model: 'gpt-3.5-turbo',\n    });\n\n    return new Response(renderHtml(completion.choices[0].message.content as string))\n}\n\nasync function POST(req: Request): Promise<Response> {\n    const secret = req.queries?.key ?? '';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const completion = await openai.chat.completions.create({\n        messages: [{ role: \"system\", content: `${query}` }],\n        model: 'gpt-3.5-turbo',\n    });\n\n    return new Response(renderHtml(completion.choices[0].message.content as string))\n}\n\nexport default async function main(request: string) {\n    return await route({ GET, POST }, request)\n}\n```\n\n</details>\n\n### Create getLocation()\n\nFor the `getLocation()` function, we will need to call an API to get the location based on [https://ipapi.co/](https://ipapi.co/). Traditionally, devs will not have access to the internet, but with Phala's AI Agent Contracts, devs now can make async HTTP calls to bring more data for fine tuning their agents.&#x20;\n\nThe implementation is simple and we will add this following code.", "mimetype": "text/plain", "start_char_idx": 2025, "end_char_idx": 3865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4b75af1-6554-4fb7-810b-fb313a631205": {"__data__": {"id_": "f4b75af1-6554-4fb7-810b-fb313a631205", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e9ba9f1-b4b7-4977-9a63-ee31586bfc7a", "node_type": "1", "metadata": {}, "hash": "ba4f407b5597d2fe31731014cae3ce77e46a3a43e2bf11dd4d56b7dad1949499", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d9a5131-a1af-4b8e-8c17-f663b0dac841", "node_type": "1", "metadata": {}, "hash": "96955a75a24090cc2849dc3806131617512cbea855da160772fda28c4fc3b53b", "class_name": "RelatedNodeInfo"}}, "text": "```typescript\nasync function getLocation() {\n    const response = await fetch(\"https://ipapi.co/json/\");\n    const locationData = await response.json();\n    return locationData;\n}\n```\n\n### Create getWeatherData(latitude, longitude)\n\nFor the getWeatherData(latitude, longitude) function, we will call the free weather API by [https://open-meteo.com/](https://open-meteo.com/).&#x20;\n\nWe will add the following code to our `index.ts` file.\n\n```typescript\nasync function getCurrentWeather(latitude: any, longitude: any) {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=apparent_temperature`;\n    const response = await fetch(url);\n    const weatherData = await response.json();\n    return weatherData;\n}\n```\n\n### Describe Functions\n\nFor our OpenAI agent to understand the purpose of these functions, we need to describe them using a specific schema. We'll create an array called `tools` that contains one object per function. Each object will have two keys: `type`, `function`, and the `function` key has three subkeys: `name`, `description`, and `parameters`.\n\n```typescript\nconst tools = [\n    {\n        type: \"function\",\n        function: {\n            name: \"getCurrentWeather\",\n            description: \"Get the current weather in a given location\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    latitude: {\n                        type: \"string\",\n                    },\n                    longitude: {\n                        type: \"string\",\n                    },\n                },\n                required: [\"longitude\", \"latitude\"],\n            },\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"getLocation\",\n            description: \"Get the user's location based on their IP address\",\n            parameters: {\n                type: \"object\",\n                properties: {},\n            },\n        }\n    },\n];\n\nconst availableTools = {\n    getCurrentWeather,\n    getLocation,\n};\n```\n\n## Add Agent Functionality\n\n### Setup Messages for Agent\n\nWe need to define a `messages` array. This will keep track of all of the messages back and forth between our app and OpenAI. Here we create a type `MessageInfo` that will be the fields that may be included in the `messages` array.", "mimetype": "text/plain", "start_char_idx": 3867, "end_char_idx": 6212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d9a5131-a1af-4b8e-8c17-f663b0dac841": {"__data__": {"id_": "6d9a5131-a1af-4b8e-8c17-f663b0dac841", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4b75af1-6554-4fb7-810b-fb313a631205", "node_type": "1", "metadata": {}, "hash": "1f0843e6a545b4a9c3c34b3174249b8049d97da37a0e1f5c398cb3618f0dea81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d66296c-1e55-459e-b0d2-942520113426", "node_type": "1", "metadata": {}, "hash": "7e8c0694f8c59f502c6216e556a13a43fc75cc2a6bfd812e36de928c23345170", "class_name": "RelatedNodeInfo"}}, "text": "The first object in the array should always have the `role` property set to `\"system\"`, which tells OpenAI that this is how we want it to behave.\n\n```typescript\ntype MessageInfo = {\n    role: any,\n    content: any,\n    name?: any,\n}\n\nconst messages: MessageInfo[] = [\n    {\n        role: \"system\",\n        content: `You are a helpful assistant. Only use the functions you have been provided with.`,\n    },\n];\n```\n\n### Create Agent Function For User Input\n\nWe are now ready to build the logic of our app, which lives in the `agent` function. It is asynchronous and takes one argument: the `userInput`.\n\nWe start by pushing the `userInput` to the messages array. This time, we set the `role` to `\"user\"`, so that OpenAI knows that this is the input from the user.\n\n```typescript\nasync function agent(openai, userInput) {\n  messages.push({\n    role: \"user\",\n    content: userInput,\n  });\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: messages,\n    tools: tools,\n  });\n  console.log(response);\n}\n```\n\nNext, we'll send a request to the Chat completions endpoint via the `chat.completions.create()` method in the Node SDK. This method takes a configuration object as an argument. In it, we'll specify three properties:\n\n* `model` - Decides which AI model we want to use (in our case, GPT-4).\n* `messages` - The entire history of messages between the user and the AI up until this point.\n* `tools` - A list of tools the model may call. Currently, only functions are supported as a tool., we'll we use the `tools` array we created earlier.\n\n### Turn OpenAI Agent Response into Functions\n\nNow that we have the name of the function as a string, we'll need to translate that into a function call.", "mimetype": "text/plain", "start_char_idx": 6214, "end_char_idx": 7946, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d66296c-1e55-459e-b0d2-942520113426": {"__data__": {"id_": "0d66296c-1e55-459e-b0d2-942520113426", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d9a5131-a1af-4b8e-8c17-f663b0dac841", "node_type": "1", "metadata": {}, "hash": "96955a75a24090cc2849dc3806131617512cbea855da160772fda28c4fc3b53b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d030cc2-1b57-4d30-a96a-e3f9721371be", "node_type": "1", "metadata": {}, "hash": "1cce29a21f358328777e6079cc311c14ba4fdc1adebff633ffd4ee0852545df0", "class_name": "RelatedNodeInfo"}}, "text": "To help us with that, we'll gather both of our functions in an object called `availableTools`:\n\n```typescript\nconst availableTools = {  getCurrentWeather,  getLocation,};\n```\n\nThis is handy because we'll be able to access the `getLocation` function via bracket notation and the string we got back from OpenAI, like this: `availableTools[\"getLocation\"]`.\n\n```typescript\nconst { finish_reason, message } = response.choices[0]; \nif (finish_reason === \"tool_calls\" && message.tool_calls) {  \n    const functionName = message.tool_calls[0].function.name;  \n    const functionToCall = availableTools[functionName];  \n    const functionArgs = JSON.parse(message.tool_calls[0].function.arguments);  \n    const functionArgsArr = Object.values(functionArgs);  \n    const functionResponse = await functionToCall.apply(null, functionArgsArr);  \n    console.log(functionResponse);\n}\n```\n\nWe're also grabbing ahold of any arguments OpenAI wants us to pass into the function: `message.tool_calls[0].function.arguments`. However, we won't need any arguments for this first function call.\n\nIf we run the code again with the same input (`\"Where am I located right now?\"`), we'll see that `functionResponse` is an object filled with location about where the user is located right now. In my case, that is Oslo, Norway.", "mimetype": "text/plain", "start_char_idx": 7947, "end_char_idx": 9246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d030cc2-1b57-4d30-a96a-e3f9721371be": {"__data__": {"id_": "4d030cc2-1b57-4d30-a96a-e3f9721371be", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d66296c-1e55-459e-b0d2-942520113426", "node_type": "1", "metadata": {}, "hash": "7e8c0694f8c59f502c6216e556a13a43fc75cc2a6bfd812e36de928c23345170", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cda7bff8-7492-4b79-bf89-3d714910f23c", "node_type": "1", "metadata": {}, "hash": "5274399673e8225230b0bd733b17b9814670b06d9c52801786b72e9ea0c55497", "class_name": "RelatedNodeInfo"}}, "text": "```bash\n{ip: \"193.212.60.170\", network: \"193.212.60.0/23\", version: \"IPv4\", city: \"Oslo\", region: \"Oslo County\", region_code: \"03\", country: \"NO\", country_name: \"Norway\", country_code: \"NO\", country_code_iso3: \"NOR\", country_capital: \"Oslo\", country_tld: \".no\", continent_code: \"EU\", in_eu: false, postal: \"0026\", latitude: 59.955, longitude: 10.859, timezone: \"Europe/Oslo\", utc_offset: \"+0200\", country_calling_code: \"+47\", currency: \"NOK\", currency_name: \"Krone\", languages: \"no,nb,nn,se,fi\", country_area: 324220, country_population: 5314336, asn: \"AS2119\", org: \"Telenor Norge AS\"}\n```\n\nWe'll add this data to a new item in the `messages` array, where we also specify the name of the function we called.\n\n```typescript\nmessages.push({\n  role: \"function\",\n  name: functionName,\n  content: `The result of the last function was this: ${JSON.stringify(\n    functionResponse\n  )}\n  `,\n});\n```\n\nNotice that the `role` is set to `\"function\"`. This tells OpenAI that the `content` parameter contains the result of the function call and not the input from the user.\n\nAt this point, we need to send a new request to OpenAI with this updated `messages` array. However, we don\u2019t want to hard code a new function call, as our agent might need to go back and forth between itself and GPT several times until it has found the final answer for the user.\n\nThis can be solved in several different ways, e.g. recursion, a while-loop, or a for-loop. We'll use a good old for-loop for the sake of simplicity.&#x20;\n\n### Creating The Loop\n\nAt the top of the `agent` function, we'll create a loop that lets us run the entire procedure up to five times.", "mimetype": "text/plain", "start_char_idx": 9248, "end_char_idx": 10882, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cda7bff8-7492-4b79-bf89-3d714910f23c": {"__data__": {"id_": "cda7bff8-7492-4b79-bf89-3d714910f23c", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d030cc2-1b57-4d30-a96a-e3f9721371be", "node_type": "1", "metadata": {}, "hash": "1cce29a21f358328777e6079cc311c14ba4fdc1adebff633ffd4ee0852545df0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "36af5a0d-2390-4057-9e7f-a963bf9c3ec4", "node_type": "1", "metadata": {}, "hash": "1fc465da41e82459ceaf12ba92086260d4c980586c0087a5dfba562014f6d8ec", "class_name": "RelatedNodeInfo"}}, "text": "If we get back `finish_reason: \"tool_calls\"` from GPT, we'll just push the result of the function call to the `messages` array and jump to the next iteration of the loop, triggering a new request.\n\nIf we get `finish_reason: \"stop\"` back, then GPT has found a suitable answer, so we'll return the function and cancel the loop.\n\n```typescript\nfor (let i = 0; i < 5; i++) {\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: messages,\n    tools: tools,\n  });\n  const { finish_reason, message } = response.choices[0];\n \n  if (finish_reason === \"tool_calls\" && message.tool_calls) {\n    const functionName = message.tool_calls[0].function.name;\n    const functionToCall = availableTools[functionName];\n    const functionArgs = JSON.parse(message.tool_calls[0].function.arguments);\n    const functionArgsArr = Object.values(functionArgs);\n    const functionResponse = await functionToCall.apply(null, functionArgsArr);\n \n    messages.push({\n      role: \"function\",\n      name: functionName,\n      content: `\n          The result of the last function was this: ${JSON.stringify(\n            functionResponse\n          )}\n          `,\n    });\n  } else if (finish_reason === \"stop\") {\n    messages.push(message);\n    return message.content;\n  }\n}\nreturn \"The maximum number of iterations has been met without a suitable answer. Please try again with a more specific input.\";\n```\n\nIf we don't see a `finish_reason: \"stop\"` within our five iterations, we'll return a message saying we couldn\u2019t find a suitable answer.\n\n## Update GET() and POST()\n\nNow we need to call our `agent(openai, userInput)` in our `GET` and `POST` calls that will pass in a users prompt that can be accessed in the `chatQuery` property. The code change is minimial and our functions look like the following.\n\n```typescript\nasync function GET(req: Request): Promise<Response> {\n    const secret = req.queries?.key ??", "mimetype": "text/plain", "start_char_idx": 10884, "end_char_idx": 12804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36af5a0d-2390-4057-9e7f-a963bf9c3ec4": {"__data__": {"id_": "36af5a0d-2390-4057-9e7f-a963bf9c3ec4", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cda7bff8-7492-4b79-bf89-3d714910f23c", "node_type": "1", "metadata": {}, "hash": "5274399673e8225230b0bd733b17b9814670b06d9c52801786b72e9ea0c55497", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef0635a4-bf05-45a2-93b2-8cc3e505b99a", "node_type": "1", "metadata": {}, "hash": "7aa0b80fc8bc75fa22a4095a00b6414fb67dde5f61e6ee1578b6dfacb75ca02b", "class_name": "RelatedNodeInfo"}}, "text": "'';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const response = await agent(openai, query);\n\n    return new Response(renderHtml(response as string))\n}\n\nasync function POST(req: Request): Promise<Response> {\n    const secret = req.queries?.key ?? '';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const response = await agent(openai, query);\n\n    return new Response(renderHtml(response as string))\n}\n```\n\n## Test Locally\n\nNow that we have the code implemented to interact with APIs and call the functions, let's test the code locally.\n\nCreate `.env` file with the default ThirdWeb API key for publishing your Agent Contract to IPFS\n\n```\ncp .env.local .env\n```\n\nIn `./secrets/default.json` file replace `YOUR_OPENAI_KEY` with your API Key\n\n```json\n{\n  \"openaiApiKey\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n\n> In your `./tests/test.ts` file. Add your API Key manually to have a functional test.\n>\n> ```typescript\n> let getResult = await execute({\n>     method: 'GET',\n>     path: '/ipfs/CID',\n>     queries: { chatQuery: [\"Who are you?\"] },\n>     secret: { openaiApiKey: \"YOUR_OPENAI_API_KEY\" },\n>     headers: {},\n> })\n> ```\n\nBuild your Agent\n\n```\nnpm run build\n```\n\nTest your Agent locally\n\n```\nnpm run test\n```\n\nExpected output:\n\n```bash\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{},\"secret\":{\"openaiApiKey\":\"OPENAI_API_KEY\"},\"headers\":{}}\n[0]chat\n[1]chat\n[2]chat\nGET RESULT: {\n  status: 200,\n  body: `{\"message\":\"There's a lot to do in Austin, Texas! Here are some activities you might consider based on the current weather and various interests:\\\\n\\\\n### Outdoor Activities\\\\n1.", "mimetype": "text/plain", "start_char_idx": 12805, "end_char_idx": 14649, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef0635a4-bf05-45a2-93b2-8cc3e505b99a": {"__data__": {"id_": "ef0635a4-bf05-45a2-93b2-8cc3e505b99a", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36af5a0d-2390-4057-9e7f-a963bf9c3ec4", "node_type": "1", "metadata": {}, "hash": "1fc465da41e82459ceaf12ba92086260d4c980586c0087a5dfba562014f6d8ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96df0748-aefb-41b3-8c7d-d1a11163616f", "node_type": "1", "metadata": {}, "hash": "aaf0e8260d75b17cfbca591f96a9523c04cce1c5f7271a22c8e300b3b33afb35", "class_name": "RelatedNodeInfo"}}, "text": "**Lady Bird Lake & Zilker Park**\\\\n   - **Kayaking/Paddleboarding**: Enjoy a relaxing paddle on Lady Bird Lake.\\\\n   - **Hiking/Biking**: Explore the trails around Zilker Park and Barton Springs.\\\\n\\\\n2. **Barton Springs Pool**\\\\n   - A perfect spot for a swim and to cool off from the summer heat.\\\\n\\\\n3. **Mount Bonnell**\\\\n   - For those who love scenic views and a bit of hiking, head to Mount Bonnell for a panoramic view of the city.\\\\n\\\\n### Cultural Activities\\\\n1. **Blanton Museum of Art**\\\\n   - Explore a variety of art collections ranging from contemporary to ancient.\\\\n\\\\n2. **Bullock Texas State History Museum**\\\\n   - Learn about the rich history of Texas through exhibits and films.\\\\n\\\\n3. **South Congress Avenue (SoCo)**\\\\n   - Wander through boutique shops, galleries, and enjoy some street performances.\\\\n\\\\n### Music & Nightlife\\\\n1. **Live Music**\\\\n   - Check out iconic venues like the Continental Club or Antone\u2019s for some live performances.\\\\n\\\\n2. **Rainey Street Historic District**\\\\n   - Explore a variety of bars and food trucks in this lively area.\\\\n\\\\n### Food & Beverage\\\\n1. **BBQ Heaven**\\\\n   - Visit Franklin Barbecue or la Barbecue for some of the best BBQ in the city.\\\\n   \\\\n2. **Food Trucks**\\\\n   - Explore the diverse array of food trucks offering a variety of cuisines.\\\\n\\\\n### Weather Considerations\\\\n- The apparent temperature during the day can reach up to 37.2\u00b0C (98.96\u00b0F) with some moments going as high as 38.9\u00b0C (102.02\u00b0F). Ensure you stay hydrated and take breaks in shaded or air-conditioned areas.\\\\n\\\\nNo matter what your interests are, Austin has a variety of activities to make your day enjoyable. Make sure to check local event listings as well for any special events or festivals happening today.", "mimetype": "text/plain", "start_char_idx": 14650, "end_char_idx": 16416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96df0748-aefb-41b3-8c7d-d1a11163616f": {"__data__": {"id_": "96df0748-aefb-41b3-8c7d-d1a11163616f", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef0635a4-bf05-45a2-93b2-8cc3e505b99a", "node_type": "1", "metadata": {}, "hash": "7aa0b80fc8bc75fa22a4095a00b6414fb67dde5f61e6ee1578b6dfacb75ca02b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f81e683-5a6b-43b2-b53b-b0ef87a0eb1f", "node_type": "1", "metadata": {}, "hash": "a7dabb7349ebbab040ea262e5fd2ab83ce775f7fb17b8e017c6605b95e79dd35", "class_name": "RelatedNodeInfo"}}, "text": "\"}`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{\"chatQuery\":[\"What are some activities based in Brussels today?\"]},\"secret\":{\"openaiApiKey\":\"OPENAI_API_KEY\"},\"headers\":{}}\n[0]chat\n[1]chat\n[2]chat\n[3]chat\nGET RESULT: {\n  status: 200,\n  body: `{\"message\":\"Brussels is a vibrant city with a lot of things to offer on any given day. Here are some activities you can enjoy today:\\\\n\\\\n### Outdoor Activities\\\\n1. **Grand Place**\\\\n   - Visit the heart of Brussels and marvel at the stunning architecture. You might catch some street performances as well.\\\\n\\\\n2. **Parc du Cinquantenaire**\\\\n   - Take a relaxing stroll or have a picnic in this beautiful park.\\\\n\\\\n3. **Atomium**\\\\n   - Explore this unique building and enjoy panoramic views of the city.\\\\n\\\\n### Cultural Activities\\\\n1. **Royal Museums of Fine Arts of Belgium**\\\\n   - Explore Belgian art and various exhibitions ranging from ancient to modern art.\\\\n\\\\n2. **Magritte Museum**\\\\n   - Dive into the surreal world of Ren\u00e9 Magritte, one of Belgium's most famous artists.\\\\n\\\\n3. **Belgian Comic Strip Center**\\\\n   - Discover the rich history of comic strips in Belgium, including famous characters like Tintin.\\\\n\\\\n### Gourmet Experiences\\\\n1. **Chocolate and Beer Tours**\\\\n   - Take a guided tour to sample some of Brussels' best chocolates and beers.\\\\n\\\\n2. **Waffles and Frites**\\\\n   - Enjoy traditional Belgian waffles and fries at local eateries.\\\\n\\\\n### Shopping and Markets\\\\n1. **Galeries Royales Saint-Hubert**\\\\n   - Explore this beautiful shopping arcade filled with boutique shops and cafes.\\\\n\\\\n2. **Marolles Flea Market**\\\\n   - Hunt for unique items and antiques at this bustling market.\\\\n\\\\n### Theatre and Music\\\\n1.", "mimetype": "text/plain", "start_char_idx": 16416, "end_char_idx": 18227, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f81e683-5a6b-43b2-b53b-b0ef87a0eb1f": {"__data__": {"id_": "9f81e683-5a6b-43b2-b53b-b0ef87a0eb1f", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96df0748-aefb-41b3-8c7d-d1a11163616f", "node_type": "1", "metadata": {}, "hash": "aaf0e8260d75b17cfbca591f96a9523c04cce1c5f7271a22c8e300b3b33afb35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ddede5ce-acdc-4ad3-9dca-9b35133ee1c8", "node_type": "1", "metadata": {}, "hash": "b13922e4659cd9dcb9c381e05e9fa40e336be1bb0f5e384ca4a8250fb32101e9", "class_name": "RelatedNodeInfo"}}, "text": "**Ancienne Belgique**\\\\n   - Check out the schedule for any concerts or performances happening today.\\\\n\\\\n2. **La Monnaie/De Munt**\\\\n   - Attend an opera or a ballet performance if available.\\\\n\\\\n### Historical Sites\\\\n1. **Manneken Pis**\\\\n   - Visit this famous statue, which often gets dressed up in various costumes.\\\\n\\\\n2. **Palais de Justice**\\\\n   - Visit this impressive courthouse and enjoy the views from its location.\\\\n\\\\n### Weather Considerations\\\\n- The apparent temperature in Brussels today ranges from 15.9\u00b0C (60.62\u00b0F) in the early morning to a high of around 31.6\u00b0C (88.88\u00b0F) in the late afternoon. Thus, it is quite pleasant for outdoor activities.\\\\n\\\\nWhatever your interests, Brussels has something to offer for everyone. Make sure to check local event listings as well for any special events or festivals happening today. Enjoy your day!\"}`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nNow you are ready to publish your agent, add secrets, and interact with your agent in the following steps:\n- Execute: 'npm run publish-agent'\n- Set secrets: 'npm run set-secrets'\n- Go to the url produced by setting the secrets (e.g. https://wapo-testnet.phala.network/ipfs/QmPQJD5zv3cYDRM25uGAVjLvXGNyQf9Vonz7rqkQB52Jae?key=b092532592cbd0cf)\n```\n\n## Publish & Interact with Agent\n\nWith our test passing and everything working as expected, now we can build and publish our agent code to IPFS. Then we will set our secrets and access our deployed agent via the Phala Gateway at https://wapo-testnet.phala.network/ipfs/\\<cid>?key=\\<key\\_id>\\&chatQuery=\\<chat\\_query>.\n\nUpload your compiled AI Agent code to IPFS.\n\n```bash\nnpm run publish-agent\n```\n\nUpon a successful upload, the command should show the URL to access your AI Agent.\n\n```\n\u2713 Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 18228, "end_char_idx": 20054, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddede5ce-acdc-4ad3-9dca-9b35133ee1c8": {"__data__": {"id_": "ddede5ce-acdc-4ad3-9dca-9b35133ee1c8", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f81e683-5a6b-43b2-b53b-b0ef87a0eb1f", "node_type": "1", "metadata": {}, "hash": "a7dabb7349ebbab040ea262e5fd2ab83ce775f7fb17b8e017c6605b95e79dd35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "04b13076-5a3c-4b51-8e27-326b1db964fc", "node_type": "1", "metadata": {}, "hash": "1517482869521cea284c7280a3ce3b5d88905844608737171e976e444b77005c", "class_name": "RelatedNodeInfo"}}, "text": "78.19 KB  dist/index.js\nRunning command: npx thirdweb upload dist/index.js\nThis may require you to log into thirdweb and will take some time to publish to IPFS...\n\n    $$\\     $$\\       $$\\                 $$\\                         $$\\       \n    $$ |    $$ |      \\__|                $$ |                        $$ |      \n  $$$$$$\\   $$$$$$$\\  $$\\  $$$$$$\\   $$$$$$$ |$$\\  $$\\  $$\\  $$$$$$\\  $$$$$$$\\  \n  \\_$$  _|  $$  __$$\\ $$ |$$  __$$\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\ $$  __$$\\ \n    $$ |    $$ |  $$ |$$ |$$ |  \\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\n    $$ |$$\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\n    \\$$$$  |$$ |  $$ |$$ |$$ |      \\$$$$$$$ |\\$$$$$\\$$$$  |\\$$$$$$$\\ $$$$$$$  |\n     \\____/ \\__|  \\__|\\__|\\__|       \\_______| \\_____\\____/  \\_______|\\_______/ \n\n \ud83d\udc8e thirdweb v0.14.12 \ud83d\udc8e\n\n- Uploading file to IPFS. This may take a while depending on file sizes.\n\n\u2714 Successfully uploaded file to IPFS.", "mimetype": "text/plain", "start_char_idx": 20057, "end_char_idx": 21005, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04b13076-5a3c-4b51-8e27-326b1db964fc": {"__data__": {"id_": "04b13076-5a3c-4b51-8e27-326b1db964fc", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ddede5ce-acdc-4ad3-9dca-9b35133ee1c8", "node_type": "1", "metadata": {}, "hash": "b13922e4659cd9dcb9c381e05e9fa40e336be1bb0f5e384ca4a8250fb32101e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bfdba06a-b29b-4744-946a-8b1846977489", "node_type": "1", "metadata": {}, "hash": "aad5f1e91c64c1c8b2af8c471fdeb431572025c91bf394ef39b77e6cd20ca133", "class_name": "RelatedNodeInfo"}}, "text": "\u2714 Files stored at the following IPFS URI: ipfs://QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n\n\u2714 Open this link to view your upload: https://b805a9b72767504353244e0422c2b5f9.ipfscdn.io/ipfs/bafybeibbasdv4xt32ea74ga77rpr5kgnkxcgqbtoslgxagzhmmujcjwkym/\n\nAgent Contract deployed at: https://wapo-testnet.phala.network/ipfs/QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n\n\nIf your agent requires secrets, ensure to do the following:\n1) Edit the ./secrets/default.json file or create a new JSON file in the ./secrets folder and add your secrets to it.\n2) Run command: 'npm run set-secrets' or 'npm run set-secrets [path-to-json-file]'\nLogs folder created.\nDeployment information updated in ./logs/latestDeployment.json\n```\n\n{% hint style=\"info\" %}\n**Note** that your latest deployment information will be logged to in file [`./logs/latestDeployment.json`](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/logs/latestDeployment.json). This file is updated every time you publish a new Agent Contract to IPFS. This file is also used to get the IPFS CID of your Agent Contract when setting secrets for your Agent Contract.\n\nHere is an example:\n\n```\n{\n  \"date\": \"2024-08-29T20:28:20.081Z\",\n  \"cid\": \"QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu\",\n  \"url\": \"https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu\"\n}\n```\n{% endhint %}\n\n{% hint style=\"warning\" %}\n**Did Thirdweb fail to publish?", "mimetype": "text/plain", "start_char_idx": 21006, "end_char_idx": 22448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfdba06a-b29b-4744-946a-8b1846977489": {"__data__": {"id_": "bfdba06a-b29b-4744-946a-8b1846977489", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "04b13076-5a3c-4b51-8e27-326b1db964fc", "node_type": "1", "metadata": {}, "hash": "1517482869521cea284c7280a3ce3b5d88905844608737171e976e444b77005c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cac1345c-f66d-45ae-9d6b-1472fa77b94c", "node_type": "1", "metadata": {}, "hash": "ea67436df927e99e58e58376279243c69f7fb4f166744234c0d9b8fbb5cffd0f", "class_name": "RelatedNodeInfo"}}, "text": "**\n\nIf ThirdWeb fails to publish, please signup for your own ThirdWeb account to publish your Agent Contract to IPFS. Signup or login at [https://thirdweb.com/dashboard/](https://thirdweb.com/dashboard/)\n\nWhenever you log into ThirdWeb, create a new API key and replace the default API Key with yours in the [.env](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/.env) file.\\\n`THIRDWEB_API_KEY=\"YOUR_THIRDWEB_API_KEY\"`\n{% endhint %}\n\n### Add Secrets\n\nBy default, all the compiled JS code is visible for anyone to view if they look at IPFS CID. This makes private info like API keys, signer keys, etc. vulnerable to be stolen. To protect devs from leaking keys, we have added a field called `secret` in the `Request` object. It allows you to store secrets in a vault for your AI Agent to access.\n\nTo add your secrets,\n\n1. Edit the [default.json](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/secrets/default.json) file or create a new JSON file in the `./secrets` folder and add your secrets to it.\n\n```\n{\n  \"openaiApiKey\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n\n2. Run command to set the secrets\n\n```\nnpm run set-secrets\n# or if you have a custom JSON file\nnpm run set-secrets <path-to-json-file>\n```\n\nExpected output:\n\n```sh\nUse default secrets...\nStoring secrets...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   205    0    68  100   137    105    213 --:--:-- --:--:-- --:--:--   319\n{\"token\":\"37a0f3f344a3bbf7\",\"key\":\"343e2a7dc130fedf\",\"succeed\":true}\n\nSecrets set successfully.", "mimetype": "text/plain", "start_char_idx": 22448, "end_char_idx": 24092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cac1345c-f66d-45ae-9d6b-1472fa77b94c": {"__data__": {"id_": "cac1345c-f66d-45ae-9d6b-1472fa77b94c", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bfdba06a-b29b-4744-946a-8b1846977489", "node_type": "1", "metadata": {}, "hash": "aad5f1e91c64c1c8b2af8c471fdeb431572025c91bf394ef39b77e6cd20ca133", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4740525-790d-4f00-82b0-33225c23b954", "node_type": "1", "metadata": {}, "hash": "bb89d8575f8ad4dd6332024d915288a30215df48c57ccabdd6f3b539ddcbfbb9", "class_name": "RelatedNodeInfo"}}, "text": "Go to the URL below to interact with your agent:\nhttps://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu?key=343e2a7dc130fedf\nLog entry added to secrets.log\n```\n\n> Note that all your secrets will be logged in file [`./logs/secrets.log`](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/logs/secrets.log). This file is updated every time you add new secrets to your Agent Contract. If you have not published an Agent Contract, yet, this command will fail since there is not a CID to map the secrets to.\n>\n> Here is an example:\n>\n> ```\n> 2024-08-29T20:30:35.480Z, CID: [QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu], Token: [37a0f3f344a3bbf7], Key: [343e2a7dc130fedf], URL: [https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu?key=343e2a7dc130fedf]\n> ```\n\nThe API returns a `token` and a `key`. The `key` is the id of your secret. It can be used to specify which secret you are going to pass to your frame. The `token` can be used by the developer to access the raw secret. You should never leak the `token`.\n\nTo verify the secret, run the following command where `key` and `token` are replaced with the values from adding your `secret` to the vault.", "mimetype": "text/plain", "start_char_idx": 24093, "end_char_idx": 25334, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4740525-790d-4f00-82b0-33225c23b954": {"__data__": {"id_": "d4740525-790d-4f00-82b0-33225c23b954", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cac1345c-f66d-45ae-9d6b-1472fa77b94c", "node_type": "1", "metadata": {}, "hash": "ea67436df927e99e58e58376279243c69f7fb4f166744234c0d9b8fbb5cffd0f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "465610d5-5e11-43a5-8cac-067a437a1c94", "node_type": "1", "metadata": {}, "hash": "0556d6f77179c75cb34d21dedbf9e2b1a9957dfd416bf8f78d85e41cf688ee77", "class_name": "RelatedNodeInfo"}}, "text": "```\ncurl https://wapo-testnet.phala.network/vaults/<key>/<token>\n```\n\nExpected output:\n\n```\n{\"data\":{\"openaiApiKey\":\"<OPENAI_API_KEY>\"},\"succeed\":true}\n```\n\n### Access Queries\n\nTo help create custom logic, we have an array variable named `queries` that can be accessed in the `Request` class. To access the `queries` array variable `chatQuery` value at index `0`, the syntax will look as follows:\n\n```\nconst query = req.queries.chatQuery[0] as string;\n```\n\nHere is an example of adding a URL query named `chatQuery` with a value of `When did humans land on the moon`. `queries` can have any field name, so `chatQuery` is just an example of a field name and not a mandatory name, but remember to update your `index.ts` file logic to use your expected field name.\n\n> [https://wapo-testnet.phala.network/ipfs/Qmc7EDq1X8rfYGGfHyXZ6xsmcSUWQcqsDoeRMfmvFujih3?key=51f265212c26086c&<mark style=\"background-color:yellow;\">**chatQuery**</mark>=When%20did%20humans%20land%20on%20the%20moon](https://wapo-testnet.phala.network/ipfs/Qmc7EDq1X8rfYGGfHyXZ6xsmcSUWQcqsDoeRMfmvFujih3?key=51f265212c26086c\\&chatQuery=When%20did%20humans%20land%20on%20the%20moon)\n\n### Query Your Deployed Agent\n\nNow that your agent is deployed, you can access the agent through a `curl` request or insert the url with the `key` and `chatQuery` defined. Here is an example of the code from the tutorial we just walked through.", "mimetype": "text/plain", "start_char_idx": 25336, "end_char_idx": 26726, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "465610d5-5e11-43a5-8cac-067a437a1c94": {"__data__": {"id_": "465610d5-5e11-43a5-8cac-067a437a1c94", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4740525-790d-4f00-82b0-33225c23b954", "node_type": "1", "metadata": {}, "hash": "bb89d8575f8ad4dd6332024d915288a30215df48c57ccabdd6f3b539ddcbfbb9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1f3181d-157d-4b18-b550-cc24298dc7ff", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "Example: [https://wapo-testnet.phala.network/ipfs/QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n?key=5150856fe20eb558&<mark style=\"background-color:yellow;\">chatQuery</mark>=What%20are%20activities%20to%20do%20in%20Singapore%20today](https://wapo-testnet.phala.network/ipfs/QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n?key=5150856fe20eb558\\&chatQuery=What%20are%20activities%20to%20do%20in%20Singapore%20today)\n\n### Debugging Your Agent\n\nTo debug your agent, you can use the following command:\n\n```\ncurl https://wapo-testnet.phala.network/logs/all/ipfs/<CID>\n```\n\nAfter executing this command then you should see some output in the terminal to show the logs of requests to your agent.\n\n```\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] END Request: Duration: 166ms\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Is signature valid? ' true\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Verifying Signature with PublicKey ' '0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540'\n2024-09-04T03:18:34.", "mimetype": "text/plain", "start_char_idx": 26728, "end_char_idx": 27795, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1f3181d-157d-4b18-b550-cc24298dc7ff": {"__data__": {"id_": "d1f3181d-157d-4b18-b550-cc24298dc7ff", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "465610d5-5e11-43a5-8cac-067a437a1c94", "node_type": "1", "metadata": {}, "hash": "0556d6f77179c75cb34d21dedbf9e2b1a9957dfd416bf8f78d85e41cf688ee77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df58f73e-9323-4aab-a1c2-7c255e7f7a3b", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=verify&data=tintinland%20message%20to%20sign&signature=0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] END Request: Duration: 183ms\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signature: 0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b'\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signing data [tintinland message to sign] with Account [0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540]'\n2024-09-04T03:17:15.", "mimetype": "text/plain", "start_char_idx": 27795, "end_char_idx": 28646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df58f73e-9323-4aab-a1c2-7c255e7f7a3b": {"__data__": {"id_": "df58f73e-9323-4aab-a1c2-7c255e7f7a3b", "embedding": null, "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dfab378e-9c63-49a3-9708-9fd70417a2be", "node_type": "4", "metadata": {}, "hash": "9d3bb6c46d9895462c8c278da04b9b53013d966510401dc333c79a915c40b728", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1f3181d-157d-4b18-b550-cc24298dc7ff", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=sign&data=tintinland%20message%20to%20sign\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] END Request: Duration: 169ms\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] END Request: Duration: 158ms\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64\na1e805bfd\n```\n\nTo create logs in your Agent Contract, you can use the following syntax in your `index.ts` file.\n\n```\n// info logs\nconsole.log('info log message!')\n// error logs\nconsole.error('error log message!')\n```\n\nFor more information check the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/console) on `console` object.", "mimetype": "text/plain", "start_char_idx": 28646, "end_char_idx": 29705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6251c57e-8ad8-46bc-a268-4fb444589db6": {"__data__": {"id_": "6251c57e-8ad8-46bc-a268-4fb444589db6", "embedding": null, "metadata": {"file_path": "./phala_dist/grafana-and-prometheus.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c9706df-10fb-4f32-af79-a8688f48dcd2", "node_type": "4", "metadata": {}, "hash": "ce5c11e75b6e941f7a17ae6cd8a2cc20cf83d275b8fec58a7c5609994828b945", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d0dec51-8429-4035-9621-e7da9c29d44b", "node_type": "1", "metadata": {}, "hash": "f1ae108bf37a3050874a96d4ad879e89769e0197b1dd265c2d72094c9314e69d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Grafana and Prometheus\nsidebar_position: 0\n---\n\nThis guide will walk you through setting up a local metrics infrastructure using [Grafana](https://grafana.com) and [Prometheus](https://prometheus.io).\n\n## Step 1: Set up Grafana and Prometheus\n\nTo simplify the process, we will use the [metrics-infrastructure](https://github.com/NethermindEth/metrics-infrastructure) repository, which contains the necessary configuration files to run Grafana and Prometheus in a Docker container. However, you can also set up Grafana and Prometheus manually the way it fits your specific needs.\n\n```bash\ngit clone https://github.com/NethermindEth/metrics-infrastructure.git\n```\n\n## Step 2: Run the stack\n\nAfter cloning the repository, navigate to its root directory and run the containers using Docker Compose as follows:\n\n```bash\ndocker compose up\n```\n\nOnce the stack is running, you can access the following services:\n\n- **Grafana**: [localhost:3000](http://localhost:3000)\\\n  Use `admin` for both the username and password. When asked for a password change, you may skip it. Then, navigate to Dashboards > Nethermind Dashboard.\n- **Prometheus**: [localhost:9090](http://localhost:9090)\n- **Pushgateway**: [localhost:9091](http://localhost:9091)\\\n  To specify another endpoint for the Pushgateway, use the `--Metrics.PushGatewayUrl` command line option.\n\n## Step 3: Run Nethermind\n\nTo enable metrics in Nethermind, use the `--Metrics.Enabled true` command line option. For more options, see the [Metrics](../../fundamentals/configuration.md#metrics) configuration section.\n\n:::warning Important\nA [consensus client](../../get-started/consensus-clients.md) of your choice must be running before you start Nethermind.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1712, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d0dec51-8429-4035-9621-e7da9c29d44b": {"__data__": {"id_": "2d0dec51-8429-4035-9621-e7da9c29d44b", "embedding": null, "metadata": {"file_path": "./phala_dist/grafana-and-prometheus.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c9706df-10fb-4f32-af79-a8688f48dcd2", "node_type": "4", "metadata": {}, "hash": "ce5c11e75b6e941f7a17ae6cd8a2cc20cf83d275b8fec58a7c5609994828b945", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6251c57e-8ad8-46bc-a268-4fb444589db6", "node_type": "1", "metadata": {}, "hash": "7b1c089b9b96c6c2a431f6a83204be87c4cdac3c07286714591dca101176cd7f", "class_name": "RelatedNodeInfo"}}, "text": ":::\n\nRun Nethermind as follows:\n\n```bash\nnethermind -c mainnet --Metrics.Enabled true\n```\n\nAlternatively, you may add the `nethermind` service to the `docker-compose.yml` file in the repository root to run everything altogether:\n\n```yaml title=\"docker-compose.yml\"\nnethermind:\n  image: nethermind/nethermind:latest\n  container_name: nethermind\n  restart: unless-stopped\n  ports:\n    - 8545:8545\n    - 8551:8551\n    - 30303:30303\n  ulimits:\n    nofile:\n      soft: 1000000\n      hard: 1000000\n  command: -c mainnet --Metrics.Enabled true\n  volumes:\n    - ./keystore:/nethermind/keystore\n    - ./logs:/nethermind/logs\n    - ./nethermind_db:/nethermind/nethermind_db\n```\n\nIn this case, you may want to configure your consensus client similarly.", "mimetype": "text/plain", "start_char_idx": 1713, "end_char_idx": 2454, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04129585-50ba-4680-910f-2805dabd896f": {"__data__": {"id_": "04129585-50ba-4680-910f-2805dabd896f", "embedding": null, "metadata": {"file_path": "./phala_dist/get-an-airstack-api-key.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3280c948-561a-412c-b0cb-09deafe1632d", "node_type": "4", "metadata": {}, "hash": "8bb366b5255801950b324a86394b284fc649b1329acee0e55436310531d94b3b", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udddd\ufe0f Get an Airstack API Key\n\nYou can get an API Key from Airstack by following the documentation [here](https://app.bitly.com/Bn9tntEUUft/links/bit.ly/41h8IhD/details).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39f69bae-f236-4dc6-a658-6defebf81e2c": {"__data__": {"id_": "39f69bae-f236-4dc6-a658-6defebf81e2c", "embedding": null, "metadata": {"file_path": "./phala_dist/the-graph-agent.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c40b878f-42c6-4f26-9c15-6a0bb09159cc", "node_type": "4", "metadata": {}, "hash": "448e8bc74bfbfc7c6c6578b76e9cb4c77143c721d54a45048b576b8049718243", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udcc8 The Graph Agent\n\n<figure><img src=\"../../.gitbook/assets/The_Graph.png\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\nThe Graph template enables you to connect to subgraph endpoints for data and utilize the data to calculate a trust score and send to a Web3 dApp on an EVM chain.\n\n## Requirements Before Deployment\n\n* Create API Key from The Graph. See how to get an API Key [here](https://bit.ly/the-graph-api-key). By default a rate-limited key is provided with no guarantee of service if limit is exhausted.\n\n## Features and Benefits\n\nWith the ability to bring The Graph data on-chain with customized logic performed on the data, this template enables developers to securely connect your indexed data to your web3 dApps. There are many features and benefits that can be built. For example:\n\n* On-chain Trust Score\n* Spam Filters\n* Copy Trading\n* Dynamic NFTs w/ On-chain Indexed Data\n* Conditional Transactions, etc.\n\n## Resources\n\n* [The Graph AI Agent Contract Code Template](https://bit.ly/pc-the-graph-repo)\n* [The Graph Docs](https://thegraph.com/docs/en/about/)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b051df0-8919-4c76-a453-634c7b833d57": {"__data__": {"id_": "3b051df0-8919-4c76-a453-634c7b833d57", "embedding": null, "metadata": {"file_path": "./phala_dist/wallet-setup-and-get-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "71398931-7410-4ca7-ae52-0ae56fd56545", "node_type": "4", "metadata": {}, "hash": "52f60211be98b5bffc27264046da2d9fbcd78247469b434c2e14e0c02c936208", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "796d5f95-8c31-41ff-906c-92cb044ef771", "node_type": "1", "metadata": {}, "hash": "c1d306353f0f97827d4adb59034d759ae5347e7eba769e2a23bb4ef83462d336", "class_name": "RelatedNodeInfo"}}, "text": "# Wallet Setup & Get PHA\n\nAgent Wars is deployed on the [Base chain](https://www.base.org/), a popular high performance Ethereum L2 built by Coinbase. You will need to have two tokens to participate:\n\n* **ETH**: needed to pay the gas fee on Base\n* **PHA**: used to buy keys and create agents\n\n## Set up wallets on Base chain\n\nAgent Wars supports all EVM-compatible wallets. Recommended wallets include:\n\n1. [Coinbase Wallet](https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad?hl=en): desktop and mobile\n2. [MetaMask](https://metamask.io/): desktop and mobile\n3. [Rabby](https://rabby.io/): desktop only\n\nFor more information, please refer to [the official Base docs](https://docs.base.org/docs/using-base/).\n\n{% hint style=\"info\" %}\nSoon, the Agent Wars dapp will come with Social Login Wallets, powered by Privy. You will be able to create an in-app wallet with your social accounts (Google, Facebook, etc).\n{% endhint %}\n\n## Get ETH on Base\n\nETH is the native token of the Base chain. You need to have ETH in your Base wallet to pay the gas fee. You can either buy ETH from centralized exchanges (e.g. [Coinbase](https://www.coinbase.com/), [Binance](https://www.binance.com/)), or bridge ETH from the Ethereum mainnet via the [Base Bridge](https://bridge.base.org/deposit).\n\n{% hint style=\"info\" %}\nIt's suggested to have at least $10 worth of ETH on Base to cover transaction gas fees. As of Apr 2024, a typical Base transaction takes $0.01 to $0.20 worth of gas in ETH.\n{% endhint %}\n\n## Get PHA on Base\n\nYou will need PHA on the Base chain to participate in Agent Wars. It's used to buy keys and create agents.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "796d5f95-8c31-41ff-906c-92cb044ef771": {"__data__": {"id_": "796d5f95-8c31-41ff-906c-92cb044ef771", "embedding": null, "metadata": {"file_path": "./phala_dist/wallet-setup-and-get-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "71398931-7410-4ca7-ae52-0ae56fd56545", "node_type": "4", "metadata": {}, "hash": "52f60211be98b5bffc27264046da2d9fbcd78247469b434c2e14e0c02c936208", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3b051df0-8919-4c76-a453-634c7b833d57", "node_type": "1", "metadata": {}, "hash": "180862739077ffa72e132553af29fa121d5e6e215c4198f0984ea03b79a42d1a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8dd47e2-2205-4248-a9f2-c436dd678d69", "node_type": "1", "metadata": {}, "hash": "4b84a898b7911181ea369a4fb3fc7220802774d276cb24c3865ab3d63f9373e2", "class_name": "RelatedNodeInfo"}}, "text": "You can easily obtain PHA in the following ways:\n\n### Uniswap V3 (Recommended)\n\nYou can [buy and sell PHA on Uniswap V3](https://app.uniswap.org/explore/tokens/base/0x336c9297afb7798c292e9f80d8e566b947f291f0) on the Base chain.\n\n{% embed url=\"https://youtu.be/Xqb3mzh8_mo\" %}\n\n### Bridge from Ethereum (Advanced)\n\nYou can bridge PHA token between Ethereum mainnet and Base chain with Wormhole bridge.\n\n<details>\n\n<summary>Wormhole Bridge Instructions</summary>\n\nPHA is bridged from Ethereum to Base chain via [Wormhole](https://wormhole.com/) bridge. If you have PHA on Ethereum, you can easily bridge it to Base with Wormhole's UI, Portal Bridge:\n\n1. Open [Portal Bridge (Advanced Tool)](https://portalbridge.com/advanced-tools/#/transfer)\n2. Select the chains: from **Ethereum** to **Base**\n3. Connect your Web3 wallet\n4. Search the token name `Phala` or the token address `0x6c5ba91642f10282b576d91922ae6448c9d52f4e`\n5. Input the amount you want to bridge, and follow the instructions on the web page to proceed\n\nNote that the bridging operation between Ethereum and Base takes around 15 mins. To get PHA on Ethereum, you can buy it from centralized exchanges (Binance, OKX, Kucoin, etc), and decentralized exchanges (Uniswap, 1inch, etc).\n\nIf you closed the web page after finishing the transfer step but haven't claimed it on the destination blockchain, you can use the \"Redeem\" tab in the Portal Bridge (Advanced Tool). You will need to find the tx id of your transfering tx from a blockchain explorer. The redeem tool will recover the transaction and guide you to redeem the PHA on the destination chain. Learn more at [their official docs](https://portalbridge.com/docs/tutorials/how-to-use-recovery-workflow).\n\n</details>\n\n{% hint style=\"info\" %}\nSoon, the Agent Wars dapp will support buying keys and creating agents with ETH.", "mimetype": "text/plain", "start_char_idx": 1667, "end_char_idx": 3503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8dd47e2-2205-4248-a9f2-c436dd678d69": {"__data__": {"id_": "d8dd47e2-2205-4248-a9f2-c436dd678d69", "embedding": null, "metadata": {"file_path": "./phala_dist/wallet-setup-and-get-pha.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "71398931-7410-4ca7-ae52-0ae56fd56545", "node_type": "4", "metadata": {}, "hash": "52f60211be98b5bffc27264046da2d9fbcd78247469b434c2e14e0c02c936208", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "796d5f95-8c31-41ff-906c-92cb044ef771", "node_type": "1", "metadata": {}, "hash": "c1d306353f0f97827d4adb59034d759ae5347e7eba769e2a23bb4ef83462d336", "class_name": "RelatedNodeInfo"}}, "text": "Once upgraded, you will be able to use your ETH balance to buy keys or create agents directly without manually purchasing PHA. The smart contracts will do the heavy lifting for you.\n{% endhint %}\n\n### Token Information\n\n<table data-header-hidden><thead><tr><th width=\"218\"></th><th></th></tr></thead><tbody><tr><td>Base ERC20</td><td><a href=\"https://basescan.org/token/0x336c9297afb7798c292e9f80d8e566b947f291f0\">0x336c9297afb7798c292e9f80d8e566b947f291f0</a></td></tr><tr><td>Uniswap PHA/ETH</td><td><a href=\"https://basescan.org/address/0x03aC059Fd9eb9c2da65D745E923583F05bF388DB\">0x03aC059Fd9eb9c2da65D745E923583F05bF388DB</a></td></tr><tr><td>Mainnet ERC20</td><td><a href=\"https://etherscan.io/token/0x6c5ba91642f10282b576d91922ae6448c9d52f4e\">0x6c5ba91642f10282b576d91922ae6448c9d52f4e</a></td></tr></tbody></table>\n\n<details>\n\n<summary>Wormhole Bridge Technical Details</summary>\n\nPHA is bridged from Ethereum to Base chain via [Wormhole](https://wormhole.com/) bridge. The bridged Wrapped ERC20 token is created by and managed by Wormhole on Base chain. The related smart contracts are audited as the other Wormhole bridged tokens.\n\n</details>", "mimetype": "text/plain", "start_char_idx": 3504, "end_char_idx": 4656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9df315af-4fcc-4b0f-9823-6c9718fef672": {"__data__": {"id_": "9df315af-4fcc-4b0f-9823-6c9718fef672", "embedding": null, "metadata": {"file_path": "./phala_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69b9a58f-709a-4415-9b0f-4a453d43dfd4", "node_type": "1", "metadata": {}, "hash": "2c0619b8997b820f3f9722394e5af4938bed7754febf2780e71903a912da5b5a", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: admin namespace\nsidebar_label: admin\nsidebar_position: 0\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### admin_addPeer\n\nAdds given node.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `enode`: *string*\n\n2. `addToStaticNodes`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_addPeer\",\n      \"params\": [enode, addToStaticNodes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nAdded node\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### admin_nodeInfo\n\nDisplays relevant information about this node.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69b9a58f-709a-4415-9b0f-4a453d43dfd4": {"__data__": {"id_": "69b9a58f-709a-4415-9b0f-4a453d43dfd4", "embedding": null, "metadata": {"file_path": "./phala_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9df315af-4fcc-4b0f-9823-6c9718fef672", "node_type": "1", "metadata": {}, "hash": "75f2e99859c903e909031980eceba37d1ca586005f0c3d38a9b79fc8aa38d581", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79c68ee6-a4d8-4345-9657-b3bfa06b100c", "node_type": "1", "metadata": {}, "hash": "7bb6730c89d5b06384ca69f27d53f2f45b37df7ece1f632804f973f254715a2b", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_nodeInfo\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nInformation about this node\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `enode`: *string*\n  - `id`: *string*\n  - `ip`: *string*\n  - `listenAddress`: *string*\n  - `name`: *string*\n  - `ports`: *object*\n    - `discovery`: *string* (hex integer)\n    - `listener`: *string* (hex integer)\n  - `protocols`: map of *object*\n    - `difficulty`: *string* (hex integer)\n    - `genesisHash`: *string* (hash)\n    - `headHash`: *string* (hash)\n    - `newtorkId`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### admin_peers\n\nDisplays a list of connected peers including information about them (`clientId`, `host`, `port`, `address`, `isBootnode`, `isStatic`, `enode`).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `includeDetails`: *boolean*", "mimetype": "text/plain", "start_char_idx": 815, "end_char_idx": 1912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79c68ee6-a4d8-4345-9657-b3bfa06b100c": {"__data__": {"id_": "79c68ee6-a4d8-4345-9657-b3bfa06b100c", "embedding": null, "metadata": {"file_path": "./phala_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69b9a58f-709a-4415-9b0f-4a453d43dfd4", "node_type": "1", "metadata": {}, "hash": "2c0619b8997b820f3f9722394e5af4938bed7754febf2780e71903a912da5b5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c27c4b4b-3d90-482c-a735-c23265a597b1", "node_type": "1", "metadata": {}, "hash": "26ddda8fb63a698d939c151c326d1ab0a84a06d14d6f81a6171e17381704b5f1", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_peers\",\n      \"params\": [includeDetails]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nList of connected peers including information\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `address`: *string*\n  - `clientId`: *string*\n  - `clientType`: *string*\n  - `enode`: *string*\n  - `ethDetails`: *string*\n  - `host`: *string*\n  - `isBootnode`: *boolean*\n  - `isStatic`: *boolean*\n  - `isTrusted`: *boolean*\n  - `lastSignal`: *string*\n  - `port`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### admin_prune\n\nRuns full pruning if enabled.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_prune\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *integer*\n\n</TabItem>\n</Tabs>\n\n### admin_removePeer\n\nRemoves given node.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `enode`: *string*\n\n2. `removeFromStaticNodes`: *boolean*", "mimetype": "text/plain", "start_char_idx": 1915, "end_char_idx": 3313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c27c4b4b-3d90-482c-a735-c23265a597b1": {"__data__": {"id_": "c27c4b4b-3d90-482c-a735-c23265a597b1", "embedding": null, "metadata": {"file_path": "./phala_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79c68ee6-a4d8-4345-9657-b3bfa06b100c", "node_type": "1", "metadata": {}, "hash": "7bb6730c89d5b06384ca69f27d53f2f45b37df7ece1f632804f973f254715a2b", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_removePeer\",\n      \"params\": [enode, removeFromStaticNodes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nRemoved node\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 3316, "end_char_idx": 3781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9de51b0e-2b4b-41a0-a590-fcfc2eed9ee7": {"__data__": {"id_": "9de51b0e-2b4b-41a0-a590-fcfc2eed9ee7", "embedding": null, "metadata": {"file_path": "./phala_dist/unit-tests.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f2cf57d2-dc27-4f54-92ab-b82692befbd0", "node_type": "4", "metadata": {}, "hash": "932eb6285346964faed785b8b557a9f397e6210f7a3295d2dca189e31b2dfa5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4568811-c3f2-4ce1-aafb-c45e83f874a7", "node_type": "1", "metadata": {}, "hash": "ed7605b8f74e2010574fe87707439b87befa01af5bbd285aa3096baf8730045c", "class_name": "RelatedNodeInfo"}}, "text": "# Unit Tests\n\nBefore you deploy your contract to our Testnet or release it on mainnet, a thorough local unit test can help you fix most of the bugs.\n\n## Unit test Basics <a href=\"#unit-test-basics\" id=\"unit-test-basics\"></a>\n\nLet\u2019s take the unit test in our Phat Hello World as an example:\n\n```\n/// Unit tests in Rust are normally defined within such a `#[cfg(test)]`\n/// module and test functions are marked with a `#[test]` attribute.\n/// The below code is technically just normal Rust code.\n#[cfg(test)]\nmod tests {\n    /// Imports all the definitions from the outer scope so we can use them here.\n    use super::*;\n    /// Imports `ink_lang` so we can use `#[ink::test]`.\n    use ink_lang as ink;\n\n    /// We test a simple use case of our contract.\n    #[ink::test]\n    fn it_works() {\n        // when your contract is really deployed, the Phala Worker will do the HTTP requests\n        // mock is needed for local test\n        pink_extension_runtime::mock_ext::mock_all_ext();\n\n        let phat_hello = PhatHello::new();\n        let account = String::from(\"0xD0fE316B9f01A3b5fd6790F88C2D53739F80B464\");\n        let res = phat_hello.get_eth_balance(account.clone());\n        assert!(res.is_ok());\n\n        // run with `cargo +nightly test -- --nocapture` to see the following output\n        println!(\"Account {} gets {} Wei\", account, res.unwrap());\n    }\n}\n```\n\nA Phat Contract unit test makes little difference compared with normal Rust programs. It is labeled by `#`\\[cfg(test)]`, and you just write each test as a function headed by` #\\[ink::test]\\`.\n\nYou can easily create a new contract instance in a unit test by calling its constructor (e.g. `PhatHello::new()`). Then you can call any functions (no matter query/transaction handlers) in that contract directly.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1772, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4568811-c3f2-4ce1-aafb-c45e83f874a7": {"__data__": {"id_": "c4568811-c3f2-4ce1-aafb-c45e83f874a7", "embedding": null, "metadata": {"file_path": "./phala_dist/unit-tests.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f2cf57d2-dc27-4f54-92ab-b82692befbd0", "node_type": "4", "metadata": {}, "hash": "932eb6285346964faed785b8b557a9f397e6210f7a3295d2dca189e31b2dfa5a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9de51b0e-2b4b-41a0-a590-fcfc2eed9ee7", "node_type": "1", "metadata": {}, "hash": "a1b7040a3b4c92ac434b600322199f7c4390dc84e57759ef9ef9efc3c2938982", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f27f7ca4-a396-4330-aea7-a7617c579e2c", "node_type": "1", "metadata": {}, "hash": "9b53e914679b5dd51acbf0185364301882de02fa2b98426e843c51761098f8aa", "class_name": "RelatedNodeInfo"}}, "text": "### Setup Context of Blockchain <a href=\"#setup-context-of-blockchain\" id=\"setup-context-of-blockchain\"></a>\n\nThe [ink](https://ink.substrate.io/basics/contract-testing/) crate contains all the functions to set up the blockchain calling context like the caller of the contract functions, the balance of a certain account, etc.\n\nWe recommend reading the [ink](https://ink.substrate.io/basics/contract-testing/)! official document]\\(https://ink.substrate.io/basics/contract-testing/) to learn about its basic usage. And you can refer to the unit tests in [ink! Examples](https://github.com/paritytech/ink/tree/master/examples) to find useful pieces.\n\nAlso, we prepare a cheat sheet for you here:\n\n```\n// this gives you the default test accounts [alice, bob, charlie, django, eve, frank]\nlet accounts = ink::env::test::default_accounts::<ink::env::DefaultEnvironment>();\n\nlet phat_hello = PhatHello::new();\n\n// control the caller of the contract\n\n// by default, the caller is `accounts.alice`\nlet account = String::from(\"0xD0fE316B9f01A3b5fd6790F88C2D53739F80B464\");\nlet res = phat_hello.get_eth_balance(account.clone());\nassert!(res.is_ok());\n\n// 1. get contract address\nlet contract = ink::env::account_id::<ink::env::DefaultEnvironment>();\n// 2. set caller to bob and callee to the contract\nink::env::test::set_callee::<ink::env::DefaultEnvironment>(contract);\nink::env::test::set_caller::<ink::env::DefaultEnvironment>(accounts.bob);\n// now the caller will be `accounts.bob`\nlet res = phat_hello.get_eth_balance(account.clone());\nassert!(res.is_ok());\n```\n\n## Mock Pink Extension Functions <a href=\"#mock-pink-extension-functions\" id=\"mock-pink-extension-functions\"></a>\n\nBy default, the functions in pink-extension are delegated to the runtime for real execution, thus your unit test can fail if your functions include any invoke to these functions.\n\nIn the example above, that\u2019s why we call\n\n```\npink_extension_runtime::mock_ext::mock_all_ext();\n```\n\nbefore we really call the contract functions.", "mimetype": "text/plain", "start_char_idx": 1774, "end_char_idx": 3773, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f27f7ca4-a396-4330-aea7-a7617c579e2c": {"__data__": {"id_": "f27f7ca4-a396-4330-aea7-a7617c579e2c", "embedding": null, "metadata": {"file_path": "./phala_dist/unit-tests.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f2cf57d2-dc27-4f54-92ab-b82692befbd0", "node_type": "4", "metadata": {}, "hash": "932eb6285346964faed785b8b557a9f397e6210f7a3295d2dca189e31b2dfa5a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c4568811-c3f2-4ce1-aafb-c45e83f874a7", "node_type": "1", "metadata": {}, "hash": "ed7605b8f74e2010574fe87707439b87befa01af5bbd285aa3096baf8730045c", "class_name": "RelatedNodeInfo"}}, "text": "`mock_all_ext()` will redirect all the runtime requests to your local machine. For example, after that is called, `phat_hello.get_eth_balance()` will send an HTTP request from your computer to read the Ethereum balance from Etherscan.\n\nSometimes, you do not want the contract to really send the HTTP request / generate a random number, instead, you want it to use the pre-defined values. In such cases, you can use the code example below:\n\n```\nuse pink_extension::chain_extension::{mock, HttpResponse};\n\nmock::mock_http_request(|request| {\n    if request.url == \"https://localhost\" {\n        HttpResponse::ok(b\"user-controlled response\".to_vec())\n    } else {\n        HttpResponse::not_found()\n    }\n});\n\n// a not-that-random generator\nmock::mock_getrandom(|length| {\n    vec![0u8; length as usize]\n})\n```", "mimetype": "text/plain", "start_char_idx": 3774, "end_char_idx": 4579, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e7cb53d-f8c3-4d61-8a73-f0882ade9373": {"__data__": {"id_": "5e7cb53d-f8c3-4d61-8a73-f0882ade9373", "embedding": null, "metadata": {"file_path": "./phala_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6173ac81-8653-40d3-8410-9c0f1264378b", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60011d1a-4c21-4b2f-a856-adc4c1097727", "node_type": "1", "metadata": {}, "hash": "9f13f51e4c63fa7009d5b5d52621f91271e2be93c53383e3ba0a1c39aad4732d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Performance tuning\nsidebar_position: 7\n---\n\nBy default, Nethermind is configured for general use cases that fit well for most users. However, to improve various aspects of Nethermind performance, there are options for different subsystems that can be configured for your specific needs.\n\n## Peer discovery\n\nTo connect to the Ethereum network, Nethermind needs to maintain connections to other clients. The number of connections can be configured with `--Network.MaxActivePeers <value>`. The default value depends on the network. Increasing this number may reduce syncing time, while reducing this number may help with attestation performance.\nAlso, you can increase the rate at which a new connection is established with `--Network.MaxOutgoingConnectPerSec <value>`. The default value is 20 while 50 would be a reasonable higher value. This tends to reduce the snap sync time; however, some ISPs may throttle your Internet connection if you set this value too high. Also, some WiFi routers may hang if the value is set too high.\n\n## Port forwarding\n\nWhile port forwarding is not strictly required, it helps significantly with finding peers and is essential for the network's overall health. The exact steps for port forwarding highly depend on your environment, router, and ISP. For most home configurations, automatic port forwarding can be turned on with `--Network.EnableUPnP true`. \nSome ISPs are more restrictive and do not support port forwarding and/or utilize provider-level NAT. In such cases, your best option is to use a VPN that supports port forwarding. Keep in mind that consensus clients need a separate port forwarding.\n\n## Sync time\n\nOn the Ethereum mainnet, most of the syncing time is split into three phases: snap sync, old bodies, and old receipts. Strictly speaking, there are also fast sync, full sync, and state sync phases. However, they usually complete in less than a minute, with state sync usually taking up to 3 minutes.\n\nAt the moment, the best test case sync time is 1 hour 50 minutes for all phases with the following configuration:\n\n- CPU: AMD Ryzen 9 7950X\n- Memory: 128GB RAM\n- Storage: Intel Optane SSD 905P Series 900GB\n- Network: 1 Gbps Internet with TorGuard VPN with WireGuard protocol.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60011d1a-4c21-4b2f-a856-adc4c1097727": {"__data__": {"id_": "60011d1a-4c21-4b2f-a856-adc4c1097727", "embedding": null, "metadata": {"file_path": "./phala_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6173ac81-8653-40d3-8410-9c0f1264378b", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e7cb53d-f8c3-4d61-8a73-f0882ade9373", "node_type": "1", "metadata": {}, "hash": "78aa4b2d7e01548b8c819d4c2b3883807d083bdc69c0c6d983729e1bf08b4bcd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "586bf52e-95cd-4c1b-9ac3-09a5ce742031", "node_type": "1", "metadata": {}, "hash": "3a7c4ef33985d69f6735acdfec2e3c62fe4bddd2e4c1c2ab34625ef0888f4371", "class_name": "RelatedNodeInfo"}}, "text": "Both execution and consensus clients port forwarding are set up manually.\n- Command line options:\n\n    ```\n    --Network.EnableUPnP true\n    --Network.MaxOutgoingConnectPerSec 50\n    --Network.ProcessingThreadCount 32\n    --Sync.TuneDbMode HeavyWrite\n    ```\n\n## Snap sync\n\nSnap sync is the process of downloading the Ethereum state tree. After it is complete, and after the state sync phase, Nethermind can process and follow the chain. The fastest tested snap sync and state sync time is 25 minutes.\nThis phase is the most I/O-intensive sync phase, and therefore, assuming a fast internet, the sync time highly depends on your SSD's write speed. Remember that most SSDs only advertise peak write speed, usually above 5GB/s. However, they tend to slow down significantly to around 0.5GB/s (or even less for a QLC SSD) after a few seconds. Therefore, look for SSDs with high sustained write speed.\n\nAlso, ensuring your SSD is sufficiently cooled to prevent thermal throttling is essential. This is often overlooked as most workloads rarely stress SSD as much; however, to reduce sync time, Nethermind will utilize your SSD to its limit. If, for whatever reason, you need to minimize the I/O load, you can specify a rate limit with `--Db.MaxBytesPerSec 1000000000`.\n\nNethermind temporarily changes the database configuration during sync to optimize it for writing, notably the option `--Sync.TuneDbMode HeavyWrite` is turned on by default. On some systems with slow SSDs, the use of the option `--Sync.TuneDbMode AggressiveHeavyWrite` may boost. Also, the option `--Sync.TuneDbMode DisableCompaction` can be used to disable compaction altogether. This is likely faster for systems using entry-level NVMe SSDs and is also useful to extend the lifespan of your SSD as it provides the lowest total writes possible. However, it uses about 3GB of extra memory during snap sync. The state sync phase may appear to hang for about 10 minutes as the whole database compacts for the first time after snap sync.", "mimetype": "text/plain", "start_char_idx": 2239, "end_char_idx": 4238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "586bf52e-95cd-4c1b-9ac3-09a5ce742031": {"__data__": {"id_": "586bf52e-95cd-4c1b-9ac3-09a5ce742031", "embedding": null, "metadata": {"file_path": "./phala_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6173ac81-8653-40d3-8410-9c0f1264378b", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60011d1a-4c21-4b2f-a856-adc4c1097727", "node_type": "1", "metadata": {}, "hash": "9f13f51e4c63fa7009d5b5d52621f91271e2be93c53383e3ba0a1c39aad4732d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e995efe2-854f-4b9e-8660-515b059c1d50", "node_type": "1", "metadata": {}, "hash": "248db730516d5585a09de2cabe23edb697841506589271e4481669ee2322eed8", "class_name": "RelatedNodeInfo"}}, "text": "If you are running on a VPS with artificially capped IOPS, or you are using SATA SSD (which is highly not recommended), increasing the state DB block size with `--Db.StateDbBlockSize 16384` may help to reduce snap sync time. However, this negatively affects block processing time. An alternative is to turn on compaction readahead with `--Db.CompactionReadAhead 128000`; however, this may take up a few extra GB of memory depending on the readahead value.\n\n## Old bodies and receipts\n\nOld bodies and old receipts are the process of downloading block bodies and receipts. This is required for some RPC methods, such as `eth_getLogs`, and for consensus clients to work correctly. If you don't need them, skip this phase with\n\n```\n--Sync.DownloadBodiesInFastSync false\n--Sync.DownloadReceiptsInFastSync false\n--Sync.NonValidatorNode true\n```\n\nOld bodies and receipts are mainly limited by your Internet connection. With a 1Gbps connection, they consume around 250MB/s and 500MB/s of writes, respectively, which is generally reasonable for most PCIE SSDs. On older systems or VPS with low single thread performance and high Internet speed, the block body deserialization may be a bottleneck, in which case, you can increase the number of network processing threads with `--Network.ProcessingThreadCount 32`. However, this may impact block processing time.\n\n## Block processing time and attestation\n\nBlock processing time is limited mainly by SSD performance. Strictly speaking, it's not the IOPS that matters, but the response time. Nevertheless, the IOPS is a good approximation as most SSDs don't advertise the response time.\nTo help further reduce reads from SSD, Nethermind has multiple levels of caching, which is tuned by the memory hint option `--Init.MemoryHint 2000000000`. If you are running a system with more than 16GB of memory, it is highly recommended to increase this value. In-memory pruning (turned on by default) also improves block processing time.\n\nIt is also possible to disable compression of the state DB with `--Db.StateDbDisableCompression true` that improves block processing time by 3% to 5% but increases disk space usage correspondingly. Block processing is susceptible to the number of peers connected.", "mimetype": "text/plain", "start_char_idx": 4240, "end_char_idx": 6469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e995efe2-854f-4b9e-8660-515b059c1d50": {"__data__": {"id_": "e995efe2-854f-4b9e-8660-515b059c1d50", "embedding": null, "metadata": {"file_path": "./phala_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6173ac81-8653-40d3-8410-9c0f1264378b", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "586bf52e-95cd-4c1b-9ac3-09a5ce742031", "node_type": "1", "metadata": {}, "hash": "3a7c4ef33985d69f6735acdfec2e3c62fe4bddd2e4c1c2ab34625ef0888f4371", "class_name": "RelatedNodeInfo"}}, "text": "Therefore, after the node is synced, it makes sense to reduce the number of peers with `--Network.MaxActivePeers 20`.", "mimetype": "text/plain", "start_char_idx": 6470, "end_char_idx": 6587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fe8ad53-052b-463d-a543-644d7680e11a": {"__data__": {"id_": "1fe8ad53-052b-463d-a543-644d7680e11a", "embedding": null, "metadata": {"file_path": "./phala_dist/delegate-to-stakepool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4", "node_type": "4", "metadata": {}, "hash": "c001f56a0075e9af14c7741fa1417ada80d46964d07a5f005b86f09249b01e9a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4b51ccb-dd4b-4b9a-8df6-3c337888349e", "node_type": "1", "metadata": {}, "hash": "72ee8789fd3204b04c7befef90473762911db242f6a561a22f92d6689727c1d4", "class_name": "RelatedNodeInfo"}}, "text": "# Delegate to StakePool\n\n### Why is Delegation needed? <a href=\"#why-is-delegation-needed\" id=\"why-is-delegation-needed\"></a>\n\nDelegation is the name of the \u201cStake to Earn\u201d mechanism on the Phala and Khala Network. Staking is currently enabled on both Phala Network and Khala Network.\n\n* Compute cannot simply be added to the network on its own. To ensure a secure and stable environment, \u201cProof of Stake\u201d is used. Each worker on the network must be staked with some PHA, which is put at risk, in order to incentivize good behavior.\n* Compute providers and those wishing to provide stake do not have to be the same people. To improve flexibility and efficiency, Phala provides a delegation mechanism that allows delegators to stake to workers they do not control and earn rewards.\n* This mechanism is enabled by a feature we call the StakePool.\n* Overall Delegation incentivizes high-quality compute providers to generate consistent and reliable rewards for their delegators. This in turn ensures the stability of the compute provided.\n* For even more accessibility there is another major feature called Vault. This allows delegators to pass the management of their delegation to individual StakePools to someone else. These Vault operators, for a small fee, bring further efficiency to the ecosystem by driving delegations to the best compute providers. You can read more about Vault here.\n\n## Delegation Mechanism <a href=\"#delegation-mechanism\" id=\"delegation-mechanism\"></a>\n\n### Glossary <a href=\"#glossary\" id=\"glossary\"></a>\n\n<table><thead><tr><th width=\"197.33333333333331\"></th><th width=\"373\">Meaning</th><th>Type</th></tr></thead><tbody><tr><td><strong>Delegator</strong></td><td>Delegates PHA to <strong>StakePools</strong> or <strong>Vaults</strong></td><td>On-chain Account</td></tr><tr><td><strong>StakePool</strong></td><td>Created and managed by the <strong>StakePool Owner</strong>. Delegators put PHA into these.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4b51ccb-dd4b-4b9a-8df6-3c337888349e": {"__data__": {"id_": "c4b51ccb-dd4b-4b9a-8df6-3c337888349e", "embedding": null, "metadata": {"file_path": "./phala_dist/delegate-to-stakepool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4", "node_type": "4", "metadata": {}, "hash": "c001f56a0075e9af14c7741fa1417ada80d46964d07a5f005b86f09249b01e9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1fe8ad53-052b-463d-a543-644d7680e11a", "node_type": "1", "metadata": {}, "hash": "a0fba784fbffe130273d9a146e0ec6bd81baf66e58fbe5cfbe5b69ac03cd098f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b431e031-548f-497a-9ea5-9093cdbff35a", "node_type": "1", "metadata": {}, "hash": "275f27e1bc2045f3829ea3e5b551f9f7d7029c5b7ca1fe045f896c7b4ac0b922", "class_name": "RelatedNodeInfo"}}, "text": "Delegated tokens can only be used for staking.</td><td>On-chain Object</td></tr><tr><td><strong>StakePool Owner</strong></td><td>The account that controls the <strong>StakePool</strong>. Ownership is non-transferable.</td><td>On-chain Account</td></tr><tr><td><strong>Worker</strong></td><td>The <strong>StakePool Owner</strong> uses delegated funds to stake to a number of workers and therefore provide compute to the network. A worker can only belong to a single StakePool at any one time. The rewards generated will be distributed to the owner and the delegators based on the <strong>StakePool</strong> and <strong>Vault</strong> commissions. The mechanism is detailed below.</td><td>Physical Machine</td></tr><tr><td><strong>Vault</strong></td><td>Created and managed by the <strong>Vault Owner</strong>. Delegators put PHA into these. Delegated tokens can only be used for staking. The <strong>Vault Owner</strong> manages the delegations to specific StakePools, allowing delegation by proxy.</td><td>On-chain Object</td></tr><tr><td><strong>Vault Owner</strong></td><td>The account that controls the <strong>Vault</strong>. Ownership is non-transferable.</td><td>On-chain Account</td></tr></tbody></table>\n\n### How It Works <a href=\"#how-it-works\" id=\"how-it-works\"></a>\n\n![](https://i.imgur.com/yMXCTbA.png)\n\n### **Lifecycle**\n\n**1. Delegation**\n\nPHA holders delegate tokens into a StakePool or a Vault.\n\n**2. Vault distributes (Optional)**\n\nThe owner of the Vault chooses high-quality StakePools to delegate to on behalf of their delegators.\n\n**3. Workers staked and started**\n\nThe owners of individual StakePools use the delegations provided to stake and start workers and so provide computing power to the network. Over time stable and well-behaved Workers generate rewards.\n\n**4. Rewards distributed**\n\nBased on the StakePool\u2019s commission rewards earned by Workers are distributed to the owner and the delegators.", "mimetype": "text/plain", "start_char_idx": 1932, "end_char_idx": 3856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b431e031-548f-497a-9ea5-9093cdbff35a": {"__data__": {"id_": "b431e031-548f-497a-9ea5-9093cdbff35a", "embedding": null, "metadata": {"file_path": "./phala_dist/delegate-to-stakepool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4", "node_type": "4", "metadata": {}, "hash": "c001f56a0075e9af14c7741fa1417ada80d46964d07a5f005b86f09249b01e9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c4b51ccb-dd4b-4b9a-8df6-3c337888349e", "node_type": "1", "metadata": {}, "hash": "72ee8789fd3204b04c7befef90473762911db242f6a561a22f92d6689727c1d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "daebb235-ec0a-452e-bd3d-c706fee59a57", "node_type": "1", "metadata": {}, "hash": "a27566edcf9f8565a75953f934f47466f802eb52c9e229dd147917113a0909a0", "class_name": "RelatedNodeInfo"}}, "text": "Owner rewards can be claimed into the owner\u2019s account directly while Delegator rewards will automatically be reinvested into the StakePool. Those delegators using Vault pay a further commission for Vault\u2019s management services.\n\n#### Delegation represented as an NFT <a href=\"#delegation-represented-as-an-nft\" id=\"delegation-represented-as-an-nft\"></a>\n\nAfter you delegate to a StakePool, your tokens will be transferred and locked. As proof of the delegation, you receive a Delegation NFT in return. The Delegation NFT records its owner, the StakePool where the delegation is located, and the share of the corresponding StakePool.\n\nYour Delegation NFT is transferable, and you can also sell it to others on PhalaWorld\u2019s NFT platform.\n\n> **NOTE** When your Delegation NFT is transferred or sold to someone else, the delegated PHA will no longer belong to you, because you have lost the certificate to withdraw it back from the corresponding StakePool or Vault.\n\n### Rewards <a href=\"#rewards\" id=\"rewards\"></a>\n\nThe moment you delegate, you immediately start to earn rewards.\n\nAll staked and started workers are rewarded for providing computing power. Every time rewards are distributed 20% goes to the treasury. The remaining 80% is distributed amongst the Vault Owners (optional), StakePool Owners, and delegators. Once the commissions are paid the rewards will be divided equally based on the number of delegations from each delegator. (Please refer to [Gemini Tokenomics](../../../compute-providers/basic-info/worker-rewards.md) for specific reward details)\n\nThe delegator rewards distributed each time will be automatically reinvested.\n\nThe APR of the pool which is shown on the Phala App is a real-time estimate. The APR calculation is based solely on the delegator\u2019s income, after the pool owner\u2019s commission has been taken.\n\n### How to choose a high-quality StakePool <a href=\"#how-to-choose-a-high-quality-stakepool\" id=\"how-to-choose-a-high-quality-stakepool\"></a>\n\nYou can find the historical data performance of the StakePool on the pool details page of the Phala App. The common methods for choosing the StakePools are:\n\n1. Check the historical APR trend performance of the StakePool.", "mimetype": "text/plain", "start_char_idx": 3857, "end_char_idx": 6054, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "daebb235-ec0a-452e-bd3d-c706fee59a57": {"__data__": {"id_": "daebb235-ec0a-452e-bd3d-c706fee59a57", "embedding": null, "metadata": {"file_path": "./phala_dist/delegate-to-stakepool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4", "node_type": "4", "metadata": {}, "hash": "c001f56a0075e9af14c7741fa1417ada80d46964d07a5f005b86f09249b01e9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b431e031-548f-497a-9ea5-9093cdbff35a", "node_type": "1", "metadata": {}, "hash": "275f27e1bc2045f3829ea3e5b551f9f7d7029c5b7ca1fe045f896c7b4ac0b922", "class_name": "RelatedNodeInfo"}}, "text": "The historical APR of a high-quality StakePool must be stable enough.\n2. Check the number of workers in the StakePool, and check the status trend of the workers. Generally, the larger the StakePool, the better the operation and maintenance level of the pool owner, and the better the stability of the mining pool. Historical data will prove that.\n3. Take the initiative to contact the StakePool owner. Contact will be shown on the pool detailed page. The friendly pool owner will be happy to talk with you and guide you on how to delegate to his StakePool.\n\n> Note, please don\u2019t be too obsessed with the Pool APR, there are often evil pool owners who only rely on lowering their commission to achieve a high APR, but this will not be sustainable, please be sure to observe the historical trend of APR!\n\nAfter you have selected the pool and delegated, please also be sure to check the performance of the StakePool regularly. Contact the pool owner when the performance of the pool does not go well.\n\nIf you find these methods are too hard for you or you want to check constantly to see if your delegation continues to turn out well. Try to delegate to **Vault**.\n\n**Vault is always a simpler and more friendly delegation method.** Click [here](whats-vault.md) to learn more about Vault.\n\n## Things to consider before delegating <a href=\"#things-to-consider-before-delegating\" id=\"things-to-consider-before-delegating\"></a>\n\nThis section is a short summary of some of the risks related to delegating PHA. Although delegation is non-custodial there are still situations that delegators should know about before committing to delegating to a StakePool or Vault.\n\n* At present, Slashing is not yet enabled on the Khala Network, however, it will be at some point in the future. For now, you can always get back as much PHA as you delegate. Once Slashing is enabled this will no longer be guaranteed.\n* It may take up to 14 days to withdraw your PHA from a Vault or StakePool.\n* The actual rewards obtained may not be as high as the APR shown at the time of delegation. Current performance does not predict future returns.", "mimetype": "text/plain", "start_char_idx": 6055, "end_char_idx": 8170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1ecbc54-9701-4a6a-8880-4982726e4279": {"__data__": {"id_": "c1ecbc54-9701-4a6a-8880-4982726e4279", "embedding": null, "metadata": {"file_path": "./phala_dist/confidence-level-and-sgx-function.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58", "node_type": "4", "metadata": {}, "hash": "1ec2b4e254f4bf0c91acffdf854919db30a8c1a07b51a50fc3f78cf38d12ec22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c1c9944-4b46-4e99-aabc-11c468dbb02c", "node_type": "1", "metadata": {}, "hash": "31ebe49ffa511f58ba631931f56cf4ab641d4398367ecd1e8564caf5ad144070", "class_name": "RelatedNodeInfo"}}, "text": "# Confidence Level & SGX Function\n\n### Test your Intel\u00ae SGX Capability\n\nThe confidence level impacts your worker\u2019s score. Before configuring your worker, the necessary drivers are required, and the `sgx-test` option determines your Intel\u00ae SGX Capability alongside the confidence level.\n\n```bash\nsudo docker pull phalanetwork/phala-sgx_detect\nsudo docker run -it --network host --device /dev/sgx_enclave --device /dev/sgx_provision  --device /dev/sgx_enclave:/dev/sgx/enclave --device /dev/sgx_provision:/dev/sgx/provision  phalanetwork/phala-sgx_detect\n```\n\n> This command need to install \ud83d\udc33 Docker, the required Intel\u00ae SGX drivers, and pull all the necessary Docker images for your Phala worker \ud83e\udea8\u26cf\ufe0f.\n>\n> * Please follow the instruction during installation.\n\nInformation about the checks conducted during execution of the command:\n\n1. SGX system software \u2192 Able to launch enclaves \u2192 `Production Mode`\n2. Flexible launch control \u2192 `Able to launch production mode enclave`\n3. `isvEnclaveQuoteStatus` and `advisoryIDs` (explained in the next section)\n\nAmong them, **the first one is a must to run Phala Network pRuntime**. If it\u2019s not supported (tagged as \u2718 in the report example below), we are afraid you can\u2019t contribute computing power with this setup. You may need to replace the motherboard and/or the CPU.\n\nThe latter two is not a must, though it is suggested to be checked as it would be essential to install the DCAP driver.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1428, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c1c9944-4b46-4e99-aabc-11c468dbb02c": {"__data__": {"id_": "5c1c9944-4b46-4e99-aabc-11c468dbb02c", "embedding": null, "metadata": {"file_path": "./phala_dist/confidence-level-and-sgx-function.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58", "node_type": "4", "metadata": {}, "hash": "1ec2b4e254f4bf0c91acffdf854919db30a8c1a07b51a50fc3f78cf38d12ec22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1ecbc54-9701-4a6a-8880-4982726e4279", "node_type": "1", "metadata": {}, "hash": "5aba6c4e0f438ae2ce815bf98b3429fcd1234003865849e7ef0ec86703ba0482", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c38f3b4a-f968-4e56-96f1-d971f815db1b", "node_type": "1", "metadata": {}, "hash": "bc37605eba9b3b7db6c5ca0ee22c00c67cff37271dbd004a91acfd2b6800eb6c", "class_name": "RelatedNodeInfo"}}, "text": "The example below shows a positive result:\n\n```txt\nDetecting SGX, this may take a minute...\n\u2714  SGX instruction set\n  \u2714  CPU support\n  \u2714  CPU configuration\n  \u2714  Enclave attributes\n  \u2714  Enclave Page Cache\n  SGX features\n    \u2714  SGX2  \u2714  EXINFO  \u2718  ENCLV  \u2718  OVERSUB  \u2718  KSS\n    Total EPC size: 94.0MiB\n\u2714  Flexible launch control\n  \u2714  CPU support\n  \uff1f CPU configuration\n  \u2714  Able to launch production mode enclave\n\u2714  SGX system software\n  \u2714  SGX kernel device (/dev/sgx/enclave)\n  \u2714  libsgx_enclave_common\n  \u2714  AESM service\n  \u2714  Able to launch enclaves\n    \u2714  Debug mode\n    \u2714  Production mode\n    \u2714  Production mode (Intel whitelisted)\n\nYou are all set to start running SGX programs!\nGenerated machine id:\n[162, 154, 220, 15, 163, 137, 184, 233, 251, 203, 145, 36, 214, 55, 32, 54]\n\nTesting RA.\naesm_service[15]: [ADMIN]EPID Provisioning initiated\naesm_service[15]: The Request ID is 09a2bed647d24f909d4a3990f8e28b4a\naesm_service[15]: The Request ID is 8d1aa4104b304e12b7312fce06881260\naesm_service[15]: [ADMIN]EPID Provisioning successful\nisvEnclaveQuoteStatus = GROUP_OUT_OF_DATE\nplatform_info_blob { sgx_epid_group_flags: 4, sgx_tcb_evaluation_flags: 2304, pse_evaluation_flags: 0, latest_equivalent_tcb_psvn: [15, 15, 2, 4, 1, 128, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], latest_pse_isvsvn: [0, 11], latest_psda_svn: [0, 0, 0, 2],", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c38f3b4a-f968-4e56-96f1-d971f815db1b": {"__data__": {"id_": "c38f3b4a-f968-4e56-96f1-d971f815db1b", "embedding": null, "metadata": {"file_path": "./phala_dist/confidence-level-and-sgx-function.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58", "node_type": "4", "metadata": {}, "hash": "1ec2b4e254f4bf0c91acffdf854919db30a8c1a07b51a50fc3f78cf38d12ec22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c1c9944-4b46-4e99-aabc-11c468dbb02c", "node_type": "1", "metadata": {}, "hash": "31ebe49ffa511f58ba631931f56cf4ab641d4398367ecd1e8564caf5ad144070", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22af4029-d9b2-42c0-bb39-033689d57475", "node_type": "1", "metadata": {}, "hash": "eefaade405c7aded25a62d1892ff5ad1ab34725080ac37b51227674316adcdf1", "class_name": "RelatedNodeInfo"}}, "text": "xeid: 0, gid: 2919956480, signature: sgx_ec256_signature_t { gx: [99, 239, 225, 171, 96, 219, 216, 210, 246, 211, 20, 101, 254, 193, 246, 66, 170, 40, 255, 197, 80, 203, 17, 34, 164, 2, 127, 95, 41, 79, 233, 58], gy: [141, 126, 227, 92, 128, 3, 10, 32, 239, 92, 240, 58, 94, 167, 203, 150, 166, 168, 180, 191, 126, 196, 107, 132, 19, 84, 217, 14, 124, 14, 245, 179] } }\nadvisoryURL = https://security-center.intel.com\nadvisoryIDs = \"INTEL-SA-00219\", \"INTEL-SA-00289\", \"INTEL-SA-00320\", \"INTEL-SA-00329\"\nconfidenceLevel = 5\n```\n\nIf you can not run Phala pRuntime with both of them tagged as \u2714, you may have to check whether your BIOS is the latest version with latest security patches. If you still can\u2019t run Phala pRuntime docker with the latest BIOS of your motherboard manufacturer, we are afraid you can\u2019t contribute computing power for now with this motherboard.\n\nYour confidence level, referred to as the \u201cTier\u201d in the table below, will appear in the last line of the report after executing `sudo phala sgx-test`.", "mimetype": "text/plain", "start_char_idx": 2761, "end_char_idx": 3779, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22af4029-d9b2-42c0-bb39-033689d57475": {"__data__": {"id_": "22af4029-d9b2-42c0-bb39-033689d57475", "embedding": null, "metadata": {"file_path": "./phala_dist/confidence-level-and-sgx-function.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58", "node_type": "4", "metadata": {}, "hash": "1ec2b4e254f4bf0c91acffdf854919db30a8c1a07b51a50fc3f78cf38d12ec22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c38f3b4a-f968-4e56-96f1-d971f815db1b", "node_type": "1", "metadata": {}, "hash": "bc37605eba9b3b7db6c5ca0ee22c00c67cff37271dbd004a91acfd2b6800eb6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7e0a5d5f-6756-47d9-ab1c-f50a6ca512fd", "node_type": "1", "metadata": {}, "hash": "3f3e0a7fb2de7b802f44f036c90db2dc3a603f9d12c23f7dc2a6b33a7429e7e3", "class_name": "RelatedNodeInfo"}}, "text": "### Confidence Level of a Worker\n\n| Level  | isvEnclaveQuoteStatus                                            | advisoryIDs               |\n| ------ | ---------------------------------------------------------------- | ------------------------- |\n| Tier 1 | OK                                                               | None                      |\n| Tier 2 | SW\\_HARDENING\\_NEEDED                                            | None                      |\n| Tier 3 | CONFIGURATION\\_NEEDED, CONFIGURATION\\_AND\\_SW\\_HARDENING\\_NEEDED | Whitelisted\\*             |\n| Tier 4 | CONFIGURATION\\_NEEDED, CONFIGURATION\\_AND\\_SW\\_HARDENING\\_NEEDED | Some beyond the whitelist |\n| Tier 5 | GROUP\\_OUT\\_OF\\_DATE                                             | Any value                 |\n\nThe confidence level measures how secure the SGX Enclave execution environment is. It\u2019s determined by the Remote Attestation report from Intel. Among them, `isvEnclaveQuoteStatus` indicates if the platform is vulnerable to some known problems, and `advisoryIDs` indicates the actual affected problems.\n\nNot all the `advisoryIDs` are problematic. Some advisories doesn\u2019t affect Phala\u2019s security assumption, and therefore are whitelisted:\n\n* INTEL-SA-00219\n* INTEL-SA-00334\n* INTEL-SA-00381\n* INTEL-SA-00389\n\nTier 1, 2, 3 are considered with the best security level because they are either not affected by any known vulnerability, or the adversary is known trivial. It\u2019s good to run highest valuable apps on these workers, for instance:\n\n* Financial apps: privacy-preserving DEX, DeFi ,etc\n* Secret key management: wallet, node KMS, password manager\n* Phala Gatekeeper\n\nTier 4, 5 are considered with reduced security, because these machines requires some configuration fix in the BIOS or BIOS firmware (CONFIGURATION\\_NEEDED, CONFIGURATION\\_AND\\_SW\\_HARDENING\\_NEEDED), or their microcode or the corresponding BIOS firmware are out-of-date (GROUP\\_OUT\\_OF\\_DATE). Therefore we cannot assume the platform is suitable for highest security scenarios. However it\u2019s still good to run batch processing jobs, apps dealing with ephemeral privacy data, and traditional blockchain apps:\n\n* Data analysis jobs (e.g.", "mimetype": "text/plain", "start_char_idx": 3781, "end_char_idx": 5960, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e0a5d5f-6756-47d9-ab1c-f50a6ca512fd": {"__data__": {"id_": "7e0a5d5f-6756-47d9-ab1c-f50a6ca512fd", "embedding": null, "metadata": {"file_path": "./phala_dist/confidence-level-and-sgx-function.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58", "node_type": "4", "metadata": {}, "hash": "1ec2b4e254f4bf0c91acffdf854919db30a8c1a07b51a50fc3f78cf38d12ec22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "22af4029-d9b2-42c0-bb39-033689d57475", "node_type": "1", "metadata": {}, "hash": "eefaade405c7aded25a62d1892ff5ad1ab34725080ac37b51227674316adcdf1", "class_name": "RelatedNodeInfo"}}, "text": "Web3 Analytics)\n* On-chain PvP games\n* VPN\n* Web2.0 apps\n* Blockchain Oracle\n* DApps\n\nOnce Phala is open for developers to deploy their apps, there will be an option for them to choose which tiers they will accept. Since Tier 1, 2, 3 have better security, they can potentially get higher chance to win the confidential contract assignment. However, Tier 4, 5 are useful in other use cases, and therefore can be a more economic choice for the developers.\n\nIf your worker is in tier 4 or 5, please check the FAQ page for potential fixes.", "mimetype": "text/plain", "start_char_idx": 5961, "end_char_idx": 6496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1825fa1e-229a-4332-930b-b8094cbda62b": {"__data__": {"id_": "1825fa1e-229a-4332-930b-b8094cbda62b", "embedding": null, "metadata": {"file_path": "./phala_dist/ai-execution-layer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f9db8f74-cd21-418d-b81e-081969a4414a", "node_type": "4", "metadata": {}, "hash": "7e807b27c5a98a9c4210184e8e4295a7c6aebb32f85dbb49c66122e97615848e", "class_name": "RelatedNodeInfo"}}, "text": "# \u26a1 AI Execution Layer\n\nWith the advancements of autonomous AI Agents, a new paradigm had started to form, and thought leaders in Blockchain started to realize the potential synergies that AI x Blockchain can offer. For example, [Vitalik's blog post](https://vitalik.eth.limo/general/2024/01/30/cryptoai.html) about AI x Blockchain sparked a new realization. AI Agents can serve as an intelligent interface to Blockchain, and help AI understand the blockchain world while ensuring their behavior (i.e. signed messages and transactions) matches their intentions and avoid being tricked or scammed.\n\n<figure><img src=\"../.gitbook/assets/AIxBlockchain.png\" alt=\"\"><figcaption><p>Diagram from Vitalk's Blog</p></figcaption></figure>\n\nIn this intersection of AI x Blockchain, AI Agents are missing some key elements that Blockchain could solve given the right architecture. Phala's Blockchain-TEE hybrid system has the answer to make AI Agents act like Smart Contracts by providing the following features for AI Agents:\n\n* Hosted on decentralized platform to ensure service availability.\n* Governed by smart contracts. This involves prompt management and access control.\n* Free to call each other to form complex applications, while the callers need to cover the cost during callee execution.\n* The secrecy of prompts are protected by TEE.\n* Highly user interactive with low latency requirements and require no gas fee.\n\nAll of these leads to a system that allow AI Agents to run in TEE workers, but are fully controlled by on-chain smart contracts. This is what Phala is good at.\n\n## The Phala Network Advantage\n\n<figure><img src=\"../.gitbook/assets/AI-Agent-DePIN (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n### Why build AI Agents on Phala Network?\n\n* **Agentize** **Smart Contracts**: Create smart contract centric AI Agents for popular web3 services and smart contracts.\n* **Decentralized**: Powered by the largest TEE network, agents are fully decentralized, tamper-proof, and unstoppable.\n* **Incentivized**: Get funded and profit on [Agent Wars](broken-reference) with innovative ideas.\n* **Powerful**: Code in fully customizable Javascript & WASM runtime.\n* **Rich Integration**: OpenAI, LangChain, [io.net](http://io.net/), etc.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "522a07c2-0cab-4cee-9e74-fe9f152d206a": {"__data__": {"id_": "522a07c2-0cab-4cee-9e74-fe9f152d206a", "embedding": null, "metadata": {"file_path": "./phala_dist/use-phala-app-to-delegate.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e5da387-c064-489e-bd8d-0586880c61e7", "node_type": "4", "metadata": {}, "hash": "86fabbc457561ed04e310b7613ed5266fbe7c870ed2ff0dcbd37897ea82a718a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0708f3b9-f68b-48af-a452-77e30f3d85e4", "node_type": "1", "metadata": {}, "hash": "2b86f8716b2ad2c558e65ac7d45c8225f59fcec19ca8d4e13a9025ca72797fb2", "class_name": "RelatedNodeInfo"}}, "text": "# Use Phala App to Delegate\n\n## Delegate <a href=\"#delegate\" id=\"delegate\"></a>\n\n### How to delegate <a href=\"#how-to-delegate\" id=\"how-to-delegate\"></a>\n\n1. Open Phala App [Delegate](https://app.phala.network/delegate/) page. You can see the list of StakePools and Vaults, the StakePools are sorted by APR by default and Vaults are sorted by APY by default. You can switch the StakePool list or Vault list by clicking the button. Filter out the Pools that meet the remaining quota according to the amount you want to delegate;\n\n<figure><img src=\"https://user-images.githubusercontent.com/110812052/209429064-02506702-8646-48f1-9d32-0a2578380218.png\" alt=\"\"><figcaption></figcaption></figure>\n\n2. Click the pool you want to delegate, and details of the pools being collapsed are displayed. Enter the amount to be delegated (less than Pool Remaining and Delegable Balance). Click delegate and sign. After the transaction is sent successfully, data will be updated on the App in about 20 seconds.\n\n<figure><img src=\"https://user-images.githubusercontent.com/110812052/209429293-f97c0736-04a2-4cff-9e92-d4f2130a4eab.png\" alt=\"\"><figcaption></figcaption></figure>\n\n3. If you want to use your Vault to delegate, click the account switch button in the upper left corner of the \u201cdelegate\u201d page to switch to the corresponding Vault account, and then the delegation you made will be paid by the Vault account.\n\n<figure><img src=\"https://user-images.githubusercontent.com/110812052/209429779-a1b7b517-42e6-4b6f-ad78-e36e49070578.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### How could I cancel my delegation? <a href=\"#how-could-i-cancel-my-delegation\" id=\"how-could-i-cancel-my-delegation\"></a>\n\n**Withdraw the delegations**\n\nYou need to find the corresponding delegation from the \u201cmy delegation\u201d page of the Phala App, click `withdraw` and enter the value to be withdrawn to cancel the delegation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0708f3b9-f68b-48af-a452-77e30f3d85e4": {"__data__": {"id_": "0708f3b9-f68b-48af-a452-77e30f3d85e4", "embedding": null, "metadata": {"file_path": "./phala_dist/use-phala-app-to-delegate.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e5da387-c064-489e-bd8d-0586880c61e7", "node_type": "4", "metadata": {}, "hash": "86fabbc457561ed04e310b7613ed5266fbe7c870ed2ff0dcbd37897ea82a718a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "522a07c2-0cab-4cee-9e74-fe9f152d206a", "node_type": "1", "metadata": {}, "hash": "386cad884a5b932adf0e8d05d1cbb8d6d6eda62f965f6eb6de94e6f57f267e30", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e745af5f-64ae-4c4c-a804-81d1eb2f0e69", "node_type": "1", "metadata": {}, "hash": "e70d3e49abb77bf859cdb7c1fe6d79daef96a451905ad91d69e1cbbbc515e5be", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"https://user-images.githubusercontent.com/110812052/209429550-27a28ae0-d20e-4749-9aae-970328cccaa1.png\" alt=\"\"><figcaption></figcaption></figure>\n\nIf there are enough free delegations in the stakepool, your withdrawal request will be completed in real-time.\n\nIf the free delegation is insufficient, a withdrawal queue will be generated.\n\n* The pool owner needs to add enough free delegation within seven days after the withdrawal queue is generated. Anyone can manually trigger a `reclaim` operation at any time and use the free delegation in the stakepool to eliminate the withdraw queue.\n* If the free delegation is still insufficient after seven days, and the existing releasing stake is also insufficient to afford the withdrawal, the stakepool will be forced to stop after a new `reclaim` operation, and all active workers will enter a cooling-down period for 7 days. When the cooling down countdown of the workers is over, any delegator can reclaim the delegations from the stakepool, take out the delegation which was staked into the workers, and use it to eliminate the withdrawal queue of the pool.\n\n> When the withdrawal queue is generated, this part of the delegation will be separated from your Delegation NFT in this pool, your Delegation NFT in this pool records the remaining delegation, and a Withdrawal Delegation NFT which belongs to the stakepool will be generated (Don\u2019t worry, this NFT records the token orientation after withdrawal, and you can find your Withdrawal NFT in the Phala App, why we do like this is for keeping the withdrawal queue being paid back in order)\n>\n> And the withdrawal queue is eliminated in order. The earlier the withdrawal, the earlier the free delegation in the pool will be obtained.\n\nTherefore, in the worst case, you will need to wait 14 days to get your delegation back from a StakePool, but in most cases, the good behavior stakepool owner will take the initiative to complete your withdrawal application within 1-7 days. If you delegated to a Vault, another 7 days are needed. Therefore, in the worst case, you will need to wait 21 days to get your delegation back from a Vault.\n\nWhen you already have a withdrawal queue in stakepool/Vault, you cannot cancel the existing withdrawal application.", "mimetype": "text/plain", "start_char_idx": 1897, "end_char_idx": 4166, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e745af5f-64ae-4c4c-a804-81d1eb2f0e69": {"__data__": {"id_": "e745af5f-64ae-4c4c-a804-81d1eb2f0e69", "embedding": null, "metadata": {"file_path": "./phala_dist/use-phala-app-to-delegate.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e5da387-c064-489e-bd8d-0586880c61e7", "node_type": "4", "metadata": {}, "hash": "86fabbc457561ed04e310b7613ed5266fbe7c870ed2ff0dcbd37897ea82a718a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0708f3b9-f68b-48af-a452-77e30f3d85e4", "node_type": "1", "metadata": {}, "hash": "2b86f8716b2ad2c558e65ac7d45c8225f59fcec19ca8d4e13a9025ca72797fb2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d29d632-abe0-4561-b85e-32080528baf9", "node_type": "1", "metadata": {}, "hash": "6006a946ca061d35053a19779812502aeb536be9fe33237d5d568d2bbe4a7c3c", "class_name": "RelatedNodeInfo"}}, "text": "Once you initiate a new withdrawal application under the same pool, the old withdrawal queue will be invalidated and the withdrawal will be re-initiated with an updated application, and the countdown will restart to the countdown on a 7-day period.\n\nIf you want to withdraw the delegations in your Vault account, click the account switch button in the upper left corner of the \u201cmy delegation\u201d page to switch to the corresponding Vault account, and then the withdrawal you made will be operated by the Vault account.\n\n<figure><img src=\"https://user-images.githubusercontent.com/110812052/209429873-440f22f5-9640-4c00-93d6-5b330aa40883.png\" alt=\"\"><figcaption></figcaption></figure>\n\n**Unwrap the wPHA**\n\nAfter withdrawal is finished, your tokens will be stored as wPHA. You need to unwrap it on the \u201cdelegate\u201d page and click \u201cunwrap all\u201d to unwrap the tokens.\n\n## StakePool/Vault management <a href=\"#stakepoolvault-management\" id=\"stakepoolvault-management\"></a>\n\n### Create <a href=\"#create\" id=\"create\"></a>\n\nYou can select the type of pools you want to operate under the \u201cfarm\u201d, choose \u201cStakePool\u201d or \u201cVault\u201d, and click to enter the corresponding page. On the StakePool and Vault pages, you can do the same operation:\n\nClick the \u201cCreate\u201d button in the upper right corner to create your pool.\n\n![image](https://user-images.githubusercontent.com/110812052/209429918-868fdbf3-627d-412c-9be9-9ba20cb26d2f.png)\n\n### Claim Owner rewards <a href=\"#claim-owner-rewards\" id=\"claim-owner-rewards\"></a>\n\n**Rewards of StakePool**\n\n1. You can check your current available rewards on the [My StakePools](https://app.phala.network/farm/stake-pool) page;\n\n<figure><img src=\"https://user-images.githubusercontent.com/110812052/209430378-eae91aa1-155a-49fc-bd06-5a477f9461d3.png\" alt=\"\"><figcaption></figcaption></figure>\n\n2.", "mimetype": "text/plain", "start_char_idx": 4167, "end_char_idx": 5977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d29d632-abe0-4561-b85e-32080528baf9": {"__data__": {"id_": "2d29d632-abe0-4561-b85e-32080528baf9", "embedding": null, "metadata": {"file_path": "./phala_dist/use-phala-app-to-delegate.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e5da387-c064-489e-bd8d-0586880c61e7", "node_type": "4", "metadata": {}, "hash": "86fabbc457561ed04e310b7613ed5266fbe7c870ed2ff0dcbd37897ea82a718a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e745af5f-64ae-4c4c-a804-81d1eb2f0e69", "node_type": "1", "metadata": {}, "hash": "e70d3e49abb77bf859cdb7c1fe6d79daef96a451905ad91d69e1cbbbc515e5be", "class_name": "RelatedNodeInfo"}}, "text": "Confirm the PID and Rewards, click the _claim rewards_ in the pop-up window, enter the reward receiving address (you can directly click _My Address_ to add your own address), click _submit_, sign, and after the transaction is sent successfully, you can see the data update on the App in about 20 seconds.\n3. You can also use _Claim all_ to claim the rewards from all the StakePools by one transaction.\n\n> Note if you claim the owner rewards to another address not the StakePool owner address, the rewards will be stored as wPHA. You need to unwrap it on the delegate page.\n\n**Rewards of Vault**\n\n1. You can check your current available rewards on the [My Vaults](https://app.phala.network/farm/vault) page;\n\n<figure><img src=\"https://user-images.githubusercontent.com/110812052/209430114-8ce86909-2439-4770-9ed9-aa3e6fa524f5.png\" alt=\"\"><figcaption></figcaption></figure>\n\n2. Click the _mint cut_ and sign, to manually claim the Vault owner reward. After the transaction is successful, the Vault owner\u2019s rewards will be stored in the form of the Vault\u2019s Delegation NFT. After that, you can click _claim to delegation_ to distribute the Vault owner rewards to the address you want to receive rewards, after which you will be able to manage these delegations. You can see the data update on the App in about 20 seconds.\n3. You can also use _Mint Cut_ and _Claim to Delegation_ on the upper of the page to claim the rewards from all the StakePools by one transaction.", "mimetype": "text/plain", "start_char_idx": 5978, "end_char_idx": 7442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6512e6b7-0aad-4e28-857a-b596008c992a": {"__data__": {"id_": "6512e6b7-0aad-4e28-857a-b596008c992a", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a51de68-7a7e-49a9-9313-46bea4c8d5b6", "node_type": "1", "metadata": {}, "hash": "2f64b8161efed470235127d3e1b29693997d9a293628805738422f5c4cbda739", "class_name": "RelatedNodeInfo"}}, "text": "# Table of contents\n\n## Home\n\n* [\ud83d\udc7e Phala Network Docs](README.md)\n\n## Overview\n\n* [\u2696\ufe0f Phala Network](overview/phala-network.md)\n* [\u26a1 AI Execution Layer](overview/ai-execution-layer.md)\n* [\ud83d\udc8e PHA Token](overview/pha-token/README.md)\n  * [\ud83e\ude99 Introduction](overview/pha-token/introduction.md)\n  * [\ud83d\udc50 Delegation](overview/pha-token/delegation/README.md)\n    * [Delegate to StakePool](overview/pha-token/delegation/delegate-to-stakepool.md)\n    * [What is Vault](overview/pha-token/delegation/whats-vault.md)\n    * [What is Share](overview/pha-token/delegation/whats-share.md)\n    * [WrappedBalances & W-PHA](overview/pha-token/delegation/wrappedbalances-and-w-pha.md)\n    * [Examples of Delegation](overview/pha-token/delegation/examples-of-delegation.md)\n    * [Use Phala App to Delegate](overview/pha-token/delegation/use-phala-app-to-delegate.md)\n    * [Estimate Your Reward](overview/pha-token/delegation/estimate-your-reward.md)\n  * [\ud83d\uddf3\ufe0f Governance](overview/pha-token/governance/README.md)\n    * [Governance Mechanism](overview/pha-token/governance/governance-mechanism.md)\n    * [Join the Council](overview/pha-token/governance/join-the-council.md)\n    * [Voting for Councillors](overview/pha-token/governance/voting-for-councillors.md)\n    * [Apply for Project Funding](overview/pha-token/governance/apply-for-project-funding.md)\n    * [Khala Treasury](overview/pha-token/governance/khala-treasury.md)\n    * [Khala Governance](overview/pha-token/governance/khala-governance.md)\n    * [Setting Up an Account Identity](overview/pha-token/governance/setup-account-identity.md)\n\n## AI Agent Contract\n\n* [\ud83d\udc69\u200d\ud83d\udcbb Getting Started](ai-agent-contract/getting-started/README.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a51de68-7a7e-49a9-9313-46bea4c8d5b6": {"__data__": {"id_": "2a51de68-7a7e-49a9-9313-46bea4c8d5b6", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6512e6b7-0aad-4e28-857a-b596008c992a", "node_type": "1", "metadata": {}, "hash": "47ed6bf89529cf0e43b29b02a623b104e7eff243f0ac34a89976864ff093344b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4853efb6-0251-40dc-824e-ba455f7d1b00", "node_type": "1", "metadata": {}, "hash": "090cd7e97ff76e3967b604361b414d3866db47a29ca6f05b9e71b31db116d248", "class_name": "RelatedNodeInfo"}}, "text": "md)\n  * [Build Your First AI Agent Contract](ai-agent-contract/getting-started/build-your-first-ai-agent-contract.md)\n  * [Build An Agent to Transact Onchain](ai-agent-contract/getting-started/build-an-agent-to-transact-onchain.md)\n  * [Build Your AI Agent Contract with OpenAI](ai-agent-contract/getting-started/build-your-ai-agent-contract-with-openai.md)\n  * [Build Your AI Agent Contract with LangChain](ai-agent-contract/getting-started/build-your-ai-agent-contract-with-langchain.md)\n  * [Integrate with 3rd Party API with HTTP Request](ai-agent-contract/getting-started/integrate-with-3rd-party-api-with-http-request.md)\n  * [Run a Local Testnet With Docker](ai-agent-contract/getting-started/run-a-local-testnet-with-docker.md)\n  * [AI Agent Contract Templates](ai-agent-contract/getting-started/ai-agent-contract-templates.md)\n* [\ud83d\udd28 Build](ai-agent-contract/build/README.md)\n  * [Define Your Agent](ai-agent-contract/build/define-your-agent.md)\n  * [Add a Data Source](ai-agent-contract/build/add-a-data-source.md)\n  * [Connect to Smart Contracts](ai-agent-contract/build/connect-to-smart-contracts.md)\n  * [Invoke Other Agents](ai-agent-contract/build/invoke-other-agents.md)\n  * [Test and Benchmark](ai-agent-contract/build/test-and-benchmark.md)\n  * [Token Gated Access](ai-agent-contract/build/token-gated-access.md)\n* [\ud83d\ude80 Launch](ai-agent-contract/launch/README.md)\n  * [Publish Agent Script](ai-agent-contract/launch/publish-agent-script.md)\n* [\ud83e\udd33 Use](ai-agent-contract/use/README.md)\n  * [Access from UI](ai-agent-contract/use/access-from-ui.md)\n  * [Access from Other Agents](ai-agent-contract/use/access-from-other-agents.md)\n* [\ud83e\uddd9\u200d\u2642\ufe0f Examples](ai-agent-contract/examples/README.", "mimetype": "text/plain", "start_char_idx": 1663, "end_char_idx": 3357, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4853efb6-0251-40dc-824e-ba455f7d1b00": {"__data__": {"id_": "4853efb6-0251-40dc-824e-ba455f7d1b00", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a51de68-7a7e-49a9-9313-46bea4c8d5b6", "node_type": "1", "metadata": {}, "hash": "2f64b8161efed470235127d3e1b29693997d9a293628805738422f5c4cbda739", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87edc919-7263-477f-a00b-c1d87220e308", "node_type": "1", "metadata": {}, "hash": "1122ed308b320d42a61b28c241f237244ae071ad79eea35bd0d859c359c07ff1", "class_name": "RelatedNodeInfo"}}, "text": "md)\n  * [Create a Weather Agent w/ Function Calling](ai-agent-contract/examples/create-a-weather-agent-w-function-calling.md)\n  * [Connect from Autonolas Plugin](ai-agent-contract/examples/connect-from-autonolas-plugin.md)\n  * [Connect from Morpheus Plugin](ai-agent-contract/examples/connect-from-morpheus-plugin.md)\n* [\ud83d\udd0c Integrations](ai-agent-contract/integrations/README.md)\n  * [\u2708\ufe0f Airstack Agent](ai-agent-contract/integrations/airstack-agent.md)\n  * [\ud83d\udcc8 The Graph Agent](ai-agent-contract/integrations/the-graph-agent.md)\n  * [\ud83e\ude9e Mirrored Price Feeds Agent](ai-agent-contract/integrations/mirrored-price-feeds-agent/README.md)\n    * [Getting Started](ai-agent-contract/integrations/mirrored-price-feeds-agent/getting-started.md)\n    * [Feed Addresses](ai-agent-contract/integrations/mirrored-price-feeds-agent/feed-addresses/README.md)\n      * [Astar zKatana Testnet](ai-agent-contract/integrations/mirrored-price-feeds-agent/feed-addresses/astar-zkatana-testnet.md)\n      * [Tanssi Dancebox Testnet](ai-agent-contract/integrations/mirrored-price-feeds-agent/feed-addresses/tanssi-dancebox-testnet.md)\n      * [Base Sepolia Testnet](ai-agent-contract/integrations/mirrored-price-feeds-agent/feed-addresses/base-sepolia-testnet.md)\n    * [How Mirrored Price Feeds Work](ai-agent-contract/integrations/mirrored-price-feeds-agent/how-mirrored-price-feeds-work.md)\n  * [\ud83c\udf31 LensAPI Oracle Agent](ai-agent-contract/integrations/lensapi-oracle-agent.md)\n* [\u26d3\ufe0f Supported Chains](ai-agent-contract/supported-chains.md)\n* [FAQ](ai-agent-contract/faq.md)\n\n## Agent Wars\n\n* [\ud83d\udcdc Introduction](agent-wars/agent-wars-introduction.md)\n* [\ud83d\udcb8 Tokenomics](agent-wars/agent-war-tokenomics.", "mimetype": "text/plain", "start_char_idx": 3357, "end_char_idx": 5028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87edc919-7263-477f-a00b-c1d87220e308": {"__data__": {"id_": "87edc919-7263-477f-a00b-c1d87220e308", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4853efb6-0251-40dc-824e-ba455f7d1b00", "node_type": "1", "metadata": {}, "hash": "090cd7e97ff76e3967b604361b414d3866db47a29ca6f05b9e71b31db116d248", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96e13a52-a0a1-4114-aa91-7bd302a1e75f", "node_type": "1", "metadata": {}, "hash": "3262d3d80918988134e8bba890b1ee07fa831e4f150a1a487f0dc42f99570cf9", "class_name": "RelatedNodeInfo"}}, "text": "md)\n* [\u25b6\ufe0f Getting Started](agent-wars/getting-started/README.md)\n  * [Wallet Setup & Get PHA](agent-wars/getting-started/wallet-setup-and-get-pha.md)\n  * [Buy and Sell Keys](agent-wars/getting-started/buy-and-sell-keys.md)\n  * [Create and Play with Social Agents](agent-wars/getting-started/create-and-play-with-social-agents.md)\n* [\ud83e\uddd1\u200d\ud83c\udfeb Tutorial](agent-wars/tutorial.md)\n\n## Tech Specs\n\n* [\ud83e\udd77 AI Agent Contract](tech-specs/ai-agent-contract/README.md)\n  * [WapoJS Functions](tech-specs/ai-agent-contract/wapojs-functions.md)\n  * [Phala Agent Gateway](tech-specs/ai-agent-contract/phala-agent-gateway.md)\n* [\u2705 Multi-Proof and Verifiable Compute](tech-specs/multi-proof-and-verifiable-compute/README.md)\n  * [Why Multi-Proof and How We Can Help](tech-specs/multi-proof-and-verifiable-compute/why-multi-proof-and-how-we-can-help.md)\n  * [Trusted Execution Environments (TEE) and Compute Verifiability](tech-specs/multi-proof-and-verifiable-compute/trusted-execution-environments-tee-and-compute-verifiability.md)\n  * [How to Build with Multi-Proof](tech-specs/multi-proof-and-verifiable-compute/how-to-build-with-multi-proof.md)\n  * [Conclusion & Future Developments](tech-specs/multi-proof-and-verifiable-compute/conclusion-and-future-developments.md)\n* [\u26d3\ufe0f Blockchain](tech-specs/blockchain/README.md)\n  * [Blockchain Entities](tech-specs/blockchain/blockchain-entities.md)\n  * [Cluster of Workers](tech-specs/blockchain/cluster-of-workers.md)\n  * [Secret Key Hierarchy](tech-specs/blockchain/secret-key-hierarchy.md)\n\n## References\n\n* [\ud83d\udd10 Setting Up a Wallet on Phala](references/basic-guidance/README.md)\n  * [Acquiring PHA](references/basic-guidance/get-pha-and-transfer.", "mimetype": "text/plain", "start_char_idx": 5028, "end_char_idx": 6699, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96e13a52-a0a1-4114-aa91-7bd302a1e75f": {"__data__": {"id_": "96e13a52-a0a1-4114-aa91-7bd302a1e75f", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87edc919-7263-477f-a00b-c1d87220e308", "node_type": "1", "metadata": {}, "hash": "1122ed308b320d42a61b28c241f237244ae071ad79eea35bd0d859c359c07ff1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "287ce246-5231-475f-8a21-cb7984ff7601", "node_type": "1", "metadata": {}, "hash": "be8ba5ed40964b7a9e1b3aa232607d54a91e6895a1517d368c9f436d702f1625", "class_name": "RelatedNodeInfo"}}, "text": "md)\n* [\ud83e\udd16 AI Agent Contract SDKs](references/ai-agent-contract-sdks/README.md)\n  * [JS SDK](references/ai-agent-contract-sdks/bricks-and-blueprints/README.md)\n    * [\ud83d\udc7e Create a Dashboard Profile](references/ai-agent-contract-sdks/bricks-and-blueprints/create-a-dashboard-profile.md)\n    * [\u2728 Phat Contract Starter Kit](references/ai-agent-contract-sdks/bricks-and-blueprints/featured-blueprints/README.md)\n      * [\ud83c\udfc3\u200d\u2642\ufe0f Quick Start](references/ai-agent-contract-sdks/bricks-and-blueprints/featured-blueprints/quick-start.md)\n      * [\u2694\ufe0f Connect Phat Contract to EVM Consumer Contract](references/ai-agent-contract-sdks/bricks-and-blueprints/featured-blueprints/connect-phat-contract-to-evm-consumer-contract.md)\n      * [\ud83c\udfd7\ufe0f Customizing Your Phat Contract](references/ai-agent-contract-sdks/bricks-and-blueprints/featured-blueprints/customizing-your-phat-contract.md)\n      * [\ud83e\udd2b Handling Secrets](references/ai-agent-contract-sdks/bricks-and-blueprints/featured-blueprints/handling-secrets.md)\n    * [\ud83e\udeb4 LensAPI Oracle](references/ai-agent-contract-sdks/bricks-and-blueprints/lensapi-oracle/README.md)\n      * [\ud83e\uddd1\u200d\ud83d\ude80 Polygon Consumer Contract for LensAPI Oracle](references/ai-agent-contract-sdks/bricks-and-blueprints/lensapi-oracle/polygon-consumer-contract-for-lensapi-oracle.md)\n    * [\ud83d\udcc8 The Graph](references/ai-agent-contract-sdks/bricks-and-blueprints/the-graph/README.md)\n      * [\ud83e\udd8b Quick Start](references/ai-agent-contract-sdks/bricks-and-blueprints/the-graph/quick-start.md)\n      * [\ud83c\udfab Connect The Graph Phat Contract to EVM Consumer Contract](references/ai-agent-contract-sdks/bricks-and-blueprints/the-graph/connect-the-graph-phat-contract-to-evm-consumer-contract.", "mimetype": "text/plain", "start_char_idx": 6699, "end_char_idx": 8372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "287ce246-5231-475f-8a21-cb7984ff7601": {"__data__": {"id_": "287ce246-5231-475f-8a21-cb7984ff7601", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96e13a52-a0a1-4114-aa91-7bd302a1e75f", "node_type": "1", "metadata": {}, "hash": "3262d3d80918988134e8bba890b1ee07fa831e4f150a1a487f0dc42f99570cf9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c8d8155-2642-4e63-a2c2-3022e13d918e", "node_type": "1", "metadata": {}, "hash": "2d1dd77f03e04cff105f59d532b92d563c579ff8dab6670f1bc9f2b38486dac4", "class_name": "RelatedNodeInfo"}}, "text": "md)\n      * [\ud83d\udddd\ufe0f Get an API Key for The Graph](references/ai-agent-contract-sdks/bricks-and-blueprints/the-graph/get-an-api-key-for-the-graph.md)\n    * [\u2708\ufe0f Airstack](references/ai-agent-contract-sdks/bricks-and-blueprints/airstack/README.md)\n      * [\ud83d\udee9\ufe0f Quick Start](references/ai-agent-contract-sdks/bricks-and-blueprints/airstack/quick-start.md)\n      * [\ud83e\udec2 Connect Airstack Phat Contract to EVM Consumer Contract](references/ai-agent-contract-sdks/bricks-and-blueprints/airstack/connect-airstack-phat-contract-to-evm-consumer-contract.md)\n      * [\ud83d\udddd\ufe0f Get an Airstack API Key](references/ai-agent-contract-sdks/bricks-and-blueprints/airstack/get-an-airstack-api-key.md)\n  * [Rust SDK](references/ai-agent-contract-sdks/getting-started/README.md)\n    * [Generate Test Account](references/ai-agent-contract-sdks/getting-started/generate-test-account.md)\n    * [Phat Contract Console](references/ai-agent-contract-sdks/getting-started/phat-contract-console.md)\n    * [Next Step](references/ai-agent-contract-sdks/getting-started/next-step.md)\n    * [Build](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/README.md)\n      * [Environment Setup](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/environment-setup.md)\n      * [Swanky Phala CLI Tool](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/swanky-phala-cli-tool.md)\n      * [Create Contract](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/create-contract.md)\n      * [Deploy Contract](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/deploy-contract.", "mimetype": "text/plain", "start_char_idx": 8372, "end_char_idx": 9998, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c8d8155-2642-4e63-a2c2-3022e13d918e": {"__data__": {"id_": "5c8d8155-2642-4e63-a2c2-3022e13d918e", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "287ce246-5231-475f-8a21-cb7984ff7601", "node_type": "1", "metadata": {}, "hash": "be8ba5ed40964b7a9e1b3aa232607d54a91e6895a1517d368c9f436d702f1625", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07a6e5ba-ee81-4c4e-a7f6-0862db34d739", "node_type": "1", "metadata": {}, "hash": "ef66493f81229c81885d5266a43c7d5e353a46a3f2c7d73ee691c5573fff0f24", "class_name": "RelatedNodeInfo"}}, "text": "md)\n      * [Language Basics](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/language-basics.md)\n      * [Call Your Contract](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/call-your-contract.md)\n      * [Build Stateless Backend](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/build-stateless-backend.md)\n      * [Use Pink Extension](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/use-pink-extension.md)\n      * [Use Rust Crates](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/use-rust-crates.md)\n      * [Unit Tests](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/unit-tests.md)\n      * [Store Contract States](references/ai-agent-contract-sdks/getting-started/build-on-phat-contract/store-contract-states.md)\n* [\u2692\ufe0f Phala SDK](references/phala-sdk.md)\n* [\ud83d\uddbc\ufe0f FrameHub](references/framehub.md)\n* [\ud83c\udf09 SubBridge](references/subbridge/README.md)\n  * [Cross-chain Transfer](references/subbridge/cross-chain-transfer.md)\n  * [Supported Assets](references/subbridge/supported-assets.md)\n  * [Asset Integration Guide](references/subbridge/asset-integration-guide.md)\n  * [Technical Details](references/subbridge/technical-details.md)\n* [\ud83d\udc68\u200d\ud83d\ude80 Builders Program](references/builders-program.md)\n* [\ud83d\udc77 Community Builders](references/community-builders.md)\n* [\ud83e\udd39 Hackathon Guides](references/hackathon-guides/README.md)\n  * [ETHGlobal Hackathon Guide](references/hackathon-guides/ethglobal-hackathon-guide.md)\n* [\ud83e\udd2f Advanced Topics](references/advanced-topics/README.md)\n  * [Cross Chain Solutions](references/advanced-topics/cross-chain-solutions.md)\n  * [System Contract and Drivers](references/advanced-topics/system-contract-and-drivers.", "mimetype": "text/plain", "start_char_idx": 9998, "end_char_idx": 11777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07a6e5ba-ee81-4c4e-a7f6-0862db34d739": {"__data__": {"id_": "07a6e5ba-ee81-4c4e-a7f6-0862db34d739", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c8d8155-2642-4e63-a2c2-3022e13d918e", "node_type": "1", "metadata": {}, "hash": "2d1dd77f03e04cff105f59d532b92d563c579ff8dab6670f1bc9f2b38486dac4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8915f84-f9f8-4cde-9923-4d5142f4f3aa", "node_type": "1", "metadata": {}, "hash": "c20d643620f037aad6407b8187a8281acc9694ad8bf4af263134629bbbccded0", "class_name": "RelatedNodeInfo"}}, "text": "md)\n  * [Run Local Testnet](references/advanced-topics/run-local-testnet.md)\n  * [SideVM](references/advanced-topics/sidevm.md)\n* [\ud83c\udd98 Support](references/support/README.md)\n  * [Available Phala Chains](references/support/endpoints.md)\n  * [Resource Limits](references/support/resource-limits.md)\n  * [Transaction Costs](references/support/transaction-costs.md)\n  * [Compatibility Matrix](references/support/compatibility-matrix.md)\n  * [Block Explorers](references/support/block-explorers.md)\n  * [Faucet](references/support/faucet.md)\n* [\u2049\ufe0f FAQ](references/faq.md)\n\n## Compute Providers\n\n* [\ud83d\ude43 Basic Info](compute-providers/basic-info/README.md)\n  * [Introduction](compute-providers/basic-info/introduction.md)\n  * [Gemini Tokenomics (Worker Rewards)](compute-providers/basic-info/worker-rewards.md)\n  * [Budget balancer](compute-providers/basic-info/budget-balancer.md)\n  * [Staking Mechanism](compute-providers/basic-info/staking-mechanism.md)\n  * [Requirements in Phala/Khala](compute-providers/basic-info/requirements-in-phala-khala.md)\n  * [Confidence Level & SGX Function](compute-providers/basic-info/confidence-level-and-sgx-function.md)\n  * [Rent Hardware](compute-providers/basic-info/rent-hardware.md)\n  * [Error Summary](compute-providers/basic-info/error-summary.md)\n* [\ud83e\uddbf Run Workers on Phala](compute-providers/run-workers-on-phala/README.md)\n  * [Solo Worker Deployment](compute-providers/run-workers-on-phala/solo-worker-deployment.md)\n  * [PRBv3 Deployment](compute-providers/run-workers-on-phala/prbv3-deployment.md)\n  * [Using PRBv3 UI](compute-providers/run-workers-on-phala/using-prbv3-ui.md)\n  * [PRB Worker Deployment](compute-providers/run-workers-on-phala/prb-worker-deployment.", "mimetype": "text/plain", "start_char_idx": 11777, "end_char_idx": 13479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8915f84-f9f8-4cde-9923-4d5142f4f3aa": {"__data__": {"id_": "c8915f84-f9f8-4cde-9923-4d5142f4f3aa", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07a6e5ba-ee81-4c4e-a7f6-0862db34d739", "node_type": "1", "metadata": {}, "hash": "ef66493f81229c81885d5266a43c7d5e353a46a3f2c7d73ee691c5573fff0f24", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f3d21ff-903b-4efa-a331-d849e696cf89", "node_type": "1", "metadata": {}, "hash": "998981f376c857e57ac65172b9eeb799556854ecf9b8fa84863f0e158a651e90", "class_name": "RelatedNodeInfo"}}, "text": "md)\n  * [Switch Workers from Solo to PRB Mode](compute-providers/run-workers-on-phala/switch-workers-from-solo-to-prb-mode.md)\n  * [Headers-cache deployment](compute-providers/run-workers-on-phala/headers-cache-deployment.md)\n  * [Archive node deployment](compute-providers/run-workers-on-phala/archive-node-deployment.md)\n* [\ud83c\udfc3\u200d\u2640\ufe0f Run Workers on Khala](compute-providers/run-workers-on-khala/README.md)\n  * [Solo Scripts Guidance](compute-providers/run-workers-on-khala/solo-scripts-guidance/README.md)\n    * [Installing Khala Solo Scripts](compute-providers/run-workers-on-khala/solo-scripts-guidance/installing-phala-mining-tools.md)\n    * [Worker Confidence Level](compute-providers/run-workers-on-khala/solo-scripts-guidance/worker-confidence-level.md)\n    * [Configure the Worker](compute-providers/run-workers-on-khala/solo-scripts-guidance/configure-the-worker.md)\n    * [Deploy the Worker](compute-providers/run-workers-on-khala/solo-scripts-guidance/deploy-the-worker.md)\n    * [Monitor Worker's Status](compute-providers/run-workers-on-khala/solo-scripts-guidance/monitor-workers-status.md)\n    * [Accelerate Khala Syncing](compute-providers/run-workers-on-khala/solo-scripts-guidance/accelerate-khala-syncing.md)\n    * [Update your Worker's Node](compute-providers/run-workers-on-khala/solo-scripts-guidance/update-your-workers-node.md)\n  * [PRBv3 Deployment Guide](compute-providers/run-workers-on-khala/prbv3-deployment.md)\n  * [Using PRBv3 UI](compute-providers/run-workers-on-khala/using-prbv3-ui.md)\n  * [Migration from PRBv2 to v3](compute-providers/run-workers-on-khala/migration-from-prbv2-to-v3.md)\n  * [Headers-cache deployment](compute-providers/run-workers-on-khala/headers-cache-deployment.md)\n  * [Archive node deployment](compute-providers/run-workers-on-khala/archive-node-deployment.", "mimetype": "text/plain", "start_char_idx": 13479, "end_char_idx": 15290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f3d21ff-903b-4efa-a331-d849e696cf89": {"__data__": {"id_": "9f3d21ff-903b-4efa-a331-d849e696cf89", "embedding": null, "metadata": {"file_path": "./phala_dist/SUMMARY.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227", "node_type": "4", "metadata": {}, "hash": "aacbf82bb431ba9c575642aa57d7808adfb5b55da585240a330368079aa21ad8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8915f84-f9f8-4cde-9923-4d5142f4f3aa", "node_type": "1", "metadata": {}, "hash": "c20d643620f037aad6407b8187a8281acc9694ad8bf4af263134629bbbccded0", "class_name": "RelatedNodeInfo"}}, "text": "md)\n  * [PRBv2 Deployment Guide](compute-providers/run-workers-on-khala/deployment-guide-for-prbv2.md)\n  * [PRB Worker Deployment](compute-providers/run-workers-on-khala/prb-worker-deployment.md)\n  * [How to switch from Solo scripts to PRB worker](compute-providers/run-workers-on-khala/how-to-switch-from-solo-mining-to-prb-mining.md)\n  * [Khala Worker Rewards](compute-providers/run-workers-on-khala/khala-worker-rewards.md)\n  * [Troubleshooting](compute-providers/run-workers-on-khala/troubleshooting.md)\n* [\ud83d\udee1\ufe0f Gatekeeper](compute-providers/gatekeeper/README.md)\n  * [Collator](compute-providers/gatekeeper/collator.md)\n  * [Gatekeeper](compute-providers/gatekeeper/gatekeeper.md)\n\n## Web Directory\n\n* [Discord](https://discord.gg/phala-network)\n* [GitHub](https://github.com/Phala-Network/)\n* [Twitter](https://twitter.com/PhalaNetwork)\n* [YouTube](https://www.youtube.com/@PhalaNetwork)\n* [Forum](https://forum.phala.network/)\n* [Medium](https://medium.com/phala-network)\n\n***\n\n* [Telegram](https://t.me/phalanetwork)", "mimetype": "text/plain", "start_char_idx": 15290, "end_char_idx": 16312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06b62680-0c5e-47aa-8cda-2c740704b118": {"__data__": {"id_": "06b62680-0c5e-47aa-8cda-2c740704b118", "embedding": null, "metadata": {"file_path": "./phala_dist/gatekeeper.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4", "node_type": "4", "metadata": {}, "hash": "605fbd90be7bb76ebad5bf46568bda9db663b43d418c77dbce577180c5ce92bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bce26b7d-d5ff-463c-b3dd-7c8837a0af50", "node_type": "1", "metadata": {}, "hash": "f409a1a1711968aaaa6ddf30f31ba65a0327525b41e040b037725c5fbb832a38", "class_name": "RelatedNodeInfo"}}, "text": "# Gatekeeper\n\nGatekeeper is a special role that manages the secrets in the network and runs the tokenomic model. Gatekeepers are supposed to be elected by the PHA token holders with NPoS, and should also run as a collator. However, as of now, Gatekeepers are designated by the council directly, not associated with collators, because collator binding and NPoS are still under development.\n\nTo set up a Gatekeeper, you should follow the steps below:\n\n1. Prepare an account with some PHA token to pay for the transaction fee.\n2. Prepare a server with proper Intel SGX support\n3. Deploy a worker stack: full node, pherry, and pRuntime\n4. Make a council proposal to add the worker to the Gatekeeper list\n5. Finally, you Gatkeeper should be up and running. As the opereator, you should keep monitoring.\n\n## Prepare the Gatekeeper operator account <a href=\"#prepare-the-gatekeeper-operator-account\" id=\"prepare-the-gatekeeper-operator-account\"></a>\n\nTo operate a Gatekeeper, an account with some PHA balance is required. The Gatekeeper program runs by pruntime in Secure Enclaves. It communicates with the blockchain in two directions. It reads the events from the blockchain, runs the algorithm, and periodically writes back to the blockchain by sending transactions. An account with some balances is used to pay the transaction fee.\n\nYou may already have an account. Or you can create the account on Polkadot.js Extension, or some other wallets. In either way, you will need to keep the mnemonic (sometimes called SURI), or the raw private key, because it will be used in the next step.\n\nIt\u2019s suggested to have at least 10 PHA in the account. The Gatekeepers may consume the transacion fee in different speed. It can burn up to 5-10 PHA per day, but can also have nearly zero transaction per day. Gatekeepers generate messages constantly, but only the first one who submits the message will be charged (other transactions are just de-duped). So theoritically each Gatekeeper has an even chance to pay for the transaction fee.\n\n## Server requirements <a href=\"#server-requirements\" id=\"server-requirements\"></a>\n\n1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bce26b7d-d5ff-463c-b3dd-7c8837a0af50": {"__data__": {"id_": "bce26b7d-d5ff-463c-b3dd-7c8837a0af50", "embedding": null, "metadata": {"file_path": "./phala_dist/gatekeeper.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4", "node_type": "4", "metadata": {}, "hash": "605fbd90be7bb76ebad5bf46568bda9db663b43d418c77dbce577180c5ce92bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06b62680-0c5e-47aa-8cda-2c740704b118", "node_type": "1", "metadata": {}, "hash": "40d11caa4a181fe1cea8208ea7500a7e2d423130f377f39cc0292de205010808", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82df2bc5-b0de-4a76-a7ad-270dabaf0b03", "node_type": "1", "metadata": {}, "hash": "20bd2e791fd8ae5affaba90c40f169f3e6e8c4d59d53dc23cb940953522e6673", "class_name": "RelatedNodeInfo"}}, "text": "500G SSD for running the Khala full node in Archive mode\n\n    The large space is majorly for the Kusama full node, which takes more than 300 GiB. If you can run the full node on another server close to the Gatekeeper server, the disk requirement can be safely ignored. In such case, the network latency and bandwidth matters. SSD is always recommended because there will be a lot of random access to the database when syncing a Gatekeeper.\n2.  Good internet connection\n\n    A bandwidth of 50 Mbps or faster is recommended. Otherwise the initial block download will take a very long time. A public IP address is recommended because otherwise you may got too few peer connections, causing the full node got stuck for some period. A stable network is always required. Once Gatekeeper online detection is on, any detected offline event may cause significant slash. (So far it\u2019s still under the development.)\n3.  Intel SGX compatible hardware with a confidence level >= 3\n\n    Gatekeeper runs its pRuntime inside the Secure Encalve (Intel SGX), which is the same requirement of mining on Khala Network. Please refer to the mining guide to learn more about Intel SGX compatability and the confidence score. Gatekeepers manage highly sensitive data. Therefore it requires the highest confidence level (1, 2, or 3).\n\n    Although SGX is a feature in CPU, some configuration in BIOS is still needed. Please refer to the mining guide to tune the BIOS when necessary.\n4.  Linux OS\n\n    So far only Linux is supported. We suggest to deploy the Gatekeeper stack on Ubuntu 21.04. While other versions of Ubuntu or other Linxu distribution could be supported, this document will assume you are running on Ubuntu.\n\n    The Intel SGX driver is required. However, you don\u2019t need to install it manually on Ubuntu 21.04 because it\u2019s shipped with the native kernel SGX driver. The kernel driver doesn\u2019t support all the legacy SGX CPUs though. For legacy CPUs, you may need to run an older Linux kernel without the native driver, and install the iSGX driver instead.\n5. [Docker](https://docs.docker.com/engine/install/ubuntu/#install-using-the-convenience-script)\n\n## **SGX virtualization (vSGX)**\n\nvSGX is supported.", "mimetype": "text/plain", "start_char_idx": 2112, "end_char_idx": 4307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82df2bc5-b0de-4a76-a7ad-270dabaf0b03": {"__data__": {"id_": "82df2bc5-b0de-4a76-a7ad-270dabaf0b03", "embedding": null, "metadata": {"file_path": "./phala_dist/gatekeeper.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4", "node_type": "4", "metadata": {}, "hash": "605fbd90be7bb76ebad5bf46568bda9db663b43d418c77dbce577180c5ce92bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bce26b7d-d5ff-463c-b3dd-7c8837a0af50", "node_type": "1", "metadata": {}, "hash": "f409a1a1711968aaaa6ddf30f31ba65a0327525b41e040b037725c5fbb832a38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f43d993f-3939-4026-9979-62daaaea2bf4", "node_type": "1", "metadata": {}, "hash": "c6339fcdd0b5e7b1c73b6815501a01a2542b901ecc782e501ce2b0865d90160f", "class_name": "RelatedNodeInfo"}}, "text": "VMWare and KVM based vSGX are being tested successfully. However, the more instances to virtualize, the less EPC size each VM can get. Smaller EPC can cause a decrease of the performance. Please use with caution.\n\n## Deploy the full stack <a href=\"#deploy-the-full-stack\" id=\"deploy-the-full-stack\"></a>\n\nPlease make sure you have meet all the above requirements, so that you can start to deploy the three components by Docker.\n\nFirst, run the full node and wait it to sync. If you already have a full node, this step can be skipped.\n\n```\ndocker run -dti --rm \\\n    --name khala-node \\\n    -e NODE_NAME=khala-node \\\n    -e NODE_ROLE=MINER \\\n    -p 9933:9933 -p 9944:9944 -p 9615:9615 -p 30333:30333 \\\n    -p 9934:9934 -p 9945:9945 -p 9616:9616 -p 30334:30334 \\\n    -v $HOME/data/khala-dev-node:/root/data phalanetwork/khala-node\n```\n\nThe command line above will start the Khala node docker image managed by the Phala team. The node runs in Archive mode (specified by `NODE_ROLE=MINER`). Then two sets of the ports are exported, including the p2p ports (30333, 30334), Prometheus metrics (9615, 9616), ws rpc (9944, 9945), and http rpc ports (9933, 9944). For each pair of the ports, the former one is Khala\u2019s and the later one is Kusama\u2019s. The data directory `/root/data` is mapped to the disk. Feel free to change it to somewhere better.\n\nThe node may take a few days to be fully synced. Recovering from a backup can greatly reduce the time to sync, if you have one.", "mimetype": "text/plain", "start_char_idx": 4308, "end_char_idx": 5775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f43d993f-3939-4026-9979-62daaaea2bf4": {"__data__": {"id_": "f43d993f-3939-4026-9979-62daaaea2bf4", "embedding": null, "metadata": {"file_path": "./phala_dist/gatekeeper.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4", "node_type": "4", "metadata": {}, "hash": "605fbd90be7bb76ebad5bf46568bda9db663b43d418c77dbce577180c5ce92bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82df2bc5-b0de-4a76-a7ad-270dabaf0b03", "node_type": "1", "metadata": {}, "hash": "20bd2e791fd8ae5affaba90c40f169f3e6e8c4d59d53dc23cb940953522e6673", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "173fa5ce-2ceb-4c9a-a3c9-30b4a52c2033", "node_type": "1", "metadata": {}, "hash": "a0aa3aeaba61b4867116799488c0c8bedc0ffa8df34fd43fcfa70448ca92c115", "class_name": "RelatedNodeInfo"}}, "text": "Second, run pRuntime:\n\n```\ndocker run -dti --rm \\\n    --name phala-pruntime \\\n    -p 8000:8000 \\\n    -v $HOME/data/phala-pruntime:/root/data \\\n    -e EXTRA_OPTS=\"-c 0\" \\\n    --device /dev/sgx \\\n    --device /dev/sgx_enclave \\\n    --device /dev/sgx_provision \\\n    --device /dev/sgx_vepc \\\n    phalanetwork/phala-pruntime\n```\n\nThe command brings up a pRuntime instance with its RPC port 8000 exported. Please note that if you run with the iSGX driver (legacy driver), there\u2019s only one SGX device file `/etc/isgx`. Note that pruntime will store its credentials under `/root/data`, which is mapped to the locla disk. The credentials are encrypted with the CPU keys. It\u2019s important to backup the key in order to keep the identity of the worker (pRuntime instance). However, it\u2019s impossible to recover the credentials in another CPU (vCPU).\n\nIn the above command line we assumed you are running with the kernel SGX driver. If you have to run with the manually installed driver on an older kernel, you may consider to switch to differnt device arguments:\n\n* Standalone DCAP driver\n  * `--device /dev/sgx/enclave`\n  * `--device /dev/sgx/provision`\n* Standalone iSGX driver\n  * `--device /dev/isgx`\n\nFinally, run pherry, the relayer to connect the node and pRuntime (specify your own mnenomic).\n\n```\ndocker run -dti --rm \\\n    --name phala-pherry \\\n    -e PRUNTIME_ENDPOINT=\"http://phala-pruntime:8000\" \\\n    -e PHALA_NODE_WS_ENDPOINT=\"ws://khala-node:9945\" \\\n    -e MNEMONIC=\"<Insert-Your-Mnemonic>\" \\\n    -e EXTRA_OPTS=\"-r --parachain --collator-ws-endpoint=ws://khala-node:9944\" \\\n    --link khala-node --link phala-pruntime \\\n    phalanetwork/phala-pherry\n```\n\nThe command starts pherry, linked with `khala-node` and `phala-pruntime` containers.", "mimetype": "text/plain", "start_char_idx": 5777, "end_char_idx": 7518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "173fa5ce-2ceb-4c9a-a3c9-30b4a52c2033": {"__data__": {"id_": "173fa5ce-2ceb-4c9a-a3c9-30b4a52c2033", "embedding": null, "metadata": {"file_path": "./phala_dist/gatekeeper.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4", "node_type": "4", "metadata": {}, "hash": "605fbd90be7bb76ebad5bf46568bda9db663b43d418c77dbce577180c5ce92bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f43d993f-3939-4026-9979-62daaaea2bf4", "node_type": "1", "metadata": {}, "hash": "c6339fcdd0b5e7b1c73b6815501a01a2542b901ecc782e501ce2b0865d90160f", "class_name": "RelatedNodeInfo"}}, "text": "It reads the blokchain from `khala-node:9944` and sync the data to `phala-pruntime:8000`. If you run the full node remotely, just change the host name `khala-node` to the node rpc endpoint. The mnenomic is specified by the environment variable.\n\npherry usually takes 1-2 days to sync the blockchain history. However, since pRuntime doesn\u2019t persist the state, if it exits, you will need to sync from scratch in the next time.\n\nThe account you specified will be used to send transactions on behalf of the Gatekeeper. Once it\u2019s fully synced, it will initiate a `PhalaRegistry.registerWorker()` extrinsic to the blockchain. A Gatekeeper is identified by its worker public key (worker pubkey). You can find it from `http://phala-pruntime:8000/get_info` RPC, and check the registration status from the blockchain at `PhalaRegistry.workers()`.\n\nSummary:\n\n1. Run the full node in Archive mode and keep it in sync\n2. Run pRuntime with the SGX device set up correctly\n3. Run pherry to connect the full node and pRuntime\n\n## Propose to join the Gatekeeper whitelist <a href=\"#propose-to-join-the-gatekeeper-whitelist\" id=\"propose-to-join-the-gatekeeper-whitelist\"></a>\n\n(WIP)\n\n## Monitor the Gatekeeper <a href=\"#monitor-the-gatekeeper\" id=\"monitor-the-gatekeeper\"></a>\n\n(WIP)", "mimetype": "text/plain", "start_char_idx": 7519, "end_char_idx": 8784, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b560efb5-e638-45c5-a73f-525c28cc10f9": {"__data__": {"id_": "b560efb5-e638-45c5-a73f-525c28cc10f9", "embedding": null, "metadata": {"file_path": "./phala_dist/configure-the-worker.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9adc84c1-89d0-49f4-a776-02a43a3f7d4a", "node_type": "4", "metadata": {}, "hash": "b645732677e20981a5d783e5158f8d2e1fe5830bf6b2a1175f026720324a01d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4acbccb5-9c1b-4895-bbab-85f3e2afcec5", "node_type": "1", "metadata": {}, "hash": "440e20af547390d36077f7289b1889a9c9167c7f561c1f98d6acbd67758c0ab7", "class_name": "RelatedNodeInfo"}}, "text": "# Configure the Worker\n\n## Get the Worker Ready <a href=\"#get-the-worker-ready\" id=\"get-the-worker-ready\"></a>\n\nThis section shows you how to set up your Phala mining CLI, the respective tools, and setting the last parameters for your drivers.\n\nExecute the following command to get your worker ready to launch for mining.\n\n```\nsudo ~/solo-mining-scripts-main/phala.sh install\n```\n\n> `phala.sh` will update the worker to use your newly installed driver settings and configuration. This is required for first-time workers or whenever you update or change your driver configuration for this change to take effect.\n\n## Mode selection <a href=\"#mode-selection\" id=\"mode-selection\"></a>\n\nDuring the installation process, you will receive a prompt like:\n\n`mode select ( full | prune ) (Default: PRUNE):`\n\nThe default option here is \u201cprune\u201d mode, which means less hard disk space is used to install node data. Just click `Enter` to go to the next step.\n\nIf your hard disk has more than 2T space and you want to install the complete Kusama node data, type `full` and click `Enter` to go to the next step.\n\n## Worker Configuration <a href=\"#worker-configuration\" id=\"worker-configuration\"></a>\n\n> \u26a0\ufe0f DO NOT reuse the same gas fee account across multiple solo workers.\n\n### Set Wallet Address & More <a href=\"#set-wallet-address--more\" id=\"set-wallet-address--more\"></a>\n\nYou will be prompted to set:\n\n* the number of CPU cores to use\n\n<details>\n\n<summary>How to look up your CPU Cores</summary>\n\nIf you do not know your CPUs utilizable cores, you may look them up by executing the following command:\n\n```\nlscpu | grep -E '^Thread|^Core|^Socket|^CPU\\('\n```\n\n</details>\n\n* node name\n* gas fee account mnemonic\n* the pool owner account\n\n> If any entered parameter is invalid, the script will ask to re-enter the information.\n>\n> \u2139 To ensure the proceeding of mining, the balance of the gas fee account should be >2 PHA.\n\n### Check Current Configuration <a href=\"#check-current-configuration\" id=\"check-current-configuration\"></a>\n\n> Note, the following command will show sensitive information (mnemonic seed).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2096, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4acbccb5-9c1b-4895-bbab-85f3e2afcec5": {"__data__": {"id_": "4acbccb5-9c1b-4895-bbab-85f3e2afcec5", "embedding": null, "metadata": {"file_path": "./phala_dist/configure-the-worker.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9adc84c1-89d0-49f4-a776-02a43a3f7d4a", "node_type": "4", "metadata": {}, "hash": "b645732677e20981a5d783e5158f8d2e1fe5830bf6b2a1175f026720324a01d0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b560efb5-e638-45c5-a73f-525c28cc10f9", "node_type": "1", "metadata": {}, "hash": "401f4e2340dbef7c090a131518cf97bd30508291f8475a75164dd0e5e7046522", "class_name": "RelatedNodeInfo"}}, "text": "During the daily operation of workers (not in the installation process above), You can get the current parameters in use with\n\n```\nsudo phala config show\n```\n\nAnd use the following command to reset your parameters.\n\n```\nsudo phala config\n```\n\n## Headers update\n\nIf you select the \u201cPrune\u201d mode, and this is the first time that you install the mining tools which means there is no headers data in the worker.\n\nAfter the Configuration, do remember to update headers with\n\n```\nsudo phala update headers\n```\n\nIt may take some time to update headers, after the update, the installation is finished.\n\n## Snapshot update <a href=\"#snapshot-update\" id=\"snapshot-update\"></a>\n\nIf you need to download node data from the beginning, you can download the node snapshot with\n\n```\nsudo phala update snapshot\n```", "mimetype": "text/plain", "start_char_idx": 2098, "end_char_idx": 2894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d07fd75-09d4-4e28-bd7d-d51ffc414a17": {"__data__": {"id_": "7d07fd75-09d4-4e28-bd7d-d51ffc414a17", "embedding": null, "metadata": {"file_path": "./phala_dist/validators.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3b6f9b4-002c-4fe8-9f40-ce51b12ee455", "node_type": "4", "metadata": {}, "hash": "6052616cddc920b1ca734f0684df271a07852e5c091b52492747919fbba99986", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f90eae5-cb40-4d88-801b-99dd82de503f", "node_type": "1", "metadata": {}, "hash": "a484e959df5104861bc0997a3502a1cfbe5b026b46bf4c577b18c33bd4797566", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Validators\nsidebar_position: 0\n---\n\n## General considerations\n\n:::warning Important\nPlease check out the [security considerations](../fundamentals/security.md) before using Nethermind as a validator.\n:::\n\nFor Ethereum validators, we highly recommend checking out [Staking with Ethereum](https://ethereum.org/staking) and [Validator checklist](https://launchpad.ethereum.org/en/checklist).\n\n## Hardware configurations\n\nThe following hardware configurations for Ethereum Mainnet validators have been battle-tested by us and our users. We have observed excellent validator performance and stability with these configurations.\n\n:::note\nBefore setting up your infrastructure, check out [Nethermind hardware requirements](../get-started/system-requirements.md#hardware-requirements).\n:::\n\n### On-premises\n\nA single validator on Intel NUC 11:\n\n- CPU: Intel Core i7-1165G7\n- Memory: Crucial 32GB DDR4-3200 SODIMM\n- Storage: Samsung 980 PRO PCIe NVMe SSD 2TB\n- Internet speed: 620 Mbps download, 160 Mbps upload\n\n### AWS\n\nMultiple validators on the following EC2 instances:\n\n- [m6i.2xlarge](https://aws.amazon.com/ec2/instance-types/m6i/): 8 vCPU, 32 GiB memory\n- [m7g.2xlarge](https://aws.amazon.com/ec2/instance-types/m7g/): 8 vCPU, 32 GiB memory\n\nThese configurations have proven to work well for 1000-1500 validators and haven't been tested for more validators. Also, the validator clients have been separated from the consensus and execution clients and running on [t4g.small](https://aws.amazon.com/ec2/instance-types/t4/) instances.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f90eae5-cb40-4d88-801b-99dd82de503f": {"__data__": {"id_": "4f90eae5-cb40-4d88-801b-99dd82de503f", "embedding": null, "metadata": {"file_path": "./phala_dist/validators.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c3b6f9b4-002c-4fe8-9f40-ce51b12ee455", "node_type": "4", "metadata": {}, "hash": "6052616cddc920b1ca734f0684df271a07852e5c091b52492747919fbba99986", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d07fd75-09d4-4e28-bd7d-d51ffc414a17", "node_type": "1", "metadata": {}, "hash": "81f97a2547325773674f19c3acc6c9999bb1d657421ff97e6b86b7db63be6346", "class_name": "RelatedNodeInfo"}}, "text": "### Azure\n\nMultiple validators on the following VM instances:\n\n- [Standard_D8_v5](https://learn.microsoft.com/en-us/azure/virtual-machines/dv5-dsv5-series#dv5-series): 8 vCPU, 32 GiB memory\n- [Standard_D8ps_v5](https://learn.microsoft.com/en-us/azure/virtual-machines/dpsv5-dpdsv5-series#dpsv5-series): 8 vCPU, 32 GiB memory\n\nThese configurations have proven to work well for 1000-1500 validators and haven't been tested for more validators. Also, the validator clients have been separated from the consensus and execution clients and running on [Standard_D2pls_v5](https://learn.microsoft.com/en-us/azure/virtual-machines/dplsv5-dpldsv5-series#dplsv5-series) instances.\n\n### GCP\n\nMultiple validators on the [c2d-highmem-4](https://cloud.google.com/compute/docs/compute-optimized-machines#c2d-high-mem) instance: 4 vCPU, 32 GB memory\n\nThese configurations have proven to work well for 1000-1500 validators and haven't been tested for more validators. Also, the validator clients have been separated from the consensus and execution clients and running on [e2-small](https://cloud.google.com/compute/docs/general-purpose-machines#sharedcore) instances.\n\n## Gnosis validators\n\nTo set up a Gnosis Chain validator, see the [Gnosis Chain documentation](https://docs.gnosischain.com/node).", "mimetype": "text/plain", "start_char_idx": 1543, "end_char_idx": 2826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "922b1d35-48e7-4a9b-b077-a75ab4131f22": {"__data__": {"id_": "922b1d35-48e7-4a9b-b077-a75ab4131f22", "embedding": null, "metadata": {"file_path": "./phala_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4ab1ab79-3d32-4130-9099-129f182c981a", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "465927f4-2dc8-4340-ad19-0b41b7cbd1e5", "node_type": "1", "metadata": {}, "hash": "878a0558df5dab055b7458f71a5cf62b9c973fe52084fbdfc038da07b7553d2e", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: parity namespace\nsidebar_label: parity\nsidebar_position: 5\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### parity_clearEngineSigner\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_clearEngineSigner\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### parity_enode\n\nReturns the node enode URI.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_enode\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### parity_getBlockReceipts\n\nGet receipts from all transactions from particular block, more efficient than fetching the receipts one-by-one.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "465927f4-2dc8-4340-ad19-0b41b7cbd1e5": {"__data__": {"id_": "465927f4-2dc8-4340-ad19-0b41b7cbd1e5", "embedding": null, "metadata": {"file_path": "./phala_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4ab1ab79-3d32-4130-9099-129f182c981a", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "922b1d35-48e7-4a9b-b077-a75ab4131f22", "node_type": "1", "metadata": {}, "hash": "5f97d17972340dcb74577a1d2817dcea9ee771cd5f28ae88e46721f4806b4d50", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1fde0c5-6332-43e8-a8ce-f51daa09ed7a", "node_type": "1", "metadata": {}, "hash": "4d8c2016af2d7636befd3b8bae466a3c923c8dc4770b880206002b67644ef704", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_getBlockReceipts\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n\n</TabItem>\n</Tabs>\n\n### parity_netPeers\n\nReturns connected peers. Peers with non-empty protocols have completed handshake.", "mimetype": "text/plain", "start_char_idx": 1388, "end_char_idx": 2951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1fde0c5-6332-43e8-a8ce-f51daa09ed7a": {"__data__": {"id_": "a1fde0c5-6332-43e8-a8ce-f51daa09ed7a", "embedding": null, "metadata": {"file_path": "./phala_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4ab1ab79-3d32-4130-9099-129f182c981a", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "465927f4-2dc8-4340-ad19-0b41b7cbd1e5", "node_type": "1", "metadata": {}, "hash": "878a0558df5dab055b7458f71a5cf62b9c973fe52084fbdfc038da07b7553d2e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a1c1cf4-1799-4303-a0ca-186b8a78be84", "node_type": "1", "metadata": {}, "hash": "6203c6ed5a517f59e213bf9c912a778ed6865eee7a4dd19fda9d2e2b6110b0db", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_netPeers\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `active`: *string* (hex integer)\n  - `connected`: *string* (hex integer)\n  - `max`: *string* (hex integer)\n  - `peers`: array of *object*\n    - `caps`: array of *string*\n    - `id`: *string*\n    - `name`: *string*\n    - `network`: *object*\n      - `localAddress`: *string*\n      - `remoteAddress`: *string*\n    - `protocols`: map of *object*\n      - `difficulty`: *string* (hex integer)\n      - `headHash`: *string* (hash)\n      - `version`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### parity_pendingTransactions\n\nReturns a list of transactions currently in the queue. If address is provided, returns transactions only with given sender address.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)", "mimetype": "text/plain", "start_char_idx": 2953, "end_char_idx": 4088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a1c1cf4-1799-4303-a0ca-186b8a78be84": {"__data__": {"id_": "7a1c1cf4-1799-4303-a0ca-186b8a78be84", "embedding": null, "metadata": {"file_path": "./phala_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4ab1ab79-3d32-4130-9099-129f182c981a", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1fde0c5-6332-43e8-a8ce-f51daa09ed7a", "node_type": "1", "metadata": {}, "hash": "4d8c2016af2d7636befd3b8bae466a3c923c8dc4770b880206002b67644ef704", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13881e6e-636b-4368-9141-4668657a3b26", "node_type": "1", "metadata": {}, "hash": "3b17c5f117567377c61027dc8712c358392ab21aa5a1febb0b0feb4557f1646a", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_pendingTransactions\",\n      \"params\": [address]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `condition`: *object*\n  - `creates`: *string* (address)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `nonce`: *string* (hex integer)\n  - `publicKey`: *object*\n    - `address`: *string* (address)\n    - `bytes`: *string* (hex data)\n    - `prefixedBytes`: *string* (hex data)\n  - `r`: *string* (hex data)\n  - `raw`: *string* (hex data)\n  - `s`: *string* (hex data)\n  - `standardV`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### parity_setEngineSigner\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `password`: *string*", "mimetype": "text/plain", "start_char_idx": 4091, "end_char_idx": 5466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13881e6e-636b-4368-9141-4668657a3b26": {"__data__": {"id_": "13881e6e-636b-4368-9141-4668657a3b26", "embedding": null, "metadata": {"file_path": "./phala_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4ab1ab79-3d32-4130-9099-129f182c981a", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a1c1cf4-1799-4303-a0ca-186b8a78be84", "node_type": "1", "metadata": {}, "hash": "6203c6ed5a517f59e213bf9c912a778ed6865eee7a4dd19fda9d2e2b6110b0db", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_setEngineSigner\",\n      \"params\": [address, password]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### parity_setEngineSignerSecret\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `privateKey`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_setEngineSignerSecret\",\n      \"params\": [privateKey]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 5469, "end_char_idx": 6478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56ad6fb5-2b2f-49d2-bb03-7a6df078d110": {"__data__": {"id_": "56ad6fb5-2b2f-49d2-bb03-7a6df078d110", "embedding": null, "metadata": {"file_path": "./phala_dist/how-to-build-with-multi-proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745", "node_type": "4", "metadata": {}, "hash": "277ce100f6397cca05d07dc0d271a04b69d5e5e6db79bfdb773bda74b51389f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47ea36cf-b05c-44f9-b687-392550d322f2", "node_type": "1", "metadata": {}, "hash": "6d23f8ceb0cde9fcba1b166392352cea6ba7f9aaa33f8cc0e81519aeeabc5a91", "class_name": "RelatedNodeInfo"}}, "text": "# How to Build with Multi-Proof\n\nWe have JS Runtime custom-built based on [QuickJS](https://bellard.org/quickjs/). JavaScript code can be deployed to Phala TEE workers. We have engineered a WASM virtual machine called [Wapo](https://github.com/Phala-Network/wapo) based on [wasmtime](https://wasmtime.dev/), to facilitate its execution in SGX with the Gramine SDK.\n\nBefore we dive into the steps, here is a brief explanation of why you can simply write JavaScript code to generate TEE proof and run it inside a TEE environment:\n\n<figure><img src=\"../../.gitbook/assets/Build-Multi-Proof.png\" alt=\"\"><figcaption></figcaption></figure>\n\nWe provide WASM virtual machine as underlying infrastructure to run WASM smart contract in TEE environment, we integrated [QuickJS](https://bellard.org/quickjs/), which is a small and embeddable JavaScript engine. The QuickJS engine was compiled to a WASM binary and run in WASM virtual machine, when you submit your Javascript code, it will actually run in QuickJS engine, and essentially run it in a TEE environment. We exported bunch of useful data from Rust SDK that you can use in JS SDK by inject those data into customer's Javascript code when it being execute, one of them is the private key derived from Rust smart contract engine which you can use sign data.\n\nNow, let's break down step by step to see how you can generate a TEE-proof with JavaScript:\n\nTo make the whole progress as easy as possible, we have built a CLI called [jtee](https://github.com/tolak/jtee) to help user create and run JavaScript project on Phala TEE workers.\n\n1.  We haven published `jtee` to npm public registry so now you can use it with `npx`, for more details you can head to the source code repo on [Github](https://github.com/tolak/jtee). You can simply create a project by issuing the following command in terminal:\n\n    ```bash\n    $ npx jtee new  <my-jtee-project>\n    ```\n2.  As the diagram show above, each Javascript code is running in a seperate WASM virtual machine instance and Javascript engine deployed by developer.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2054, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47ea36cf-b05c-44f9-b687-392550d322f2": {"__data__": {"id_": "47ea36cf-b05c-44f9-b687-392550d322f2", "embedding": null, "metadata": {"file_path": "./phala_dist/how-to-build-with-multi-proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745", "node_type": "4", "metadata": {}, "hash": "277ce100f6397cca05d07dc0d271a04b69d5e5e6db79bfdb773bda74b51389f0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56ad6fb5-2b2f-49d2-bb03-7a6df078d110", "node_type": "1", "metadata": {}, "hash": "7019a4d2c8d69676014fbda11374b02f4e9ef4a58ef7b66b82286fb0c758c9f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d162be4c-5bdf-43eb-af8c-f0df9870f3cf", "node_type": "1", "metadata": {}, "hash": "5ecc66b080a7a4bab1383a22d4ed7f98d12b2bbc21e1189b88adc8de9a8188a7", "class_name": "RelatedNodeInfo"}}, "text": "For the next step is to deploy the engine for your project, the purpose to do so is to have a dedicated private key that only be used for this project.\n\n    Before run deploy command, you need to prepare a Phala blockchain account with enough balance and the node endpoint in the .env file like below in your project root directory. You can check your account balance at [Phala blockchain explorer](https://polkadot.js.org/apps/#/accounts).\n\n    ```bash\n    PHALA_ACCOUNT_URI=\"elegant capable test bar uncover comic speed cabin tattoo company cabin layer\"\n    PHALA_RPC=wss://poc6.phala.network/ws\n    ```\n\n    Then, execute the following command to deploy the engine, the corresponding account will be the deployer of the engine contract:\n\n    ```bash\n    $ npx jtee deploy\n    ```\n\n    You finally will get the contract ID if everything went well, contract ID would be used when execute Javascript code in the engine:\n\n    ```\n    \u2705 Contract uploaded & instantiated:  0x9caa44c6686d1c1e17b4885a96faa6d055055930a248531950b0c11217cebf51\n    ```\n\n    If you really want to dig into the details of how the engine manage the key derivation and script running, check the code [here](https://github.com/tolak/jtee/blob/main/engine/lib.rs).\n3.  The last and final step is to run your Javascript code in the engine. Simple type `jtee run` at the root director of your project.\n\n    ```jsx\n    $ npx jtee run\n    ```\n\n    This will 1) First compile your project to a single Javascript file from entry file located at app/index.js to dist/index.js , 2) Then upload the code and execute the it in the Javascript engine you deployed on last step. Note that only the engine deployer have the permission to execute Javascript code using this engine, which can protect your from other malicious code upload by attacker.", "mimetype": "text/plain", "start_char_idx": 2055, "end_char_idx": 3860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d162be4c-5bdf-43eb-af8c-f0df9870f3cf": {"__data__": {"id_": "d162be4c-5bdf-43eb-af8c-f0df9870f3cf", "embedding": null, "metadata": {"file_path": "./phala_dist/how-to-build-with-multi-proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745", "node_type": "4", "metadata": {}, "hash": "277ce100f6397cca05d07dc0d271a04b69d5e5e6db79bfdb773bda74b51389f0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47ea36cf-b05c-44f9-b687-392550d322f2", "node_type": "1", "metadata": {}, "hash": "6d23f8ceb0cde9fcba1b166392352cea6ba7f9aaa33f8cc0e81519aeeabc5a91", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0cbf9190-c37c-4ee8-bafe-711bd7910657", "node_type": "1", "metadata": {}, "hash": "a0b421036047f3d819b8258bc3446f491307408ccc4d5304564f549e7cab6d06", "class_name": "RelatedNodeInfo"}}, "text": "Now, let\u2019s take a look of the code in `app/index.js` to see what you can do with the `key`\n\n```typescript\nasync function main() {\n    // The account public key in Phala network you used to deploy the engine\n    console.log('executor owner:', jtee.owner);\n\n    // The account derived inside TEE for your project which you can use to\n    // submit transaction to Ethereum\n    console.log('executor account:', jtee.account);\n\n    // ! NEVER print the key to log\n    // The private key of jtee account above, never revealed to outside\n    const key = jtee.key;\n\n    // Now you can create transaction data and sign it with `key`,\n    // Make sure have ETH in the executor account before send tx to blockchain\n    // For example, call method Flipper.flip() of solidity contract `contract/Flipper.sol`\n    /*\n    const abi = [\n        \"function flip() public\",\n    ];\n    const wallet = new ethers.Wallet(key, new ethers.JsonRpcProvider(process.env.ETHEREUM_RPC | '<http://127.0.0.1:8488>'));\n    const flipper = new ethers.Contract('0x...', abi, wallet);\n    await flipper.flip();\n    */\n}\n\nmain().catch(console.error);\n```\n\nThe code is super simple, the only new thing for you probably is the object `jtee` if you have build with `ethers` package before. `jtee` object was injected by the engine which exported several objects that you can use in your script. `jtee.account` is the corresponding account of the `jtee.key`. Which you can use to submit transaction to blockchain (**Before that, don't forget top-up native asset to this account**). `jtee.key` is the private key derived from engine, the security of the key is guranteed by TEE but you should take care of it and **never print it to logs**. The rest commented code is the example to call smart contract located in `contract/Flipper.sol` using [ethers.js](https://docs.ethers.org/).", "mimetype": "text/plain", "start_char_idx": 3862, "end_char_idx": 5701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0cbf9190-c37c-4ee8-bafe-711bd7910657": {"__data__": {"id_": "0cbf9190-c37c-4ee8-bafe-711bd7910657", "embedding": null, "metadata": {"file_path": "./phala_dist/how-to-build-with-multi-proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745", "node_type": "4", "metadata": {}, "hash": "277ce100f6397cca05d07dc0d271a04b69d5e5e6db79bfdb773bda74b51389f0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d162be4c-5bdf-43eb-af8c-f0df9870f3cf", "node_type": "1", "metadata": {}, "hash": "5ecc66b080a7a4bab1383a22d4ed7f98d12b2bbc21e1189b88adc8de9a8188a7", "class_name": "RelatedNodeInfo"}}, "text": "In real use case, your probably need to construct transaction data from your own smart contract, and the `TEE-proof` which we mentioned few times is also not a concrete form, because your code already run in a trusted environment, and `jtee.key` can be used to create the certification to prove the code has run as expected and returned a legitimate result. In the context of verify them on Ethereum, an ECDSA signature is enough.", "mimetype": "text/plain", "start_char_idx": 5702, "end_char_idx": 6132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b245ba86-5360-4875-9996-786b86addab2": {"__data__": {"id_": "b245ba86-5360-4875-9996-786b86addab2", "embedding": null, "metadata": {"file_path": "./phala_dist/build-stateless-backend.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66a18a84-1b5f-4b0f-b720-748bcb8b0196", "node_type": "4", "metadata": {}, "hash": "0f69325408ca44dfc70a42c1d86e20efe9f32f10e1309e3be0e4e2c6bb0714b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b622b9dc-bdf1-4f55-a76b-1c8cf5ce6669", "node_type": "1", "metadata": {}, "hash": "1a8e3862dea01009245ce4067d2060b9e9828f2eb32cd11a6402c46ca6097a49", "class_name": "RelatedNodeInfo"}}, "text": "# Build Stateless Backend\n\n## Why start with a stateless backend <a href=\"#why-start-with-a-stateless-backend\" id=\"why-start-with-a-stateless-backend\"></a>\n\nCompared with traditional smart-contract-based DApps which store all their states on-chain and require transactions for interaction, the desired use cases of Phat Contract happen off-chain with no (or limited) data stored on-chain. For example, instead of implementing an [ERC-20](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/) token with Phat Contract (whose balance has to be stored on-chain), we recommend deploying your ERC-20 contract on Ethereum and using Phat Contract to operate it.\n\nPhat Contract itself focuses on computation instead of storage, so it can be very easy to build a stateless backend with Phat Contract. In fact, you can connect to other storage services with the HTTP requests using Phat Contract. Backends and especially serverless backends are usually stateless and work very well without databases.\n\nImplementing a stateless backend also brings immediate benefits at no developing cost:\n\n* **Easy concurrent processing.** With Phala, it\u2019s easy to deploy your contract to multiple Workers, then all the instances can handle the users' off-chain requests (called [Query](call-your-contract.md)) concurrently if there are no state-consistency limitations;\n* **Go purely off-chain.** If your contract is stateless, it goes totally off-chain and is no longer limited by gas fee and block latency anymore. Many Phat Contract advantages (like HTTP support) are only allowed off-chain.\n\n## What if I really need states / transactions? <a href=\"#what-if-i-really-need-states--transactions\" id=\"what-if-i-really-need-states--transactions\"></a>\n\nPhat Contract still supports the vanilla on-chain states and transaction processing!\n\nWhat\u2019s more, all the contract states are encrypted and stored. But when you use these states, Phat Contract will still become subject to gas fees and low performance just like smart contracts. We explain contract states in the [store-contract-states.md](store-contract-states.md \"mention\").\n\nFor off-chain computation, the recommended way to store your states is to use external storage services. Phat Contract can easily connect to S3-compatible storage services and use them as cheaper and faster off-chain state storage.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2348, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b622b9dc-bdf1-4f55-a76b-1c8cf5ce6669": {"__data__": {"id_": "b622b9dc-bdf1-4f55-a76b-1c8cf5ce6669", "embedding": null, "metadata": {"file_path": "./phala_dist/build-stateless-backend.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66a18a84-1b5f-4b0f-b720-748bcb8b0196", "node_type": "4", "metadata": {}, "hash": "0f69325408ca44dfc70a42c1d86e20efe9f32f10e1309e3be0e4e2c6bb0714b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b245ba86-5360-4875-9996-786b86addab2", "node_type": "1", "metadata": {}, "hash": "56e43078ec6974d757e8d1853ee57b0e7ad23e5447dd298bcdc8058323ca16e0", "class_name": "RelatedNodeInfo"}}, "text": "Explore how to do this in the following section.\n\n> Always remember your contract may be deployed to multiple Workers and they run concurrently. If multiple instances try to write to the storage services at the same time, there can be [race conditions](https://ketanbhatt.com/db-concurrency-defects/).\n>\n> For now, we do not provide native locking or transaction support for these storage services.", "mimetype": "text/plain", "start_char_idx": 2349, "end_char_idx": 2747, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06ab23c3-f2ce-44d3-9c6e-570ea347db4e": {"__data__": {"id_": "06ab23c3-f2ce-44d3-9c6e-570ea347db4e", "embedding": null, "metadata": {"file_path": "./phala_dist/add-a-data-source.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0feb1205-97ee-4a1c-85c9-f11e6a22d309", "node_type": "4", "metadata": {}, "hash": "d7c531919bcfc9eb83a76709644144c488b4aa88ea3ba7cebaad84ce92aa0c6e", "class_name": "RelatedNodeInfo"}}, "text": "# Add a Data Source\n\nCheck out the [Weather Agent example](../examples/create-a-weather-agent-w-function-calling.md) for a tutorial on how building a Data Source Agent for retrieval.\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 274, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81439625-6cf2-4a40-9b0c-65dded988b19": {"__data__": {"id_": "81439625-6cf2-4a40-9b0c-65dded988b19", "embedding": null, "metadata": {"file_path": "./phala_dist/how-to-switch-from-solo-mining-to-prb-mining.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d11984d8-79db-42ea-92cb-481dd022db42", "node_type": "4", "metadata": {}, "hash": "7a0e7d59957d6775b8e7fff49d79c6c9bbf40ba84912540027ec5451e4a3834e", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: worker\n---\n\n# How to switch from Solo scripts to PRB worker\n\n## How Solo Worker Works <a href=\"#how-solo-worker-works\" id=\"how-solo-worker-works\"></a>\n\nSolo worker runs 3 Docker containers named Phala-node, Phala-pherry, and Phala-pRuntime.\n\nNode provides blockchain node services; PRuntime provides TEE-runtime services; And Pherry acts as a bridge between TEE and blockchain nodes. The only component that really provides decentralized computing services to the network is pRuntime\n\n## How PRB Works <a href=\"#how-prb-works\" id=\"how-prb-works\"></a>\n\nPRB is \u201cPhala Runtime Bridge\u201d which replaces pherry to make a bridge between the blockchain and pRuntime to convey information in batches.\n\n## How to switch from Solo mining to PRB mining <a href=\"#how-to-switch-from-solo-mining-to-prb-mining\" id=\"how-to-switch-from-solo-mining-to-prb-mining\"></a>\n\n* Turn off Pherry service on solo workers\n* Shut down the Node service on solo workers\n* Let pRuntime run alone and add pruntime\u2019s endpoint to PRB\n\n## Operation steps <a href=\"#operation-steps\" id=\"operation-steps\"></a>\n\n* Step1 `sudo phala stop`\n* Step 2 `sudo mkdir ~/prb`\n* Step 3 Copy the docker-compse.yml and .env files in the Solo mining folder to \\~/prb\n* Step 4 `sudo vim docker-compose.yml` Edit the docker-compose file and delete the descriptions of the node and pherry services\n* Step 5 `sudo docker-compose up -d` start pruntime alone\n* Step 6 Add the endpoint of this pruntime on the Worker page of Prb (the format is: http://xxx.xxx.xxx.xxx:8000)\n* Step 7 Restart the lifecycle component of prb\n\n## How to set up a PRB worker <a href=\"#how-to-set-up-a-prb-worker\" id=\"how-to-set-up-a-prb-worker\"></a>\n\nJust learn from this page: PRB setup", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1722, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4d9fb7f-a1f4-4acf-ad27-98fd2e5f6882": {"__data__": {"id_": "d4d9fb7f-a1f4-4acf-ad27-98fd2e5f6882", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a33c265-3f09-43ef-b129-98af9e30d6e9", "node_type": "1", "metadata": {}, "hash": "de8e6e86d4b8e5f4e85cdfb71e9660fc52a660ab28f2d779724bba62d48799bf", "class_name": "RelatedNodeInfo"}}, "text": "# Build Your First AI Agent Contract\n\nIf you like video tutorials, here is one of our latest workshops on building your first AI Agent Contract. In this tutorial, you will learn:\n\n* How to get an OpenAI API Key at https://red-pill.ai&#x20;\n* Clone the AI Agent Contract template repo\n* Build and test your Agent Script\n* Launch and interact with your Agent Script through the Phala Agent Gateway\n\n{% embed url=\"https://youtu.be/XX7NCKi7Y2I?si=GRORzY9acBDcy6UY\" %}\n\n<figure><img src=\"../../.gitbook/assets/AI-Agent-Contract-Execution.png\" alt=\"\"><figcaption><p>Agent Script executes in TEE Agent VM on Phala Network</p></figcaption></figure>\n\nThe RedPill AI Agent template is a **MINIMAL** template to build an AI Agent that can be hosted on Phala Network's decentralized hosting protocol. Unlike Vercel or other FaaS, it allows you to publish your AI Agent compiled code to IPFS and hosts it on a fully decentralized FaaS cloud with the following benefits:\n\n* \ud83d\udca8 **Ship Fast**: Build and ship with familiar toolchain in minutes\n* &#x20;\u26d1\ufe0f **Secure**: Execution guarded by rock solid TEE\n* &#x20;\ud83d\udd12 **Private**: Host API keys and user privacy at ease\n* \ud83d\udc8e **Unstoppable**: Powered by IPFS and Phala's 40k+ decentralized TEE workers\n* :fire: [@**hono/tiny**](https://hono.dev/docs/api/presets#hono-tiny) **Support**: a small, simple, and ultrafast web framework built on Web Standards.\n* \ud83e\uddea [**Vite Test Framework**](https://vitest.dev/guide/): Vite Testing Framework support, but you're free to change the test framework to your desire.\n\n{% hint style=\"info\" %}\nWe recommend using [@hono/tiny](https://hono.dev/docs/api/presets#hono-tiny) to avoid a large bundle size and the 20MB final artifact limitation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1702, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a33c265-3f09-43ef-b129-98af9e30d6e9": {"__data__": {"id_": "4a33c265-3f09-43ef-b129-98af9e30d6e9", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4d9fb7f-a1f4-4acf-ad27-98fd2e5f6882", "node_type": "1", "metadata": {}, "hash": "c748fb3d5e51b3e625d9c53e49d87b110453f7df1456adb6510bedf189d1f532", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "449239ce-1925-4a57-bc4c-921c01d4ed2f", "node_type": "1", "metadata": {}, "hash": "34ae119f4aab976c5893805a991c409c434c569a984af1c90b363e04b91512d9", "class_name": "RelatedNodeInfo"}}, "text": "{% endhint %}\n\nThis guide will focus on the following topics:\n\n* **Build** and **Deploy** Your AI Agent Contract\n  * Build and deploy your **Agent Contract** that is deployed to IPFS and served through the Phala Agent Gateway executed on Phala Network\n* **Use**/**Interact** with Your AI Agent Contract\n  * The Agent Gateway will fetch the Agent Contract code/prompt located on IPFS.\n  * Interact with your agent hosted through Phala's Agent Gateway (https://wapo-testnet.phala.network/ipfs/\\<CID>).\n\n## Getting Started\n\n### Prepare\n\nClone git repo or use [degit](https://www.npmjs.com/package/degit) to get the source code.\n\n{% tabs %}\n{% tab title=\"git\" %}\n```sh\ngit clone https://github.com/Phala-Network/ai-agent-template-redpill.git\n```\n{% endtab %}\n\n{% tab title=\"degit\" %}\n```bash\nnpx degit github:Phala-Network/ai-agent-template-redpill#main ai-agent-template-redpill\n```\n{% endtab %}\n{% endtabs %}\n\nInstall dependencies\n\n```shell\nnpm install\n```\n\n### Testing Locally\n\nCreate `.env` file with the default ThirdWeb API key for publishing your Agent Contract to IPFS\n\n```sh\ncp .env.example .env\n```\n\nGet an API Key from Redpill\n\n> **Note**\n>\n> There is a default RedPill API Key provided in the .env.example file. This API key is rate limited and if you run into an error that displays `Insufficient funds`, reach out to the Phala Team on [discord](https://discord.gg/phala-network).", "mimetype": "text/plain", "start_char_idx": 1703, "end_char_idx": 3092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "449239ce-1925-4a57-bc4c-921c01d4ed2f": {"__data__": {"id_": "449239ce-1925-4a57-bc4c-921c01d4ed2f", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a33c265-3f09-43ef-b129-98af9e30d6e9", "node_type": "1", "metadata": {}, "hash": "de8e6e86d4b8e5f4e85cdfb71e9660fc52a660ab28f2d779724bba62d48799bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af15de8a-7849-4c60-9830-2461c50b9e00", "node_type": "1", "metadata": {}, "hash": "c5b83d18c91803bd0e75a6b7b1b23419dae168cc595eb29d97a0e707e41bea0c", "class_name": "RelatedNodeInfo"}}, "text": ">\n> * Go to [https://red-pill.ai/dashboard](https://red-pill.ai/dashboard) and claim your API Key by swapping some ETH for wGPT at [https://app.uniswap.org/explore/tokens/base/0x74F62Bc1961028C22b8080961c6534f4eDD49D6C](https://app.uniswap.org/explore/tokens/base/0x74F62Bc1961028C22b8080961c6534f4eDD49D6C)\n> * Video Tutorial: [https://youtu.be/ZoJwbLNhbWE](https://youtu.be/ZoJwbLNhbWE)\n\nIn [default.json](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/secrets/default.json) file replace `YOUR_API_KEY` with your API Key. The default has a rate limit. If you want access to a RedPill code, reach out to the Phala Team.\n\n```json\n{\n  \"apiKey\": \"YOUR_REDPILL_API_KEY\"\n}\n```\n\nBuild your Agent\n\n```sh\nnpm run build\n```\n\nTest your Agent locally\n\n```sh\nnpm run test\n```\n\nExpected Test Results\n\n```sh\nNow you are ready to publish your agent, add secrets, and interact with your agent in the following steps:\n- Execute: 'npm run publish-agent'\n- Set secrets: 'npm run set-secrets'\n- Go to the url produced by setting the secrets (e.g.", "mimetype": "text/plain", "start_char_idx": 3093, "end_char_idx": 4142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af15de8a-7849-4c60-9830-2461c50b9e00": {"__data__": {"id_": "af15de8a-7849-4c60-9830-2461c50b9e00", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "449239ce-1925-4a57-bc4c-921c01d4ed2f", "node_type": "1", "metadata": {}, "hash": "34ae119f4aab976c5893805a991c409c434c569a984af1c90b363e04b91512d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25f3f60e-7ebe-426b-a445-129d9979cb3e", "node_type": "1", "metadata": {}, "hash": "a265709e162019c98d8909764d0725e6c2cfdd53530d8ba05fb13a18ae04211a", "class_name": "RelatedNodeInfo"}}, "text": "https://wapo-testnet.phala.network/ipfs/QmPQJD5zv3cYDRM25uGAVjLvXGNyQf9Vonz7rqkQB52Jae?key=b092532592cbd0cf)\n\n \u2713 tests/index.test.ts (2) 6157ms\n   \u2713 Test RedPill AI Agent Contract (2) 6156ms\n     \u2713 GET Test: Pass chatQuery through URL Query 2722ms\n     \u2713 POST Test: Pass chatQuery and model through body of POST request 3434ms\n\n Test Files  1 passed (1)\n      Tests  2 passed (2)\n   Start at  16:30:03\n   Duration  6.36s (transform 23ms, setup 6ms, collect 31ms, tests 6.16s, environment 0ms, prepare 39ms)\n```\n\nUpload your compiled AI Agent code to IPFS.\n\n```sh\nnpm run publish-agent\n```\n\nUpon a successful upload, the command should show the URL to access your AI Agent.\n\n```sh\n- Uploading file to IPFS. This may take a while depending on file sizes.\n\n\u2714 Successfully uploaded file to IPFS.\n\u2714 Files stored at the following IPFS URI: ipfs://QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\n\u2714 Open this link to view your upload: https://b805a9b72767504353244e0422c2b5f9.ipfscdn.io/ipfs/bafybeifukvkuyztltpq2gi55nswzvwkpgrwrogwykm4ymoqeymh2pxoukm/\n\nAgent Contract deployed at: https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\n\nIf your agent requires secrets, ensure to do the following:\n1) Edit the ./secrets/default.json file or create a new JSON file in the ./secrets folder and add your secrets to it.", "mimetype": "text/plain", "start_char_idx": 4143, "end_char_idx": 5481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25f3f60e-7ebe-426b-a445-129d9979cb3e": {"__data__": {"id_": "25f3f60e-7ebe-426b-a445-129d9979cb3e", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af15de8a-7849-4c60-9830-2461c50b9e00", "node_type": "1", "metadata": {}, "hash": "c5b83d18c91803bd0e75a6b7b1b23419dae168cc595eb29d97a0e707e41bea0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1740027e-0ac9-4607-a8f9-6d557ecd1cdd", "node_type": "1", "metadata": {}, "hash": "9b46085dc82bfa7089471e0e4485cdcd0f8cc2b9e26536c1ba79785720ba72e8", "class_name": "RelatedNodeInfo"}}, "text": "2) Run command: 'npm run set-secrets' or 'npm run set-secrets [path-to-json-file]'\nLogs folder created.\nDeployment information updated in ./logs/latestDeployment.json\n```\n\n{% hint style=\"info\" %}\n\n\n**Note** that your latest deployment information will be logged to in file [`./logs/latestDeployment.json`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/latestDeployment.json). This file is updated every time you publish a new Agent Contract to IPFS. This file is also used to get the IPFS CID of your Agent Contract when setting secrets for your Agent Contract.\n\nHere is an example:\n\n```\n{\n  \"date\": \"2024-08-29T18:47:55.108Z\",\n  \"cid\": \"QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\",\n  \"url\": \"https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\"\n}\n```\n{% endhint %}\n\n{% hint style=\"warning\" %}\n\n\n**Did Thirdweb fail to publish?**\n\nIf ThirdWeb fails to publish, please signup for your own ThirdWeb account to publish your Agent Contract to IPFS. Signup or login at [https://thirdweb.com/dashboard/](https://thirdweb.com/dashboard/)\n\nWhenever you log into ThirdWeb, create a new API key and replace the default API Key with yours in the [.env](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/.env) file.\n\n```\nTHIRDWEB_API_KEY=\"YOUR_THIRDWEB_API_KEY\"\n```\n{% endhint %}\n\n### Accessing The Published Agent\n\nOnce published, your AI Agent is available at the URL: `https://wapo-testnet.phala.network/ipfs/<your-cid>`. You can get it from the \"Publish to IPFS\" step.\n\nYou can test it with `curl`.", "mimetype": "text/plain", "start_char_idx": 5482, "end_char_idx": 7058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1740027e-0ac9-4607-a8f9-6d557ecd1cdd": {"__data__": {"id_": "1740027e-0ac9-4607-a8f9-6d557ecd1cdd", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25f3f60e-7ebe-426b-a445-129d9979cb3e", "node_type": "1", "metadata": {}, "hash": "a265709e162019c98d8909764d0725e6c2cfdd53530d8ba05fb13a18ae04211a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b315cbc-c591-49e3-9582-27ffcaa5211b", "node_type": "1", "metadata": {}, "hash": "faf558c7301ab0877b816d5a2d1dc79d74dd5ada24a9cdb82fc76ee84e900212", "class_name": "RelatedNodeInfo"}}, "text": "```sh\ncurl https://wapo-testnet.phala.network/ipfs/<your-cid>\n```\n\n### Adding Secrets\n\nBy default, all the compiled JS code is visible for anyone to view if they look at IPFS CID. This makes private info like API keys, signer keys, etc. vulnerable to be stolen. To protect devs from leaking keys, we have added a field called `secret` in the `Request` object. It allows you to store secrets in a vault for your AI Agent to access.\n\nTo add your secrets,\n\n1. Edit the [default.json](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/secrets/default.json) file or create a new JSON file in the `./secrets` folder and add your secrets to it.\n\n```sh\n{\n  \"apiKey\": \"YOUR_REDPILL_API_KEY\"\n}\n```\n\n2. Run command to set the secrets\n\n```sh\nnpm run set-secrets\n# or if you have a custom JSON file\nnpm run set-secrets <path-to-json-file>\n```\n\nExpected output:\n\n```sh\nUse default secrets...\nStoring secrets...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   199    0    68  100   131    121    234 --:--:-- --:--:-- --:--:--   356\n{\"token\":\"5d9faaed6be5414a\",\"key\":\"a3a8a4ef2c057d5c\",\"succeed\":true}\n\nSecrets set successfully. Go to the URL below to interact with your agent:\nhttps://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c\nLog entry added to secrets.log\n```\n\n{% hint style=\"info\" %}\n**Note** that all your secrets will be logged in file [`./logs/secrets.log`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/secrets.log).", "mimetype": "text/plain", "start_char_idx": 7060, "end_char_idx": 8690, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b315cbc-c591-49e3-9582-27ffcaa5211b": {"__data__": {"id_": "2b315cbc-c591-49e3-9582-27ffcaa5211b", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1740027e-0ac9-4607-a8f9-6d557ecd1cdd", "node_type": "1", "metadata": {}, "hash": "9b46085dc82bfa7089471e0e4485cdcd0f8cc2b9e26536c1ba79785720ba72e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9809b8ce-0da9-42d4-9551-77dceb4e10f0", "node_type": "1", "metadata": {}, "hash": "376dd18996d52013c5b8b8b28542618919ff80c76e2b9da5e559a565bba632c0", "class_name": "RelatedNodeInfo"}}, "text": "This file is updated every time you add new secrets to your Agent Contract. If you have not published an Agent Contract, yet, this command will fail since there is not a CID to map the secrets to.\n\nHere is an example:\n\n```sh\n2024-08-29T18:54:16.643Z, CID: [QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc], Token: [5d9faaed6be5414a], Key: [a3a8a4ef2c057d5c], URL: [https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c]\n```\n{% endhint %}\n\nThe API returns a `token` and a `key`. The `key` is the id of your secret. It can be used to specify which secret you are going to pass to your frame. The `token` can be used by the developer to access the raw secret. You should never leak the `token`.\n\nTo verify the secret, run the following command where `key` and `token` are replaced with the values from adding your `secret` to the vault.\n\n```sh\ncurl https://wapo-testnet.phala.network/vaults/<key>/<token>\n```\n\nExpected output:\n\n```sh\n{\"data\":{\"apiKey\":\"<REDPILL_API_KEY>\"},\"succeed\":true}\n```\n\n#### Accessing Your Secrets in Your Code\n\n```typescript\nlet vault: Record<string, string> = {}\ntry {\n  vault = JSON.parse(process.env.secret || '')\n} catch (e) {\n  console.error(e)\n  return c.json({ error: \"Failed to parse secrets\" })\n}\nconst apiKey = (vault.apiKey) ? vault.apiKey as string : 'SALTY_BAE'\n```\n\n### Handling Requests\n\nCheck the [`Hono` docs](https://hono.dev/docs) for information on accessing URL `queries` or `body` from a `post` request.", "mimetype": "text/plain", "start_char_idx": 8691, "end_char_idx": 10191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9809b8ce-0da9-42d4-9551-77dceb4e10f0": {"__data__": {"id_": "9809b8ce-0da9-42d4-9551-77dceb4e10f0", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b315cbc-c591-49e3-9582-27ffcaa5211b", "node_type": "1", "metadata": {}, "hash": "faf558c7301ab0877b816d5a2d1dc79d74dd5ada24a9cdb82fc76ee84e900212", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "41d52090-9c9d-4298-a03f-54777dd3853a", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "{% hint style=\"info\" %}\nWe recommend using @hono/tiny to avoid a large bundle size and the 20MB final artifact limitation.\n{% endhint %}\n\n**Example**\n\n```typescript\n// Access query value for a URL query named `type`\nlet queries = c.req.queries() || {}\nconst getType = (queries.type) ? queries.type[0] as string : ''\n// Access body from post request\nconst data = await c.req.json()\n```\n\n### Debugging Your Agent\n\nTo debug your agent, you can use the following command:\n\n```\ncurl https://wapo-testnet.phala.network/logs/all/ipfs/<CID>\n```\n\nAfter executing this command then you should see some output in the terminal to show the logs of requests to your agent.\n\n```\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] END Request: Duration: 166ms\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Is signature valid? ' true\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Verifying Signature with PublicKey ' '0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540'\n2024-09-04T03:18:34.", "mimetype": "text/plain", "start_char_idx": 10193, "end_char_idx": 11232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41d52090-9c9d-4298-a03f-54777dd3853a": {"__data__": {"id_": "41d52090-9c9d-4298-a03f-54777dd3853a", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9809b8ce-0da9-42d4-9551-77dceb4e10f0", "node_type": "1", "metadata": {}, "hash": "376dd18996d52013c5b8b8b28542618919ff80c76e2b9da5e559a565bba632c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "084fc924-2203-4713-abed-2aae5193282d", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=verify&data=tintinland%20message%20to%20sign&signature=0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] END Request: Duration: 183ms\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signature: 0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b'\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signing data [tintinland message to sign] with Account [0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540]'\n2024-09-04T03:17:15.", "mimetype": "text/plain", "start_char_idx": 11232, "end_char_idx": 12083, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "084fc924-2203-4713-abed-2aae5193282d": {"__data__": {"id_": "084fc924-2203-4713-abed-2aae5193282d", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "41d52090-9c9d-4298-a03f-54777dd3853a", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "feea7abe-0f51-4030-beb2-f0515176e9fa", "node_type": "1", "metadata": {}, "hash": "edef84c2ff8f73fa068290af1cf4fab772d4ef372907e2d9c7dcc2a126da54ca", "class_name": "RelatedNodeInfo"}}, "text": "238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=sign&data=tintinland%20message%20to%20sign\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] END Request: Duration: 169ms\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] END Request: Duration: 158ms\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64\na1e805bfd\n```\n\nTo create logs in your Agent Contract, you can use the following syntax in your `index.ts` file.\n\n```\n// info logs\nconsole.log('info log message!')\n// error logs\nconsole.error('error log message!')\n```\n\nFor more information check the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/console) on `console` object.", "mimetype": "text/plain", "start_char_idx": 12083, "end_char_idx": 13142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "feea7abe-0f51-4030-beb2-f0515176e9fa": {"__data__": {"id_": "feea7abe-0f51-4030-beb2-f0515176e9fa", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23", "node_type": "4", "metadata": {}, "hash": "df9768aa563fe3c45bf3dc7c6955afcec8359b43e2e3d226c4d3bc2e9236bf15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "084fc924-2203-4713-abed-2aae5193282d", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "### Run a Local Testnet With Docker\n\nRun a local testnet with [`docker` support](https://docs.docker.com/desktop/). All you need to do to get a local testnet started is run:\n\n{% hint style=\"danger\" %}\nRunning the local testnet may return an error if port **`8000`** is already in use.\n{% endhint %}\n\n```shell\nnpm run dev\n```\n\n**Make a Request to Your Local Build**\n\n```shell\n# GET request\ncurl http://127.0.0.1:8000/local\n# GET request with URL queries\ncurl http://127.0.0.1:8000/local?query1=one&query2=two\n# POST request\ncurl http://127.0.0.1:8000/local -X POST -H 'content-type: application/json' -d '{\"foo\": \"bar\"}'\n```\n\n**Add Secrets to Your Local Build**\n\n```shell\ncurl http://127.0.0.1:8000/vaults -H 'Content-Type: application/json' -d '{\"cid\": \"local\", \"data\": {\"secretKey\":\"secretValue\"}}'\n```\n\n**Check The Logs of Your Local Build**\n\n```shell\ncurl 'http://127.0.0.1:8000/logs/all/local'\n```\n\nCongratulations! You have deployed and interacted with your first AI Agent Contract on Phala Network! Now let's move to a more Web3-centric agent to execute transactions onchain by importing  the [Viem SDK](https://viem.sh) into the AI Agent Contract.", "mimetype": "text/plain", "start_char_idx": 13144, "end_char_idx": 14298, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "577dcc23-e65c-4fef-8e58-2b4ae76158a6": {"__data__": {"id_": "577dcc23-e65c-4fef-8e58-2b4ae76158a6", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8dfd4f2b-be2a-4dc7-bfe3-7f952952329e", "node_type": "1", "metadata": {}, "hash": "567a655feda44ced81b90853d7065c035596e0f1bca3f60f149e38507ac79c0c", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83c\udfab Connect The Graph Phat Contract to EVM Consumer Contract\n\nIn the previous section we described how The Graph Starter Kit works. Let's revisit the diagram and description below.\n\n## Overview\n\n<figure><img src=\"../../../../.gitbook/assets/TheGraphFlow.jpg\" alt=\"\"><figcaption></figcaption></figure>\n\nThe diagram above displays the user journey of (1) Alice requesting a trust score for Eve from the EVM Consumer Contract. When (2) a new action request is added to the queue, (3) the Phala Network Phat Contract will pop the action off the queue and perform the off-chain work to compute a trust score.\n\nFirst (4) the Phat Contract will create a `batchHttpRequest` to query 3 separate subgraph endpoints to determine if Eve has any ERC-721 NFTs, a NounsDAO NFT,  an ENS Domain, and if any accounts delegate votes to Eve on Snapshot. Once this data is returned then (5) the Phat Contract will compute a score based on some scoring criteria. You can view the code [here](https://bit.ly/pc-the-graph-repo). Lastly, (6) the trust score for Eve has been returned to the EVM Consumer Contract and Eve's score is set in the Consumer Contract's storage for anyone to query.\n\n## Getting Started\n\nIf you have not setup The Graph code repo locally, go back to the [Quick Start](quick-start.md) section and follow the initial setup steps.\n\n### Before Deployment\n\nBefore deploying, you will need to either export your Phala Account via polkadot.js extension or store your private key in the .env (optionally you can manually enter during deployment as well).\n\n**Option 1: Export Polkadot account as json file**\n\nGo to your browser and click on the polkadot.js extension. Select your account and click \"Export Account\". Next, you will be prompted for your password before saving the file to your project directory. **Note** this is what will be set to `POLKADOT_WALLET_ACCOUNT_PASSPHRASE`. Make sure to save the file as `polkadot-account.json` in the **root** of your project directory.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1973, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8dfd4f2b-be2a-4dc7-bfe3-7f952952329e": {"__data__": {"id_": "8dfd4f2b-be2a-4dc7-bfe3-7f952952329e", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "577dcc23-e65c-4fef-8e58-2b4ae76158a6", "node_type": "1", "metadata": {}, "hash": "71798069ae21fbe10b631121f53b5ff336c5867d15efbc266086905c43cb84c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62b1ea51-0c0e-481d-9fc3-0eed0ae2d38d", "node_type": "1", "metadata": {}, "hash": "1f195c278900781ac0c1ede71507c9f8c00de4784738a88f5701d36e0b4c6f83", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/image (5) (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"../../../../.gitbook/assets/image (3) (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n<figure><img src=\"../../../../.gitbook/assets/image (4) (1).png\" alt=\"\"><figcaption></figcaption></figure>\n\n**Option 2: Set mnemonic phrase to `POLKADOT_WALLET_SURI`**\n\nAfter creating your Phala Profile, set your `.env` variable `POLKADOT_WALLET_SURI` to the mnemonic phrase from generating the new Polkadot Account.\n\nHere is a screenshot of how to set `POLKADOT_WALLET_SURI`:\n\n<figure><img src=\"../../../../.gitbook/assets/image (8).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Deployments (Local, Testnet, Mainnet)\n\nThis guide will be separated into 3 tabs including:\n\n* **Local**: Local Testnet Deployment\n* **Testnet**: PoC6 Testnet & EVM Chain Testnet Deployment\n* **Mainnet**: Phala Mainnet & EVM Chain Mainnet Deployment\n\n> **Secrets (**[**What are Secrets**](../featured-blueprints/handling-secrets.md)**?", "mimetype": "text/plain", "start_char_idx": 1975, "end_char_idx": 3010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62b1ea51-0c0e-481d-9fc3-0eed0ae2d38d": {"__data__": {"id_": "62b1ea51-0c0e-481d-9fc3-0eed0ae2d38d", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8dfd4f2b-be2a-4dc7-bfe3-7f952952329e", "node_type": "1", "metadata": {}, "hash": "567a655feda44ced81b90853d7065c035596e0f1bca3f60f149e38507ac79c0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1825b8b-64e8-4865-8646-7a4e3c2747b6", "node_type": "1", "metadata": {}, "hash": "aa5ef7e3323657078c8090f1c966ff294fba873538a415f054fe31e6a566082d", "class_name": "RelatedNodeInfo"}}, "text": "):**\n>\n> * `apiUrl` - The endpoint base URL to the separate subgraph endpoints hosted on The Graph\n> * `apiKey` - an API key created on The Graph\n>\n> ```\n> {\n>     \"apiUrl\": \"https://gateway.thegraph.com/api/\",\n>     \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"\n> }\n> ```\n\n{% tabs %}\n{% tab title=\"Local\" %}\nIn the previous [Quick Start](quick-start.md) section, we installed the dependencies and ran 2 separate tests locally, but these tests were not run against a live local testnet.&#x20;\n\nThis section will describe the process of:\n\n* Start up a local hardhat node\n* Deploy the EVM Consumer Contract to the local testnet\n* Run the `@phala/fn watch` command to run a local instance of The Graph Phat Contract\n* Simulate a sample request by executing `npm run localhost-push-request`\n* See the The Graph Phat Contract reply with a result to the EVM Consumer Contract\n\n### Testing Locally\n\nFirst step is to install the package dependencies with the following command:\n\n```bash\nnpm install\n```\n\nWith all the dependencies installed, we are ready to build The Graph Phat Contract.\n\n```bash\nnpx @phala/fn build\n```\n\nTo simulate the expected result locally, run the Phat Contract script now with this command:\n\n> Use `decode` and `encode` playground at [https://playground.ethers.org](https://playground.ethers.org).\n\n```bash\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd '{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n```\n\nHere is the expected output of this call where the encoded call will request a trust score result for the address `hashwarlock.eth`. The result is `16`.\n\n```bash\nnpx @phala/fn run dist/index.", "mimetype": "text/plain", "start_char_idx": 3010, "end_char_idx": 4790, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1825b8b-64e8-4865-8646-7a4e3c2747b6": {"__data__": {"id_": "f1825b8b-64e8-4865-8646-7a4e3c2747b6", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62b1ea51-0c0e-481d-9fc3-0eed0ae2d38d", "node_type": "1", "metadata": {}, "hash": "1f195c278900781ac0c1ede71507c9f8c00de4784738a88f5701d36e0b4c6f83", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b756a234-d78e-4683-9a55-be98c7846c36", "node_type": "1", "metadata": {}, "hash": "b88acfe36de71f809a73d4d0ec0a9272fded303c4b26ff7b50a429ba44608d63", "class_name": "RelatedNodeInfo"}}, "text": "js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd '{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000de1683287529b9b4c3132af8aad210644b259cfd\n[1]: 0xdE1683287529B9B4C3132af8AaD210644B259CfD\nRequest received for profile 0xdE1683287529B9B4C3132af8AaD210644B259CfD\n{\"data\":{\"account\":{\"id\":\"0xde1683287529b9b4c3132af8aad210644b259cfd\",\"ERC721tokens\":[{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/0x1c1f4a45a4e02789c110c3771dac92f92a9498f8016c8a6fefcf4d117603d277\",\"identifier\":\"12720044626168998947918556575205935844278720363082869735772187331921734521463\",\"contract\":{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\"}},{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/0x8078323181367af7deac0d322698034faf460e340e8bcfde9469655682e637b5\",\"identifier\":\"58108412688393927589019354909227047790661963669020827084996334376817871173557\",", "mimetype": "text/plain", "start_char_idx": 4790, "end_char_idx": 5858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b756a234-d78e-4683-9a55-be98c7846c36": {"__data__": {"id_": "b756a234-d78e-4683-9a55-be98c7846c36", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1825b8b-64e8-4865-8646-7a4e3c2747b6", "node_type": "1", "metadata": {}, "hash": "aa5ef7e3323657078c8090f1c966ff294fba873538a415f054fe31e6a566082d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45cb09bb-0d71-4167-b1c8-32d50aefdab6", "node_type": "1", "metadata": {}, "hash": "4e3542f9fc0499ec90e1bbb403f3c8683d560001906733b5b5febfbe1202bd7d", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\"}},{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/0x94286edc2c3c238c35cdeb1775c329c554fdd9df064c9ce86dad277d74a1667\",\"identifier\":\"4188358787553715944519630366137388336862205236752970957509174576540310705767\",\"contract\":{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\"}},{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/0xba4f236216fb3975855ea0572713af6335f992a110b7ea520a05f06440768b05\",\"identifier\":\"84270014960222169810810437893688928763911475898905132261856796581223088950021\",\"contract\":{\"id\":\"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\"}}]}}}\nERC-721 NFTs owned on ETH Check. Result [4]\n{\"data\":{\"account\":{\"id\":\"0xde1683287529b9b4c3132af8aad210644b259cfd\",\"ERC721tokens\":[]}}}\nHas a NounsDAO NFT Check. Result [4]\n{\"data\":{\"account\":{\"domains\":[{\"name\":\"warlox.eth\"},{\"name\":\"hashwarlock.eth\"},{\"name\":\"[4df3c10b7d9a8cfdbb386728d398389b2dfbcd0f66e4c1ee612a7c82f649ac0a].addr.reverse\"}]}}}\nHas ENS Domains Check. Result [16]\n{\"data\":{\"delegations\":[]}}\nHas Delegated Votes on Snapshot Check. Result [16]\nresponse: 0,1,", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45cb09bb-0d71-4167-b1c8-32d50aefdab6": {"__data__": {"id_": "45cb09bb-0d71-4167-b1c8-32d50aefdab6", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b756a234-d78e-4683-9a55-be98c7846c36", "node_type": "1", "metadata": {}, "hash": "b88acfe36de71f809a73d4d0ec0a9272fded303c4b26ff7b50a429ba44608d63", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0eea05be-f081-4868-a8fb-1373a13ca448", "node_type": "1", "metadata": {}, "hash": "865686c37400ace09f13046e994a47889c4c45a9efdda7525595468e945af685", "class_name": "RelatedNodeInfo"}}, "text": "16\n{\"output\":\"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000010\"}\n```\n\n#### Deploy a Local Hardhat Node\n\nNow that we have a simple understanding of the expected functionality of the Phat Contract, we can now take our tests to a local testnet. Here we will use Hardhat to deploy the EVM Consumer Contract then listen from new action requests and reply with built Phat Contract script.\n\nFirst we will start a local hardhat node.\n\n```sh\nnpm run localhost-node\n```\n\nWith our hardhat node running locally, we can now deploy the `OracleConsumerContract.sol` contract to the local hardhat network.\n\n```bash\nnpm run localhost-deploy\n```\n\n```bash\nnpm run localhost-deploy\n> the-graph-phat-contract@1.0.0 localhost-deploy\n> hardhat run --network localhost ./scripts/localhost/deploy.ts\n\nCompiled 18 Solidity files successfully (evm target: london).\nDeploying...\nDeployed { consumer: '0x5FbDB2315678afecb367f032d93F642f64180aa3' }\n```\n\nMake sure to copy the deployed contract address when you deploy your own contract locally. Note you contract address will be different than `0x5FbDB2315678afecb367f032d93F642f64180aa3`. We will now start watching the hardhat node deployed contract for any new requests from The Graph Phat Contract.", "mimetype": "text/plain", "start_char_idx": 6957, "end_char_idx": 8325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0eea05be-f081-4868-a8fb-1373a13ca448": {"__data__": {"id_": "0eea05be-f081-4868-a8fb-1373a13ca448", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45cb09bb-0d71-4167-b1c8-32d50aefdab6", "node_type": "1", "metadata": {}, "hash": "4e3542f9fc0499ec90e1bbb403f3c8683d560001906733b5b5febfbe1202bd7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c93ff33d-bbfd-4f03-8885-7d06df0e69ff", "node_type": "1", "metadata": {}, "hash": "b602f9dd454b6d2ec145b175d9c2dc1abfdd74b334b7d8bb9eb8bbff3c0f3c8f", "class_name": "RelatedNodeInfo"}}, "text": "```bash\nnpx @phala/fn watch 0x5FbDB2315678afecb367f032d93F642f64180aa3 artifacts/contracts/OracleConsumerContract.sol/OracleConsumerContract.json dist/index.js -a '{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n```\n\n```bash\nnpx @phala/fn watch 0x5FbDB2315678afecb367f032d93F642f64180aa3 artifacts/contracts/OracleConsumerContract.sol/OracleConsumerContract.json dist/index.js -a '{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\nListening for OracleConsumerContract MessageQueued events...\n```\n\nLet\u2019s now make a new request and see what happens with the listener\u2019s output. In separate tab, you will push a request with the following.\n\n> **Note**: The file can be edited [here](https://github.com/Phala-Network/the-graph-phat-contract/blob/b9ba89d26ac288500685410b98d2fe01bf426846/scripts/localhost/push-request.ts#L16) where you can change the `target` address.\n\n```bash\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3 npm run localhost-push-request\n```\n\n```bash\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x5FbDB2315678afecb367f032d93F642f64180aa3 npm run localhost-push-request\n> the-graph-phat-contract@1.0.0 localhost-push-request\n> hardhat run --network localhost ./scripts/localhost/push-request.ts\n\nPushing a request.\nReceived event [ResponseReceived]: {\n  reqId: BigNumber { value: \"1\" },\n  target: '0x011c23b3AadAf3D4991f3aBeE262A34d18e9fdb5',", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c93ff33d-bbfd-4f03-8885-7d06df0e69ff": {"__data__": {"id_": "c93ff33d-bbfd-4f03-8885-7d06df0e69ff", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0eea05be-f081-4868-a8fb-1373a13ca448", "node_type": "1", "metadata": {}, "hash": "865686c37400ace09f13046e994a47889c4c45a9efdda7525595468e945af685", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c28639a-e1bc-4fac-a5a0-012e65f83fdb", "node_type": "1", "metadata": {}, "hash": "ae0b37391b469327b0b19a91a2c0b61f617eb9306ae9c25394358f8f35ae19a0", "class_name": "RelatedNodeInfo"}}, "text": "value: BigNumber { value: \"70\" }\n}\n```\n\nIf you check back the tab where the Phat Contract is listening for new requests, the console log may look similar to below:\n\n```bash\nReceived event [MessageQueued]: {\n  tail: 0n,\n  data: '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000011c23b3aadaf3d4991f3abee262a34d18e9fdb5'\n}\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000011c23b3aadaf3d4991f3abee262a34d18e9fdb5\n[1]: 0x011c23b3AadAf3D4991f3aBeE262A34d18e9fdb5\nRequest received for profile 0x011c23b3AadAf3D4991f3aBeE262A34d18e9fdb5\n{\"data\":{\"account\":{\"id\":\"0x011c23b3aadaf3d4991f3abee262a34d18e9fdb5\",\"ERC721tokens\":[{\"id\":\"0x00703f9b11f2ac02d391a11e7b97c6ee80cd8563/0x2bd\",\"identifier\":\"701\",\"contract\":{\"id\":\"0x00703f9b11f2ac02d391a11e7b97c6ee80cd8563\"}},{\"id\":\"0x008f5a13d37db25d1bf7e7115747450e12e471b9/0x13fc\",\"identifier\":\"5116\",\"contract\":{\"id\":\"0x008f5a13d37db25d1bf7e7115747450e12e471b9\"}},{\"id\":\"0x0144ecf966096108b03148d0071df6c70c051a52/0x149f\",\"identifier\":\"5279\",", "mimetype": "text/plain", "start_char_idx": 9802, "end_char_idx": 10873, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c28639a-e1bc-4fac-a5a0-012e65f83fdb": {"__data__": {"id_": "5c28639a-e1bc-4fac-a5a0-012e65f83fdb", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c93ff33d-bbfd-4f03-8885-7d06df0e69ff", "node_type": "1", "metadata": {}, "hash": "b602f9dd454b6d2ec145b175d9c2dc1abfdd74b334b7d8bb9eb8bbff3c0f3c8f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc9342a1-efe6-4374-a2b1-c3c408d14d28", "node_type": "1", "metadata": {}, "hash": "76cd666c567467cbe2e88099ffda2486da9e9759c45df41078f3516e27dec1a8", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x0144ecf966096108b03148d0071df6c70c051a52\"}},{\"id\":\"0x015fcab6a246cfc0679c33ef0b9d9ef947d0bde4/0x1782\",\"identifier\":\"6018\",\"contract\":{\"id\":\"0x015fcab6a246cfc0679c33ef0b9d9ef947d0bde4\"}},{\"id\":\"0x0191c41dbceb20a612b25137133ca719e84f7933/0x11f\",\"identifier\":\"287\",\"contract\":{\"id\":\"0x0191c41dbceb20a612b25137133ca719e84f7933\"}},{\"id\":\"0x0191c41dbceb20a612b25137133ca719e84f7933/0x120\",\"identifier\":\"288\",\"contract\":{\"id\":\"0x0191c41dbceb20a612b25137133ca719e84f7933\"}},{\"id\":\"0x0191c41dbceb20a612b25137133ca719e84f7933/0xd8e\",\"identifier\":\"3470\",\"contract\":{\"id\":\"0x0191c41dbceb20a612b25137133ca719e84f7933\"}},{\"id\":\"0x0208517aa68e7c72769af76f4cfdeea9fa4ef4b9/0x213\",\"identifier\":\"531\",\"contract\":{\"id\":\"0x0208517aa68e7c72769af76f4cfdeea9fa4ef4b9\"}},{\"id\":\"0x026dce20bf77e08ca8aceb6b239cc54bb9d638ac/0x237\",\"identifier\":\"567\",\"contract\":{\"id\":\"0x026dce20bf77e08ca8aceb6b239cc54bb9d638ac\"}},{\"id\":\"0x032d96756697af7ec02ce03d39001b39f7a5d849/0x1a4\",\"identifier\":\"420\",", "mimetype": "text/plain", "start_char_idx": 10873, "end_char_idx": 11856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc9342a1-efe6-4374-a2b1-c3c408d14d28": {"__data__": {"id_": "cc9342a1-efe6-4374-a2b1-c3c408d14d28", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c28639a-e1bc-4fac-a5a0-012e65f83fdb", "node_type": "1", "metadata": {}, "hash": "ae0b37391b469327b0b19a91a2c0b61f617eb9306ae9c25394358f8f35ae19a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30507958-673a-4c4f-93e1-383905de3135", "node_type": "1", "metadata": {}, "hash": "c35e0eb765afe8d3784d8b0d5d647045a5fcd9d2f307906f9543f7394f51140e", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x032d96756697af7ec02ce03d39001b39f7a5d849\"}},{\"id\":\"0x038cc0f103c380400482d87be0d3abcc4d9b2225/0x2ed\",\"identifier\":\"749\",\"contract\":{\"id\":\"0x038cc0f103c380400482d87be0d3abcc4d9b2225\"}},{\"id\":\"0x039483c56aad5ee68a92eff1a1b666f2893c623e/0xf9d\",\"identifier\":\"3997\",\"contract\":{\"id\":\"0x039483c56aad5ee68a92eff1a1b666f2893c623e\"}},{\"id\":\"0x03ef30e1aee25abd320ad961b8cd31aa1a011c97/0x17a1\",\"identifier\":\"6049\",\"contract\":{\"id\":\"0x03ef30e1aee25abd320ad961b8cd31aa1a011c97\"}},{\"id\":\"0x03ef30e1aee25abd320ad961b8cd31aa1a011c97/0xcf1\",\"identifier\":\"3313\",\"contract\":{\"id\":\"0x03ef30e1aee25abd320ad961b8cd31aa1a011c97\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1000\",\"identifier\":\"4096\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x100b\",\"identifier\":\"4107\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x107d\",\"identifier\":\"4221\",", "mimetype": "text/plain", "start_char_idx": 11856, "end_char_idx": 12846, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30507958-673a-4c4f-93e1-383905de3135": {"__data__": {"id_": "30507958-673a-4c4f-93e1-383905de3135", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc9342a1-efe6-4374-a2b1-c3c408d14d28", "node_type": "1", "metadata": {}, "hash": "76cd666c567467cbe2e88099ffda2486da9e9759c45df41078f3516e27dec1a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94eb13e4-417c-42c9-be30-077af01718b5", "node_type": "1", "metadata": {}, "hash": "4f8feda0b4e3b5722fe7e5f86734d2b2c5564a63b7e6aeedc61301f92ed761f2", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x10de\",\"identifier\":\"4318\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x11aa\",\"identifier\":\"4522\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x12c5\",\"identifier\":\"4805\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x139a\",\"identifier\":\"5018\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x144\",\"identifier\":\"324\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x144e\",\"identifier\":\"5198\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x14a9\",\"identifier\":\"5289\",", "mimetype": "text/plain", "start_char_idx": 12846, "end_char_idx": 13838, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94eb13e4-417c-42c9-be30-077af01718b5": {"__data__": {"id_": "94eb13e4-417c-42c9-be30-077af01718b5", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30507958-673a-4c4f-93e1-383905de3135", "node_type": "1", "metadata": {}, "hash": "c35e0eb765afe8d3784d8b0d5d647045a5fcd9d2f307906f9543f7394f51140e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3b8fcf6e-4b18-4201-9d16-b6b477e8f38c", "node_type": "1", "metadata": {}, "hash": "2504578e877fac2fd8e115a639ede789e9d2f086a4ecb1abad7f70d49247f56b", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x14c0\",\"identifier\":\"5312\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1531\",\"identifier\":\"5425\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x153e\",\"identifier\":\"5438\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1569\",\"identifier\":\"5481\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x158c\",\"identifier\":\"5516\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x15ee\",\"identifier\":\"5614\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x161f\",\"identifier\":\"5663\",", "mimetype": "text/plain", "start_char_idx": 13838, "end_char_idx": 14832, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b8fcf6e-4b18-4201-9d16-b6b477e8f38c": {"__data__": {"id_": "3b8fcf6e-4b18-4201-9d16-b6b477e8f38c", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94eb13e4-417c-42c9-be30-077af01718b5", "node_type": "1", "metadata": {}, "hash": "4f8feda0b4e3b5722fe7e5f86734d2b2c5564a63b7e6aeedc61301f92ed761f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae038958-0785-44dd-8509-915a7290b53c", "node_type": "1", "metadata": {}, "hash": "04f9f8aa623de8cf9510f6c720ce3a13e1307176fd86e2fd3401e29f21767239", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x164d\",\"identifier\":\"5709\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x16db\",\"identifier\":\"5851\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1735\",\"identifier\":\"5941\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1742\",\"identifier\":\"5954\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1764\",\"identifier\":\"5988\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1793\",\"identifier\":\"6035\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x18b7\",\"identifier\":\"6327\",", "mimetype": "text/plain", "start_char_idx": 14832, "end_char_idx": 15826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae038958-0785-44dd-8509-915a7290b53c": {"__data__": {"id_": "ae038958-0785-44dd-8509-915a7290b53c", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3b8fcf6e-4b18-4201-9d16-b6b477e8f38c", "node_type": "1", "metadata": {}, "hash": "2504578e877fac2fd8e115a639ede789e9d2f086a4ecb1abad7f70d49247f56b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "203ee156-addc-466e-9a82-6295eeab53d2", "node_type": "1", "metadata": {}, "hash": "aacddb1adf3dfa5bed2f05f5abb5a1206486abe9e1af737eede5a8fce1470a06", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1926\",\"identifier\":\"6438\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1940\",\"identifier\":\"6464\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1988\",\"identifier\":\"6536\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x199a\",\"identifier\":\"6554\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1a8e\",\"identifier\":\"6798\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1b4\",\"identifier\":\"436\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1be3\",\"identifier\":\"7139\",", "mimetype": "text/plain", "start_char_idx": 15826, "end_char_idx": 16818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "203ee156-addc-466e-9a82-6295eeab53d2": {"__data__": {"id_": "203ee156-addc-466e-9a82-6295eeab53d2", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae038958-0785-44dd-8509-915a7290b53c", "node_type": "1", "metadata": {}, "hash": "04f9f8aa623de8cf9510f6c720ce3a13e1307176fd86e2fd3401e29f21767239", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6f20b95-3bc5-4508-b994-b2da2569f7eb", "node_type": "1", "metadata": {}, "hash": "23ec3b64fda45d1cbcde38e1fe9609110f7c4b9e6f200df2a07bac3716bed929", "class_name": "RelatedNodeInfo"}}, "text": "\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1beb\",\"identifier\":\"7147\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1d83\",\"identifier\":\"7555\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1dc0\",\"identifier\":\"7616\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1dd8\",\"identifier\":\"7640\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}},{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429/0x1e45\",\"identifier\":\"7749\",\"contract\":{\"id\":\"0x04b4786c3bb42387235a63628b7a4cb178817429\"}}]}}}\nERC-721 NFTs owned on ETH Check. Result [50]\n{\"data\":{\"account\":{\"id\":\"0x011c23b3aadaf3d4991f3abee262a34d18e9fdb5\",\"ERC721tokens\":[]}}}\nHas a NounsDAO NFT Check. Result [50]\n{\"data\":{\"account\":{\"domains\":[{\"name\":\"sissitian.eth\"},{\"name\":\"ariahuang.eth\"},{\"name\":\"hugovault.eth\"},{\"name\":\"hugosu.eth\"},{\"name\":\"dominichuang.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6f20b95-3bc5-4508-b994-b2da2569f7eb": {"__data__": {"id_": "d6f20b95-3bc5-4508-b994-b2da2569f7eb", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "203ee156-addc-466e-9a82-6295eeab53d2", "node_type": "1", "metadata": {}, "hash": "aacddb1adf3dfa5bed2f05f5abb5a1206486abe9e1af737eede5a8fce1470a06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59be979f-a131-402d-a55d-9354f00e71e4", "node_type": "1", "metadata": {}, "hash": "db3712c63d876797344abb5dd8c3dc5231f6b27890c392cb2f7af0ffe4ea2b26", "class_name": "RelatedNodeInfo"}}, "text": "eth\"}]}}}\nHas ENS Domains Check. Result [70]\n{\"data\":{\"delegations\":[]}}\nHas Delegated Votes on Snapshot Check. Result [70]\nresponse: 0,1,70\nJS Execution output: 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000046\n```\n\n:tada: **Congratulations!**&#x20;\n\nYou've completed deploying and testing The Graph Phat Contract successfully in a local testnet. Now let's move to deploying to an EVM Testnet and connecting a deployed Phat Contract on PoC6 Testnet to visualize how this works autonomously.\n{% endtab %}\n\n{% tab title=\"Testnet\" %}\n{% hint style=\"danger\" %}\n**Important**\n\nThis guide references the `mumbai` testnet chain.&#x20;\n\nThe`mumbai` testnet is [deprecated since 2024/04/08](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos), meaning the steps to deploy to a testnet will no longer work out of the box.\n\nYou can opt to use the [`amoy`](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos) testnet or any other EVM testnet instead.\n{% endhint %}\n\nIn the previous [Quick Start](../airstack/quick-start.md) section, we installed the dependencies.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59be979f-a131-402d-a55d-9354f00e71e4": {"__data__": {"id_": "59be979f-a131-402d-a55d-9354f00e71e4", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6f20b95-3bc5-4508-b994-b2da2569f7eb", "node_type": "1", "metadata": {}, "hash": "23ec3b64fda45d1cbcde38e1fe9609110f7c4b9e6f200df2a07bac3716bed929", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fbddd89a-f16d-4b94-a6c5-b71d5ead481f", "node_type": "1", "metadata": {}, "hash": "e28a55cff8a39f13a067b277b4babdcd4a68075eaa56486872afade757106bd3", "class_name": "RelatedNodeInfo"}}, "text": "Now it is time to deploy and test to an EVM public testnet.&#x20;\n\nThe following steps will be performed:\n\n* Deploy the EVM Consumer Contract to the target EVM chain\n  * The EVM Consumer Contract will request actions to be executed off-chain by the Phat Contract\n* Deploy The Graph Phat Contract to the Phala PoC6 Testnet\n  * Once deployed, update the `ATTESTOR_ROLE` in the EVM Consumer Contract to the `Attestor Address` in the Phat Contract 2.0 UI Dashboard\n* Send a `request(address target)` transaction to get a trust score about an EVM target address\n* See The Graph Phat Contract respond with an action reply with a score for the target address\n\n### Minimum Requirements\n\n* [ ] Create a [Phala Dashboard Profile](../create-a-dashboard-profile.md) on Phala PoC6 Testnet\n  * [ ] Add funds to the EVM Gas Account to pay TX fees on target EVM Testnet Chain\n* [ ] Finished the [Quick Start](quick-start.md)\n* [ ] (Recommended) Go through the `Local` tab deployment process\n* [ ] Burner Account for EVM Consumer Contract deployment\n\n### Deployment\n\nIn this example, we will use Polygon Mumbai Testnet as the target EVM Testnet Chain, but this can be changed to any EVM testnet of the developers choice.\n\n#### Install Dependencies & Compile Contracts <a href=\"#user-content-install-dependencies--compile-contracts\" id=\"user-content-install-dependencies--compile-contracts\"></a>\n\n```sh\n# install dependencies\n$ npm install\n\n# compile contracts\n$ npm run compile\n```\n\n#### Deploy to Polygon Mumbai Testnet <a href=\"#user-content-deploy-to-polygon-mumbai-testnet\" id=\"user-content-deploy-to-polygon-mumbai-testnet\"></a>\n\nWith the contracts successfully compiled, now we can begin deploying first to Polygon Mumbai Testnet. If you have not gotten `MATIC` for Mumbai Testnet then get `MATIC` from a [faucet](https://bit.ly/3ZyFoT3). Ensure to save the address after deploying the Consumer Contract because this address will be use in the \"Configure Client\" section of Phat Contract 2.0 UI.", "mimetype": "text/plain", "start_char_idx": 19178, "end_char_idx": 21162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbddd89a-f16d-4b94-a6c5-b71d5ead481f": {"__data__": {"id_": "fbddd89a-f16d-4b94-a6c5-b71d5ead481f", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59be979f-a131-402d-a55d-9354f00e71e4", "node_type": "1", "metadata": {}, "hash": "db3712c63d876797344abb5dd8c3dc5231f6b27890c392cb2f7af0ffe4ea2b26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d938ef1-1a45-4773-ad0c-dc68c54e55f9", "node_type": "1", "metadata": {}, "hash": "46b35f518275ef40e7d80da12a6d836be6d2be22ae79b6f43d950a36ce4be4a2", "class_name": "RelatedNodeInfo"}}, "text": "The deployed address will also be set to the environment variable `MUMBAI_CONSUMER_CONTRACT_ADDRESS`.\n\n<pre class=\"language-sh\"><code class=\"lang-sh\"><strong>npm run test-deploy\n</strong></code></pre>\n\n```sh\n# deploy contracts to testnet mumbai\nnpm run test-deploy\n# > the-graph-phat-contract@1.0.0 test-deploy\n# > hardhat run --network mumbai ./scripts/mumbai/deploy.ts\n#\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://mumbai.polygonscan.com/address/0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# MUMBAI_CONSUMER_CONTRACT_ADDRESS=0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n#\n# Done\n```\n\n#### **(Optional) Verify Contract on Polygon Mumbai Testnet**\n\nEnsure to update the `mumbai.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `mumbai.arguments.ts` file.\n\n> **Note**: Your contract address will be different than `0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run test-deploy`.\n\n```sh\nnpm run test-verify -- <MUMBAI_CONSUMER_CONTRACT_ADDRESS>\n```\n\n```sh\nnpm run test-verify -- 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# > the-graph-phat-contract@1.0.0 test-verify\n# > hardhat verify --network mumbai --constructor-args mumbai.arguments.ts 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n#\n# Nothing to compile\n# No need to generate any newer typings.", "mimetype": "text/plain", "start_char_idx": 21163, "end_char_idx": 22789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d938ef1-1a45-4773-ad0c-dc68c54e55f9": {"__data__": {"id_": "2d938ef1-1a45-4773-ad0c-dc68c54e55f9", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbddd89a-f16d-4b94-a6c5-b71d5ead481f", "node_type": "1", "metadata": {}, "hash": "e28a55cff8a39f13a067b277b4babdcd4a68075eaa56486872afade757106bd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9c971b77-0c0e-4997-9996-fd251db69051", "node_type": "1", "metadata": {}, "hash": "9719acb73425f83f1e037e544bdadf5ebd0f799bb1ae61324dfd0c32163c8142", "class_name": "RelatedNodeInfo"}}, "text": "# Successfully submitted source code for contract\n# contracts/OracleConsumerContract.sol:OracleConsumerContract at 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract OracleConsumerContract on Etherscan.\n# https://mumbai.polygonscan.com/address/0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355#code\n```\n\n#### Deploy Phat Contract to PoC6 Testnet <a href=\"#user-content-deploy-phat-contract-to-poc5-testnet\" id=\"user-content-deploy-phat-contract-to-poc5-testnet\"></a>\n\nFor customizing your Phat Contract, checkout Phat Contract custom configurations in [Cusomizing Your Phat Contract](../featured-blueprints/customizing-your-phat-contract.md) to learn more before deploying to PoC6 testnet.\n\nNow that are Phat Contract has built successfully, let's deploy to Phala PoC6 Testnet with the following command:\n\n```shell\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --coreSettings='{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n# If polkadot-account.json is in the root of project\nnpx @phala/fn upload -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n```\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```bash\nnpx @phala/fn upload -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n# ?", "mimetype": "text/plain", "start_char_idx": 22790, "end_char_idx": 24430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c971b77-0c0e-4997-9996-fd251db69051": {"__data__": {"id_": "9c971b77-0c0e-4997-9996-fd251db69051", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d938ef1-1a45-4773-ad0c-dc68c54e55f9", "node_type": "1", "metadata": {}, "hash": "46b35f518275ef40e7d80da12a6d836be6d2be22ae79b6f43d950a36ce4be4a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c50c6157-26da-4998-92cf-454271a10814", "node_type": "1", "metadata": {}, "hash": "c07c663a8479ef83ac700ce44e3018ed2e12cf82114b07157a7364f5af844e93", "class_name": "RelatedNodeInfo"}}, "text": "Please enter your client RPC URL https://polygon-mumbai.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# ? Please enter your consumer address 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# ? Please Enter hahaha account password [hidden]\n# \u2713 Compiled successfully.\n# \u2713 Connected to the endpoint: wss://poc6.phala.network/ws\n#\n# You are connecting to a testnet.\n#\n# \u2713 Your Brick Profile contract ID: 0x2a9f9a07886e11e1c5d63a176e3f75253d6765aadb90beb112fb3e55f7c98ea8\n# \u2713 The ActionOffchainRollup contract has been instantiated: 0xc9b96a665c3f1730606760f056b78bbb493f31a2b5406f8dd19e138561177336\n# ? Please select an external account: [1] 0x20050cae178a72e7c5adc207a060a16e65bbb7cf. https://polygon-mumbai.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# \u2713 Checking your settings\n# ? Please enter your project name My Phat Contract 6\n# \u2713 \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks.phala.network/workflows/0x2a9f9a07886e11e1c5d63a176e3f75253d6765aadb90beb112fb3e55f7c98ea8/6\n# Your Attestor address: 0x4a8e621202af9206959017c3795721f327f2ef28\n# Your WORKFLOW_ID: 6\n```\n\nGo to the [Phala Dashboard](https://dashboard.phala.network) and you can see your newly deployed Phat Contract.", "mimetype": "text/plain", "start_char_idx": 24431, "end_char_idx": 25643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c50c6157-26da-4998-92cf-454271a10814": {"__data__": {"id_": "c50c6157-26da-4998-92cf-454271a10814", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c971b77-0c0e-4997-9996-fd251db69051", "node_type": "1", "metadata": {}, "hash": "9719acb73425f83f1e037e544bdadf5ebd0f799bb1ae61324dfd0c32163c8142", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7afc1dac-44a3-4d9d-b4e7-6250a3b636bc", "node_type": "1", "metadata": {}, "hash": "384477b12dfa34c3dee1bc988208d656d01f19912ccf502e9e2ea71a4edd8c1b", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/DeployedTheGraphPC.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### **Interact with Consumer Contract on Polygon Mumbai**\n\nTest Consumer Contract on Mumbai with a few tests to check for malformed requests failures, successful requests, and set the attestor.\n\n```sh\nnpm run test-set-attestor\n```\n\n```sh\nnpm run test-set-attestor\n# > the-graph-phat-contract@1.0.0 test-set-attestor\n# > hardhat run --network mumbai ./scripts/mumbai/set-attestor.ts\n#\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Contract 2.0 UI dashboard (https://bricks.phala.network)\n# - Go to the 'Configuration' tab and update the 'Client' box\n# - Set value to 0xEE2F3526686D27f682ecb6E3dC91cd8c972Cf355\n# Done\n```\n\nTest pushing a malform request.\n\n```sh\nnpm run test-push-malformed-request\n```\n\n```sh\nnpm run test-push-malformed-request\n# > the-graph-phat-contract@1.0.0 test-push-malformed-request\n# > hardhat run --network mumbai ./scripts/mumbai/push-malformed-request.ts\n#\n# Pushing a malformed request...\n# Done\n```\n\nWe can visualize the response from the Phat Contract in the block explorer.\n\n<figure><img src=\"../../../../.gitbook/assets/malformreq-thegraph-pc.png\" alt=\"\"><figcaption></figcaption></figure>\n\nTest pushing a valid request.\n\n```sh\nnpm run test-push-request\n```\n\n```sh\nnpm run test-push-request\n# Pushing a request...\n# Done\n# \u2728  Done in 2.97s.\n```\n\nThe next 2 images will show the request to the Consumer Contract with a reply from the Phat Contract, and the last picture shows what the Phat Contract replied with.", "mimetype": "text/plain", "start_char_idx": 25645, "end_char_idx": 27248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7afc1dac-44a3-4d9d-b4e7-6250a3b636bc": {"__data__": {"id_": "7afc1dac-44a3-4d9d-b4e7-6250a3b636bc", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c50c6157-26da-4998-92cf-454271a10814", "node_type": "1", "metadata": {}, "hash": "c07c663a8479ef83ac700ce44e3018ed2e12cf82114b07157a7364f5af844e93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fb56eb7-2ab7-4410-a432-ffacfcf2ab30", "node_type": "1", "metadata": {}, "hash": "fa62346ddebcf570f29eba826e2b285ef29ccc343b45b184c55c50530c0fe216", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/push-request-thegraph.png\" alt=\"\"><figcaption></figcaption></figure>\n\nHere is the emitted event `ResponseReceived` with the score `70` for `target` address `0x011c23b3AadAf3D4991f3aBeE262A34d18e9fdb5.`\n\n<figure><img src=\"../../../../.gitbook/assets/thegraph-pc-reply-info.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### Update Phat Contract on Phala PoC6 Testnet <a href=\"#user-content-update-phat-contract-on-phala-poc5-testnet\" id=\"user-content-update-phat-contract-on-phala-poc5-testnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. The `npx @phala/fn update` command will update your Phat Contract easily in the command line.&#x20;\n\nNow let's update the Phat Contract:\n\n```bash\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update -a ./polkadot-account.json\n```\n\n```bash\nnpx @phala/fn update -a ./polkadot-account.json\n# ? Please Enter hahaha account password [hidden]\n# \u2713 Compiled successfully.\n# \u2713 Connected to the endpoint: wss://poc6.phala.network/ws\n#\n# You are connecting to a testnet.\n#\n# \u2713 Your Brick Profile contract ID: 0x2a9f9a07886e11e1c5d63a176e3f75253d6765aadb90beb112fb3e55f7c98ea8\n# \u2713 The JavaScript code for workflow 6 has been updated.\n```\n\n:tada: **Congratulations!** You have now completed a full testnet deployment and have a fully functional Phat Contract connected to The Graph to compute a score and return to your EVM Consumer Contract.", "mimetype": "text/plain", "start_char_idx": 27250, "end_char_idx": 28908, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fb56eb7-2ab7-4410-a432-ffacfcf2ab30": {"__data__": {"id_": "2fb56eb7-2ab7-4410-a432-ffacfcf2ab30", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7afc1dac-44a3-4d9d-b4e7-6250a3b636bc", "node_type": "1", "metadata": {}, "hash": "384477b12dfa34c3dee1bc988208d656d01f19912ccf502e9e2ea71a4edd8c1b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "873289c3-952b-4d85-9f33-ae675e4bd3ef", "node_type": "1", "metadata": {}, "hash": "bb7e32d78f4e279c3d46e9261aff84f90604f454307b97815d77cdfd58b465b1", "class_name": "RelatedNodeInfo"}}, "text": "The steps for mainnet deployment are nearly identical, but let's take a look at the process in the `Mainnet` tab.\n{% endtab %}\n\n{% tab title=\"Mainnet\" %}\nIn the previous `Testnet` tab, you went through the full deployment process to connect The Graph Phat Contract to a Consumer Contract on an EVM Testnet Chain. Now it is time to take these talents to **Mainnet** :sunglasses:.&#x20;\n\nThe following steps will be performed:\n\n* Deploy the EVM Consumer Contract to the target EVM  Mainnet chain\n  * The EVM Consumer Contract will request actions to be executed off-chain by the Phat Contract\n* Deploy The Graph Phat Contract to the Phala Mainnet\n  * Once deployed, update the `ATTESTOR_ROLE` in the EVM Consumer Contract to the `Attestor Address` in the Phat Contract 2.0 UI Dashboard\n* Send a `request(address target)` transaction to get a trust score about an EVM target address\n* See The Graph Phat Contract respond with an action reply with a score for the target address\n\n### Minimum Requirements\n\n* [ ] Create a [Phala Dashboard Profile](../create-a-dashboard-profile.md) on Phala Mainnet\n  * [ ] Add funds to the EVM Gas Account to pay TX fees on target EVM Mainnet Chain\n* [ ] Finished the [Quick Start](quick-start.md)\n* [ ] (Recommended) Go through the `Local` AND `Testnet` tabs to understand the deployment process fully\n* [ ] Burner Account for EVM Consumer Contract deployment\n\n### Deployment\n\nIn this example, we will use Polygon PoS Mainnet as the target EVM Mainnet Chain, but this can be changed to any EVM chain of the developer's choice.\n\n#### Install Dependencies & Compile Contracts <a href=\"#user-content-install-dependencies--compile-contracts\" id=\"user-content-install-dependencies--compile-contracts\"></a>\n\n```sh\n# install dependencies\n$ npm install\n\n# compile contracts\n$ npm run compile\n```\n\n#### Deploy to Polygon Mainnet <a href=\"#user-content-deploy-to-polygon-mumbai-testnet\" id=\"user-content-deploy-to-polygon-mumbai-testnet\"></a>\n\nWith the contracts successfully compiled, now we can begin deploying first to Polygon PoS Mainnet.", "mimetype": "text/plain", "start_char_idx": 28909, "end_char_idx": 30971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "873289c3-952b-4d85-9f33-ae675e4bd3ef": {"__data__": {"id_": "873289c3-952b-4d85-9f33-ae675e4bd3ef", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fb56eb7-2ab7-4410-a432-ffacfcf2ab30", "node_type": "1", "metadata": {}, "hash": "fa62346ddebcf570f29eba826e2b285ef29ccc343b45b184c55c50530c0fe216", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf95b203-ca55-4d2c-9bfd-2eff59ea344a", "node_type": "1", "metadata": {}, "hash": "e0bd8685b768ffdd812dd873ad76c781072c92047692970152c504c279d90e1c", "class_name": "RelatedNodeInfo"}}, "text": "If you have not gotten `MATIC` then get `MATIC` from an exchange or through their [Wallet Suite](https://wallet.polygon.technology/). Ensure to save the address after deploying the Consumer Contract because this address will be use in the \"Configure Client\" section of Phat Contract 2.0 UI. The deployed address will also be set to the environment variable `POLYGON_CONSUMER_CONTRACT_ADDRESS`.\n\n<pre class=\"language-sh\"><code class=\"lang-sh\"><strong>npm run main-deploy\n</strong></code></pre>\n\n```sh\n# deploy contracts to Polygon PoS mainnet\nnpm run main-deploy\n# > the-graph-phat-contract@1.0.0 main-deploy\n# > hardhat run --network polygon ./scripts/polygon/deploy.ts\n#\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://polygonscan.com/address/0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# POLYGON_CONSUMER_CONTRACT_ADDRESS=0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# \n# Done\n```\n\n#### **(Optional) Verify Contract on Polygon Mainnet**\n\nEnsure to update the `polygon.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `polygon.arguments.ts` file.\n\n> **Note**: Your contract address will be different than `0x0b9aC89924483077899d2B52bc8AF794F546a1e9` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run main-deploy`.", "mimetype": "text/plain", "start_char_idx": 30972, "end_char_idx": 32517, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf95b203-ca55-4d2c-9bfd-2eff59ea344a": {"__data__": {"id_": "bf95b203-ca55-4d2c-9bfd-2eff59ea344a", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "873289c3-952b-4d85-9f33-ae675e4bd3ef", "node_type": "1", "metadata": {}, "hash": "bb7e32d78f4e279c3d46e9261aff84f90604f454307b97815d77cdfd58b465b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9426be4c-3ed0-47c4-8caa-b5bdc59416ef", "node_type": "1", "metadata": {}, "hash": "e805b5284c29c4bb412b0c166202c6b0e3a8ffa12bedce83fa19ea956714b8dc", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run main-verify -- <MUMBAI_CONSUMER_CONTRACT_ADDRESS>\n```\n\n```sh\nnpm run main-verify -- 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# > the-graph-phat-contract@1.0.0 main-verify\n# > hardhat verify --network polygon --constructor-args polygon.arguments.ts 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n#\n# Nothing to compile\n# No need to generate any newer typings.\n# Successfully submitted source code for contract\n# contracts/OracleConsumerContract.sol:OracleConsumerContract at 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract OracleConsumerContract on Etherscan.\n# https://polygonscan.com/address/0x0b9aC89924483077899d2B52bc8AF794F546a1e9#code\n```\n\n#### Deploy Phat Contract to Phala Mainnet <a href=\"#user-content-deploy-phat-contract-to-poc5-testnet\" id=\"user-content-deploy-phat-contract-to-poc5-testnet\"></a>\n\nFor customizing your Phat Contract, checkout Phat Contract custom configurations in [Customizing Your Phat Contract](../featured-blueprints/customizing-your-phat-contract.md) to learn more before deploying to Phala Mainnet.", "mimetype": "text/plain", "start_char_idx": 32519, "end_char_idx": 33672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9426be4c-3ed0-47c4-8caa-b5bdc59416ef": {"__data__": {"id_": "9426be4c-3ed0-47c4-8caa-b5bdc59416ef", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf95b203-ca55-4d2c-9bfd-2eff59ea344a", "node_type": "1", "metadata": {}, "hash": "e0bd8685b768ffdd812dd873ad76c781072c92047692970152c504c279d90e1c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c83d32c-2c38-4f72-af15-23c9853517c0", "node_type": "1", "metadata": {}, "hash": "097250894e93b6cf2b271829c649d472cfff0922421597ecd75d3ecfec2d042f", "class_name": "RelatedNodeInfo"}}, "text": "Now that are Phat Contract has built successfully, let's deploy to Phala Mainnet with the following command:\n\n<pre class=\"language-shell\"><code class=\"lang-shell\"># If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --mode=production --coreSettings='{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n# If polkadot-account.json is in the root of project\n<strong>npx @phala/fn upload --mode=production -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n</strong></code></pre>\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```bash\nnpx @phala/fn upload --mode=production -a ./polkadot-account.json --coreSettings='{\"apiUrl\": \"https://gateway.thegraph.com/api/\", \"apiKey\": \"cd22a01e5b7f9828cddcb52caf03ee79\"}'\n# ? Please enter your client RPC URL https://polygon-mainnet.g.alchemy.com/v2/UZpqlxsFm0aVm_euopH95rQ6YxiRa3VC\n# ? Please enter your consumer address 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# ? Please Enter hahaha account password [hidden]\n# \u2713 Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 33674, "end_char_idx": 34912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c83d32c-2c38-4f72-af15-23c9853517c0": {"__data__": {"id_": "1c83d32c-2c38-4f72-af15-23c9853517c0", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9426be4c-3ed0-47c4-8caa-b5bdc59416ef", "node_type": "1", "metadata": {}, "hash": "e805b5284c29c4bb412b0c166202c6b0e3a8ffa12bedce83fa19ea956714b8dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "363011cc-de73-4ff5-bac7-1f2975667205", "node_type": "1", "metadata": {}, "hash": "9c4ad978a4bd56baf0fe5e1b47c92ed9433b11d22650b0c22c5d2154fbe2e571", "class_name": "RelatedNodeInfo"}}, "text": "# \u2713 Connected to the endpoint: wss://api.phala.network/ws\n# \u2713 Your Brick Profile contract ID: 0x6e96d8c209fc14b69533e3627c4766b6eeef8f77a25348b2d77b28c90b0bd012\n# \u2713 The ActionOffchainRollup contract has been instantiated: 0xe2ac2edc835de67f71f76ef686ebb4e48bdf0c2da2b6862329cca00c3c9b8349\n# ? Please select an external account: [0] 0x8438ce1a6196b7edae83cbc2a58d33db6fae6bee. https://polygon-mainnet.g.alchemy.com/v2/W1kyx17tiFQFT2b19mGOqppx90BLHp0a\n# \u2713 Checking your settings\n# ? Please enter your project name My Phat Contract 0\n# \u2713 \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks.phala.network/workflows/0x6e96d8c209fc14b69533e3627c4766b6eeef8f77a25348b2d77b28c90b0bd012/0\n# Your Attestor address: 0x2829d70d48516b7d1be2b5f5f424b41ce4da8056\n# Your WORKFLOW_ID: 0\n```\n\nGo to the [Phat Contract 2.0 Dashboard](https://bit.ly/3LHccmR) and you can see your newly deployed Phat Contract.\n\n<figure><img src=\"../../../../.gitbook/assets/deploy-thegraph-main.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### **Interact with Consumer Contract on Polygon PoS Mainnet**\n\nConsumer Contract on Mumbai with a few transactions to set the attestor, check for malformed requests failures, and successfully fulfilled requests.", "mimetype": "text/plain", "start_char_idx": 34913, "end_char_idx": 36154, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "363011cc-de73-4ff5-bac7-1f2975667205": {"__data__": {"id_": "363011cc-de73-4ff5-bac7-1f2975667205", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c83d32c-2c38-4f72-af15-23c9853517c0", "node_type": "1", "metadata": {}, "hash": "097250894e93b6cf2b271829c649d472cfff0922421597ecd75d3ecfec2d042f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34f4b0e5-bcd6-4e71-ad4b-91e0de40b19d", "node_type": "1", "metadata": {}, "hash": "4cd3c07327939e11e206a4eca5f355cebd16c5ea21588e732af375fadd56e12d", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run main-set-attestor\n```\n\n<pre class=\"language-sh\"><code class=\"lang-sh\">npm run main-set-attestor\n<strong># > the-graph-phat-contract@1.0.0 main-set-attestor\n</strong># > hardhat run --network polygon ./scripts/polygon/set-attestor.ts\n#\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Contract 2.0 UI dashboard (https://bricks.phala.network)\n# - Go to the 'Configuration' tab and update the 'Client' box\n# - Set value to 0x0b9aC89924483077899d2B52bc8AF794F546a1e9\n# Done\n</code></pre>\n\nTry pushing a malform request to ensure failures behave appropriately.\n\n```sh\nnpm run main-push-malformed-request\n```\n\n```sh\nnpm run main-push-malformed-request\n# > the-graph-phat-contract@1.0.0 main-push-malformed-request\n# > hardhat run --network polygon ./scripts/polygon/push-malformed-request.ts\n#\n# Pushing a malformed request...\n# Done\n```\n\nWe can visualize the response from the Phat Contract in the Polygonscan block explorer.\n\n<figure><img src=\"../../../../.gitbook/assets/malform-request-pc-main.png\" alt=\"\"><figcaption></figcaption></figure>\n\nTest pushing a valid request that will get a valid reply of a trust score value for a `target` address.\n\n```sh\nnpm run main-push-request\n```\n\n```sh\nnpm run main-push-request\n# > the-graph-phat-contract@1.0.0 main-push-request\n# > hardhat run --network polygon ./scripts/polygon/push-request.ts\n#\n# Pushing a request...\n# Done\n```\n\nThe next 2 images will show the request to the Consumer Contract with a reply from the Phat Contract, and the last picture shows what the Phat Contract replied with.", "mimetype": "text/plain", "start_char_idx": 36156, "end_char_idx": 37750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34f4b0e5-bcd6-4e71-ad4b-91e0de40b19d": {"__data__": {"id_": "34f4b0e5-bcd6-4e71-ad4b-91e0de40b19d", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "363011cc-de73-4ff5-bac7-1f2975667205", "node_type": "1", "metadata": {}, "hash": "9c4ad978a4bd56baf0fe5e1b47c92ed9433b11d22650b0c22c5d2154fbe2e571", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8144be0b-86b5-4d14-9968-3e545cd0b5c9", "node_type": "1", "metadata": {}, "hash": "ed8eed8cbb2f40d6e7de3e736252385519027b4c6f0d99c08e3217ec32321512", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../../.gitbook/assets/push-request-thegraph-main.png\" alt=\"\"><figcaption></figcaption></figure>\n\nHere is the emitted event `ResponseReceived` with the score `206` for `target` address `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045` (aka vitalik.eth)\n\n<figure><img src=\"../../../../.gitbook/assets/thegraph-pc-reply-info-vitalik.png\" alt=\"\"><figcaption></figcaption></figure>\n\n#### Update Phat Contract on Phala Mainnet <a href=\"#user-content-update-phat-contract-on-phala-poc5-testnet\" id=\"user-content-update-phat-contract-on-phala-poc5-testnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. The `npx @phala/fn update` command will update your Phat Contract easily in the command line.&#x20;\n\nNow let's update the Phat Contract:\n\n```bash\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update --mode=production\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update --mode=production -a ./polkadot-account.json\n```\n\n<pre class=\"language-bash\"><code class=\"lang-bash\">npx @phala/fn update --mode=production -a ./polkadot-account.json\n<strong># ? Please Enter hahaha account password [hidden]\n</strong># \u2713 Compiled successfully.\n# \u2713 Connected to the endpoint: wss://api.phala.network/ws\n# \u2713 Your Brick Profile contract ID: 0x6e96d8c209fc14b69533e3627c4766b6eeef8f77a25348b2d77b28c90b0bd012\n# \u2713 The JavaScript code for workflow 0 has been updated.\n</code></pre>\n\n:tada: **Congratulations!** You have now completed a full mainnet deployment and have a fully functional Phat Contract connected to The Graph to compute a score and return to your EVM Consumer Contract.", "mimetype": "text/plain", "start_char_idx": 37752, "end_char_idx": 39520, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8144be0b-86b5-4d14-9968-3e545cd0b5c9": {"__data__": {"id_": "8144be0b-86b5-4d14-9968-3e545cd0b5c9", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28090739-2427-4b56-9a60-6616ef46c192", "node_type": "4", "metadata": {}, "hash": "8ec885ee3b7da7767588a8fd945d09f914c2b3f7140e61ac0aa7e3951984c39a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34f4b0e5-bcd6-4e71-ad4b-91e0de40b19d", "node_type": "1", "metadata": {}, "hash": "4cd3c07327939e11e206a4eca5f355cebd16c5ea21588e732af375fadd56e12d", "class_name": "RelatedNodeInfo"}}, "text": "{% endtab %}\n{% endtabs %}", "mimetype": "text/plain", "start_char_idx": 39521, "end_char_idx": 39547, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1cfcf20e-7834-4a66-894d-8c6eefd5eca1": {"__data__": {"id_": "1cfcf20e-7834-4a66-894d-8c6eefd5eca1", "embedding": null, "metadata": {"file_path": "./phala_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab2a2a2b-d3e0-4feb-8314-4e147cece9a8", "node_type": "1", "metadata": {}, "hash": "aff6f85a8f967febca0c4ed4d720287228cd58770b6462646e8fb9b12d2fb2d6", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: clique namespace\nsidebar_label: clique\nsidebar_position: 1\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### clique_discard\n\nThis method drops a currently running proposal. The signer will not cast further votes (either for or against) the address.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `signer`: *string* (address)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_discard\",\n      \"params\": [signer]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### clique_getBlockSigner\n\nRetrieves the signer of the block with the given hash. Returns error of a block with the given hash does not exist.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getBlockSigner\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSigners\n\nRetrieves the list of authorized signers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab2a2a2b-d3e0-4feb-8314-4e147cece9a8": {"__data__": {"id_": "ab2a2a2b-d3e0-4feb-8314-4e147cece9a8", "embedding": null, "metadata": {"file_path": "./phala_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1cfcf20e-7834-4a66-894d-8c6eefd5eca1", "node_type": "1", "metadata": {}, "hash": "bbb168d129da86dd869eed6317ed8e53dc8f2e40ba10936746987f760d627173", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73eb400d-534c-45df-84d0-b5d0ec7a2154", "node_type": "1", "metadata": {}, "hash": "2333a8384afb497709659b5c9a2cb1bbc01a6f029a9a321393699048d6e7af8b", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSigners\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAnnotated\n\nRetrieves the list of authorized signers but with signer names instead of addresses\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAnnotated\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAtHash\n\nRetrieves the list of authorized signers at the specified block by hash.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 1542, "end_char_idx": 2721, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73eb400d-534c-45df-84d0-b5d0ec7a2154": {"__data__": {"id_": "73eb400d-534c-45df-84d0-b5d0ec7a2154", "embedding": null, "metadata": {"file_path": "./phala_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab2a2a2b-d3e0-4feb-8314-4e147cece9a8", "node_type": "1", "metadata": {}, "hash": "aff6f85a8f967febca0c4ed4d720287228cd58770b6462646e8fb9b12d2fb2d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ccc5f0fd-6fd4-4376-b755-eb9966aaaa40", "node_type": "1", "metadata": {}, "hash": "39f22570ab6b287ac4f32b5bfc8d51ba52b5c56f3847105b0bc83ecbe66ba23b", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAtHash\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAtHashAnnotated\n\nRetrieves the list of authorized signers at the specified block by hash but with signer names instead of addresses\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAtHashAnnotated\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAtNumber\n\nRetrieves the list of authorized signers at the specified block by block number.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `number`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 2724, "end_char_idx": 4068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccc5f0fd-6fd4-4376-b755-eb9966aaaa40": {"__data__": {"id_": "ccc5f0fd-6fd4-4376-b755-eb9966aaaa40", "embedding": null, "metadata": {"file_path": "./phala_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73eb400d-534c-45df-84d0-b5d0ec7a2154", "node_type": "1", "metadata": {}, "hash": "2333a8384afb497709659b5c9a2cb1bbc01a6f029a9a321393699048d6e7af8b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3abdbdb9-ab6b-48b3-b65e-52a2df1ec7e0", "node_type": "1", "metadata": {}, "hash": "d9496feb1b2e0b82d80e6463de5cc257a129b844661d8965a5774f84a265136c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAtNumber\",\n      \"params\": [number]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSnapshot\n\nRetrieves a snapshot of all clique state at a given block.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSnapshot\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `hash`: *string* (hash)\n  - `number`: *string* (hex integer)\n  - `signerLimit`: *string* (hex integer)\n  - `signers`: map of *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### clique_getSnapshotAtHash\n\nRetrieves the state snapshot at a given block.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 4071, "end_char_idx": 5345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3abdbdb9-ab6b-48b3-b65e-52a2df1ec7e0": {"__data__": {"id_": "3abdbdb9-ab6b-48b3-b65e-52a2df1ec7e0", "embedding": null, "metadata": {"file_path": "./phala_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccc5f0fd-6fd4-4376-b755-eb9966aaaa40", "node_type": "1", "metadata": {}, "hash": "39f22570ab6b287ac4f32b5bfc8d51ba52b5c56f3847105b0bc83ecbe66ba23b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "459ee5dd-7679-4107-b969-75296213ed5b", "node_type": "1", "metadata": {}, "hash": "1564e4ea2dc113398d7f3bb1400d1f0f24f0d16ced9d89350fea0f0ad3ccc246", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSnapshotAtHash\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `hash`: *string* (hash)\n  - `number`: *string* (hex integer)\n  - `signerLimit`: *string* (hex integer)\n  - `signers`: map of *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### clique_produceBlock\n\nForces Clique block producer to produce a new block\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `parentHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_produceBlock\",\n      \"params\": [parentHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### clique_propose\n\nAdds a new authorization proposal that the signer will attempt to push through. If the `vote` parameter is true, the local signer votes for the given address to be included in the set of authorized signers. With `vote` set to false, the signer is against the address.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `signer`: *string* (address)\n\n2. `vote`: *boolean*", "mimetype": "text/plain", "start_char_idx": 5348, "end_char_idx": 6935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "459ee5dd-7679-4107-b969-75296213ed5b": {"__data__": {"id_": "459ee5dd-7679-4107-b969-75296213ed5b", "embedding": null, "metadata": {"file_path": "./phala_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3abdbdb9-ab6b-48b3-b65e-52a2df1ec7e0", "node_type": "1", "metadata": {}, "hash": "d9496feb1b2e0b82d80e6463de5cc257a129b844661d8965a5774f84a265136c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_propose\",\n      \"params\": [signer, vote]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 6938, "end_char_idx": 7372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f7ef0dd-ce74-41a8-969e-d13cee2cc871": {"__data__": {"id_": "4f7ef0dd-ce74-41a8-969e-d13cee2cc871", "embedding": null, "metadata": {"file_path": "./phala_dist/web3.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3dffd8d9-c254-4202-93d8-6d8a15315eed", "node_type": "4", "metadata": {}, "hash": "030ddd371485bd6fee26be52353666907dfcc4c1d113ca5efba4af86a33185db", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: web3 namespace\nsidebar_label: web3\nsidebar_position: 10\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### web3_clientVersion\n\nReturns the current client version.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"web3_clientVersion\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### web3_sha3\n\nReturns Keccak of the given data.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `data`: *string* (hex data)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"web3_sha3\",\n      \"params\": [data]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hash)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60c56d7e-3d90-4cea-9f03-b14673c3fc75": {"__data__": {"id_": "60c56d7e-3d90-4cea-9f03-b14673c3fc75", "embedding": null, "metadata": {"file_path": "./phala_dist/phala-network.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d5548bc-aea6-4b6f-a9f6-90e5e46c814b", "node_type": "4", "metadata": {}, "hash": "6141f4e733803fdb78fe6cff99250eb422ec33422b759c66a51f1e642a364674", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6896920-5143-4518-bcf3-cf5bf45263f5", "node_type": "1", "metadata": {}, "hash": "61eb94fa00fdfd97c3443f45b5801a4da16119c28a270187025182a860f18fb2", "class_name": "RelatedNodeInfo"}}, "text": "# \u2696\ufe0f Phala Network\n\nPhala Network is the Execution Layer for Web3 AI. By enabling AI to understand and interact with blockchains, it unlocks the barrier for the first billion users to join web3.\n\n### The Missing AI Execution Layer\n\nWeb3 is complex. You often need to use multiple wallets across a few blockchains and dapps to complete a basic task. For example, buying a NFT may involve swapping, bridging, and purchasing. This complexity is the biggest barrier of mass adoption.\n\nAI can greatly improve the web3 user experience. Imagine that AI can do its own research, and go one step further to delegate every operation for you. You can simply give instructions and wait them to be done. This is where AI Agent projects like Autonolas, Polywrap, fetch.ai (and more) can help.\n\nHowever, none of the existing AI Agents is smart contract centric. They cannot execute smart contract operations securely and autonomously, due to its off-chain nature. The missing AI Execution Layer Agents is preventing developers from creating smart contracts centric AI Agents.\n\n### Our Solution\n\nPhala Network's multi-proof system is the answer to the AI execution problem. On top of the Phala Network, you can easily build tamper-proof and unstoppable AI Agents that closely integrated with on-chain smart contracts.\n\nPhala offers the full toolkits to help you build, ship, and profit from your smart contract centric AI Agents.\n\n<figure><img src=\"../.gitbook/assets/Phala-AI-Agent-Contract-HLD.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### AI Agent Contract\n\nAI Agent Contract allows you to build your smart contract centric AI Agents in three steps:\n\n1. **Agentize smart contracts**: Create smart contract centric AI Agents for popular web3 services and smart contracts. \"**Regulate**\" your AI Agents through a DAO to enforce business logic for your agents.&#x20;\n2. **Connect to the internet of multi-agents**: Make your agents accessible by other cross-platform AI Agents deployed on Autonolas, FLock.io, Morpheus, Polywrap, etc.\n3. **Launch and get incentivized**: Own your agents and build a profitable tokenomic through our default tokenomic model or customize your own.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6896920-5143-4518-bcf3-cf5bf45263f5": {"__data__": {"id_": "d6896920-5143-4518-bcf3-cf5bf45263f5", "embedding": null, "metadata": {"file_path": "./phala_dist/phala-network.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d5548bc-aea6-4b6f-a9f6-90e5e46c814b", "node_type": "4", "metadata": {}, "hash": "6141f4e733803fdb78fe6cff99250eb422ec33422b759c66a51f1e642a364674", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60c56d7e-3d90-4cea-9f03-b14673c3fc75", "node_type": "1", "metadata": {}, "hash": "d94f209a5ba20f2872713e343e9b9f3b4943b92df2fee0f520d76a2f97617009", "class_name": "RelatedNodeInfo"}}, "text": "To learn more about AI Agent Contract: [getting-started](../ai-agent-contract/getting-started/ \"mention\")\n\nTo learn more about launching agents with tokenomics: [agent-wars-introduction.md](../agent-wars/agent-wars-introduction.md \"mention\")", "mimetype": "text/plain", "start_char_idx": 2170, "end_char_idx": 2411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eed03cf3-5729-4485-8e0e-243f8091f10d": {"__data__": {"id_": "eed03cf3-5729-4485-8e0e-243f8091f10d", "embedding": null, "metadata": {"file_path": "./phala_dist/using-prbv3-ui.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "13f3d575-3199-444a-8d2e-3f33dcd14628", "node_type": "4", "metadata": {}, "hash": "95a129309126eea16b6c36c63f7830713372ba83858069306e7b7b411bb9115d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd974512-6393-4cb5-8443-54bcd4364157", "node_type": "1", "metadata": {}, "hash": "224fd88ce8eb19bfb1e75345b2f2f5e51d60e331dd5c0cd5bcca701c75b6b56e", "class_name": "RelatedNodeInfo"}}, "text": "# Using PRBv3 UI\n\nYou can configure StakePool, Pool operator, and worker information by using the PRBv3 UI, and can also check the running status of workers, and perform related error diagnosis there.\n\n## Login\n\nAccess the PRB UI by going to http://localhost:3000/. Replace localhost with the IP of the PRB Server.\n\n> If you are accessing this page from an external network, please note to check the firewall configuration of the PRB server.\n\n## Data configuration on PRBv3 UI\n\n### StakePool Configuration\n\nClick `Pools` in `Inventory` to jump to the StakePool configuration interface.\n\n* Click `Add` button\n* Enter `PID` of the StakePool and your custom name for it\n* Click `confirm`\n\nThis completes the input of StakePool information.\n\n### Pool Operator Configuration\n\nClick `Pool Operators` in `Inventory` to jump to the Operator configuration interface.\n\n* Click `Set` button.\n* Enter `PID` of the StakePool.\n* Select `seed` for `Account Type`.\n* If your operator account does not use the proxy method, enter the mnemonic of the operator in the `Account` section; leave `Proxied Account (SS58)` empty.\n* If your operator account uses the proxy method, enter the mnemonic of the authorized gas fee account in the `Account` section; enter the real pool operator\u2019s account address in `Proxied Account (SS58)`.\n* Click `confirm`.\n\nThis completes the input of Pool operator information.\n\n### Worker Configuration\n\nClick `Workers` in `Inventory` to jump to the Worker configuration interface.\n\n* Click `Add` button\n* Enter your custom name for the Worker and the desired `PID` for the worker\n* Enter the worker\u2019s endpoint in the format http://{pRuntime-ip}:8000/. Replace {pRuntime-ip} with the IP of the worker.\n* Enter the desired worker staking amount and add 12 zeros after the number. For example, `5000000000000000` means a staking value of `5000`.\n* Click `confirm`\n\nThis completes the input of Worker information.\n\n> Similar to PRBv2, PRBv3 supports multi-mode worker synchronization.\n\nIf you choose the `SyncOnly` mode, the worker will only participate in synchronization and will not register worker\u2019s information on chain after reaching the maximum height.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd974512-6393-4cb5-8443-54bcd4364157": {"__data__": {"id_": "fd974512-6393-4cb5-8443-54bcd4364157", "embedding": null, "metadata": {"file_path": "./phala_dist/using-prbv3-ui.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "13f3d575-3199-444a-8d2e-3f33dcd14628", "node_type": "4", "metadata": {}, "hash": "95a129309126eea16b6c36c63f7830713372ba83858069306e7b7b411bb9115d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eed03cf3-5729-4485-8e0e-243f8091f10d", "node_type": "1", "metadata": {}, "hash": "30fe8b838a0688b5ad63e4d3bbfa1606baa342cf4461aef08ce1da59195f3743", "class_name": "RelatedNodeInfo"}}, "text": "There is a similar option in StakePool configuration page, and they are the same functions.\n\n> Additionally, PRBv3 has added `GateKeeper` mode, allowing you to deploy GateKeeper with PRBv3.\n\n\u2022 The GateKeeper reward function as originally planned in the tokenomics is not yet enabled; Therefore, if you deploy GateKeeper, you will not receive any rewards. \u2022 GateKeeper cannot be added to StakePool for computation contributing. \u2022 After GateKeeper synchronization is completed, the operator needs to initiate an on-chain proposal and complete GK registration through community referendum before it can start running. The specific registration transaction is:phalaRegistry.registerGatekeeper(gatekeeper)\n\n## Start running\n\nAfter all information is configured, click the `Restart WM` and then click the `reload` button in the upper left corner of the page. The new configuration information will be loaded, and PRBv3 will start working.\n\n## Status check\n\nClick `Workers` in `Status` to check the synchronization status of all workers and manage workers using the `restart` and `re-register` buttons.\n\nClick `Transactions` in `Status` to check the transaction records sent by the PRB and confirm the details.", "mimetype": "text/plain", "start_char_idx": 2166, "end_char_idx": 3369, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7030e486-24d6-46ed-9ddc-577228af23a5": {"__data__": {"id_": "7030e486-24d6-46ed-9ddc-577228af23a5", "embedding": null, "metadata": {"file_path": "./phala_dist/token-gated-access.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8de3a32d-ac87-4158-8cca-f61e29c7633d", "node_type": "4", "metadata": {}, "hash": "d4d95b42502fafbf46abee6f80c19e7951b1dc16101c4d0ff0725890bb003376", "class_name": "RelatedNodeInfo"}}, "text": "# Token Gated Access\n\n<figure><img src=\"../../.gitbook/assets/WIP.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5099202d-a2c1-40b5-aa8c-b528b2445c3a": {"__data__": {"id_": "5099202d-a2c1-40b5-aa8c-b528b2445c3a", "embedding": null, "metadata": {"file_path": "./phala_dist/airstack-agent.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "377d8596-39bd-487c-9c9e-c4d1e341b8f6", "node_type": "4", "metadata": {}, "hash": "4fc3e43f7943f5c48fd191874c870a1a0ca47f86641f1e4c7a41e142f6781b53", "class_name": "RelatedNodeInfo"}}, "text": "# \u2708\ufe0f Airstack Agent\n\n<figure><img src=\"../../.gitbook/assets/AirStack.png\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\nThe Airstack template allows for users to request data from Airstack\u2019s API to compute a trust/risk score and send to an on-chain consumer contract.\n\n## Requirements Before Deployment\n\n* Create API Key from Airstack. See how to get an API Key [here](https://bit.ly/airstack-api-key). By default a rate-limited key is provided with no guarantee of service if limit is exhausted.\n\n## Features and Benefits\n\nWith the ability to bring Airstack\u2019s data on-chain with customized logic performed on the data, developers can now securely connect their indexed data to their web3 dApps. There are many features and benefits that can be built. For example:\n\n* Web3 Social\n  * Spam Filter\n  * Recommendation Engine\n  * Trust Score\n  * Web3 Social Actions based on data from Airstack\u2019s API\n* Token Gating\n* Web3 Marketing Technology, etc.\n\n## Resources\n\n* [Airstack AI Agent Contract Code Template](https://bit.ly/pc-airstack-repo)\n* [Airstack Docs](https://docs.airstack.xyz/airstack-docs-and-faqs/)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a7778ed-14e8-42a3-970c-d1d19377cbb7": {"__data__": {"id_": "8a7778ed-14e8-42a3-970c-d1d19377cbb7", "embedding": null, "metadata": {"file_path": "./phala_dist/troubleshooting.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62", "node_type": "4", "metadata": {}, "hash": "d636698ec846581f7c9a13ce86a549fed0ad918c44335c84aa0ac4798012fa2e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98045c60-eea5-449c-ac4b-bb056d3c221a", "node_type": "1", "metadata": {}, "hash": "b59d169e48ca3cbbb55e3f56950663f4ea00615a245eff43a2baf1646177cf85", "class_name": "RelatedNodeInfo"}}, "text": "# Troubleshooting\n\n## Quick Links <a href=\"#quick-links\" id=\"quick-links\"></a>\n\n[General](https://github.com/Phala-Network/solo-mining-scripts#navigate) | [Investigate](https://github.com/Phala-Network/solo-mining-scripts#investigating-the-issue) | [Confidence Level](https://wiki.phala.network/en-us/mine/solo/4-0-faq/#confidence-level) | [Stuck Worker](https://github.com/Phala-Network/solo-mining-scripts/tree/main#khala-node-stops-synching) | [Forum](https://forum.phala.network/c/mai/42-category/42)\n\n\\\n\ud83d\udc47 You can also join our Discord or Telegram worker group to discuss your issue. \ud83d\udc47\n\n* [Discord](https://discord.gg/C6E4hQjk)\n* [Telegram](https://t.me/phalaworker)\n* [Forum](https://forum.phala.network/c/mai/42-category/42)\n* [GitHub](https://github.com/Phala-Network/solo-mining-scripts)\n\n## General <a href=\"#general\" id=\"general\"></a>\n\nMost symptoms are solved by restarting your node. If you experience issues running your node, try stopping the node by:\n\n```\nsudo phala stop\n```\n\nAnd attempt a restart with\n\n```\nsudo phala start\n```\n\nIf you still have issues attempt to [update the script](solo-scripts-guidance/update-your-workers-node.md).\n\n## Investigating the Issue <a href=\"#investigating-the-issue\" id=\"investigating-the-issue\"></a>\n\nGet an overview of your worker\u2019s status first.\n\n```\nsudo phala status\n```\n\nIn case your node is stuck, a typical scenario would look like the following:\n\n<figure><img src=\"https://user-images.githubusercontent.com/37558304/147273109-d4d1d5e3-5098-43d1-99f5-2ba995ecd1b6.png\" alt=\"\"><figcaption></figcaption></figure>\n\n(image showing stuck node on the worker)\n\nWith the symptom in the scenario above, the right method to solve the issue would be restarting the `node` container only, with the commands mentioned [here](troubleshooting.md#general), and restarting the containers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98045c60-eea5-449c-ac4b-bb056d3c221a": {"__data__": {"id_": "98045c60-eea5-449c-ac4b-bb056d3c221a", "embedding": null, "metadata": {"file_path": "./phala_dist/troubleshooting.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62", "node_type": "4", "metadata": {}, "hash": "d636698ec846581f7c9a13ce86a549fed0ad918c44335c84aa0ac4798012fa2e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a7778ed-14e8-42a3-970c-d1d19377cbb7", "node_type": "1", "metadata": {}, "hash": "cc668ce9ca4f96d6d44fe2b7a1e81623bc4bc205f34a0625e8dd510c73ff0170", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b61bef4a-5bec-4586-85e3-fdd3f5459dcf", "node_type": "1", "metadata": {}, "hash": "e8c80295f491f5c2d13d80641125b88a2c054e2a63920310f047c45f3ee87a87", "class_name": "RelatedNodeInfo"}}, "text": "Now check the status of the node again.\n\nIf the local node block height is empty first, check if all required containers are running.\n\n```\nsudo docker ps\n```\n\nYou should have three containers running as shown in this example:\n\n<figure><img src=\"https://user-images.githubusercontent.com/37558304/145825263-50d69b7e-a7e1-45c9-9eca-cc2d7d3a6b69.png\" alt=\"\"><figcaption></figcaption></figure>\n\n(image showing the worker node\u2019s running docker containers)\n\nTo get the most recent logs of each container, you may execute:\n\n```\ndocker logs <container_ID/container_name> -n 100 -f\n```\n\nNote that `<container_ID/container_name>` must be replaced with the container you wish the receive the logs from. In the example above the `container_ID` is `8dc34f63861e` and `container_name` would be `phala-pherry`.\n\n\\\nIf you attempt to post on the phala forum and do not know where the issue lies, please post the logs of all three docker containers. Copy-paste the container logs from the terminal into the forum post.\n\n### < 3 running containers <a href=\"#3-running-containers\" id=\"3-running-containers\"></a>\n\nIf a container is missing (<3 are running), you may attempt to restart it separately with the respective commands below.\n\n> Use the applicable command to restart your missing container.\n\n```\nsudo phala start node\n```\n\n```\nsudo phala start pruntime\n```\n\n```\nsudo phala start pherry\n```\n\n## Advanced Troubleshooting <a href=\"#advanced-troubleshooting\" id=\"advanced-troubleshooting\"></a>\n\nIn some cases, it might be beter to reinstall the mining script. To do this, first uninstall the script:\n\n```\nsudo phala uninstall\n```\n\nAnd delete the mining script repository by executing:\n\n```\nrm -rf $HOME/solo-mining-scripts-main\n```\n\nNow you may reinstall the mining script.", "mimetype": "text/plain", "start_char_idx": 1831, "end_char_idx": 3588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b61bef4a-5bec-4586-85e3-fdd3f5459dcf": {"__data__": {"id_": "b61bef4a-5bec-4586-85e3-fdd3f5459dcf", "embedding": null, "metadata": {"file_path": "./phala_dist/troubleshooting.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62", "node_type": "4", "metadata": {}, "hash": "d636698ec846581f7c9a13ce86a549fed0ad918c44335c84aa0ac4798012fa2e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98045c60-eea5-449c-ac4b-bb056d3c221a", "node_type": "1", "metadata": {}, "hash": "b59d169e48ca3cbbb55e3f56950663f4ea00615a245eff43a2baf1646177cf85", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0cd549f5-201a-42cf-b994-19d54a0b3d88", "node_type": "1", "metadata": {}, "hash": "b88f1c8aab3051699d5da47643ec3b073f36ace8d8eff5910b932a30a12a5351", "class_name": "RelatedNodeInfo"}}, "text": "```\nsudo apt update && sudo apt upgrade -y && sudo apt autoremove -y\nsudo apt install wget unzip\ncd ~\n```\n\n```\nwget https://github.com/Phala-Network/solo-mining-scripts/archive/refs/heads/main.zip\nunzip main.zip\nrm -r main.zip #cleaning up the installation\ncd solo-mining-scripts-main/ #note this depends on your current directory\nsudo ./phala.sh install\n```\n\nYou may now [restart your node](troubleshooting.md#general).\n\n## Peer Connectivity <a href=\"#peer-connectivity\" id=\"peer-connectivity\"></a>\n\nSome users running nodes may find their nodes are struggling to connect to peers, which causes nodes to be dropped from the network. You can check your node connections through executing:\n\n```\nsudo docker logs -f phala-node\n```\n\nFor an optimal setup, you should have between 40 and 50 peers.\n\nIf you have insufficient peers do the following:\n\n* Check your firewall settings\n* Ensure there are no NAT or Policy-based filters\n\nFeel free to read [NAT](https://en.wikipedia.org/wiki/Network\\_address\\_translation) for more information if you are curious about the root causes. Also, do not hesitate to look for existing [Phala forum posts](https://forum.phala.network/c/mai/42-category/42) before posing your issue if you are stuck.\n\n## Driver Issues <a href=\"#driver-issues\" id=\"driver-issues\"></a>\n\n### DCAP driver Installation <a href=\"#dcap-driver-installation\" id=\"dcap-driver-installation\"></a>\n\n\u2139\ufe0f The most common issue is that your motherboard may not support a DCAP driver. In this case, the script cannot automatically install the `isgx` driver and results in the following error message.", "mimetype": "text/plain", "start_char_idx": 3590, "end_char_idx": 5185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0cd549f5-201a-42cf-b994-19d54a0b3d88": {"__data__": {"id_": "0cd549f5-201a-42cf-b994-19d54a0b3d88", "embedding": null, "metadata": {"file_path": "./phala_dist/troubleshooting.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62", "node_type": "4", "metadata": {}, "hash": "d636698ec846581f7c9a13ce86a549fed0ad918c44335c84aa0ac4798012fa2e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b61bef4a-5bec-4586-85e3-fdd3f5459dcf", "node_type": "1", "metadata": {}, "hash": "e8c80295f491f5c2d13d80641125b88a2c054e2a63920310f047c45f3ee87a87", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"https://user-images.githubusercontent.com/37558304/143471619-1116c12f-7ef5-4313-93a5-51f3ed30c355.png\" alt=\"\"><figcaption></figcaption></figure>\n\n(image of the terminal showing the DCAP driver error message)\n\nIn this case, prior to running `sudo phala start`, you need to manually install the `isgx` driver:\n\n```\nsudo phala install isgx\n```\n\n## Khala Node Stops Synching <a href=\"#khala-node-stops-synching\" id=\"khala-node-stops-synching\"></a>\n\nIf the Khala Chain stops synching and is stuck at a specific block and does not continue to sync, we advise you first to [restart your node](troubleshooting.md#general).\n\nIf the synchronization still fails, you may try to delete the khala chain database on your worker\u2019s node. It is located in `/var/khala-dev-node/chains/khala`.\n\n<figure><img src=\"https://user-images.githubusercontent.com/37558304/143770078-26a3c457-ce1d-447c-8e26-81ea0e1beb9b.png\" alt=\"\"><figcaption></figcaption></figure>\n\n(image showing the khala blockchain files of the worker node)\n\nIt is located in `/var/khala-dev-node/chains/khala`.\n\nFirst, stop your node with:\n\n```\nsudo phala stop\n```\n\nTo delete the khala blockchain database on your node, execute the following commands:\n\n```\nrm -rf /var/khala-dev-node/chains/khala\n```\n\nTo delete the Kusama blockchain , run:\n\n```\nrm -rf /var/khala-dev-node/chains/polkadot\n```\n\n## Deleting the Mining Scripts <a href=\"#deleting-the-mining-scripts\" id=\"deleting-the-mining-scripts\"></a>\n\nIf you encounter any issues uninstalling the mining scripts and all dependencies except the drivers, you may delete them by executing the following commands:\n\n```\nsudo rm -r /opt/phala\nsudo rm -r ~/solo-mining-scripts-main\nsudo rm ~/main.zip\n```\n\nYou can [follow this tutorial](./) to redownload and reinstall the new phala mining scripts.", "mimetype": "text/plain", "start_char_idx": 5187, "end_char_idx": 6992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9a98226-1717-407f-a224-10e0de4d7784": {"__data__": {"id_": "f9a98226-1717-407f-a224-10e0de4d7784", "embedding": null, "metadata": {"file_path": "./phala_dist/aura.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "68794f90-f54a-455a-b5d8-94e557a74110", "node_type": "4", "metadata": {}, "hash": "6422bdefb2855130a0ad91899bf05f3987192cc39c2b94475fb2a371b8a95ae0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa1016f5-61cd-4269-b439-98b026672b9e", "node_type": "1", "metadata": {}, "hash": "7a65c8624348df4ac337ea7c1de0d75b3847de04e3645ff32ad7d0b93e4739ed", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Aura-based validators\nsidebar_position: 0\n---\n\nThis guide will walk you through configuring an Aura-based validator with Nethermind in a Docker container using the Energy Web chain as an example.\n\n:::info\nYour machine's clock has to be synchronized. Otherwise, you might miss block sealing. By default, the block time is set to 5 seconds.\n:::\n\n## Configuring a Docker container\n\nThe example below shows how to configure a Docker container for an Aura-based validator on the Energy Web chain:\n\n```yaml title=\"docker-compose.yml\"\nservices:\n  nethermind-validator:\n    image: nethermind/nethermind:latest\n    container_name: nethermind-validator\n    restart: unless-stopped\n    ports:\n      - 8545:8545\n      - 30303:30303\n    ulimits:\n      nofile:\n        soft: 1000000\n        hard: 1000000\n    environment:\n      - NETHERMIND_CONFIG=energyweb\n    volumes:\n      - ./keystore:/nethermind/keystore\n      - ./logs:/nethermind/logs\n      - ./nethermind_db:/nethermind/nethermind_db\n```\n\n## Configuring keyfile\n\nMake sure that the keyfile name contains the public key (address). Otherwise, Nethermind doesn't recognize it as such. \nFor instance, a keyfile can be named `key-0x1234567890123456789012345678901234567890`.\n\nThe keyfile must be stored in the `keystore` directory located in the Nethermind base data directory.\n\n## Configuration settings\n\nHere is an example of recommended settings for a validator. The most convenient way to configure these settings is either defining them in the configuration file or passing them as environment variables.\n\n- `Init.IsMining`: `true`\n- `Init.MemoryHint`: Can be left unspecified. It's recommended to configure it accordingly to the machine specification(for Eneergy Web, 768000000 is enough).\n- `EthStats` namespace parameters if you want to report node status to Ethstats for your network.\n- `Metrics` namespace parameters to enable node monitoring.\n- `KeyStore.PasswordFiles`: The  path to the file containing the password for the mining private key.\n- `KeyStore.UnlockAccounts`: An array of accounts. Provide the miner public address here.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2096, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa1016f5-61cd-4269-b439-98b026672b9e": {"__data__": {"id_": "fa1016f5-61cd-4269-b439-98b026672b9e", "embedding": null, "metadata": {"file_path": "./phala_dist/aura.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "68794f90-f54a-455a-b5d8-94e557a74110", "node_type": "4", "metadata": {}, "hash": "6422bdefb2855130a0ad91899bf05f3987192cc39c2b94475fb2a371b8a95ae0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9a98226-1717-407f-a224-10e0de4d7784", "node_type": "1", "metadata": {}, "hash": "1d21b9b5265d44f04ced5b598a549c7aa0b4975c88ed7b0ec1650ed61456e8ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed7b2abb-cc32-4de4-a147-956c2c5d773b", "node_type": "1", "metadata": {}, "hash": "c0e0b8fe8d8e272480b450ab4433c58d3e09b38874a2f20c81dd66f53fefe62d", "class_name": "RelatedNodeInfo"}}, "text": "- `KeyStore.BlockAuthorAccount`: The miner public address should be provided here as well.\n- `Aura.ForceSealing`: `true`\n- `Merge.Enabled`: `false`\n\nHere's an example of above settings in the Energy Web configuration file:\n\n```json title=\"energyweb.cfg\"\n{\n  \"Init\": {\n    \"ChainSpecPath\": \"chainspec/energyweb.json\",\n    \"GenesisHash\": \"0x0b6d3e680af2fc525392c720666cce58e3d8e6fe75ba4b48cb36bcc69039229b\",\n    \"BaseDbPath\": \"nethermind_db/energyweb\",\n    \"LogFileName\": \"energyweb.log\",\n    \"MemoryHint\": 768000000\n  },\n  \"Sync\": {\n    \"FastSync\": true,\n    \"PivotNumber\": 26940000,\n    \"PivotHash\": \"0x8835983de9578a4355313afd2a43d8eada6f2a4ddbd9c51da103e0d5f53c4d8b\",\n    \"PivotTotalDifficulty\": \"9167206964850082205703311924211835616257898274\",\n    \"FastBlocks\": true,\n    \"UseGethLimitsInFastBlocks\": false,\n    \"FastSyncCatchUpHeightDelta\": 10000000000\n  },\n  \"EthStats\": {\n    \"Enabled\": true,\n    \"Name\": \"Nethermind Energy Web\",\n    \"Secret\": \"secret.\",\n    \"Url\": \"ws://localhost:3000/api\"\n  },\n  \"Metrics\": {\n    \"Enabled\": true,\n    \"NodeName\": \"Energy Web\",\n    \"PushGatewayUrl\": \"http://localhost:9091/metrics\"\n  },\n  \"Mining\": {\n    \"MinGasPrice\": 1\n  },\n  \"Merge\": {\n    \"Enabled\": false\n  },\n  \"Aura\": {\n    \"ForceSealing\": true\n  },\n  \"KeyStore\": {\n    \"PasswordFiles\": [\"keystore/password\"],\n    \"UnlockAccounts\": [\"0x.\"],\n    \"BlockAuthorAccount\": \"0x.\" \n  },", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed7b2abb-cc32-4de4-a147-956c2c5d773b": {"__data__": {"id_": "ed7b2abb-cc32-4de4-a147-956c2c5d773b", "embedding": null, "metadata": {"file_path": "./phala_dist/aura.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "68794f90-f54a-455a-b5d8-94e557a74110", "node_type": "4", "metadata": {}, "hash": "6422bdefb2855130a0ad91899bf05f3987192cc39c2b94475fb2a371b8a95ae0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa1016f5-61cd-4269-b439-98b026672b9e", "node_type": "1", "metadata": {}, "hash": "7a65c8624348df4ac337ea7c1de0d75b3847de04e3645ff32ad7d0b93e4739ed", "class_name": "RelatedNodeInfo"}}, "text": "}\n```\n\n## Running the validator\n\nThe above Docker Compose file can be run from the directory the `docker-compose.yml` is located in as follows:\n\n```bash\ndocker compose up -d\n```\n\nTo check the logs and verify the sealing of blocks, run:\n\n```bash\ndocker compose logs -f nethermind-validator\n```", "mimetype": "text/plain", "start_char_idx": 3482, "end_char_idx": 3774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80d89e07-6556-4fa4-9730-a71419e853a5": {"__data__": {"id_": "80d89e07-6556-4fa4-9730-a71419e853a5", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "175285a9-de52-4592-9b97-de2644d4a15f", "node_type": "1", "metadata": {}, "hash": "c7c6ce6498a445b36659a5ff640a30c79415cdd816559d04ff2df68e2749fb16", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Metrics\nsidebar_position: 0\ntoc_max_heading_level: 4\n---\n\nCurrently, Nethermind provides the following options to monitor and collect metrics about itself:\n\n- [Grafana and Prometheus](grafana-and-prometheus.md)\n- [dotnet-counters](dotnet-counters.md)\n\n### Parameters by namespace\n\n<!--[start autogen]-->\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Aura\n\n</summary>\n<p>\n\n- **`nethermind_au_ra_step`**\n  \n  Current AuRa step\n\n- **`nethermind_commit_hash_transaction`**\n  \n  RANDAO number of commit hash transactions\n\n- **`nethermind_emit_initiate_change`**\n  \n  POSDAO number of emit init change transactions\n\n- **`nethermind_reported_benign_misbehaviour`**\n  \n  Number of reported benign misbehaviour validators\n\n- **`nethermind_reported_malicious_misbehaviour`**\n  \n  Number of reported malicious misbehaviour validators\n\n- **`nethermind_reveal_number`**\n  \n  RANDAO number of reveal number transactions\n\n- **`nethermind_sealed_transactions`**\n  \n  Number of sealed transactions generated by engine\n\n- **`nethermind_validators_count`**\n  \n  Number of current AuRa validators", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "175285a9-de52-4592-9b97-de2644d4a15f": {"__data__": {"id_": "175285a9-de52-4592-9b97-de2644d4a15f", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80d89e07-6556-4fa4-9730-a71419e853a5", "node_type": "1", "metadata": {}, "hash": "0f89013550570c06a7e8e9720835b269bae8564a0a107493b9bef17421574da9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f176334e-4b25-4725-ac7b-82c3147af7d4", "node_type": "1", "metadata": {}, "hash": "25988f7bc15296a9223616483e9fc309ca89bc5f392fa221fa369273db00db9b", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Blockchain\n\n</summary>\n<p>\n\n- **`nethermind_best_known_block_number`**\n  \n  The estimated highest block available.\n\n- **`nethermind_blockchain_height`**\n  \n  The current height of the canonical chain.\n\n- **`nethermind_blocks`**\n  \n  Total number of blocks processed\n\n- **`nethermind_blocks_sealed`**\n  \n  Total number of sealed blocks\n\n- **`nethermind_failed_block_seals`**\n  \n  Total number of failed block seals\n\n- **`nethermind_gas_limit`**\n  \n  Gas Limit for processed blocks\n\n- **`nethermind_gas_used`**\n  \n  Gas Used in processed blocks\n\n- **`nethermind_last_difficulty`**\n  \n  Difficulty of the last block\n\n- **`nethermind_mgas`**\n  \n  Total MGas processed\n\n- **`nethermind_mgas_per_sec`**\n  \n  MGas processed per second\n\n- **`nethermind_processing_queue_size`**\n  \n  Number of blocks awaiting for processing.\n\n- **`nethermind_recovery_queue_size`**\n  \n  Number of blocks awaiting for recovery of public keys from signatures.\n\n- **`nethermind_reorganizations`**\n  \n  Total number of chain reorganizations\n\n- **`nethermind_total_difficulty`**\n  \n  Total difficulty on the chain\n\n- **`nethermind_transactions`**\n  \n  Total number of transactions processed", "mimetype": "text/plain", "start_char_idx": 1102, "end_char_idx": 2336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f176334e-4b25-4725-ac7b-82c3147af7d4": {"__data__": {"id_": "f176334e-4b25-4725-ac7b-82c3147af7d4", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "175285a9-de52-4592-9b97-de2644d4a15f", "node_type": "1", "metadata": {}, "hash": "c7c6ce6498a445b36659a5ff640a30c79415cdd816559d04ff2df68e2749fb16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6739e8cb-7a98-4f0d-8f04-61feff45ae42", "node_type": "1", "metadata": {}, "hash": "da82d832e295f22c4025116ef670ca616f8b6917b6743606329a2759ce8f2a37", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Db\n\n</summary>\n<p>\n\n- **`nethermind_code_db_cache`**\n  \n  Number of Code DB cache reads.\n\n- **`nethermind_db_block_cache_size`**\n  \n  Database block cache size per database\n\n- **`nethermind_db_compaction_stats`**\n  \n  Metrics extracted from RocksDB Compaction Stats\n\n- **`nethermind_db_index_filter_size`**\n  \n  Database index and filter size per database\n\n- **`nethermind_db_memtable_size`**\n  \n  Database memtable per database\n\n- **`nethermind_db_reads`**\n  \n  Database reads per database\n\n- **`nethermind_db_size`**\n  \n  Database size per database\n\n- **`nethermind_db_stats`**\n  \n  Metrics extracted from RocksDB Compaction Stats and DB Statistics\n\n- **`nethermind_db_writes`**\n  \n  Database writes per database\n\n- **`nethermind_state_db_pruning`**\n  \n  Indicator if StadeDb is being pruned.\n\n- **`nethermind_state_reader_reads`**\n  \n  Number of State Reader reads.\n\n- **`nethermind_state_tree_cache`**\n  \n  Number of State Trie cache hits.\n\n- **`nethermind_state_tree_reads`**\n  \n  Number of State Trie reads.\n\n- **`nethermind_state_tree_writes`**\n  \n  Number of Blocks Trie writes.\n\n- **`nethermind_storage_reader_reads`**\n  \n  Number of storage reader reads.\n\n- **`nethermind_storage_tree_cache`**\n  \n  Number of storage trie cache hits.\n\n- **`nethermind_storage_tree_reads`**\n  \n  Number of storage trie reads.\n\n- **`nethermind_storage_tree_writes`**\n  \n  Number of storage trie writes.\n\n- **`nethermind_thread_local_code_db_cache`**\n  \n  Number of Code DB cache reads on thread.\n\n- **`nethermind_thread_local_state_tree_reads`**\n  \n  Number of State Trie reads on thread.\n\n- **`nethermind_thread_local_storage_tree_reads`**\n  \n  Number of storage trie reads on thread.", "mimetype": "text/plain", "start_char_idx": 2339, "end_char_idx": 4089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6739e8cb-7a98-4f0d-8f04-61feff45ae42": {"__data__": {"id_": "6739e8cb-7a98-4f0d-8f04-61feff45ae42", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f176334e-4b25-4725-ac7b-82c3147af7d4", "node_type": "1", "metadata": {}, "hash": "25988f7bc15296a9223616483e9fc309ca89bc5f392fa221fa369273db00db9b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19cb1b3a-4eeb-45f0-a8ff-86be8ea90f1d", "node_type": "1", "metadata": {}, "hash": "0f7b9719cb9b68e256fd93bf2c8ea443272ed8f6c8ca9e3ef8aa4d2949185f49", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Evm\n\n</summary>\n<p>\n\n- **`nethermind_blockhash_opcode`**\n  \n  Number of BLOCKHASH opcodes executed.\n\n- **`nethermind_bn254_add_precompile`**\n  \n  Number of BN254_ADD precompile calls.\n\n- **`nethermind_bn254_mul_precompile`**\n  \n  Number of BN254_MUL precompile calls.\n\n- **`nethermind_bn254_pairing_precompile`**\n  \n  Number of BN254_PAIRING precompile calls.\n\n- **`nethermind_calls`**\n  \n  Number of calls to other contracts.\n\n- **`nethermind_contracts_analysed`**\n  \n  Number of contracts' code analysed for jump destinations.\n\n- **`nethermind_creates`**\n  \n  Number of contract create calls.\n\n- **`nethermind_ec_recover_precompile`**\n  \n  Number of EC_RECOVERY precompile calls.\n\n- **`nethermind_empty_calls`**\n  \n  Number of calls made to addresses without code.\n\n- **`nethermind_evm_exceptions`**\n  \n  Number of EVM exceptions thrown by contracts.\n\n- **`nethermind_exp_opcode`**\n  \n  Number of EXP opcodes executed.\n\n- **`nethermind_m_copy_opcode`**\n  \n  Number of MCOPY opcodes executed.\n\n- **`nethermind_mod_exp_precompile`**\n  \n  Number of MODEXP precompile calls.\n\n- **`nethermind_point_evaluation_precompile`**\n  \n  Number of Point Evaluation precompile calls.\n\n- **`nethermind_ripemd160_precompile`**\n  \n  Number of RIPEMD160 precompile calls.\n\n- **`nethermind_secp256r1_precompile`**\n  \n  Number of Secp256r1 precompile calls.\n\n- **`nethermind_self_destructs`**\n  \n  Number of SELFDESTRUCT calls.\n\n- **`nethermind_sha256_precompile`**\n  \n  Number of SHA256 precompile calls.\n\n- **`nethermind_sload_opcode`**\n  \n  Number of SLOAD opcodes executed.\n\n- **`nethermind_sstore_opcode`**\n  \n  Number of SSTORE opcodes executed.\n\n- **`nethermind_thread_local_calls`**\n  \n  Number of calls to other contracts on thread.", "mimetype": "text/plain", "start_char_idx": 4092, "end_char_idx": 5888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19cb1b3a-4eeb-45f0-a8ff-86be8ea90f1d": {"__data__": {"id_": "19cb1b3a-4eeb-45f0-a8ff-86be8ea90f1d", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6739e8cb-7a98-4f0d-8f04-61feff45ae42", "node_type": "1", "metadata": {}, "hash": "da82d832e295f22c4025116ef670ca616f8b6917b6743606329a2759ce8f2a37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c9cb172-e429-424a-b1f7-5f7c9c8df211", "node_type": "1", "metadata": {}, "hash": "8777f3bc4a6b27cb64a1651059561c378273a31e0c467b65786db846f629c72a", "class_name": "RelatedNodeInfo"}}, "text": "- **`nethermind_thread_local_contracts_analysed`**\n  \n  Number of contracts' code analysed for jump destinations on thread.\n\n- **`nethermind_thread_local_creates`**\n  \n  Number of contract create calls on thread.\n\n- **`nethermind_thread_local_empty_calls`**\n  \n  Number of calls made to addresses without code on thread.\n\n- **`nethermind_thread_local_s_load_opcode`**\n  \n  Number of SLOAD opcodes executed on thread.\n\n- **`nethermind_thread_local_s_store_opcode`**\n  \n  Number of SSTORE opcodes executed on thread.\n\n- **`nethermind_tload_opcode`**\n  \n  Number of TLOAD opcodes executed.\n\n- **`nethermind_tstore_opcode`**\n  \n  Number of TSTORE opcodes executed.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### JsonRpc\n\n</summary>\n<p>\n\n- **`nethermind_json_rpc_bytes_received`**\n  \n  Number of JSON RPC bytes received.\n\n- **`nethermind_json_rpc_bytes_sent`**\n  \n  Number of JSON RPC bytes sent.\n\n- **`nethermind_json_rpc_errors`**\n  \n  Number of JSON RPC requests processed with errors.\n\n- **`nethermind_json_rpc_invalid_requests`**\n  \n  Number of JSON RPC requests that were invalid.\n\n- **`nethermind_json_rpc_request_deserialization_failures`**\n  \n  Number of JSON RPC requests that failed JSON deserialization.\n\n- **`nethermind_json_rpc_requests`**\n  \n  Total number of JSON RPC requests received by the node.\n\n- **`nethermind_json_rpc_successes`**\n  \n  Number of JSON RPC requests processed successfully.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Merge\n\n</summary>\n<p>\n\n- **`nethermind_forkchoice_upded_execution_time`**\n  \n  ForkchoiceUpded request execution time\n\n- **`nethermind_get_payload_requests`**\n  \n  Number of GetPayload Requests\n\n- **`nethermind_new_payload_execution_time`**\n  \n  NewPayload request execution time\n\n- **`nethermind_number_of_transactions_in_get_payload`**\n  \n  Number of Transactions included in the Last GetPayload Request", "mimetype": "text/plain", "start_char_idx": 5890, "end_char_idx": 7806, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c9cb172-e429-424a-b1f7-5f7c9c8df211": {"__data__": {"id_": "2c9cb172-e429-424a-b1f7-5f7c9c8df211", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19cb1b3a-4eeb-45f0-a8ff-86be8ea90f1d", "node_type": "1", "metadata": {}, "hash": "0f7b9719cb9b68e256fd93bf2c8ea443272ed8f6c8ca9e3ef8aa4d2949185f49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ba7debe-ee95-40c5-a3dc-8c05ae58d3be", "node_type": "1", "metadata": {}, "hash": "51a344a2ef8a160ccb1e741507370580f81cfb11558118e1b945917cbbe60b58", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Network\n\n</summary>\n<p>\n\n- **`nethermind_handshakes`**\n  \n  Number of devp2p handshakes\n\n- **`nethermind_handshake_timeouts`**\n  \n  Number of devp2p handshake timeouts\n\n- **`nethermind_incoming_connections`**\n  \n  Number of incoming connection.\n\n- **`nethermind_incoming_p2_p_message_bytes`**\n  \n  Bytes of incoming p2p packets.\n\n- **`nethermind_incoming_p2_p_messages`**\n  \n  Number of incoming p2p packets.\n\n- **`nethermind_local_disconnects_total`**\n  \n  Number of local disconnects\n\n- **`nethermind_outgoing_connections`**\n  \n  Number of outgoing connection.\n\n- **`nethermind_outgoing_p2_p_message_bytes`**\n  \n  Bytes of outgoing p2p packets.\n\n- **`nethermind_outgoing_p2_p_messages`**\n  \n  Number of outgoing p2p packets.\n\n- **`nethermind_peer_limit`**\n  \n  The maximum number of peers this node allows to connect.\n\n- **`nethermind_remote_disconnects_total`**\n  \n  Number of remote disconnects", "mimetype": "text/plain", "start_char_idx": 7809, "end_char_idx": 8781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ba7debe-ee95-40c5-a3dc-8c05ae58d3be": {"__data__": {"id_": "2ba7debe-ee95-40c5-a3dc-8c05ae58d3be", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c9cb172-e429-424a-b1f7-5f7c9c8df211", "node_type": "1", "metadata": {}, "hash": "8777f3bc4a6b27cb64a1651059561c378273a31e0c467b65786db846f629c72a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93a620d8-5dc8-41fd-b21e-697cf255fc29", "node_type": "1", "metadata": {}, "hash": "337a855f2896e2f3caf952624db8a822a6fc8b3afd14443e36c1659ef76c899d", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Pruning\n\n</summary>\n<p>\n\n- **`nethermind_cached_nodes_count`**\n  \n  Nodes that are currently kept in cache (either persisted or not)\n\n- **`nethermind_committed_nodes_count`**\n  \n  Nodes that have been committed since the session start. These nodes may have been pruned, persisted or replaced.\n\n- **`nethermind_deep_pruned_persisted_nodes_count`**\n  \n  Nodes that have been removed from the cache during deep pruning because they have been persisted before.\n\n- **`nethermind_deep_pruning_time`**\n  \n  Time taken by the last deep pruning.\n\n- **`nethermind_last_persisted_block_number`**\n  \n  Last persisted block number (snapshot).\n\n- **`nethermind_loaded_from_cache_nodes_count`**\n  \n  Number of reads from the node cache.\n\n- **`nethermind_loaded_from_db_nodes_count`**\n  \n  Number of DB reads.\n\n- **`nethermind_loaded_from_rlp_cache_nodes_count`**\n  \n  Number of reads from the RLP cache.\n\n- **`nethermind_memory_used_by_cache`**\n  \n  Estimated memory used by cache.\n\n- **`nethermind_persisted_node_count`**\n  \n  Nodes that have been persisted since the session start.\n\n- **`nethermind_pruned_persisted_nodes_count`**\n  \n  Nodes that have been removed from the cache during pruning because they have been persisted before.\n\n- **`nethermind_pruned_transient_nodes_count`**\n  \n  Nodes that have been removed from the cache during pruning because they were no longer needed.\n\n- **`nethermind_pruning_time`**\n  \n  Time taken by the last pruning.\n\n- **`nethermind_removed_node_count`**\n  \n  Nodes that was removed via live pruning.\n\n- **`nethermind_replaced_nodes_count`**\n  \n  Number of nodes that have been exactly the same as other nodes in the cache when committing.\n\n- **`nethermind_snapshot_persistence_time`**\n  \n  Time taken by the last snapshot persistence.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Runner\n\n</summary>\n<p>\n\n- **`nethermind_version`**\n  \n  Version number", "mimetype": "text/plain", "start_char_idx": 8784, "end_char_idx": 10766, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93a620d8-5dc8-41fd-b21e-697cf255fc29": {"__data__": {"id_": "93a620d8-5dc8-41fd-b21e-697cf255fc29", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ba7debe-ee95-40c5-a3dc-8c05ae58d3be", "node_type": "1", "metadata": {}, "hash": "51a344a2ef8a160ccb1e741507370580f81cfb11558118e1b945917cbbe60b58", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1557d791-9ab4-4930-b57b-ff43cd4ac898", "node_type": "1", "metadata": {}, "hash": "2d42de5be2885f09a76f4efcb8981fa0be6259491b1dfe71976c76d62e082471", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Synchronization\n\n</summary>\n<p>\n\n- **`nethermind_sync_peers`**\n  \n  Number of sync peers.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Trie\n\n</summary>\n<p>\n\n- **`nethermind_tree_node_hash_calculations`**\n  \n  Number of trie node hash calculations.\n\n- **`nethermind_tree_node_rlp_decodings`**\n  \n  Number of trie node RLP decodings.\n\n- **`nethermind_tree_node_rlp_encodings`**\n  \n  Number of trie node RLP encodings.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### TxPool\n\n</summary>\n<p>\n\n- **`nethermind_blobs_in_block`**\n  \n  Number of blobs in the block.\n\n- **`nethermind_blob_transaction_count`**\n  \n  Number of blob transactions in pool.\n\n- **`nethermind_blob_transactions_in_block`**\n  \n  Number of blob transactions in the block.\n\n- **`nethermind_dark_pool_ratio_level1`**\n  \n  Ratio of transactions in the block absent in hashCache.\n\n- **`nethermind_dark_pool_ratio_level2`**\n  \n  Ratio of transactions in the block absent in pending transactions.\n\n- **`nethermind_eip1559_transactions_ratio`**\n  \n  Ratio of 1559-type transactions in the block.\n\n- **`nethermind_pending1559_transactions_added`**\n  \n  Number of pending 1559-type transactions added to transaction pool.\n\n- **`nethermind_pending_blob_transactions_added`**\n  \n  Number of pending blob-type transactions added to transaction pool.\n\n- **`nethermind_pending_transactions_added`**\n  \n  Number of pending transactions added to transaction pool.\n\n- **`nethermind_pending_transactions_balance_below_value`**\n  \n  Number of pending transactions received that were ignored because balance is less than txn value.\n\n- **`nethermind_pending_transactions_conflicting_tx_type`**\n  \n  Number of transactions rejected because of already pending tx of other type (allowed blob txs or others, not both at once).\n\n- **`nethermind_pending_transactions_discarded`**\n  \n  Number of pending transactions received that were ignored.", "mimetype": "text/plain", "start_char_idx": 10769, "end_char_idx": 12782, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1557d791-9ab4-4930-b57b-ff43cd4ac898": {"__data__": {"id_": "1557d791-9ab4-4930-b57b-ff43cd4ac898", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93a620d8-5dc8-41fd-b21e-697cf255fc29", "node_type": "1", "metadata": {}, "hash": "337a855f2896e2f3caf952624db8a822a6fc8b3afd14443e36c1659ef76c899d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2a3c137-29c4-4184-9ce1-493ee7b1193d", "node_type": "1", "metadata": {}, "hash": "f6dad7bdd559b2b81aa980b1dc23c715ea643099eac013c1052ada47ece82c93", "class_name": "RelatedNodeInfo"}}, "text": "- **`nethermind_pending_transactions_evicted`**\n  \n  Number of pending transactions evicted from transaction pool.\n\n- **`nethermind_pending_transactions_gas_limit_too_high`**\n  \n  Number of pending transactions received that were ignored because the gas limit was to high for the block.\n\n- **`nethermind_pending_transactions_hashes_received`**\n  \n  Number of hashes of pending transactions received from peers.\n\n- **`nethermind_pending_transactions_hashes_sent`**\n  \n  Number of hashes of pending transactions broadcasted to peers.\n\n- **`nethermind_pending_transactions_known`**\n  \n  Number of already known pending transactions.\n\n- **`nethermind_pending_transactions_low_nonce`**\n  \n  Number of transactions with already used nonce.\n\n- **`nethermind_pending_transactions_malformed`**\n  \n  Number of malformed transactions.\n\n- **`nethermind_pending_transactions_nonce_gap`**\n  \n  Number of pending transactions received that were ignored because of not having preceding nonce of this sender in TxPool.\n\n- **`nethermind_pending_transactions_nonce_too_far_in_future`**\n  \n  Number of transactions with nonce too far in future.\n\n- **`nethermind_pending_transactions_not_supported_tx_type`**\n  \n  Number of pending transactions received that were ignored because of not supported transaction type.\n\n- **`nethermind_pending_transactions_passed_filters_but_cannot_compete_on_fees`**\n  \n  Number of pending transactions received that were ignored after passing early rejections as balance is too low to compete with lowest effective fee in transaction pool.\n\n- **`nethermind_pending_transactions_passed_filters_but_cannot_replace`**\n  \n  Number of pending transactions received that were trying to replace tx with the same sender and nonce and failed.\n\n- **`nethermind_pending_transactions_received`**\n  \n  Number of pending transactions received from peers.\n\n- **`nethermind_pending_transactions_sent`**\n  \n  Number of pending transactions broadcasted to peers.\n\n- **`nethermind_pending_transactions_too_low_balance`**\n  \n  Number of pending transactions received that were ignored because balance too low for fee to be higher than the lowest fee in transaction pool.\n\n- **`nethermind_pending_transactions_too_low_fee`**\n  \n  Number of pending transactions received that were ignored because of fee lower than the lowest fee in transaction pool.", "mimetype": "text/plain", "start_char_idx": 12784, "end_char_idx": 15123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2a3c137-29c4-4184-9ce1-493ee7b1193d": {"__data__": {"id_": "f2a3c137-29c4-4184-9ce1-493ee7b1193d", "embedding": null, "metadata": {"file_path": "./phala_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1557d791-9ab4-4930-b57b-ff43cd4ac898", "node_type": "1", "metadata": {}, "hash": "2d42de5be2885f09a76f4efcb8981fa0be6259491b1dfe71976c76d62e082471", "class_name": "RelatedNodeInfo"}}, "text": "- **`nethermind_pending_transactions_too_low_priority_fee`**\n  \n  Number of pending transactions received that were ignored because of priority fee lower than minimal requirement.\n\n- **`nethermind_pending_transactions_unresolvable_sender`**\n  \n  Number of pending transactions received that were ignored because the sender couldn't be resolved.\n\n- **`nethermind_pending_transactions_with_expensive_filtering`**\n  \n  Number of pending transactions that reached filters which are resource expensive\n\n- **`nethermind_pending_transactions_zero_balance`**\n  \n  Number of pending transactions received that were ignored because balance is zero and cannot pay gas.\n\n- **`nethermind_transaction_count`**\n  \n  Number of transactions in pool.\n\n\n</p>\n</details>\n\n<!--[end autogen]-->", "mimetype": "text/plain", "start_char_idx": 15125, "end_char_idx": 15897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "804db8f2-3463-4896-addd-57b97b4e14cc": {"__data__": {"id_": "804db8f2-3463-4896-addd-57b97b4e14cc", "embedding": null, "metadata": {"file_path": "./phala_dist/rent-hardware.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e1de6054-2290-4ecd-981a-50af4fd03408", "node_type": "4", "metadata": {}, "hash": "cd2423d7ed9d5099c01109075eff8d840961a2c987d0fb0c320498223062d1c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55687d3b-ef93-46e8-8af3-69229d5473f3", "node_type": "1", "metadata": {}, "hash": "80ab3a484f4961550472fd12ba415d1239ec793427b6fc7818d3fa5088b69dcf", "class_name": "RelatedNodeInfo"}}, "text": "# Rent Hardware\n\n## Worker on Vultr <a href=\"#khala-worker-on-vultr\" id=\"khala-worker-on-vultr\"></a>\n\n> This guide will show you how to set up your worker on the `VULTR Bare Metal Simplified\u2122 Intel E-2286G` Instance. For mining on your own hardware check our guide [here](requirements-in-phala-khala.md).\n\n## Before Getting Started <a href=\"#before-getting-started\" id=\"before-getting-started\"></a>\n\n1. Sign up on [ ](https://www.vultr.com/?ref=9108833-8H)[Vultr](https://vultr.com/).\n2. Enter your [billing information](https://my.vultr.com/billing/).\n3. Request to [increase your limit](https://my.vultr.com/billing/#billinglimits) may be required.\n\n> Increasing the credit depends on the cloud provider\u2019s support\u2019s response time.\n\n## Deploy Instance <a href=\"#deploy-instance\" id=\"deploy-instance\"></a>\n\nAfter successfully signing up and increasing your credit limit, it is time to pick the correct instance.\n\n* Go to [Deploy](https://my.vultr.com/deploy/)\n  * Select \u2018Bare Metal\u2019\n  * Pick an available location geographically closest to you.\n  * Select `Intel E-2286G`\n  * Choose the 64 bit OS Ubuntu 21.10 x64\n  * Leave any remaining options as default.\n  * Add a meaningful \u2018Server Hostname & Label\u2019\n  * You are ready to hit \u2018Deploy Now\u2019\n  * Wait for 5-15 minutes: Get a cup of coffee \u2615 until your instance is ready\n\n## Instance Settings <a href=\"#instance-settings\" id=\"instance-settings\"></a>\n\nOnce your new instance is displayed as \u2018Running,\u2019 there are currently no additional steps required to adjust the machine\u2019s BIOS. The instance works out of the box.\n\n> _Optional:_ To optimize the worker\u2019s score, you can reboot the instance, head over to the console, and enter the BIOS with F11, to adjust the BIOS settings mentioned in this [guide](requirements-in-phala-khala.md#os-requirements).\n\nYou can get the correct drivers from our guide here under the Ubuntu 21.10 tab.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55687d3b-ef93-46e8-8af3-69229d5473f3": {"__data__": {"id_": "55687d3b-ef93-46e8-8af3-69229d5473f3", "embedding": null, "metadata": {"file_path": "./phala_dist/rent-hardware.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e1de6054-2290-4ecd-981a-50af4fd03408", "node_type": "4", "metadata": {}, "hash": "cd2423d7ed9d5099c01109075eff8d840961a2c987d0fb0c320498223062d1c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "804db8f2-3463-4896-addd-57b97b4e14cc", "node_type": "1", "metadata": {}, "hash": "74e1980dae91da260c0419ac818fcadb2252efc13c79ef402a13fe8c2518cafd", "class_name": "RelatedNodeInfo"}}, "text": "Once the drivers are installed, you may now turn your instance into a Phala worker.\\\n\ud83d\udc49 [Get mining scripts](../run-workers-on-khala/solo-scripts-guidance/installing-phala-mining-tools.md)", "mimetype": "text/plain", "start_char_idx": 1882, "end_char_idx": 2069, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3289cdc-61df-4f6b-95d0-4cfe50d7d507": {"__data__": {"id_": "f3289cdc-61df-4f6b-95d0-4cfe50d7d507", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "18a1820b-d588-4bf0-8b77-37ebb0ebaa1e", "node_type": "1", "metadata": {}, "hash": "f9d27b2ea8155eca013487d7e9f607c29c1a66a60f6c02ba903de75c6f47563b", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Configuration\nsidebar_position: 1\ntoc_max_heading_level: 4\n---\n\nNethermind is highly configurable. There are 3 ways of configuring it, listed by priority:\n\n- [Command line options](#command-line-options) (aka arguments or flags)\n- [Environment variables](#environment-variables)\n- [Configuration file](#configuration-file)\n\n:::note\nGiven the above priority list, an option defined in a more priority way overrides the same option defined elsewhere if any.\n:::\n\n## Command line options\n\nThe full list of command line options can be displayed by running:\n\n```bash\nnethermind -h\n```\n\nBelow is the list of the basic options followed by an exhaustive list of options by namespace.\n\n:::warning\nThe command line options are case-sensitive and can be defined only once unless stated otherwise.\n:::\n\n### Basic options\n\n- **`-d, --baseDbPath <path>`**\n\n  The path to the Nethermind database directory. Defaults to `db`.\n\n- **`-c, --config <value>`**\n\n  The path to the [configuration file](#configuration-file) or the name (without extension) of any of the configuration files in the configuration directory. Defaults to `mainnet`.\n\n  <details>\n  <summary>Available configurations</summary>\n  <p>\n\n  Nethermind provides the following pre-built configurations named as the networks they are for. Their respective versions for archive nodes are suffixed `_archive`.\n\n  - `base-mainnet` `base-mainnet_archive`\n  - `base-sepolia` `base-sepolia_archive`\n  - `chiado` `chiado_archive`\n  - `energyweb` `energyweb_archive`\n  - `gnosis` `gnosis_archive`\n  - `holesky` `holesky_archive`\n  - `mainnet` `mainnet_archive`\n  - `op-mainnet` `op-mainnet_archive`\n  - `op-sepolia` `op-sepolia_archive`\n  - `sepolia` `sepolia_archive`\n  - `volta` `volta_archive`\n\n  </p>\n  </details>\n\n- **`-cd, --configsDirectory <path>`**\n\n  The path to the configuration files directory. Defaults to `configs`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18a1820b-d588-4bf0-8b77-37ebb0ebaa1e": {"__data__": {"id_": "18a1820b-d588-4bf0-8b77-37ebb0ebaa1e", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3289cdc-61df-4f6b-95d0-4cfe50d7d507", "node_type": "1", "metadata": {}, "hash": "5bae633bebdc489dfaa896365e7d93ef76e86cd58e2075d498e7bb0fc64bd505", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c61933c5-eb47-4fd9-a249-05917378e4b8", "node_type": "1", "metadata": {}, "hash": "acf8cd6ac8503fce514f68dd6999aa162b89521b15993b23157ec6ed5264a198", "class_name": "RelatedNodeInfo"}}, "text": "- **`-dd, --datadir <path>`**\n\n  The path to the Nethermind data directory. Defaults to Nethermind's current directory.\n\n  :::warning\n  The absolute paths set by `Init.BaseDbPath`, `Init.LogDirectory`, or `KeyStore.KeyStoreDirectory` options in a configuration file are not overridden by `--datadir`.\n  :::\n\n- **`-?, -h, --help`**\n\n  Displays the full list of available command line options.\n\n- **`-l, --log <level>`**\n\n  Log level (severity). Allowed values: `TRACE` `DEBUG` `INFO` `WARN` `ERROR` `OFF`. Defaults to `INFO`.\n\n- **`-lcs, --loggerConfigSource <path>`**\n\n  The path to the NLog configuration file. Defaults to `NLog.config`.\n\n- **`-pd, --pluginsDirectory <path>`**\n\n  The path to the Nethermind plugins directory. Defaults to `plugins`.\n\n- **`-v, --version`**\n\n  Displays the Nethermind version info.\n\n### Options by namespaces\n\n<!--[start autogen]-->\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Aura\n\n</summary>\n<p>\n\n- **`--Aura.AllowAuRaPrivateChains <value>`** `NETHERMIND_AURACONFIG_ALLOWAURAPRIVATECHAINS`\n\n  Whether to allow private Aura-based chains only. Do not use with existing Aura-based chains. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Aura.ForceSealing <value>`** `NETHERMIND_AURACONFIG_FORCESEALING`\n\n  Whether to seal empty blocks if mining. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Aura.Minimum2MlnGasPerBlockWhenUsingBlockGasLimitContract <value>`** `NETHERMIND_AURACONFIG_MINIMUM2MLNGASPERBLOCKWHENUSINGBLOCKGASLIMITCONTRACT`\n\n  Whether to use 2M gas if the contract returns less than that when using `BlockGasLimitContractTransitions`. Allowed values: `true` `false`. Defaults to `false`.", "mimetype": "text/plain", "start_char_idx": 1881, "end_char_idx": 3555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c61933c5-eb47-4fd9-a249-05917378e4b8": {"__data__": {"id_": "c61933c5-eb47-4fd9-a249-05917378e4b8", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18a1820b-d588-4bf0-8b77-37ebb0ebaa1e", "node_type": "1", "metadata": {}, "hash": "f9d27b2ea8155eca013487d7e9f607c29c1a66a60f6c02ba903de75c6f47563b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3f7b948-2e93-4062-a1f7-60ad7d62b66f", "node_type": "1", "metadata": {}, "hash": "65d78b1e4ff463a848d4c5fc35d6bdc7a533ad635f8749bbfe9ca083359c5cc9", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Aura.TxPriorityConfigFilePath <value>`** `NETHERMIND_AURACONFIG_TXPRIORITYCONFIGFILEPATH`\n\n  The path to the transaction priority rules file to use when selecting transactions from the transaction pool. Defaults to `null`.\n\n- **`--Aura.TxPriorityContractAddress <value>`** `NETHERMIND_AURACONFIG_TXPRIORITYCONTRACTADDRESS`\n\n  The address of the transaction priority contract to use when selecting transactions from the transaction pool. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Blocks\n\n</summary>\n<p>\n\n- **`--Blocks.ExtraData <value>`** `NETHERMIND_BLOCKSCONFIG_EXTRADATA`\n\n  The block header extra data up to 32 bytes in length. Defaults to `Nethermind`.\n\n- **`--Blocks.MinGasPrice <value>`** `NETHERMIND_BLOCKSCONFIG_MINGASPRICE`\n\n  The minimum gas premium (or the gas price before the London hard fork) for transactions accepted by the block producer. Defaults to `1`.\n\n- **`--Blocks.PreWarmStateOnBlockProcessing <value>`** `NETHERMIND_BLOCKSCONFIG_PREWARMSTATEONBLOCKPROCESSING`\n\n  Try to pre-warm the state when processing blocks. Can lead to 2x speedup in main loop block processing. Allowed values: `true` `false`. Defaults to `True`.\n\n- **`--Blocks.RandomizedBlocks <value>`** `NETHERMIND_BLOCKSCONFIG_RANDOMIZEDBLOCKS`\n\n  Whether to change the difficulty of the block randomly within the constraints. Used in NethDev only. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Blocks.SecondsPerSlot <value>`** `NETHERMIND_BLOCKSCONFIG_SECONDSPERSLOT`\n\n  The block time slot, in seconds. Defaults to `12`.\n\n- **`--Blocks.TargetBlockGasLimit <value>`** `NETHERMIND_BLOCKSCONFIG_TARGETBLOCKGASLIMIT`\n\n  The block gas limit that the block producer should try to reach in the fastest possible way based on the protocol rules. If not specified, then the block producer should follow others. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 3557, "end_char_idx": 5439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3f7b948-2e93-4062-a1f7-60ad7d62b66f": {"__data__": {"id_": "b3f7b948-2e93-4062-a1f7-60ad7d62b66f", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c61933c5-eb47-4fd9-a249-05917378e4b8", "node_type": "1", "metadata": {}, "hash": "acf8cd6ac8503fce514f68dd6999aa162b89521b15993b23157ec6ed5264a198", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c76ef009-9604-4fef-a8a6-114a9af7d9df", "node_type": "1", "metadata": {}, "hash": "ff0bc324130ea8321a070c564ee6982cb80c6a155f3ff7f4a904c8c61739a793", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Bloom\n\n</summary>\n<p>\n\n- **`--Bloom.Index <value>`** `NETHERMIND_BLOOMCONFIG_INDEX`\n\n  Whether to use the Bloom index. The Bloom index speeds up the RPC log searches. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Bloom.IndexLevelBucketSizes <value>`** `NETHERMIND_BLOOMCONFIG_INDEXLEVELBUCKETSIZES`\n\n  An array of multipliers for index levels. Can be tweaked per chain to boost performance. Defaults to `[4, 8, 8]`.\n\n- **`--Bloom.Migration <value>`** `NETHERMIND_BLOOMCONFIG_MIGRATION`\n\n  Whether to migrate the previously downloaded blocks to the Bloom index. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Bloom.MigrationStatistics <value>`** `NETHERMIND_BLOOMCONFIG_MIGRATIONSTATISTICS`\n\n  Whether the migration statistics should be calculated and output. Allowed values: `true` `false`. Defaults to `false`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### EthStats\n\n</summary>\n<p>\n\n- **`--EthStats.Contact <value>`** `NETHERMIND_ETHSTATSCONFIG_CONTACT`\n\n  The node owner contact details displayed on Ethstats. Defaults to `hello@nethermind.io`.\n\n- **`--EthStats.Enabled <value>`** `NETHERMIND_ETHSTATSCONFIG_ENABLED`\n\n  Whether to use Ethstats publishing. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--EthStats.Name <value>`** `NETHERMIND_ETHSTATSCONFIG_NAME`\n\n  The node name displayed on Ethstats. Defaults to `Nethermind`.\n\n- **`--EthStats.Secret <value>`** `NETHERMIND_ETHSTATSCONFIG_SECRET`\n\n  The Ethstats secret. Defaults to `secret`.\n\n- **`--EthStats.SendInterval <value>`** `NETHERMIND_ETHSTATSCONFIG_SENDINTERVAL`\n\n  The stats update interval, in seconds. Defaults to `15`.", "mimetype": "text/plain", "start_char_idx": 5441, "end_char_idx": 7172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c76ef009-9604-4fef-a8a6-114a9af7d9df": {"__data__": {"id_": "c76ef009-9604-4fef-a8a6-114a9af7d9df", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3f7b948-2e93-4062-a1f7-60ad7d62b66f", "node_type": "1", "metadata": {}, "hash": "65d78b1e4ff463a848d4c5fc35d6bdc7a533ad635f8749bbfe9ca083359c5cc9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70a6743c-c74d-4ae7-9447-c98b0d3eebb8", "node_type": "1", "metadata": {}, "hash": "7340dda8f2551af82663c844790073edb574cc0035cf36390296ce0e86026f24", "class_name": "RelatedNodeInfo"}}, "text": "- **`--EthStats.Server <value>`** `NETHERMIND_ETHSTATSCONFIG_SERVER`\n\n  The Ethstats server URL. Defaults to `ws://localhost:3000/api`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### HealthChecks\n\n</summary>\n<p>\n\n- **`--HealthChecks.Enabled <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_ENABLED`\n\n  Whether to enable the health check. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.LowStorageCheckAwaitOnStartup <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_LOWSTORAGECHECKAWAITONSTARTUP`\n\n  Whether to check for low disk space on startup and suspend until enough space is available. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.LowStorageSpaceShutdownThreshold <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_LOWSTORAGESPACESHUTDOWNTHRESHOLD`\n\n  The percentage of available disk space below which Nethermind shuts down. `0` to disable. Defaults to `1`.\n\n- **`--HealthChecks.LowStorageSpaceWarningThreshold <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_LOWSTORAGESPACEWARNINGTHRESHOLD`\n\n  The percentage of available disk space below which a warning is displayed. `0` to disable. Defaults to `5`.\n\n- **`--HealthChecks.MaxIntervalClRequestTime <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_MAXINTERVALCLREQUESTTIME`\n\n  The max request interval, in seconds, in which the consensus client is assumed healthy. Defaults to `300`.\n\n- **`--HealthChecks.MaxIntervalWithoutProcessedBlock <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_MAXINTERVALWITHOUTPROCESSEDBLOCK`\n\n  The max interval, in seconds, in which the block processing is assumed healthy. Defaults to `null`.\n\n- **`--HealthChecks.MaxIntervalWithoutProducedBlock <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_MAXINTERVALWITHOUTPRODUCEDBLOCK`\n\n  The max interval, in seconds, in which the block production is assumed healthy. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 7174, "end_char_idx": 9024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70a6743c-c74d-4ae7-9447-c98b0d3eebb8": {"__data__": {"id_": "70a6743c-c74d-4ae7-9447-c98b0d3eebb8", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c76ef009-9604-4fef-a8a6-114a9af7d9df", "node_type": "1", "metadata": {}, "hash": "ff0bc324130ea8321a070c564ee6982cb80c6a155f3ff7f4a904c8c61739a793", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f974204-b92d-4e3e-9726-2091db650536", "node_type": "1", "metadata": {}, "hash": "3834dd7ba033faad9056178607def9b4f2dc940cfa2551fcc847d077e7179890", "class_name": "RelatedNodeInfo"}}, "text": "- **`--HealthChecks.PollingInterval <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_POLLINGINTERVAL`\n\n  The health check updates polling interval, in seconds. Defaults to `5`.\n\n- **`--HealthChecks.Slug <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_SLUG`\n\n  The URL slug the health checks service is exposed at. Defaults to `/health`.\n\n- **`--HealthChecks.UIEnabled <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_UIENABLED`\n\n  Whether to enable the health checks UI. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.WebhooksEnabled <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSENABLED`\n\n  Whether to enable web hooks. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.WebhooksPayload <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSPAYLOAD`\n\n  An escaped JSON paylod to be sent to the web hook on failure.\n  Defaults to:\n\n  ```json\n  {\n    \"attachments\": [\n      {\n        \"color\": \"#FFCC00\",\n        \"pretext\": \"Health Check Status :warning:\",\n        \"fields\": [\n          {\n            \"title\": \"Details\",\n            \"value\": \"More details available at /healthchecks-ui\",\n            \"short\": false\n          },\n          {\n            \"title\": \"Description\",\n            \"value\": \"[[DESCRIPTIONS]]\",\n            \"short\": false\n          }\n        ]\n      }\n    ]\n  }\n  ```", "mimetype": "text/plain", "start_char_idx": 9026, "end_char_idx": 10343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f974204-b92d-4e3e-9726-2091db650536": {"__data__": {"id_": "8f974204-b92d-4e3e-9726-2091db650536", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70a6743c-c74d-4ae7-9447-c98b0d3eebb8", "node_type": "1", "metadata": {}, "hash": "7340dda8f2551af82663c844790073edb574cc0035cf36390296ce0e86026f24", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30d9d382-e9c7-4c73-90a5-12579be36b7b", "node_type": "1", "metadata": {}, "hash": "aef7c0f09aac41d3e6131e8025b5c54838d810233022f695c0d3320714cd0f47", "class_name": "RelatedNodeInfo"}}, "text": "- **`--HealthChecks.WebhooksRestorePayload <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSRESTOREPAYLOAD`\n\n  An escaped JSON paylod to be sent to the web hook on recovery.\n  Defaults to:\n\n  ```json\n  {\n    \"attachments\": [\n      {\n        \"color\": \"#36a64f\",\n        \"pretext\": \"Health Check Status :+1:\",\n        \"fields\": [\n          {\n            \"title\": \"Details\",\n            \"value\": \"More details available at /healthchecks-ui\",\n            \"short\": false\n          },\n          {\n            \"title\": \"description\",\n            \"value\": \"The HealthCheck `[[LIVENESS]]` is recovered. Everything is up and running.\",\n            \"short\": false\n          }\n        ]\n      }\n    ]\n  }\n  ```\n\n\n- **`--HealthChecks.WebhooksUri <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSURI`\n\n  The web hook URL. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Hive\n\n</summary>\n<p>\n\n- **`--Hive.BlocksDir <value>`** `NETHERMIND_HIVECONFIG_BLOCKSDIR`\n\n  The path to the directory with additional blocks. Defaults to `/blocks`.\n\n- **`--Hive.ChainFile <value>`** `NETHERMIND_HIVECONFIG_CHAINFILE`\n\n  The path to the test chain spec file. Defaults to `/chain.rlp`.\n\n- **`--Hive.Enabled <value>`** `NETHERMIND_HIVECONFIG_ENABLED`\n\n  Whether to enable Hive for debugging. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Hive.GenesisFilePath <value>`** `NETHERMIND_HIVECONFIG_GENESISFILEPATH`\n\n  The path to the genesis block file. Defaults to `/genesis.json`.\n\n- **`--Hive.KeysDir <value>`** `NETHERMIND_HIVECONFIG_KEYSDIR`\n\n  The path to the keystore directory. Defaults to `/keys`.", "mimetype": "text/plain", "start_char_idx": 10346, "end_char_idx": 11980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30d9d382-e9c7-4c73-90a5-12579be36b7b": {"__data__": {"id_": "30d9d382-e9c7-4c73-90a5-12579be36b7b", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f974204-b92d-4e3e-9726-2091db650536", "node_type": "1", "metadata": {}, "hash": "3834dd7ba033faad9056178607def9b4f2dc940cfa2551fcc847d077e7179890", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "488ab62d-6c57-45e7-ab5b-e65828c55eba", "node_type": "1", "metadata": {}, "hash": "63346332af3e4b5b9355e59eae6ade37a684aecaa47784da91b8b653ba06138d", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Init\n\n</summary>\n<p>\n\n- **`--Init.AutoDump <value>`** `NETHERMIND_INITCONFIG_AUTODUMP`\n\n  Auto-dump on bad blocks for diagnostics. `Default` combines `Receipts` and `Rlp`.\n\n  Allowed values:\n\n    - `None`\n    - `Receipts`\n    - `Parity`\n    - `Geth`\n    - `Rlp`\n    - `RlpLog`\n    - `Default`\n    - `All`\n\n  Defaults to `Default`.\n\n- **`--Init.BadBlocksStored <value>`** `NETHERMIND_INITCONFIG_BADBLOCKSSTORED`\n\n  The maximum number of bad blocks observed on the network that will be stored on disk. Defaults to `100`.\n\n- **`--Init.BaseDbPath <value>`** `NETHERMIND_INITCONFIG_BASEDBPATH`\n\n  The base path for all Nethermind databases. Defaults to `db`.\n\n- **`--Init.ChainSpecPath <value>`** `NETHERMIND_INITCONFIG_CHAINSPECPATH`\n\n  The path to the chain spec file. Defaults to `chainspec/foundation.json`.\n\n- **`--Init.DiagnosticMode <value>`** `NETHERMIND_INITCONFIG_DIAGNOSTICMODE`\n\n  The diagnostic mode.\n\n  Allowed values:\n\n    - `None`\n    - `MemDb`\n    - `RpcDb`\n    - `ReadOnlyDb`\n    - `VerifyRewards`\n    - `VerifySupply`\n    - `VerifyTrie`\n\n  Defaults to `None`.\n\n- **`--Init.DiscoveryEnabled <value>`** `NETHERMIND_INITCONFIG_DISCOVERYENABLED`\n\n  Whether to enable the node discovery. If disabled, Nethermind doesn't look for other nodes beyond the bootnodes specified. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Init.EnableUnsecuredDevWallet <value>`** `NETHERMIND_INITCONFIG_ENABLEUNSECUREDDEVWALLET`\n\n  Whether to enable the in-app wallet/keystore. Allowed values: `true` `false`. Defaults to `false`.", "mimetype": "text/plain", "start_char_idx": 11982, "end_char_idx": 13589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "488ab62d-6c57-45e7-ab5b-e65828c55eba": {"__data__": {"id_": "488ab62d-6c57-45e7-ab5b-e65828c55eba", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30d9d382-e9c7-4c73-90a5-12579be36b7b", "node_type": "1", "metadata": {}, "hash": "aef7c0f09aac41d3e6131e8025b5c54838d810233022f695c0d3320714cd0f47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f537f8d6-df5f-451c-9bd4-922c777408c1", "node_type": "1", "metadata": {}, "hash": "e808d8766732aba58fdf3de3aab3964002eebdd014bffa5720e524e3555f5e31", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Init.GenesisHash <value>`** `NETHERMIND_INITCONFIG_GENESISHASH`\n\n  The hash of the genesis block. If not specified, the genesis block validity is not checked which is useful in the case of ad hoc test/private networks. Defaults to `null`.\n\n- **`--Init.HiveChainSpecPath <value>`** `NETHERMIND_INITCONFIG_HIVECHAINSPECPATH`\n\n  The path to the chain spec file for Hive tests. Defaults to `chainspec/test.json`.\n\n- **`--Init.IsMining <value>`** `NETHERMIND_INITCONFIG_ISMINING`\n\n  Whether to seal/mine new blocks. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Init.KeepDevWalletInMemory <value>`** `NETHERMIND_INITCONFIG_KEEPDEVWALLETINMEMORY`\n\n  Whether to create session-only accounts and delete them on shutdown. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Init.KzgSetupPath <value>`** `NETHERMIND_INITCONFIG_KZGSETUPPATH`\n\n  The path to KZG trusted setup file. Defaults to `null`.\n\n- **`--Init.LogDirectory <value>`** `NETHERMIND_INITCONFIG_LOGDIRECTORY`\n\n  The path to the Nethermind logs directory. Defaults to `logs`.\n\n- **`--Init.LogFileName <value>`** `NETHERMIND_INITCONFIG_LOGFILENAME`\n\n  The name of the log file. Defaults to `log.txt`.\n\n- **`--Init.LogRules <value>`** `NETHERMIND_INITCONFIG_LOGRULES`\n\n  The logs format as `LogPath:LogLevel;*` Defaults to `null`.\n\n- **`--Init.MemoryHint <value>`** `NETHERMIND_INITCONFIG_MEMORYHINT`\n\n  The hint on the max memory limit, in bytes, to configure the database and networking memory allocations. Defaults to `null`.\n\n- **`--Init.PeerManagerEnabled <value>`** `NETHERMIND_INITCONFIG_PEERMANAGERENABLED`\n\n  Whether to connect to newly discovered peers. Allowed values: `true` `false`. Defaults to `true`.", "mimetype": "text/plain", "start_char_idx": 13591, "end_char_idx": 15289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f537f8d6-df5f-451c-9bd4-922c777408c1": {"__data__": {"id_": "f537f8d6-df5f-451c-9bd4-922c777408c1", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "488ab62d-6c57-45e7-ab5b-e65828c55eba", "node_type": "1", "metadata": {}, "hash": "63346332af3e4b5b9355e59eae6ade37a684aecaa47784da91b8b653ba06138d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d628e5b0-1d07-4711-a442-bd4df21bd7e3", "node_type": "1", "metadata": {}, "hash": "c3c7bb0280607e733de4d9f6d7908db304e8ca48a76602ad9c072caa1b71d540", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Init.ProcessingEnabled <value>`** `NETHERMIND_INITCONFIG_PROCESSINGENABLED`\n\n  Whether to download/process new blocks. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Init.RpcDbUrl <value>`** `NETHERMIND_INITCONFIG_RPCDBURL`\n\n  The URL of the remote node used as a database source when `DiagnosticMode` is set to `RpcDb`.\n\n- **`--Init.StaticNodesPath <value>`** `NETHERMIND_INITCONFIG_STATICNODESPATH`\n\n  The path to the static nodes file. Defaults to `Data/static-nodes.json`.\n\n- **`--Init.WebSocketsEnabled <value>`** `NETHERMIND_INITCONFIG_WEBSOCKETSENABLED`\n\n  Whether to enable WebSocket service for the default JSON-RPC port on startup. Allowed values: `true` `false`. Defaults to `true`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### JsonRpc\n\n</summary>\n<p>\n\n- **`--JsonRpc.AdditionalRpcUrls <value>`** `NETHERMIND_JSONRPCCONFIG_ADDITIONALRPCURLS`\n\n  An array of additional JSON-RPC URLs to listen at with protocol and JSON-RPC namespace list. For instance, `[http://localhost:8546|http;ws|eth;web3]`. Defaults to `[]`.\n\n- **`--JsonRpc.BufferResponses <value>`** `NETHERMIND_JSONRPCCONFIG_BUFFERRESPONSES`\n\n  Whether to buffer responses before sending them. This allows using of `Content-Length` instead of `Transfer-Encoding: chunked`. Note that it may degrade performance on large responses. The max buffered response length is 2GB. Chunked responses can be larger. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--JsonRpc.CallsFilterFilePath <value>`** `NETHERMIND_JSONRPCCONFIG_CALLSFILTERFILEPATH`\n\n  The path to a file with the list of new-line-separated JSON-RPC calls. If specified, only the calls from that file are allowed. Defaults to `Data/jsonrpc.filter`.", "mimetype": "text/plain", "start_char_idx": 15291, "end_char_idx": 17026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d628e5b0-1d07-4711-a442-bd4df21bd7e3": {"__data__": {"id_": "d628e5b0-1d07-4711-a442-bd4df21bd7e3", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f537f8d6-df5f-451c-9bd4-922c777408c1", "node_type": "1", "metadata": {}, "hash": "e808d8766732aba58fdf3de3aab3964002eebdd014bffa5720e524e3555f5e31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "668c063e-08c4-40fe-9b88-05d2ea53b31d", "node_type": "1", "metadata": {}, "hash": "85247e2d4af59180db173824d0fe305cec0b930dfac3305fc50efddd0ce9c7f7", "class_name": "RelatedNodeInfo"}}, "text": "- **`--JsonRpc.Enabled <value>`** `NETHERMIND_JSONRPCCONFIG_ENABLED`\n\n  Whether to enable the JSON-RPC service. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--JsonRpc.EnabledModules <value>`** `NETHERMIND_JSONRPCCONFIG_ENABLEDMODULES`\n\n  An array of JSON-RPC namespaces to enable. For instance, `[debug,eth]`.\n  \n  Built-in namespaces:\n  \n  - `admin`\n  - `client`\n  - `debug`\n  - `engine`\n  - `eth`\n  - `evm`\n  - `health`\n  - `net`\n  - `parity`\n  - `personal`\n  - `proof`\n  - `rpc`\n  - `subscribe`\n  - `trace`\n  - `txpool`\n  - `web3`\n  \n  Defaults to `[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc]`.\n\n- **`--JsonRpc.EngineEnabledModules <value>`** `NETHERMIND_JSONRPCCONFIG_ENGINEENABLEDMODULES`\n\n  An array of additional JSON-RPC URLs to listen at with protocol and JSON-RPC namespace list for Engine API. Defaults to `[Net,Eth,Subscribe,Web3]`.\n\n- **`--JsonRpc.EngineHost <value>`** `NETHERMIND_JSONRPCCONFIG_ENGINEHOST`\n\n  The Engine API host. Defaults to `127.0.0.1`.\n\n- **`--JsonRpc.EnginePort <value>`** `NETHERMIND_JSONRPCCONFIG_ENGINEPORT`\n\n  The Engine API port. Defaults to `null`.\n\n- **`--JsonRpc.EstimateErrorMargin <value>`** `NETHERMIND_JSONRPCCONFIG_ESTIMATEERRORMARGIN`\n\n  The error margin used in eth_estimateGas expressed in basis points. Defaults to `150`.", "mimetype": "text/plain", "start_char_idx": 17028, "end_char_idx": 18342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "668c063e-08c4-40fe-9b88-05d2ea53b31d": {"__data__": {"id_": "668c063e-08c4-40fe-9b88-05d2ea53b31d", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d628e5b0-1d07-4711-a442-bd4df21bd7e3", "node_type": "1", "metadata": {}, "hash": "c3c7bb0280607e733de4d9f6d7908db304e8ca48a76602ad9c072caa1b71d540", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "075c2f2f-cd02-45d3-bddc-2b7528ee1dc0", "node_type": "1", "metadata": {}, "hash": "14d89235781bfcb92b3c12b3b1f002f986961d8a5065b8f556500c49e53a92b5", "class_name": "RelatedNodeInfo"}}, "text": "- **`--JsonRpc.EthModuleConcurrentInstances <value>`** `NETHERMIND_JSONRPCCONFIG_ETHMODULECONCURRENTINSTANCES`\n\n  The number of concurrent instances for non-sharable calls:\n  \n  - `eth_call`\n  - `eth_estimateGas`\n  - `eth_getLogs`\n  - `eth_newBlockFilter`\n  - `eth_newFilter`\n  - `eth_newPendingTransactionFilter`\n  - `eth_uninstallFilter`\n  \n  This limits the load on the CPU and I/O to reasonable levels. If the limit is exceeded, HTTP 503 is returned along with the JSON-RPC error. Defaults to the number of logical processors.\n\n- **`--JsonRpc.GasCap <value>`** `NETHERMIND_JSONRPCCONFIG_GASCAP`\n\n  The gas limit for `eth_call` and `eth_estimateGas`. Defaults to `100000000`.\n\n- **`--JsonRpc.Host <value>`** `NETHERMIND_JSONRPCCONFIG_HOST`\n\n  The JSON-RPC service host. Defaults to `127.0.0.1`.\n\n- **`--JsonRpc.IpcUnixDomainSocketPath <value>`** `NETHERMIND_JSONRPCCONFIG_IPCUNIXDOMAINSOCKETPATH`\n\n  The path to connect a UNIX domain socket over.\n\n- **`--JsonRpc.JwtSecretFile <value>`** `NETHERMIND_JSONRPCCONFIG_JWTSECRETFILE`\n\n  The path to the JWT secret file required for the Engine API authentication. Defaults to `keystore/jwt-secret`.\n\n- **`--JsonRpc.MaxBatchResponseBodySize <value>`** `NETHERMIND_JSONRPCCONFIG_MAXBATCHRESPONSEBODYSIZE`\n\n  The max batch size limit for batched JSON-RPC calls. Defaults to `33554432`.\n\n- **`--JsonRpc.MaxBatchSize <value>`** `NETHERMIND_JSONRPCCONFIG_MAXBATCHSIZE`\n\n  The max number of JSON-RPC requests in a batch. Defaults to `1024`.\n\n- **`--JsonRpc.MaxLoggedRequestParametersCharacters <value>`** `NETHERMIND_JSONRPCCONFIG_MAXLOGGEDREQUESTPARAMETERSCHARACTERS`\n\n  The max number of characters of a JSON-RPC request parameter printing to the log. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 18344, "end_char_idx": 20057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "075c2f2f-cd02-45d3-bddc-2b7528ee1dc0": {"__data__": {"id_": "075c2f2f-cd02-45d3-bddc-2b7528ee1dc0", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "668c063e-08c4-40fe-9b88-05d2ea53b31d", "node_type": "1", "metadata": {}, "hash": "85247e2d4af59180db173824d0fe305cec0b930dfac3305fc50efddd0ce9c7f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a6f01655-671a-4a26-89a3-ccb3a9f309f9", "node_type": "1", "metadata": {}, "hash": "3b58fa8c35db7b2b357355ce19db693e286cacb06279cec6647a1733272af56c", "class_name": "RelatedNodeInfo"}}, "text": "- **`--JsonRpc.MaxLogsPerResponse <value>`** `NETHERMIND_JSONRPCCONFIG_MAXLOGSPERRESPONSE`\n\n  The max number of logs per response. For method `eth_getLogs`. If 0 then no limit. Defaults to `20000`.\n\n- **`--JsonRpc.MaxRequestBodySize <value>`** `NETHERMIND_JSONRPCCONFIG_MAXREQUESTBODYSIZE`\n\n  The max length of HTTP request body, in bytes. Defaults to `30000000`.\n\n- **`--JsonRpc.MaxSimulateBlocksCap <value>`** `NETHERMIND_JSONRPCCONFIG_MAXSIMULATEBLOCKSCAP`\n\n  The max blocks count limit for eth_simulate JSON-RPC calls. Defaults to `256`.\n\n- **`--JsonRpc.MethodsLoggingFiltering <value>`** `NETHERMIND_JSONRPCCONFIG_METHODSLOGGINGFILTERING`\n\n  An array of the method names not to log. Defaults to `[engine_newPayloadV1,engine_newPayloadV2,engine_newPayloadV3,engine_forkchoiceUpdatedV1,engine_forkchoiceUpdatedV2]`.\n\n- **`--JsonRpc.Port <value>`** `NETHERMIND_JSONRPCCONFIG_PORT`\n\n  The JSON-RPC service HTTP port. Defaults to `8545`.\n\n- **`--JsonRpc.ReportIntervalSeconds <value>`** `NETHERMIND_JSONRPCCONFIG_REPORTINTERVALSECONDS`\n\n  The interval, in seconds, between the JSON-RPC stats report log. Defaults to `300`.\n\n- **`--JsonRpc.RequestQueueLimit <value>`** `NETHERMIND_JSONRPCCONFIG_REQUESTQUEUELIMIT`\n\n  The max number of concurrent requests in the queue for:\n  \n  - `eth_call`\n  - `eth_estimateGas`\n  - `eth_getLogs`\n  - `eth_newFilter`\n  - `eth_newBlockFilter`\n  - `eth_newPendingTransactionFilter`\n  - `eth_uninstallFilter`\n  \n  `0` to lift the limit. Defaults to `500`.\n\n- **`--JsonRpc.RpcRecorderBaseFilePath <value>`** `NETHERMIND_JSONRPCCONFIG_RPCRECORDERBASEFILEPATH`\n\n  The path to the base file for diagnostic recording.", "mimetype": "text/plain", "start_char_idx": 20059, "end_char_idx": 21701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6f01655-671a-4a26-89a3-ccb3a9f309f9": {"__data__": {"id_": "a6f01655-671a-4a26-89a3-ccb3a9f309f9", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "075c2f2f-cd02-45d3-bddc-2b7528ee1dc0", "node_type": "1", "metadata": {}, "hash": "14d89235781bfcb92b3c12b3b1f002f986961d8a5065b8f556500c49e53a92b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c165fe77-32fe-4348-997b-f8d26c5fb85e", "node_type": "1", "metadata": {}, "hash": "e13ea37e0cd94b7a1ff3deb09f1e1c4f8360e3c95d76ad72db9a145efb63115b", "class_name": "RelatedNodeInfo"}}, "text": "Defaults to `logs/rpc.{counter}.txt`.\n\n- **`--JsonRpc.RpcRecorderState <value>`** `NETHERMIND_JSONRPCCONFIG_RPCRECORDERSTATE`\n\n  The diagnostic recording mode.\n\n  Allowed values:\n\n    - `None`\n    - `Request`\n    - `Response`\n    - `All`\n\n  Defaults to `None`.\n\n- **`--JsonRpc.Timeout <value>`** `NETHERMIND_JSONRPCCONFIG_TIMEOUT`\n\n  The request timeout, in milliseconds. Defaults to `20000`.\n\n- **`--JsonRpc.WebSocketsPort <value>`** `NETHERMIND_JSONRPCCONFIG_WEBSOCKETSPORT`\n\n  The JSON-RPC service WebSockets port. Defaults to `8545`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### KeyStore\n\n</summary>\n<p>\n\n- **`--KeyStore.BlockAuthorAccount <value>`** `NETHERMIND_KEYSTORECONFIG_BLOCKAUTHORACCOUNT`\n\n  An account to use as the block author (coinbase).\n\n- **`--KeyStore.Cipher <value>`** `NETHERMIND_KEYSTORECONFIG_CIPHER`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `aes-128-ctr`.\n\n- **`--KeyStore.EnodeAccount <value>`** `NETHERMIND_KEYSTORECONFIG_ENODEACCOUNT`\n\n  An account to use for networking (enode). If neither this nor the `EnodeKeyFile` option is specified, the key is autogenerated in `node.key.plain` file.\n\n- **`--KeyStore.EnodeKeyFile <value>`** `NETHERMIND_KEYSTORECONFIG_ENODEKEYFILE`\n\n  The path to the key file to use by for networking (enode). If neither this nor the `EnodeAccount` is specified, the key is autogenerated in `node.key.plain` file.\n\n- **`--KeyStore.IVSize <value>`** `NETHERMIND_KEYSTORECONFIG_IVSIZE`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `16`.\n\n- **`--KeyStore.Kdf <value>`** `NETHERMIND_KEYSTORECONFIG_KDF`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `scrypt`.", "mimetype": "text/plain", "start_char_idx": 21702, "end_char_idx": 23429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c165fe77-32fe-4348-997b-f8d26c5fb85e": {"__data__": {"id_": "c165fe77-32fe-4348-997b-f8d26c5fb85e", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a6f01655-671a-4a26-89a3-ccb3a9f309f9", "node_type": "1", "metadata": {}, "hash": "3b58fa8c35db7b2b357355ce19db693e286cacb06279cec6647a1733272af56c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "297cfa46-1274-458d-96cb-7a01466f5384", "node_type": "1", "metadata": {}, "hash": "b1d673a7d7037590b5511f0cd42bb67d025697476780d62228819f5b87645db8", "class_name": "RelatedNodeInfo"}}, "text": "- **`--KeyStore.KdfparamsDklen <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSDKLEN`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `32`.\n\n- **`--KeyStore.KdfparamsN <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSN`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `262144`.\n\n- **`--KeyStore.KdfparamsP <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSP`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `1`.\n\n- **`--KeyStore.KdfparamsR <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSR`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `8`.\n\n- **`--KeyStore.KdfparamsSaltLen <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSSALTLEN`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `32`.\n\n- **`--KeyStore.KeyStoreDirectory <value>`** `NETHERMIND_KEYSTORECONFIG_KEYSTOREDIRECTORY`\n\n  The path to the keystore directory. Defaults to `keystore`.\n\n- **`--KeyStore.KeyStoreEncoding <value>`** `NETHERMIND_KEYSTORECONFIG_KEYSTOREENCODING`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `UTF-8`.\n\n- **`--KeyStore.PasswordFiles <value>`** `NETHERMIND_KEYSTORECONFIG_PASSWORDFILES`\n\n  An array of password files paths used to unlock the accounts set with `UnlockAccounts`. Defaults to `[]`.\n\n- **`--KeyStore.Passwords <value>`** `NETHERMIND_KEYSTORECONFIG_PASSWORDS`\n\n  An array of passwords used to unlock the accounts set with `UnlockAccounts`. Defaults to `[]`.\n\n- **`--KeyStore.SymmetricEncrypterBlockSize <value>`** `NETHERMIND_KEYSTORECONFIG_SYMMETRICENCRYPTERBLOCKSIZE`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `128`.", "mimetype": "text/plain", "start_char_idx": 23431, "end_char_idx": 25129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "297cfa46-1274-458d-96cb-7a01466f5384": {"__data__": {"id_": "297cfa46-1274-458d-96cb-7a01466f5384", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c165fe77-32fe-4348-997b-f8d26c5fb85e", "node_type": "1", "metadata": {}, "hash": "e13ea37e0cd94b7a1ff3deb09f1e1c4f8360e3c95d76ad72db9a145efb63115b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a59c565c-75d4-4565-9a6c-eca94f4a1ef4", "node_type": "1", "metadata": {}, "hash": "88d27ba86a373a4fbc7b3cbee2f59fb2010dd5a592fb018922b7958fc2f86bd7", "class_name": "RelatedNodeInfo"}}, "text": "- **`--KeyStore.SymmetricEncrypterKeySize <value>`** `NETHERMIND_KEYSTORECONFIG_SYMMETRICENCRYPTERKEYSIZE`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `128`.\n\n- **`--KeyStore.TestNodeKey <value>`** `NETHERMIND_KEYSTORECONFIG_TESTNODEKEY`\n\n  A plaintext private key to use for testing purposes.\n\n- **`--KeyStore.UnlockAccounts <value>`** `NETHERMIND_KEYSTORECONFIG_UNLOCKACCOUNTS`\n\n  An array of accounts to unlock on startup using passwords either in `PasswordFiles` and `Passwords`. Defaults to `[]`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Merge\n\n</summary>\n<p>\n\n- **`--Merge.BuilderRelayUrl <value>`** `NETHERMIND_MERGECONFIG_BUILDERRELAYURL`\n\n  The URL of a builder relay. If specified, blocks are sent to the relay. Defaults to `null`.\n\n- **`--Merge.CollectionsPerDecommit <value>`** `NETHERMIND_MERGECONFIG_COLLECTIONSPERDECOMMIT`\n\n  Request the garbage collector (GC) to release the process memory.\n  \n  Allowed values:\n  \n  - `-1` to disable\n  - `0` to release every time\n  - A positive number to release memory after that many Engine API calls\n  \n  Defaults to `25`.\n\n- **`--Merge.CompactMemory <value>`** `NETHERMIND_MERGECONFIG_COMPACTMEMORY`\n\n  The memory compaction mode. When set to `Full`, compacts the large object heap (LOH) if `SweepMemory` is set to `Gen2`.\n\n  Allowed values:\n\n    - `No`\n    - `Yes`\n    - `Full`\n\n  Defaults to `Yes`.\n\n- **`--Merge.Enabled <value>`** `NETHERMIND_MERGECONFIG_ENABLED`\n\n  Whether to enable the Merge hard fork. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Merge.FinalTotalDifficulty <value>`** `NETHERMIND_MERGECONFIG_FINALTOTALDIFFICULTY`\n\n  The total difficulty of the last PoW block. Must be greater than or equal to the terminal total difficulty (TTD). Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 25131, "end_char_idx": 26939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a59c565c-75d4-4565-9a6c-eca94f4a1ef4": {"__data__": {"id_": "a59c565c-75d4-4565-9a6c-eca94f4a1ef4", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "297cfa46-1274-458d-96cb-7a01466f5384", "node_type": "1", "metadata": {}, "hash": "b1d673a7d7037590b5511f0cd42bb67d025697476780d62228819f5b87645db8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e75f661b-291f-4207-8f1c-62012753daa6", "node_type": "1", "metadata": {}, "hash": "c993ff5445202e662cb60e427c138ee6df0a9cce938b73be4890021511fb9667", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Merge.PrioritizeBlockLatency <value>`** `NETHERMIND_MERGECONFIG_PRIORITIZEBLOCKLATENCY`\n\n  Whether to reduce block latency by disabling garbage collection during Engine API calls. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Merge.SweepMemory <value>`** `NETHERMIND_MERGECONFIG_SWEEPMEMORY`\n\n  The garbage collection (GC) mode between Engine API calls.\n\n  Allowed values:\n\n    - `NoGC`\n    - `Gen0`\n    - `Gen1`\n    - `Gen2`\n\n  Defaults to `Gen1`.\n\n- **`--Merge.TerminalBlockHash <value>`** `NETHERMIND_MERGECONFIG_TERMINALBLOCKHASH`\n\n  The terminal PoW block hash used for the transition. Defaults to `null`.\n\n- **`--Merge.TerminalBlockNumber <value>`** `NETHERMIND_MERGECONFIG_TERMINALBLOCKNUMBER`\n\n  The terminal PoW block number used for the transition.\n\n- **`--Merge.TerminalTotalDifficulty <value>`** `NETHERMIND_MERGECONFIG_TERMINALTOTALDIFFICULTY`\n\n  The terminal total difficulty (TTD) used for the transition. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Metrics\n\n</summary>\n<p>\n\n- **`--Metrics.CountersEnabled <value>`** `NETHERMIND_METRICSCONFIG_COUNTERSENABLED`\n\n  Whether to publish metrics using .NET diagnostics that can be collected with dotnet-counters. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Metrics.Enabled <value>`** `NETHERMIND_METRICSCONFIG_ENABLED`\n\n  Whether to publish various metrics to Prometheus Pushgateway at a given interval. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Metrics.EnableDbSizeMetrics <value>`** `NETHERMIND_METRICSCONFIG_ENABLEDBSIZEMETRICS`\n\n  Whether to publish database size metrics. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Metrics.ExposeHost <value>`** `NETHERMIND_METRICSCONFIG_EXPOSEHOST`\n\n  The IP address to expose Prometheus metrics at.", "mimetype": "text/plain", "start_char_idx": 26941, "end_char_idx": 28763, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e75f661b-291f-4207-8f1c-62012753daa6": {"__data__": {"id_": "e75f661b-291f-4207-8f1c-62012753daa6", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a59c565c-75d4-4565-9a6c-eca94f4a1ef4", "node_type": "1", "metadata": {}, "hash": "88d27ba86a373a4fbc7b3cbee2f59fb2010dd5a592fb018922b7958fc2f86bd7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d4fef69-7c98-4b59-9c37-5489e7a07ec1", "node_type": "1", "metadata": {}, "hash": "057376a24f6d55844bbfff12b03bdee03fbf0f639ef607d37a798aaa3fcb8776", "class_name": "RelatedNodeInfo"}}, "text": "The value of `+` means listening on all available hostnames. Setting this to `localhost` prevents remote access. Defaults to `+`.\n\n- **`--Metrics.ExposePort <value>`** `NETHERMIND_METRICSCONFIG_EXPOSEPORT`\n\n  The port to expose Prometheus metrics at. Defaults to `null`.\n\n- **`--Metrics.IntervalSeconds <value>`** `NETHERMIND_METRICSCONFIG_INTERVALSECONDS`\n\n  The frequency of pushing metrics to Prometheus, in seconds. Defaults to `5`.\n\n- **`--Metrics.NodeName <value>`** `NETHERMIND_METRICSCONFIG_NODENAME`\n\n  The name to display on the Grafana dashboard. Defaults to `\"Nethermind\"`.\n\n- **`--Metrics.PushGatewayUrl <value>`** `NETHERMIND_METRICSCONFIG_PUSHGATEWAYURL`\n\n  The Prometheus Pushgateway instance URL.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Mining\n\n</summary>\n<p>\n\n- **`--Mining.Enabled <value>`** `NETHERMIND_MININGCONFIG_ENABLED`\n\n  Whether to produce blocks. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Mining.Signer <value>`** `NETHERMIND_MININGCONFIG_SIGNER`\n\n  Url for an external signer like clef: https://github.com/ethereum/go-ethereum/blob/master/cmd/clef/tutorial.md Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Network\n\n</summary>\n<p>\n\n- **`--Network.Bootnodes <value>`** `NETHERMIND_NETWORKCONFIG_BOOTNODES`\n\n  A comma-separated enode list to be used as boot nodes.\n\n- **`--Network.DiagTracerEnabled <value>`** `NETHERMIND_NETWORKCONFIG_DIAGTRACERENABLED`\n\n  Whether to enable a verbose diagnostic tracing. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Network.DiscoveryDns <value>`** `NETHERMIND_NETWORKCONFIG_DISCOVERYDNS`\n\n  Use tree is available through a DNS name. For the default of `<chain name>.ethdisco.net`, leave unspecified. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 28764, "end_char_idx": 30563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d4fef69-7c98-4b59-9c37-5489e7a07ec1": {"__data__": {"id_": "4d4fef69-7c98-4b59-9c37-5489e7a07ec1", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e75f661b-291f-4207-8f1c-62012753daa6", "node_type": "1", "metadata": {}, "hash": "c993ff5445202e662cb60e427c138ee6df0a9cce938b73be4890021511fb9667", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3c79ed0-4b32-4b92-81f6-92d636b9fd63", "node_type": "1", "metadata": {}, "hash": "182d2103e5a67659ff053d6efa334b2bd5aa1af49b9bb6864ba2fa8586fb59ea", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Network.DiscoveryPort <value>`** `NETHERMIND_NETWORKCONFIG_DISCOVERYPORT`\n\n  The UDP port number for incoming discovery connections. It's recommended to keep it the same as the TCP port (`P2PPort`) because other values have not been tested yet. Defaults to `30303`.\n\n- **`--Network.EnableUPnP <value>`** `NETHERMIND_NETWORKCONFIG_ENABLEUPNP`\n\n  Whether to enable automatic port forwarding via UPnP. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Network.ExternalIp <value>`** `NETHERMIND_NETWORKCONFIG_EXTERNALIP`\n\n  The external IP. Use only when the external IP cannot be resolved automatically. Defaults to `null`.\n\n- **`--Network.LocalIp <value>`** `NETHERMIND_NETWORKCONFIG_LOCALIP`\n\n  The local IP. Use only when the local IP cannot be resolved automatically. Defaults to `null`.\n\n- **`--Network.MaxActivePeers <value>`** `NETHERMIND_NETWORKCONFIG_MAXACTIVEPEERS`\n\n  The max allowed number of connected peers. Defaults to `50`.\n\n- **`--Network.MaxNettyArenaCount <value>`** `NETHERMIND_NETWORKCONFIG_MAXNETTYARENACOUNT`\n\n  The maximum DotNetty arena count. Increasing this on a high-core CPU without increasing the memory budget may reduce chunk size so much that it causes a huge memory allocation. Defaults to `8`.\n\n- **`--Network.NettyArenaOrder <value>`** `NETHERMIND_NETWORKCONFIG_NETTYARENAORDER`\n\n  The size of the DotNetty arena order. `-1` to depend on the memory hint. Defaults to `-1`.\n\n- **`--Network.OnlyStaticPeers <value>`** `NETHERMIND_NETWORKCONFIG_ONLYSTATICPEERS`\n\n  Whether to use static peers only. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Network.P2PPort <value>`** `NETHERMIND_NETWORKCONFIG_P2PPORT`\n\n  The TCP port for incoming P2P connections. Defaults to `30303`.", "mimetype": "text/plain", "start_char_idx": 30565, "end_char_idx": 32301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3c79ed0-4b32-4b92-81f6-92d636b9fd63": {"__data__": {"id_": "d3c79ed0-4b32-4b92-81f6-92d636b9fd63", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d4fef69-7c98-4b59-9c37-5489e7a07ec1", "node_type": "1", "metadata": {}, "hash": "057376a24f6d55844bbfff12b03bdee03fbf0f639ef607d37a798aaa3fcb8776", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "952764b7-9c16-4abc-a3b6-f58c28f29b53", "node_type": "1", "metadata": {}, "hash": "b273a7555498a2bc0956922f599c8672838764739db43b3e719ffec8d0d8037f", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Network.PriorityPeersMaxCount <value>`** `NETHERMIND_NETWORKCONFIG_PRIORITYPEERSMAXCOUNT`\n\n  The max number of priority peers. Can be overridden by a plugin. Defaults to `0`.\n\n- **`--Network.StaticPeers <value>`** `NETHERMIND_NETWORKCONFIG_STATICPEERS`\n\n  A list of peers to keep connection for. Static peers are affected by `MaxActivePeers`. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Optimism\n\n</summary>\n<p>\n\n- **`--Optimism.SequencerUrl <value>`** `NETHERMIND_OPTIMISMCONFIG_SEQUENCERURL`\n\n  Sequencer address Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Pruning\n\n</summary>\n<p>\n\n- **`--Pruning.AvailableSpaceCheckEnabled <value>`** `NETHERMIND_PRUNINGCONFIG_AVAILABLESPACECHECKENABLED`\n\n  Whether to enables available disk space check. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Pruning.CacheMb <value>`** `NETHERMIND_PRUNINGCONFIG_CACHEMB`\n\n  The in-memory cache size, in MB. The bigger the cache size, the bigger the disk space savings. Defaults to `1024`.\n\n- **`--Pruning.FullPruningCompletionBehavior <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGCOMPLETIONBEHAVIOR`\n\n  The behavior after pruning completion:\n  \n  - `None`: Do nothing.\n  - `ShutdownOnSuccess`: Shut Nethermind down if pruning has succeeded but leave it running if failed.\n  - `AlwaysShutdown`: Shut Nethermind down when pruning completes, regardless of its status.\n\n  Allowed values:\n\n    - `None`\n    - `ShutdownOnSuccess`\n    - `AlwaysShutdown`\n\n  Defaults to `None`.\n\n- **`--Pruning.FullPruningDisableLowPriorityWrites <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGDISABLELOWPRIORITYWRITES`\n\n  Whether to disable low-priority for pruning writes. Full pruning uses low-priority write operations to prevent blocking block processing.", "mimetype": "text/plain", "start_char_idx": 32303, "end_char_idx": 34143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "952764b7-9c16-4abc-a3b6-f58c28f29b53": {"__data__": {"id_": "952764b7-9c16-4abc-a3b6-f58c28f29b53", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3c79ed0-4b32-4b92-81f6-92d636b9fd63", "node_type": "1", "metadata": {}, "hash": "182d2103e5a67659ff053d6efa334b2bd5aa1af49b9bb6864ba2fa8586fb59ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66276237-524a-4634-a48c-50f09ee31041", "node_type": "1", "metadata": {}, "hash": "a07950da9e3435eec2df64a3108b58f87dd3fc31b8433fa85ef3f1650fa68464", "class_name": "RelatedNodeInfo"}}, "text": "If block processing is not high-priority, set this option to `true` for faster pruning. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Pruning.FullPruningMaxDegreeOfParallelism <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGMAXDEGREEOFPARALLELISM`\n\n  The max number of parallel tasks that can be used by full pruning:\n  \n  Allowed values:\n  \n  - `-1` to use the number of logical processors\n  - `0` to use 25% of logical processors\n  - `1` to run on single thread\n  \n  The recommended value depends on the type of the node:\n  \n  - If the node needs to be responsive (serves for RPC or validator), then the recommended value is `0` or `-1`.\n  - If the node doesn't have many other responsibilities but needs to be able to follow the chain reliably without any delays and produce live logs, the `0` or `1` is recommended.\n  - If the node doesn't have to be responsive, has very fast I/O (like NVMe) and the shortest pruning time is to be achieved, then `-1` is recommended. Defaults to `0`.\n\n- **`--Pruning.FullPruningMemoryBudgetMb <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGMEMORYBUDGETMB`\n\n  The memory budget, in MB, used for the trie visit. Increasing this value significantly reduces the IOPS requirement at the expense of memory usage. `0` to disable. Defaults to `4000`.\n\n- **`--Pruning.FullPruningMinimumDelayHours <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGMINIMUMDELAYHOURS`\n\n  The minimum delay, in hours, between full pruning operations not to exhaust disk writes. Defaults to `240`.\n\n- **`--Pruning.FullPruningThresholdMb <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGTHRESHOLDMB`\n\n  The threshold, in MB, to trigger full pruning. Depends on `Mode` and `FullPruningTrigger`. Defaults to `256000`.", "mimetype": "text/plain", "start_char_idx": 34144, "end_char_idx": 35879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66276237-524a-4634-a48c-50f09ee31041": {"__data__": {"id_": "66276237-524a-4634-a48c-50f09ee31041", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "952764b7-9c16-4abc-a3b6-f58c28f29b53", "node_type": "1", "metadata": {}, "hash": "b273a7555498a2bc0956922f599c8672838764739db43b3e719ffec8d0d8037f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f5c2071-f004-4e29-b9c2-cca92c8850a6", "node_type": "1", "metadata": {}, "hash": "21b359bdaa6b38374ff206eb05fcf4e4477f2f0a323b3906f84135b0991ba22a", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Pruning.FullPruningTrigger <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGTRIGGER`\n\n  The full pruning trigger:\n  \n  - `Manual`: Triggered manually.\n  - `StateDbSize`: Trigger when the state DB size is above the threshold.\n  - `VolumeFreeSpace`: Trigger when the free disk space where the state DB is stored is below the threshold.\n\n  Allowed values:\n\n    - `Manual`\n    - `StateDbSize`\n    - `VolumeFreeSpace`\n\n  Defaults to `Manual`.\n\n- **`--Pruning.Mode <value>`** `NETHERMIND_PRUNINGCONFIG_MODE`\n\n  The pruning mode:\n  \n  - `None`: No pruning (full archive)\n  - `Memory`: In-memory pruning\n  - `Full`: Full pruning\n  - `Hybrid`: Combined in-memory and full pruning\n\n  Allowed values:\n\n    - `None`\n    - `Memory`\n    - `Full`\n    - `Hybrid`\n\n  Defaults to `Hybrid`.\n\n- **`--Pruning.PersistenceInterval <value>`** `NETHERMIND_PRUNINGCONFIG_PERSISTENCEINTERVAL`\n\n  The block persistence frequency. If set to `N`, it caches after each `Nth` block even if not required by cache memory usage. Defaults to `8192`.\n\n- **`--Pruning.PruningBoundary <value>`** `NETHERMIND_PRUNINGCONFIG_PRUNINGBOUNDARY`\n\n  Past N state before state gets pruned Used to determine how old of a state to keep from the head. Defaults to `64`.\n\n- **`--Pruning.TrackedPastKeyCountMemoryRatio <value>`** `NETHERMIND_PRUNINGCONFIG_TRACKEDPASTKEYCOUNTMEMORYRATIO`\n\n  [TECHNICAL] Ratio of memory out of CacheMb to allocate for LRU used to track past keys for live pruning. Defaults to `0.1`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Receipt\n\n</summary>\n<p>\n\n- **`--Receipt.CompactReceiptStore <value>`** `NETHERMIND_RECEIPTCONFIG_COMPACTRECEIPTSTORE`\n\n  Whether to compact receipts database size at the expense of RPC performance. Allowed values: `true` `false`. Defaults to `true`.", "mimetype": "text/plain", "start_char_idx": 35881, "end_char_idx": 37673, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f5c2071-f004-4e29-b9c2-cca92c8850a6": {"__data__": {"id_": "8f5c2071-f004-4e29-b9c2-cca92c8850a6", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66276237-524a-4634-a48c-50f09ee31041", "node_type": "1", "metadata": {}, "hash": "a07950da9e3435eec2df64a3108b58f87dd3fc31b8433fa85ef3f1650fa68464", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5d038ab1-0fba-428d-a66d-49ed4b2fac1a", "node_type": "1", "metadata": {}, "hash": "03979f5c19b9cd0f32fb64e687c74ea9f314ac6d448c6d3bfee4114e5d5381e0", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Receipt.CompactTxIndex <value>`** `NETHERMIND_RECEIPTCONFIG_COMPACTTXINDEX`\n\n  Whether to compact receipts transaction index database size at the expense of RPC performance. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Receipt.ReceiptsMigration <value>`** `NETHERMIND_RECEIPTCONFIG_RECEIPTSMIGRATION`\n\n  Whether to migrate the receipts database to the new schema. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Receipt.StoreReceipts <value>`** `NETHERMIND_RECEIPTCONFIG_STORERECEIPTS`\n\n  Whether to store receipts after a new block is processed. This setting is independent from downloading receipts in fast sync mode. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Receipt.TxLookupLimit <value>`** `NETHERMIND_RECEIPTCONFIG_TXLOOKUPLIMIT`\n\n  The number of recent blocks to maintain transaction index for. `0` to never remove indices, `-1` to never index. Defaults to `2350000`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Seq\n\n</summary>\n<p>\n\n- **`--Seq.ApiKey <value>`** `NETHERMIND_SEQCONFIG_APIKEY`\n\n  The Seq API key.\n\n- **`--Seq.MinLevel <value>`** `NETHERMIND_SEQCONFIG_MINLEVEL`\n\n  The min log level to sent to Seq. Defaults to `Off`.\n\n- **`--Seq.ServerUrl <value>`** `NETHERMIND_SEQCONFIG_SERVERURL`\n\n  The Seq instance URL. Defaults to `http://localhost:5341`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Snapshot\n\n</summary>\n<p>\n\n- **`--Snapshot.Checksum <value>`** `NETHERMIND_SNAPSHOTCONFIG_CHECKSUM`\n\n  The SHA-256 checksum of the snapshot file. Defaults to `null`.\n\n- **`--Snapshot.DownloadUrl <value>`** `NETHERMIND_SNAPSHOTCONFIG_DOWNLOADURL`\n\n  The URL of the snapshot file. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 37675, "end_char_idx": 39398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d038ab1-0fba-428d-a66d-49ed4b2fac1a": {"__data__": {"id_": "5d038ab1-0fba-428d-a66d-49ed4b2fac1a", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f5c2071-f004-4e29-b9c2-cca92c8850a6", "node_type": "1", "metadata": {}, "hash": "21b359bdaa6b38374ff206eb05fcf4e4477f2f0a323b3906f84135b0991ba22a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51c2448d-d286-4820-8039-250879f9479d", "node_type": "1", "metadata": {}, "hash": "cb022925b9b2c11da4566b32ae3fb85b77bc00503044a82ada128454bfca68bc", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Snapshot.Enabled <value>`** `NETHERMIND_SNAPSHOTCONFIG_ENABLED`\n\n  Whether to enable the Snapshot plugin. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Snapshot.SnapshotDirectory <value>`** `NETHERMIND_SNAPSHOTCONFIG_SNAPSHOTDIRECTORY`\n\n  The path to the directory to store the snapshot file. Defaults to `snapshot`.\n\n- **`--Snapshot.SnapshotFileName <value>`** `NETHERMIND_SNAPSHOTCONFIG_SNAPSHOTFILENAME`\n\n  The name of the snapshot file. Defaults to `snapshot.zip`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Sync\n\n</summary>\n<p>\n\n- **`--Sync.AncientBodiesBarrier <value>`** `NETHERMIND_SYNCCONFIG_ANCIENTBODIESBARRIER`\n\n  The earliest body downloaded with fast sync when `DownloadBodiesInFastSync` is set to `true`. The actual value is determined as follows:\n  \n  ```\n  max{ 1, min{ PivotNumber, AncientBodiesBarrier } }\n  ```\n  Defaults to `0`.\n\n- **`--Sync.AncientReceiptsBarrier <value>`** `NETHERMIND_SYNCCONFIG_ANCIENTRECEIPTSBARRIER`\n\n  The earliest receipt downloaded with fast sync when `DownloadReceiptsInFastSync` is set to `true`. The actual value is determined as follows:\n  \n  ```\n  max{ 1, min{ PivotNumber, max{ AncientBodiesBarrier, AncientReceiptsBarrier } } }\n  ```\n  Defaults to `0`.\n\n- **`--Sync.BlocksDbTuneDbMode <value>`** `NETHERMIND_SYNCCONFIG_BLOCKSDBTUNEDBMODE`\n\n  Configure the blocks database for write optimizations during sync.\n\n  Allowed values:\n\n    - `Default`\n    - `WriteBias`\n    - `HeavyWrite`\n    - `AggressiveHeavyWrite`\n    - `DisableCompaction`\n    - `EnableBlobFiles`\n    - `HashDb`\n\n  Defaults to `EnableBlobFiles`.\n\n- **`--Sync.DownloadBodiesInFastSync <value>`** `NETHERMIND_SYNCCONFIG_DOWNLOADBODIESINFASTSYNC`\n\n  Whether to download the block bodies in the Fast sync mode.", "mimetype": "text/plain", "start_char_idx": 39400, "end_char_idx": 41178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51c2448d-d286-4820-8039-250879f9479d": {"__data__": {"id_": "51c2448d-d286-4820-8039-250879f9479d", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5d038ab1-0fba-428d-a66d-49ed4b2fac1a", "node_type": "1", "metadata": {}, "hash": "03979f5c19b9cd0f32fb64e687c74ea9f314ac6d448c6d3bfee4114e5d5381e0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1bf3a3e7-922b-429f-b0dd-3a230abdd1be", "node_type": "1", "metadata": {}, "hash": "88c5729e0aa931841149b0338c71fccc1422d57d73e79720b788d88c90c26542", "class_name": "RelatedNodeInfo"}}, "text": "Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.DownloadHeadersInFastSync <value>`** `NETHERMIND_SYNCCONFIG_DOWNLOADHEADERSINFASTSYNC`\n\n  Whether to download the old block headers in the Fast sync mode. If `false`, Nethermind downloads only recent blocks headers. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.DownloadReceiptsInFastSync <value>`** `NETHERMIND_SYNCCONFIG_DOWNLOADRECEIPTSINFASTSYNC`\n\n  Whether to download receipts in the Fast sync mode. This slows down the process by a few hours but allows to interact with dApps that perform extensive historical logs searches. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.ExitOnSynced <value>`** `NETHERMIND_SYNCCONFIG_EXITONSYNCED`\n\n  Whether to shut down Nethermind once sync is finished. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.ExitOnSyncedWaitTimeSec <value>`** `NETHERMIND_SYNCCONFIG_EXITONSYNCEDWAITTIMESEC`\n\n  The time, in seconds, to wait before shutting down Nethermind once sync is finished. Defaults to `60`.\n\n- **`--Sync.FastSync <value>`** `NETHERMIND_SYNCCONFIG_FASTSYNC`\n\n  Whether to use the Fast sync mode (the eth/63 synchronization algorithm). Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.FastSyncCatchUpHeightDelta <value>`** `NETHERMIND_SYNCCONFIG_FASTSYNCCATCHUPHEIGHTDELTA`\n\n  In Fast sync mode, the min height threshold limit up to which the Full sync, if already on, stays on when the chain is behind the network head. If the limit is exceeded, it switches back to Fast sync. For regular usage scenarios, setting this value lower than 32 is not recommended as this can cause issues with chain reorgs. Note that the last 2 blocks are always processed in Full sync, so setting it lower than 2 has no effect. Defaults to `8192`.", "mimetype": "text/plain", "start_char_idx": 41179, "end_char_idx": 42985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bf3a3e7-922b-429f-b0dd-3a230abdd1be": {"__data__": {"id_": "1bf3a3e7-922b-429f-b0dd-3a230abdd1be", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51c2448d-d286-4820-8039-250879f9479d", "node_type": "1", "metadata": {}, "hash": "cb022925b9b2c11da4566b32ae3fb85b77bc00503044a82ada128454bfca68bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3bfd614-7aeb-44fa-9342-c11e23a625f7", "node_type": "1", "metadata": {}, "hash": "1a0a09cc55754464c924ef87616349f74a50d30ff759354fc0743592583ce625", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Sync.FixReceipts <value>`** `NETHERMIND_SYNCCONFIG_FIXRECEIPTS`\n\n  Whether to enable receipts validation that checks for receipts that might be missing because of a bug. If needed, receipts are downloaded from the network. If `true`, the pivot number must be same one used originally as it's used as a cut-off point. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.FixTotalDifficulty <value>`** `NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTY`\n\n  Whether to recalculate the total difficulty from `FixTotalDifficultyStartingBlock` to `FixTotalDifficultyLastBlock`. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.FixTotalDifficultyLastBlock <value>`** `NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTYLASTBLOCK`\n\n  The last block to recalculate the total difficulty for. If not specified, the best known block is used.\n  Defaults to `null`.\n\n- **`--Sync.FixTotalDifficultyStartingBlock <value>`** `NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTYSTARTINGBLOCK`\n\n  The first block to recalculate the total difficulty for. Defaults to `1`.\n\n- **`--Sync.MaxAttemptsToUpdatePivot <value>`** `NETHERMIND_SYNCCONFIG_MAXATTEMPTSTOUPDATEPIVOT`\n\n  The max number of attempts to update the pivot block based on the FCU message from the consensus client. Defaults to `2147483647`.\n\n- **`--Sync.MaxProcessingThreads <value>`** `NETHERMIND_SYNCCONFIG_MAXPROCESSINGTHREADS`\n\n  The max number of threads used for syncing. `0` to use the number of logical processors. Defaults to `0`.\n\n- **`--Sync.NetworkingEnabled <value>`** `NETHERMIND_SYNCCONFIG_NETWORKINGENABLED`\n\n  Whether to connect to peers and sync. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.NonValidatorNode <value>`** `NETHERMIND_SYNCCONFIG_NONVALIDATORNODE`\n\n  Whether to operate as a non-validator.", "mimetype": "text/plain", "start_char_idx": 42987, "end_char_idx": 44776, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3bfd614-7aeb-44fa-9342-c11e23a625f7": {"__data__": {"id_": "b3bfd614-7aeb-44fa-9342-c11e23a625f7", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1bf3a3e7-922b-429f-b0dd-3a230abdd1be", "node_type": "1", "metadata": {}, "hash": "88c5729e0aa931841149b0338c71fccc1422d57d73e79720b788d88c90c26542", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d24909d0-4704-4eda-b5d3-e08c858bb0ba", "node_type": "1", "metadata": {}, "hash": "e3b73f8e4b2b48973030857a3b53cbd7abc47ca18e88e480d5150d981419bf9e", "class_name": "RelatedNodeInfo"}}, "text": "If `true`, the `DownloadReceiptsInFastSync` and `DownloadBodiesInFastSync` can be set to `false`. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.PivotHash <value>`** `NETHERMIND_SYNCCONFIG_PIVOTHASH`\n\n  The hash of the pivot block for the Fast sync mode. Defaults to `null`.\n\n- **`--Sync.PivotNumber <value>`** `NETHERMIND_SYNCCONFIG_PIVOTNUMBER`\n\n  The number of the pivot block for the Fast sync mode. Defaults to `0`.\n\n- **`--Sync.PivotTotalDifficulty <value>`** `NETHERMIND_SYNCCONFIG_PIVOTTOTALDIFFICULTY`\n\n  The total difficulty of the pivot block for the Fast sync mode. Defaults to `null`.\n\n- **`--Sync.SnapSync <value>`** `NETHERMIND_SYNCCONFIG_SNAPSYNC`\n\n  Whether to use the Snap sync mode. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.SnapSyncAccountRangePartitionCount <value>`** `NETHERMIND_SYNCCONFIG_SNAPSYNCACCOUNTRANGEPARTITIONCOUNT`\n\n  The number of account range partitions to create. Increases the Snap sync request concurrency. Allowed values are between between 1 and 256. Defaults to `8`.\n\n- **`--Sync.StrictMode <value>`** `NETHERMIND_SYNCCONFIG_STRICTMODE`\n\n  Whether to disable some optimizations and do a more extensive sync. Useful when sync state is corrupted. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.SynchronizationEnabled <value>`** `NETHERMIND_SYNCCONFIG_SYNCHRONIZATIONENABLED`\n\n  Whether to download and process new blocks. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.TuneDbMode <value>`** `NETHERMIND_SYNCCONFIG_TUNEDBMODE`\n\n  Configure the database for write optimizations during sync. Significantly reduces the total number of writes and sync time if you are not network limited.", "mimetype": "text/plain", "start_char_idx": 44777, "end_char_idx": 46481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d24909d0-4704-4eda-b5d3-e08c858bb0ba": {"__data__": {"id_": "d24909d0-4704-4eda-b5d3-e08c858bb0ba", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3bfd614-7aeb-44fa-9342-c11e23a625f7", "node_type": "1", "metadata": {}, "hash": "1a0a09cc55754464c924ef87616349f74a50d30ff759354fc0743592583ce625", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "529eaaef-e418-4554-ae79-52a90ed75fb4", "node_type": "1", "metadata": {}, "hash": "181ff410c3a418c3fe7c1fb372bc8b8af2bde2e208d9aefad322e293043424e1", "class_name": "RelatedNodeInfo"}}, "text": "Allowed values:\n\n    - `Default`\n    - `WriteBias`\n    - `HeavyWrite`\n    - `AggressiveHeavyWrite`\n    - `DisableCompaction`\n    - `EnableBlobFiles`\n    - `HashDb`\n\n  Defaults to `HeavyWrite`.\n\n- **`--Sync.UseGethLimitsInFastBlocks <value>`** `NETHERMIND_SYNCCONFIG_USEGETHLIMITSINFASTBLOCKS`\n\n  Whether to make smaller requests, in Fast Blocks mode, to avoid Geth from disconnecting. On the Geth-heavy networks (e.g., Mainnet), it's  a desired behavior while on Nethermind- or OpenEthereum-heavy networks (Aura), it slows down the sync by a factor of ~4. Allowed values: `true` `false`. Defaults to `true`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### TraceStore\n\n</summary>\n<p>\n\n- **`--TraceStore.BlocksToKeep <value>`** `NETHERMIND_TRACESTORECONFIG_BLOCKSTOKEEP`\n\n  The number of blocks to store, counting from the head. If `0`, all traces of the processed blocks are stored. Defaults to `10000`.\n\n- **`--TraceStore.DeserializationParallelization <value>`** `NETHERMIND_TRACESTORECONFIG_DESERIALIZATIONPARALLELIZATION`\n\n  The max parallelization when deserialization requests the `trace_filter` method. `0` to use the number of logical processors. If you experience a resource shortage, set to a low number. Defaults to `0`.\n\n- **`--TraceStore.Enabled <value>`** `NETHERMIND_TRACESTORECONFIG_ENABLED`\n\n  Whether to enable the TraceStore plugin. If enabled, traces come from the database whenever possible. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--TraceStore.TraceTypes <value>`** `NETHERMIND_TRACESTORECONFIG_TRACETYPES`\n\n  The type of traces to store.\n\n  Allowed values:\n\n    - `None`\n    - `VmTrace`\n    - `StateDiff`\n    - `Trace`\n    - `Rewards`\n    - `All`\n\n  Defaults to `Trace, Rewards`.", "mimetype": "text/plain", "start_char_idx": 46485, "end_char_idx": 48232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "529eaaef-e418-4554-ae79-52a90ed75fb4": {"__data__": {"id_": "529eaaef-e418-4554-ae79-52a90ed75fb4", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d24909d0-4704-4eda-b5d3-e08c858bb0ba", "node_type": "1", "metadata": {}, "hash": "e3b73f8e4b2b48973030857a3b53cbd7abc47ca18e88e480d5150d981419bf9e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1be3f47-7608-4ff0-b2a5-77b315662d81", "node_type": "1", "metadata": {}, "hash": "755dd727a2532e6a759306036911fd1fa025bc9c26b1d2d295bca58f42d71da5", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### TxPool\n\n</summary>\n<p>\n\n- **`--TxPool.BlobCacheSize <value>`** `NETHERMIND_TXPOOLCONFIG_BLOBCACHESIZE`\n\n  The max number of full blob transactions cached in memory. The default value uses max 200MB for 6 blobs where one blob is 33MB (256 * 128KB) Defaults to `256`.\n\n- **`--TxPool.BlobsSupport <value>`** `NETHERMIND_TXPOOLCONFIG_BLOBSSUPPORT`\n\n  Blobs support mode:\n  \n  - `Disabled`: No support for blob transactions\n  - `InMemory`: Blob transactions stored only in memory\n  - `Storage`: Blob transactions stored in db\n  - `StorageWithReorgs`: Blob transactions stored in db with support for restoring reorganized blob transactions to blob pool\n\n  Allowed values:\n\n    - `Disabled`\n    - `InMemory`\n    - `Storage`\n    - `StorageWithReorgs`\n\n  Defaults to `StorageWithReorgs`.\n\n- **`--TxPool.GasLimit <value>`** `NETHERMIND_TXPOOLCONFIG_GASLIMIT`\n\n  The max transaction gas allowed. Defaults to `null`.\n\n- **`--TxPool.HashCacheSize <value>`** `NETHERMIND_TXPOOLCONFIG_HASHCACHESIZE`\n\n  The max number of cached hashes of already known transactions. Set automatically by the memory hint. Defaults to `524288`.\n\n- **`--TxPool.InMemoryBlobPoolSize <value>`** `NETHERMIND_TXPOOLCONFIG_INMEMORYBLOBPOOLSIZE`\n\n  The max number of full blob transactions stored in memory. Used only if persistent storage is disabled. Defaults to `512`.\n\n- **`--TxPool.MaxPendingBlobTxsPerSender <value>`** `NETHERMIND_TXPOOLCONFIG_MAXPENDINGBLOBTXSPERSENDER`\n\n  The max number of pending blob transactions per single sender. `0` to lift the limit. Defaults to `16`.\n\n- **`--TxPool.MaxPendingTxsPerSender <value>`** `NETHERMIND_TXPOOLCONFIG_MAXPENDINGTXSPERSENDER`\n\n  The max number of pending transactions per single sender. `0` to lift the limit.", "mimetype": "text/plain", "start_char_idx": 48234, "end_char_idx": 50033, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1be3f47-7608-4ff0-b2a5-77b315662d81": {"__data__": {"id_": "c1be3f47-7608-4ff0-b2a5-77b315662d81", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "529eaaef-e418-4554-ae79-52a90ed75fb4", "node_type": "1", "metadata": {}, "hash": "181ff410c3a418c3fe7c1fb372bc8b8af2bde2e208d9aefad322e293043424e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2392ce17-a3dd-4425-a227-7b40ee715e81", "node_type": "1", "metadata": {}, "hash": "362261c599be2aa6d2a1856ba350e4d0e13a7a62045a998803798e83dd5cbb07", "class_name": "RelatedNodeInfo"}}, "text": "Defaults to `0`.\n\n- **`--TxPool.MinBaseFeeThreshold <value>`** `NETHERMIND_TXPOOLCONFIG_MINBASEFEETHRESHOLD`\n\n  The minimal percentage of the current base fee that must be surpassed by the max fee (`max_fee_per_gas`) for the transaction to be broadcasted. Defaults to `70`.\n\n- **`--TxPool.PeerNotificationThreshold <value>`** `NETHERMIND_TXPOOLCONFIG_PEERNOTIFICATIONTHRESHOLD`\n\n  The average percentage of transaction hashes from persistent broadcast sent to a peer together with hashes of the last added transactions. Defaults to `5`.\n\n- **`--TxPool.PersistentBlobStorageSize <value>`** `NETHERMIND_TXPOOLCONFIG_PERSISTENTBLOBSTORAGESIZE`\n\n  The max number of full blob transactions stored in the database (increasing the number of transactions in the blob pool also results in higher memory usage). The default value uses max 13GB for 6 blobs where one blob is 2GB (16386 * 128KB). Defaults to `16384`.\n\n- **`--TxPool.ReportMinutes <value>`** `NETHERMIND_TXPOOLCONFIG_REPORTMINUTES`\n\n  The current transaction pool state reporting interval, in minutes. Defaults to `null`.\n\n- **`--TxPool.Size <value>`** `NETHERMIND_TXPOOLCONFIG_SIZE`\n\n  The max number of transactions held in the mempool (the more transactions in the mempool, the more memory used). Defaults to `2048`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Wallet\n\n</summary>\n<p>\n\n- **`--Wallet.DevAccounts <value>`** `NETHERMIND_WALLETCONFIG_DEVACCOUNTS`\n\n  The number of autogenerated developer accounts to work with. Developer accounts have private keys from `00...01` to `00...n`. Defaults to `10`.\n\n</p>\n</details>\n\n<!--[end autogen]-->\n\n## Environment variables\n\nTo configure Nethermind using environment variables, the following naming convention is used in all uppercase:\n\n```text\nNETHERMIND_{NAMESPACE}CONFIG_{PROPERTY_NAME}\n```\nFor instance, the environment variable equivalent of the command line `--JsonRpc.JwtSecretFile` option is `NETHERMIND_JSONRPCCONFIG_JWTSECRETFILE`.", "mimetype": "text/plain", "start_char_idx": 50034, "end_char_idx": 52011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2392ce17-a3dd-4425-a227-7b40ee715e81": {"__data__": {"id_": "2392ce17-a3dd-4425-a227-7b40ee715e81", "embedding": null, "metadata": {"file_path": "./phala_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1be3f47-7608-4ff0-b2a5-77b315662d81", "node_type": "1", "metadata": {}, "hash": "755dd727a2532e6a759306036911fd1fa025bc9c26b1d2d295bca58f42d71da5", "class_name": "RelatedNodeInfo"}}, "text": "For the list of configuration namespaces and their options, see [Options by namespaces](#options-by-namespaces).\n\n## Configuration file\n\nThe configuration file is a JSON file with `.cfg` extension. The bundled configuration files are located in the `configs` directory and named after the network they are used for. For instance, see the Mainnet configuration file [`mainnet.cfg`](https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.Runner/configs/mainnet.cfg).\n\n[web3-secret-storage]: https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage", "mimetype": "text/plain", "start_char_idx": 52012, "end_char_idx": 52616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfd43115-efc9-477e-8351-e721c87def44": {"__data__": {"id_": "bfd43115-efc9-477e-8351-e721c87def44", "embedding": null, "metadata": {"file_path": "./phala_dist/publish-agent-script.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8419550b-d802-4b90-a9f6-ac74f39a1460", "node_type": "4", "metadata": {}, "hash": "c4aa4e6594c876049c517a97a06aecee647aacc01fc424390fd0f8870c815112", "class_name": "RelatedNodeInfo"}}, "text": "# Publish Agent Script\n\n:construction\\_site: Work In Progress\n\n<figure><img src=\"../../.gitbook/assets/Agent-Script.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87f60c2f-bede-4e8b-a932-ac7207212707": {"__data__": {"id_": "87f60c2f-bede-4e8b-a932-ac7207212707", "embedding": null, "metadata": {"file_path": "./phala_dist/migrating-from-geth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65ef409a-7e9a-4327-9842-f0fadeb6895c", "node_type": "4", "metadata": {}, "hash": "0274b5a22d7aaf50ded7359e567010844b87e69c9d86d077c85deb67f857baae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "497fc107-cfda-4d3c-a47f-471ca0bc02e2", "node_type": "1", "metadata": {}, "hash": "c18858bde61825c0026e9487046f07baa8af219d756af16e70bf3535b2c8b02e", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Migrating from Geth\nsidebar_position: 4\n---\n\nThis guide will walk you through all the steps required for a seamless and quick transition.\n\nFirst, ensure _the disk has enough space_. The most secure way is having a Nethermind synced on the same machine as Geth without shutting Geth down. That allows you to check whether Nethermind is syncing properly, verify whether everything works as expected, and reduce node downtime to a bare minimum. This is a recommended approach for any public JSON-RPC provider or a validator.\n\n- If the disk has enough space, [option 1](#option-1) or [option 2](#option-2) are the recommended choices.\n- If there is not enough disk space, and downtime is not an option, we recommend either extending the disk or, if not possible, hosting Nethermind on another machine, syncing it, and whenever it completes, moving everything validator-related to that machine, and abandoning the first one.\n- If downtime of around 12 hours or more is not a problem, see the [option 3](#option-3).\n\n## Option 1: Sync Nethermind next to Geth {#option-1}\n\nFirst, [install Nethermind](./installing-nethermind.md) and a [consensus client](./consensus-clients.md) of your choice. \n\n:::warning\n- If you choose the same consensus client for Nethermind that is already being used with Geth, ensure their settings, such as data directories, do not interfere.\n- Ensure the network ports of the consensus client paired with Nethermind and the one paired with Geth do not interfere with each other.\n- Ensure the JSON-RPC port, Engine API port, and the P2P networking ports of Nethermind are different from the ones used by Geth. These ports are set using the following command line options:\n  - `--JsonRpc.Port <port>`\n  - `--JsonRpc.EnginePort <port>`\n  - `--Network.DiscoveryPort <port>`\n  - `--Network.P2PPort <port>`\n:::\n\nOnce you fulfill the above requirements, you can start syncing Nethermind. To check the sync status, use the [`eth_syncing`](../interacting/json-rpc-ns/eth.md#eth_syncing) JSON-RPC method.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "497fc107-cfda-4d3c-a47f-471ca0bc02e2": {"__data__": {"id_": "497fc107-cfda-4d3c-a47f-471ca0bc02e2", "embedding": null, "metadata": {"file_path": "./phala_dist/migrating-from-geth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65ef409a-7e9a-4327-9842-f0fadeb6895c", "node_type": "4", "metadata": {}, "hash": "0274b5a22d7aaf50ded7359e567010844b87e69c9d86d077c85deb67f857baae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87f60c2f-bede-4e8b-a932-ac7207212707", "node_type": "1", "metadata": {}, "hash": "a5a67e1aa7f0117970b196966cf1559132e06cf418d87eb044adca0da41106f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d2080242-ff9f-4072-aa83-8df23b665f89", "node_type": "1", "metadata": {}, "hash": "43c86f26e7d16249cfa9181427268ac4c9072d137e67944d609762d87a2e2a9c", "class_name": "RelatedNodeInfo"}}, "text": "When it returns `false`, Nethermind is considered fully synced with all block bodies and receipts needed to work properly as a validator. Another option to monitor the sync is a [health check](../monitoring/health-check.md).\n\nOnce Nethermind is synced, shut down both Geth and Nethermind, along with its paired consensus client. Then, restart Nethermind using the ports assigned for and the JWT secret used by Geth before. Ensure no warnings or errors are present in the logs of both Nethermind and the consensus client. Also, check if Nethermind is following the chain properly. If everything is alright, you can remove Geth and the consensus client paired with Nethermind previously along with their data.\n\n## Option 2: Sync Nethermind using Sedge next to Geth {#option-2}\n\n[Sedge](https://docs.sedge.nethermind.io) is a setup tool for PoS validators and nodes that runs on Linux and macOS.\n\nThis option is similar to the [option 1](#option-1), but Sedge automatically takes care of conflicting settings making the entire process much easier.\n\n:::tip\nYou can add a flag to Sedge as follows. For instance:\n\n- For the execution client, `--el-extra-flag JsonRpc.Port=8546`\n- For the consensus client, `--cl-extra-flag rpc-port=4001`\n:::\n\nOnce Nethermind is synced, you can remove extra flags if any from the `docker-compose.yml` and restart the node as follows:\n\n```bash\ndocker compose stop execution\ndocker compose up -d execution\n```\n\n## Option 3: Remove Geth and sync Nethermind {#option-3}\n\nThis is the simplest option as it doesn't require configuration adjustments. However, the node will be down until Nethermind is syncing.\n\n- Shut down and remove Geth along with its data.\n- [Install Nethermind](./installing-nethermind.md)\n- Ensure Nethermind uses the same network ports as Geth before and the same JWT secret. Otherwise, you must reconfigure the consensus client to the Nethermind settings.\n\nOnce you fulfill the above requirements, you can start syncing Nethermind. While Nethermid is syncing, ensure no errors are present in the logs of both Nethermind and the consensus client.", "mimetype": "text/plain", "start_char_idx": 2026, "end_char_idx": 4116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2080242-ff9f-4072-aa83-8df23b665f89": {"__data__": {"id_": "d2080242-ff9f-4072-aa83-8df23b665f89", "embedding": null, "metadata": {"file_path": "./phala_dist/migrating-from-geth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65ef409a-7e9a-4327-9842-f0fadeb6895c", "node_type": "4", "metadata": {}, "hash": "0274b5a22d7aaf50ded7359e567010844b87e69c9d86d077c85deb67f857baae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "497fc107-cfda-4d3c-a47f-471ca0bc02e2", "node_type": "1", "metadata": {}, "hash": "c18858bde61825c0026e9487046f07baa8af219d756af16e70bf3535b2c8b02e", "class_name": "RelatedNodeInfo"}}, "text": "Note that sync may take a while, depending on the chain. Also, you can periodically check the [`eth_syncing`](../interacting/json-rpc-ns/eth.md#eth_syncing) JSON-RPC method or the [health check](../monitoring/health-check.md).", "mimetype": "text/plain", "start_char_idx": 4117, "end_char_idx": 4343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3debbf55-8482-4189-b6c1-f130b07e97db": {"__data__": {"id_": "3debbf55-8482-4189-b6c1-f130b07e97db", "embedding": null, "metadata": {"file_path": "./phala_dist/intro.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "274ba15c-2ffd-4679-ad16-102b014c331a", "node_type": "4", "metadata": {}, "hash": "dd2ee80f423630443d700fa393a1ad9c524908454ad1142395b519941b54db2a", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Introduction and overview\nsidebar_label: Introduction\nsidebar_position: 0\nslug: /\n---\n\nNethermind is a high-performance, highly configurable Ethereum execution client built on [.NET](https://dotnet.microsoft.com/en-us/) that runs on Linux, Windows, and macOS and supports Clique, Aura, and Ethash. With breakneck sync speeds and support for external plugins, it provides reliable access to rich on-chain data thanks to a high-performance JSON-RPC interface and node health monitoring with [Grafana](https://grafana.com) and [Seq](https://datalust.co/seq).\n\nFounded in 2017 and boosted by a grant from the Ethereum Foundation in 2018, we focus on delivering a robust Ethereum client, ensuring outstanding performance and flexibility for node operators. \n\nHere, you'll find instructions on installing, configuring, and using Nethermind and its features. We've organized the information by topic and included examples and visuals for better understanding.\n\nWe hope you find this documentation helpful and welcome your feedback and suggestions!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "106447d9-c988-4d4a-8500-a98a53f0ec07": {"__data__": {"id_": "106447d9-c988-4d4a-8500-a98a53f0ec07", "embedding": null, "metadata": {"file_path": "./phala_dist/migration-from-prbv2-to-v3.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "881b999f-9e85-4028-acb3-920253a808e6", "node_type": "4", "metadata": {}, "hash": "3899dc037aa0fdf47b4aa041153c5b436fe67a2fb8e2d439f1e20a6aca4c3614", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f56930d-8589-46f9-a45a-e937eab91f6a", "node_type": "1", "metadata": {}, "hash": "206458046ec54c147174416017233db9521fbc997e3553608930b9dc16f79661", "class_name": "RelatedNodeInfo"}}, "text": "# Migration from PRBv2 to v3\n\nThis guide will show you how to migrate a PRBv2 deployment to PRBv3 using Docker Compose.\n\n### Deploy PRBv3\n\nFirst, you should create a clean PRBv3 deployment by referring to this page: [PRBv3 Deployment Guide](../run-workers-on-phala/prbv3-deployment.md)\n\nMake sure it's running and the `wm` should be running and listening on port 3001 by default.\n\n### Update PRBv2 docker image\n\nCheck your `.yml` file of PRBv2 and set the docker image of `lifecycle` component to `phalanetwork/prb:git-current-v2` to receive the bundled migration script.\n\nIn the `lifecycle` , the component\u2019s docker-compose configuration file should be like:\n\n```yaml\nlifecycle:\n    network_mode: host\n    image: phalanetwork/prb:git-current-v2\n\t\t# leave other things as is\n```\n\nThen run `sudo docker compose pull`.\n\nYour will see the `lifecycle should pull a new image and restart.`\n\n### Run the migration script\n\nIn the docker-compose folder of PRBv2's `lifecycle` component, run:\n\n```bash\ndocker compose down\n# Change PRB3_API_ENDPOINT to your actual endpoint of prb3-wm\ndocker compose run -e \"PRB3_API_ENDPOINT=http://127.0.0.1:3001\" --entrypoint \"yarn migrate_to_prb3\" lifecycle\n```\n\nTo stop the PRBv2 and to run the migration script.\n\n> There you should use the same endpoint of what you wrote in wm.yml to replace the \\`http://127.0.0.1:3001\\`.\n\nNow the migration is done, just waiting for the worker's beginning to start.\n\n### Limitations of Migration\n\n#### Duplicated worker name\n\nBefore Migration, you must ensure that there can be no duplicate items in the names of the pools and workers. Includes but is not limited to worker names being equal to pool names.\n\n#### PID #0 error\n\nPRBv2 supports PID #0, but PRBv3 does not support it.\n\nThis makes the migration fail if you want to migrate PID #0 from PRBv2 to PRBv3.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f56930d-8589-46f9-a45a-e937eab91f6a": {"__data__": {"id_": "9f56930d-8589-46f9-a45a-e937eab91f6a", "embedding": null, "metadata": {"file_path": "./phala_dist/migration-from-prbv2-to-v3.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "881b999f-9e85-4028-acb3-920253a808e6", "node_type": "4", "metadata": {}, "hash": "3899dc037aa0fdf47b4aa041153c5b436fe67a2fb8e2d439f1e20a6aca4c3614", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "106447d9-c988-4d4a-8500-a98a53f0ec07", "node_type": "1", "metadata": {}, "hash": "2f7206375159141c023cda9db5cfcc8a41a448e0166eb553dddbd885f32bf970", "class_name": "RelatedNodeInfo"}}, "text": "#### Database conflicts\n\nIf your PRBv3 is running and migration from PRBv2 is also necessary. Before your migration, check it to avoid the 2 limitations above.\n\nIf your PRBv3 is brand new but may have some test data or you failed to migrate before, the previous test data or half-imported dirty data will result in poor synchronization results. Therefore, you need to:\n\n* First, stop PRBv3 by `sudo docker compose down`\n* Delete the `inv` and `po` folders.\n* Start the normal synchronization process from the start of this article.", "mimetype": "text/plain", "start_char_idx": 1829, "end_char_idx": 2360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2b03933-ba11-4192-bdca-f072c0a9650c": {"__data__": {"id_": "c2b03933-ba11-4192-bdca-f072c0a9650c", "embedding": null, "metadata": {"file_path": "./phala_dist/headers-cache-deployment.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0fceb180-972f-4e38-a708-33f163e1c9ef", "node_type": "4", "metadata": {}, "hash": "77114117e08fa5613d331a00efc29d6e6aa547d017f6875c6105563535a2b31d", "class_name": "RelatedNodeInfo"}}, "text": "# Headers-cache deployment\n\n## What's the Header-cache\n\nThe headers-cache is a component that stores the header of each block. The block header includes important information such as previous block hash, timestamp, nonce, and so on, representing all the transactions in the block.\n\nCaching block headers can improve efficiency when downloading and synchronizing with the network, once you are using a pherry or PRB to sync the pRuntime, add a headers-cache between them will significantly reduce the sync period.\n\n## Headers-cache requirements\n\n* 2GB of memory\n* 200GB NVME - for Phala headers-cache; 500GB NVME for Khala headers-cache\n* A completely synced full node is necessary\n\n## Steps for deployment\n\n### Preparations\n\nCreate a folder locally, and create a docker-compose document within it.\n\n```\nmkdir headers-cache\ncd ./headers-cache\ntouch docker-compose.yml\n```\n\n### Document Editing\n\nUse the following command to edit the docker-compose.yml document.\n\n```bash\nvim ./docker-compose.yml \n```\n\nEnter `a` and you will start editing the document. Paste the following content into the document. (Please note that the file content remains consistent and the indentation alignment of each line is consistent with this document)\n\n```\nversion: \"3\"\nservices:\n  khala-headers-cache:\n    image: phalanetwork/headers-cache:latest\n    container_name: khala-headers-cache\n    network_mode: host\n    restart: always\n    environment:\n      - ROCKET_PORT=22111\n      - ROCKET_ADDRESS=0.0.0.0\n      - RUST_LOG=info\n    command:\n      - serve\n      - --grab-headers\n      - --node-uri=ws://{node_ip}:9945\n      - --para-node-uri=ws://{node_ip}:9944\n      - --interval=60\n    volumes:\n      - ./phala-headers-cache-public:/opt/headers-cache/data\n```\n\nAfter entering, complete the following steps to finish the text editing and save successfully.\n\n```javascript\n1\u3001Click \"esc\"\n2\u3001Enter \":wq\"\n3\u3001Click \"Enter\"\uff0cquit the editing page\n```\n\n### Program Execution\n\nInside the newly created folder `headers-cache`, run the docker-compose, and the essential components for PRB will run successfully.\n\n```\nsudo docker compose up -d\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02c7ad8e-f3c8-4a61-9aa4-bd158dce6384": {"__data__": {"id_": "02c7ad8e-f3c8-4a61-9aa4-bd158dce6384", "embedding": null, "metadata": {"file_path": "./phala_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f721843-d375-4b20-bba2-5d671055b742", "node_type": "4", "metadata": {}, "hash": "d958cb77d2aac88b7e3e0504208f0a73242eda0d2e224b47790c0d92d7a3e6b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "639de158-fed8-4748-8471-f6f09b4c2240", "node_type": "1", "metadata": {}, "hash": "bce081a822986c2e185b89c5742b5560cd3a47a82af808ebc5fc1114fca048ba", "class_name": "RelatedNodeInfo"}}, "text": "# \u2049\ufe0f FAQ\n\n## :page\\_facing\\_up: (Legacy) Phat Contract Development <a href=\"#how-to-set-arguments-when-instantiating-the-contract-in-phat-contract-ui\" id=\"how-to-set-arguments-when-instantiating-the-contract-in-phat-contract-ui\"></a>\n\n***\n\n### How can I set arguments when instantiating the contract in Phat Contract UI? <a href=\"#how-to-set-arguments-when-instantiating-the-contract-in-phat-contract-ui\" id=\"how-to-set-arguments-when-instantiating-the-contract-in-phat-contract-ui\"></a>\n\n***\n\n* Currently the Phat Contract Console does not support specifying arguments during contract instantiation\n* **Workaround**: you can implement a `config(&mut self, argument0, ...)` function and set the contract state with transactions after the instantiation\n\n### Phat UI reports an error before deploying the contract. <a href=\"#phat-ui-reports-an-error-before-deploying-the-contract\" id=\"phat-ui-reports-an-error-before-deploying-the-contract\"></a>\n\n***\n\nThe Phat UI checks the contract\u2019s validity before uploading it to the cluster. However, sometimes the contract output by `cargo-contract` may be invalid. We\u2019ve listed common errors and solutions below:\n\n#### **Error: gas instrumentation failed: unsupported instruction: F32Load(2, 4)**\n\nor sometimes \u201cuse of floating point type in locals is forbidden\u201d\n\nThis error occurs when the contract or its dependencies use floating point operations not allowed by the ink runtime.\n\n* To find the source of the problem, try recompiling the contract with `--keep-debug-symbols`, then convert the wasm file to wat using `wasm2wat my_contract.wasm > my_contract.wat`, and search for `f32` or `f64` in my\\_contract.wat to find the function using these instructions.\n* If the floating point operations are necessary, see the section [\u201cHow to do floating point calculations\u201d](../developers/support/broken-reference/) for more information.\n\n#### **Error: sign extension operations support is not enabled**\n\nUpgrade cargo-contract to version 1.5.2 or higher once [this PR](https://github.com/paritytech/cargo-contract/pull/904) has been merged.\n\n### Avoiding FP Instructions in JSON Parsing.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "639de158-fed8-4748-8471-f6f09b4c2240": {"__data__": {"id_": "639de158-fed8-4748-8471-f6f09b4c2240", "embedding": null, "metadata": {"file_path": "./phala_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f721843-d375-4b20-bba2-5d671055b742", "node_type": "4", "metadata": {}, "hash": "d958cb77d2aac88b7e3e0504208f0a73242eda0d2e224b47790c0d92d7a3e6b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02c7ad8e-f3c8-4a61-9aa4-bd158dce6384", "node_type": "1", "metadata": {}, "hash": "0b8114d572178832606f7e2ba854551cd88821b1e841ab0eb948d816ac781ac8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61adcb7b-e8f3-4dfa-84f6-10f88e667412", "node_type": "1", "metadata": {}, "hash": "a7afb925c74886ebd79bc4323677a82f3cc23e02ead11b509b545ccbae4c80fe", "class_name": "RelatedNodeInfo"}}, "text": "<a href=\"#avoiding-fp-instructions-in-json-parsing\" id=\"avoiding-fp-instructions-in-json-parsing\"></a>\n\n***\n\nA common case that introduces FP instructions is parsing JSON in a contract. Either serde or serde\\_json are designed to be able to handle FP numbers. In theory, if you don\u2019t use it to deal with FP data, the compiler and wasm-opt should be able to optimize the FP instructions away for many cases. However, in practice, if you use serde\\_json, it always emits FP instructions in the final output wasm file.\n\nIf your JSON document contains FP numbers, you can skip this section and go to [\u201cHow to do floating point calculations\u201d](../developers/support/broken-reference/) for solutions. If your JSON document does not contain FP numbers, here are some suggestions for removing the instructions:\n\n* Use the crate [pink-json](https://crates.io/crates/pink-json) instead of `serde_json`.\n* Don\u2019t deserialize to `json::Value` or `serde::Value`. These are dynamically typed values and make it impossible for the compiler to optimize the code paths that contain FP ops. Instead, mark concrete types with `#[derive(Deserialize)]` and deserialize to them directly.\n* If using `pink-web3` and loading `Contract` from its JSON ABI, you may encounter FP problems in a function like `_ZN5serde9__private2de7content7Content10unexpected17h5ce9c505c30bc609E` from serde. To fix this, you can patch `serde` as shown below.\n\n```\n[patch.crates-io]\nserde = { git = \"https://github.com/kvinwang/serde.git\", branch = \"pink\" }\n```\n\n### Cannot compile with \"lib name not found\" error.", "mimetype": "text/plain", "start_char_idx": 2123, "end_char_idx": 3691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61adcb7b-e8f3-4dfa-84f6-10f88e667412": {"__data__": {"id_": "61adcb7b-e8f3-4dfa-84f6-10f88e667412", "embedding": null, "metadata": {"file_path": "./phala_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f721843-d375-4b20-bba2-5d671055b742", "node_type": "4", "metadata": {}, "hash": "d958cb77d2aac88b7e3e0504208f0a73242eda0d2e224b47790c0d92d7a3e6b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "639de158-fed8-4748-8471-f6f09b4c2240", "node_type": "1", "metadata": {}, "hash": "bce081a822986c2e185b89c5742b5560cd3a47a82af808ebc5fc1114fca048ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a282f38-7e1a-446e-8687-8fb084ace087", "node_type": "1", "metadata": {}, "hash": "a799100b9da5d3c1ae7dbb60799ff5adabbd789bfb693aca80f2d7708f0ddcdc", "class_name": "RelatedNodeInfo"}}, "text": "***\n\n<pre class=\"language-shell\" data-overflow=\"wrap\"><code class=\"lang-shell\"><strong>2023-07-11T09:42:45.848016Z INFO cargo_contract::crate_metadata: Fetching cargo metadata for Cargo.toml thread 'main' panicked at 'lib name not found', /home/USER/.cargo/registry/src/github.com-1ecc6299db9ec823/cargo-contract-1.5.0/src/crate_metadata.rs:65:25 note: run with RUST_BACKTRACE=1 environment variable to display a backtrace\n</strong></code></pre>\n\nAfter checking the version, it shows:\n\n<pre><code><strong>$ cargo contract --version cargo-contract 1.5.0-unknown-x86_64-unknown-linux-gnu\n</strong></code></pre>\n\nSolution: upgrade to the latest cargo contract. [Reference](https://github.com/paritytech/cargo-contract#installation):\n\n```shell\ncargo install --force --locked cargo-contract\n```\n\n### Who is charged for calling methods on contract?\n\n***\n\nThere are two types of method calling:\n\n1. **off-chain query**: there is not cost for caller, but someone needs to stake to that contract in advance so it can get the CPU time to process your queries\n2. **on-chain transaction**: when you send the tx, some transaction fee will be charged directly; also for your tx to be finally executed in our worker, some in-cluster balance will be charged as real gas fee\n\n### Encrypted contract state is not available on the blockchain, but is the contract itself available on the blockchain?\n\n***\n\n* Contract state is not stored on-chain, it\u2019s volatile in SGX workers\u2019 memory. So to get access to the contract state, there must be at least one active worker to which that contract is deployed\n  * Contracts are deployed to a cluster, and then all the workers in that cluster - We have enabled dynamic cluster: to add workers to a cluster.", "mimetype": "text/plain", "start_char_idx": 3693, "end_char_idx": 5419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a282f38-7e1a-446e-8687-8fb084ace087": {"__data__": {"id_": "3a282f38-7e1a-446e-8687-8fb084ace087", "embedding": null, "metadata": {"file_path": "./phala_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f721843-d375-4b20-bba2-5d671055b742", "node_type": "4", "metadata": {}, "hash": "d958cb77d2aac88b7e3e0504208f0a73242eda0d2e224b47790c0d92d7a3e6b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61adcb7b-e8f3-4dfa-84f6-10f88e667412", "node_type": "1", "metadata": {}, "hash": "a7afb925c74886ebd79bc4323677a82f3cc23e02ead11b509b545ccbae4c80fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58334e85-0bdd-45a2-9976-7900859d6214", "node_type": "1", "metadata": {}, "hash": "c92139b7870c8436532f91eec28b1926ac2298386122bd84d93178f0ff0c642c", "class_name": "RelatedNodeInfo"}}, "text": "This is achievable since the root key is in GKs, so they can derive the cluster key any time and share to incoming workers\n* All the transactions are stored on-chain, including\n  * The transaction to upload the code to workers, such transaction is deliberately kept public so users can easily examine the contract code\n    * The (encrypted) transaction to instantiate code, this contains the constructor function to call and the arguments\n    * All the (encrypted) transactions that update the contract states\n\n### Does the stake associated with a contract decrease as more computation is done from contract calls?\n\n***\n\nNo. The stake to a contract does not change with contract calls. You can always have the full refund. But if other contracts get more stake then your computing power percentage will decrease correspondingly. This only applies to the public cluster. If we create dedicated cluster for our partners then any stake can take all the CPU time\n\n### Error on Ubuntu 22.04 Exception: Failed to start pherry component. \\<PATH>/pherry: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory\n\n***\n\nManually pulling deb package and installing fixes issue. Reference from [askubuntu](https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta).&#x20;\n\n```sh\nwget http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb\nsudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb\n```\n\n## :computer: Phala Compute Infrastructure&#x20;\n\n***\n\n### How do the token economics of Phala Network work?\n\n***\n\n> _**Note**: At the time of writing this, e_verything below except the **Demand L1** tokenomic is up and running\n\n1. **Supply**: The contributors (miners in the past) receive reward by keeping serving the network. It follows a model similar to other PoS like Filecoin, which allows the system to punish the bad behavior. The liveness of the worker is checked by on-chain random heartbeat.\n2.", "mimetype": "text/plain", "start_char_idx": 5420, "end_char_idx": 7463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58334e85-0bdd-45a2-9976-7900859d6214": {"__data__": {"id_": "58334e85-0bdd-45a2-9976-7900859d6214", "embedding": null, "metadata": {"file_path": "./phala_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f721843-d375-4b20-bba2-5d671055b742", "node_type": "4", "metadata": {}, "hash": "d958cb77d2aac88b7e3e0504208f0a73242eda0d2e224b47790c0d92d7a3e6b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a282f38-7e1a-446e-8687-8fb084ace087", "node_type": "1", "metadata": {}, "hash": "a799100b9da5d3c1ae7dbb60799ff5adabbd789bfb693aca80f2d7708f0ddcdc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34351c56-db17-4894-807e-ec2417106415", "node_type": "1", "metadata": {}, "hash": "72c7e7fdd8a4c39dd92eec744ec9335771451379f55340600e1678350e01f4c8", "class_name": "RelatedNodeInfo"}}, "text": "**Demand L1**: The developer can stake to get a percentage of the ownership of the compute resource. Once they stake, they can request to \"hire\" the workers they prefer to form a **cluster**, and get the worker assigned automatically by the system. This part is described in the tokenomic paper, but not fully implemented yet.\n3. **Demand L2**: Once the developer hired some workers in a **cluster**, they can use the resources. If it's fully used by a single developer, no further tokenomic is required. But if someone wants to create a **public cluster**, just like the one we launched earlier this year, we need another tokenomic to distribute the resources to individual permissionlessly. As Joshua described, now it's a \"stake to compute\" model. You can stake some % of the token, and get access to the corresponding portion of the compute resources within the cluster.\n4. **Resource Accounting**: The last piece of the map is to account the resources, especially when using a **public cluster**. In Phala Network the major resource is the CPU time. So we run a variant of Completely Fair Scheduler (CFS) used by the Linux kernel to ensure the CPU consumed by each contract is pro rata to their stake in the cluster. It's further combined with WASM gas metering to achieve \"time slice\" allocation in the cluster.\n\n### How are Phat Contract Contract Keys managed/handled from Gatekeepers to Cluster of node(s)?\n\n***\n\nThere are several keys involved in this process, and all these keys are generated inside pRuntime in TEE.\n\n* WorkerKey, every pRuntime, no matter it\u2019s worker or GK, generates it during the initialization and publish the pk on-chain during worker registration (GK must be first registered as worker)\n  * All the key sharing between workers are done through encrypted channel. And this channel is established using the WorkerKeys of two parties. Two workers first generate the common working key using ECDH on their WorkerKeys, then using the working key to encrypt the real contents\n* MasterKey, generated by the first registered GK, and shared to all the other GKs. The MasterKey pk is published on chain, so any GK can sign the messages with MasterKey for others to verify.", "mimetype": "text/plain", "start_char_idx": 7464, "end_char_idx": 9659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34351c56-db17-4894-807e-ec2417106415": {"__data__": {"id_": "34351c56-db17-4894-807e-ec2417106415", "embedding": null, "metadata": {"file_path": "./phala_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f721843-d375-4b20-bba2-5d671055b742", "node_type": "4", "metadata": {}, "hash": "d958cb77d2aac88b7e3e0504208f0a73242eda0d2e224b47790c0d92d7a3e6b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58334e85-0bdd-45a2-9976-7900859d6214", "node_type": "1", "metadata": {}, "hash": "c92139b7870c8436532f91eec28b1926ac2298386122bd84d93178f0ff0c642c", "class_name": "RelatedNodeInfo"}}, "text": "All the GKs behave exactly the same so they are duplications to each other\n  * MasterKey is the root key for all the following contract-related keys\n* ClusterKey, generated by GK by deriving the MasterKey with cluster info. The ClusterKey is shared by GK to all the Workers in the cluster during cluster creation through the encrypted channels\n* ContractKey, generated by cluster workers by deriving the ClusterKey with contract info. Since all the cluster workers have the ClusterKey, they will generate the same ContractKey for each contract.", "mimetype": "text/plain", "start_char_idx": 9660, "end_char_idx": 10204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36436cc2-c6aa-46b6-9009-e325839be497": {"__data__": {"id_": "36436cc2-c6aa-46b6-9009-e325839be497", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9", "node_type": "4", "metadata": {}, "hash": "4494f51a8651179f20006db07cff651efaef1696540fa65d5628253b736acaa8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e86de20c-243d-428f-9c61-412a0e992803", "node_type": "1", "metadata": {}, "hash": "a74a9c2d5244645c78110062414191215664d0cdae2a89a76d6dc01baf535263", "class_name": "RelatedNodeInfo"}}, "text": "# Deploy Contract\n\n## Deploy Your First Contract <a href=\"#create-and-compile-your-first-contract\" id=\"create-and-compile-your-first-contract\"></a>\n\nNow that you have created and compiled your `phat_hello` contract, let's deploy the contract to the [PoC6 Testnet](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpoc6.phala.network%2Fws#/explorer). There are a couple ways to get you started.\n\n{% tabs %}\n{% tab title=\"Swanky Phala\" %}\n> If you have not installed `swanky phala` CLI tool, follow these [steps](deploy-contract.md#swanky-phala) to get started.\n\nGo to your development workspace and ensure that you have updated your `devphase.config.json` file to include the PoC6 Testnet info. Within`networks` , add the following:\n\n```bash\n\"networks\": {\n    \"poc6\": {\n      \"nodeUrl\": \"wss://poc6.phala.network/ws\",\n      \"workerUrl\": \"https://phat-cluster-us.phala.network/poc6/pruntime/0xac5087e0\"\n    }\n  },\n```\n\nNext, you will execute the following command to deploy your `phat_hello` compiled contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e86de20c-243d-428f-9c61-412a0e992803": {"__data__": {"id_": "e86de20c-243d-428f-9c61-412a0e992803", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9", "node_type": "4", "metadata": {}, "hash": "4494f51a8651179f20006db07cff651efaef1696540fa65d5628253b736acaa8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36436cc2-c6aa-46b6-9009-e325839be497", "node_type": "1", "metadata": {}, "hash": "160e59208987314a72fdc1b6333fdd59e46f8f9c24a2b7cf457d6fe784ec1548", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55d44f59-4d05-4786-bcd5-ee52220ab38b", "node_type": "1", "metadata": {}, "hash": "d02812a80be168b88ad2fc649b600002d398ba0edc6bad09ea82b74ede5dd9c6", "class_name": "RelatedNodeInfo"}}, "text": "The flags available for this command are defined as follows:\n\n```\nswanky phala contract deploy --help\n```\n\nExpected output:\n\n```bash\n\u279c  Norwhich git:(master) \u2717 swanky help phala contract deploy                                                                                     ~/Projects/TestingEnv/Norwhich\nDeploy contract\n\nUSAGE\n  $ swanky phala contract deploy -c <value> -o <value> [-t InkCode|SidevmCode|IndeterministicInkCode] [-n <value>] [-l <value>] [-a <value>] [-p <value>]\n\nFLAGS\n  -a, --account=<value>      [default: alice] Account used to deploy (managed account key)\n  -c, --contract=<value>     (required) Contract name\n  -l, --cluster=<value>      Target cluster Id\n  -n, --network=<value>      [default: local] Target network to deploy (local default)\n  -o, --constructor=<value>  (required) Contract constructor to call (name)\n  -p, --params=<value>...    [default: ] Arguments supplied to the message\n  -t, --type=<option>        [default: InkCode]\n                             <options: InkCode|SidevmCode|IndeterministicInkCode>\n\nDESCRIPTION\n  Deploy contract\n\nEXAMPLES\n  $ swanky phala contract deploy -c [CONTRACT_NAME] -t [CONTRACT_TYPE] -o [CONSTRUCTOR] -n [NETWORK] -l [CLUSTER_ID] -a [ACCOUNT] -p [..Args]\n```\n\n`poc6` will be the `-n` flag value in the `swanky phala contract deploy` command.\n\n{% code overflow=\"wrap\" %}\n```bash\nswanky phala contract deploy -c phat_hello -l 0x0000000000000000000000000000000000000000000000000000000000000001 -n poc6 -o new\n```\n{% endcode %}\n\nHere is an expected output after executing the `swanky phala contract deploy` command.\n\n```bash\nDeploy contract\nValidating compiled WASM of phat_hello contract...\nphat_hello.wasm validated successfully!", "mimetype": "text/plain", "start_char_idx": 1006, "end_char_idx": 2714, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55d44f59-4d05-4786-bcd5-ee52220ab38b": {"__data__": {"id_": "55d44f59-4d05-4786-bcd5-ee52220ab38b", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9", "node_type": "4", "metadata": {}, "hash": "4494f51a8651179f20006db07cff651efaef1696540fa65d5628253b736acaa8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e86de20c-243d-428f-9c61-412a0e992803", "node_type": "1", "metadata": {}, "hash": "a74a9c2d5244645c78110062414191215664d0cdae2a89a76d6dc01baf535263", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cfa255a5-c902-4a8a-b24c-5a83a494699b", "node_type": "1", "metadata": {}, "hash": "cb3c918afc3113bdf3936a5c3ed0127022dc0f96dcc5aabe73e46935fa1c775f", "class_name": "RelatedNodeInfo"}}, "text": "\u2819 Deploying contract phat_hello\nContract deployed\nContract Id: 0xac22b0163a70f1213d58b3891f20c5b493ca7a7802e2b0ee204a7c4994a4bb27\nCluster Id:  0x0000000000000000000000000000000000000000000000000000000000000001\n\u2714\ufe0f Deploying contract phat_hello  OK\n\ud83d\ude0e Phat Contract deployed successfully! \ud83d\ude0e\n```\n\nNow execute the `swanky phala contract call` command since we now have the Contract Id of the deployed Phat Contract. Here is what the help command looks like:\n\n```\nswanky phala contract call --help\n```\n\nExpected output:\n\n```bash\nCall a Phat Contract\n\nUSAGE\n  $ swanky phala contract call -c <value> -i <value> -m <value> [-t InkCode|SidevmCode|IndeterministicInkCode] [-r query|tx] [-n <value>] [-l <value>] [-a <value>] [-p <value>]\n\nFLAGS\n  -a, --account=<value>    [default: alice] Account used to call (managed account key)\n  -c, --contract=<value>   (required) Contract name\n  -i, --id=<value>         (required) Contract ID\n  -l, --cluster=<value>    Target cluster Id\n  -m, --method=<value>     (required) Contract method to call (name)\n  -n, --network=<value>    [default: local] Target network to deploy (local default)\n  -p, --params=<value>.  [default: ] Arguments supplied to the message\n  -r, --request=<option>   [default: query] Request type: transaction or query\n                           <options: query|tx>\n  -t,", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfa255a5-c902-4a8a-b24c-5a83a494699b": {"__data__": {"id_": "cfa255a5-c902-4a8a-b24c-5a83a494699b", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9", "node_type": "4", "metadata": {}, "hash": "4494f51a8651179f20006db07cff651efaef1696540fa65d5628253b736acaa8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55d44f59-4d05-4786-bcd5-ee52220ab38b", "node_type": "1", "metadata": {}, "hash": "d02812a80be168b88ad2fc649b600002d398ba0edc6bad09ea82b74ede5dd9c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4cfb3040-db9d-4583-8ef7-eaef5e7f5646", "node_type": "1", "metadata": {}, "hash": "f47ee4fdf68329c86b819745144c43834620ae30a157a71a16dbbdeee4314a1a", "class_name": "RelatedNodeInfo"}}, "text": "--type=<option>      [default: InkCode]\n                           <options: InkCode|SidevmCode|IndeterministicInkCode>\n\nDESCRIPTION\n  Call a Phat Contract\n\nEXAMPLES\n  $ swanky phala contract call -c [CONTRACT_NAME] -t [CONTRACT_TYPE] -i [CONTRACT_ID] -r [REQUEST_TYPE] -m [METHOD] -n [NETWORK] -l [CLUSTER_ID] -a [ACCOUNT] -p [.ARGS]\n```\n\nTo call the `phat_hello` contract we will need the following:\n\n* `-i` Contract Id: `0xac22b0163a70f1213d58b3891f20c5b493ca7a7802e2b0ee204a7c4994a4bb27`\n* `-l` Cluster Id: `0x0000000000000000000000000000000000000000000000000000000000000001`\n* `-n` Network: `poc6`\n* `-m` Method Name (Camel Case): `getEthBalance`\n* `-p` Method Argument Parameters: `0x307844306645333136423966303141336235666436373930463838433244353337333946383042343634`\n  * Note that this is the value of `stringToHex(0xD0fE316B9f01A3b5fd6790F88C2D53739F80B464)`\n\n```bash\nswanky phala contract call -c phat_hello -i 0xac22b0163a70f1213d58b3891f20c5b493ca7a7802e2b0ee204a7c4994a4bb27 -l 0x0000000000000000000000000000000000000000000000000000000000000001 -n poc6 -m getEthBalance -p 0x307844306645333136423966303141336235666436373930463838433244353337333946383042343634\n```\n\nNow that we can compose a `swanky phala contract call` command,", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4cfb3040-db9d-4583-8ef7-eaef5e7f5646": {"__data__": {"id_": "4cfb3040-db9d-4583-8ef7-eaef5e7f5646", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9", "node_type": "4", "metadata": {}, "hash": "4494f51a8651179f20006db07cff651efaef1696540fa65d5628253b736acaa8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cfa255a5-c902-4a8a-b24c-5a83a494699b", "node_type": "1", "metadata": {}, "hash": "cb3c918afc3113bdf3936a5c3ed0127022dc0f96dcc5aabe73e46935fa1c775f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cab72824-aa7d-432b-9e7e-8bd6903dc431", "node_type": "1", "metadata": {}, "hash": "15509987b6cf152f6e83165151fbb3c880a78d687d0c680e9db848b5db649b5c", "class_name": "RelatedNodeInfo"}}, "text": "this would be an expected output:\n\n```bash\nExecuting call to Phat Contract\nCall result:\n{\n  output: { ok: { ok: '20950198739626844' } },\n  debugMessage: '',\n  result: {\n    ok: { flags: [], data: '0x0000443230393530313938373339363236383434' }\n  },\n  gasConsumed: { refTime: 1342177279, proofSize: 0 },\n  gasRequired: { refTime: 65766686719, proofSize: 0 },\n  storageDeposit: { charge: 2047 }\n}\n```\n{% endtab %}\n\n{% tab title=\"Phat UI\" %}\nGo to the [Phat UI](https://phat.phala.network) website where you will see a landing page.\n\n<figure><img src=\"../../../../.gitbook/assets/Phat-UI-landing-page.png\" alt=\"\"><figcaption><p>Phat UI Landing Page</p></figcaption></figure>\n\nNext, you will connect your Polkadot wallet ([Talisman](https://talisman.xyz/download), [SubWallet](https://chrome.google.com/webstore/detail/subwallet-polkadot-extens/onhogfjeacnfoofkfgppdlbmlmnplgbn?hl=en\\&authuser=0), or [Polkadot.js](https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd/related))\n\n<figure><img src=\"../../../../.gitbook/assets/Select-Polkadot-Wallet.png\" alt=\"\"><figcaption><p>Select a Polkadot Wallet</p></figcaption></figure>\n\nFor more info on these steps, check out the [Phat Contract Console](https://phat.phala.network) section. Now that your account has PHA testnet tokens, upload the compile contract file `phat_hello.contract`\n\nHere is a video example of the process. After the contract is deployed and instantiated into a cluster, choose any ETH address and query the balance.", "mimetype": "text/plain", "start_char_idx": 5287, "end_char_idx": 6814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cab72824-aa7d-432b-9e7e-8bd6903dc431": {"__data__": {"id_": "cab72824-aa7d-432b-9e7e-8bd6903dc431", "embedding": null, "metadata": {"file_path": "./phala_dist/deploy-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9", "node_type": "4", "metadata": {}, "hash": "4494f51a8651179f20006db07cff651efaef1696540fa65d5628253b736acaa8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4cfb3040-db9d-4583-8ef7-eaef5e7f5646", "node_type": "1", "metadata": {}, "hash": "f47ee4fdf68329c86b819745144c43834620ae30a157a71a16dbbdeee4314a1a", "class_name": "RelatedNodeInfo"}}, "text": "{% embed url=\"https://youtu.be/NkLHXNEK8iI\" %}\nDeploy and Call your Phat Contract\n{% endembed %}\n\nThe query of an ETH balance will look like this:\n\n<figure><img src=\"../../../../.gitbook/assets/Query-ETH-Balance-Step1.png\" alt=\"\"><figcaption><p>Choose ETH Account to Query</p></figcaption></figure>\n\n<figure><img src=\"../../../../.gitbook/assets/Query-ETH-Balance.png\" alt=\"\"><figcaption><p>Query ETH Balance</p></figcaption></figure>\n{% endtab %}\n{% endtabs %}", "mimetype": "text/plain", "start_char_idx": 6816, "end_char_idx": 7277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3fc97833-ef7e-4677-b94b-17177aa51d1d": {"__data__": {"id_": "3fc97833-ef7e-4677-b94b-17177aa51d1d", "embedding": null, "metadata": {"file_path": "./phala_dist/requirements-in-phala-khala.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a4219a8e-8c45-402f-889d-7ee7b94a9ade", "node_type": "4", "metadata": {}, "hash": "2664c04192b7604d49ac974510ad3e895671b848bb90b1aa7d32ce35a981b8d2", "class_name": "RelatedNodeInfo"}}, "text": "# Requirements in Phala/Khala\n\n## Basic Requirements\n\nWhether in Phala or Khala, the following requirements for workers are the same.\n\n## SGX Function\n\nRunning a worker requires SGX-capable CPU. Please choose a device that supports SGX and enable SGX in the BIOS. For more information, refer to:\n\n## Stable Network\n\nThe network of the worker should be as stable as possible with more than 1GB bandwidth. and it's best to have a public IP address.\n\n## OS Requirements\n\nWe strongly recommend that you use Ubuntu 22.04.2 LTS, download [link](https://ubuntu.com/download/server).\n\n> The desktop version of the OS is less stable than Server version, so we strongly recommend using the server version.\n\n> **NOTE**\n>\n> Make sure that the kernel version is **5.13** or above.\n\n## Device Hardware Specifications\n\nThere are 2 forms of worker operation, including solo-worker operation and batches of worker management which is called PRB. The requirements of them are different.\n\nThe following describes the device requirements for a solo-worker, and different network requirements also vary.\n\n### For Phala Workers\n\n| Types           | Requirements |\n| --------------- | ------------ |\n| RAM Space       | 8 GB+        |\n| Hard Disk Space | 2 TB+        |\n| Cores           | 4 Cores+     |\n\n> If you have a batch of workers that need to run on Phala, please visit here for more [information](../run-workers-on-phala/prbv3-deployment.md).\n\n### For Khala Workers\n\n| Types           | Requirements |\n| --------------- | ------------ |\n| RAM Space       | 8 GB+        |\n| Hard Disk Space | 2 TB+        |\n| Cores           | 4 Cores+     |\n\n> If you have a batch of workers that need to run on Khala, please visit here for more information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2a8803c-3f0e-4e95-b30f-43c18af9aafc": {"__data__": {"id_": "e2a8803c-3f0e-4e95-b30f-43c18af9aafc", "embedding": null, "metadata": {"file_path": "./phala_dist/environment-setup.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86564f1f-14b7-49a8-a8f4-9cbf1a8a3432", "node_type": "4", "metadata": {}, "hash": "329b980dda804e8a85f1e001e8d8c57de375d6bb440904f6e4e9d54b58f74219", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "903696fc-3106-460b-9306-905f4ad07fb5", "node_type": "1", "metadata": {}, "hash": "aa7baa8b4b8a247d2a9949d9ae470ef39b60481f170005051398916eaf2b4757", "class_name": "RelatedNodeInfo"}}, "text": "# Environment Setup\n\n## Supported Operating Systems <a href=\"#supported-operating-systems\" id=\"supported-operating-systems\"></a>\n\nThe Phat Contract uses the Rust-based ink! language, and is ultimately compiled to WebAssembly (WASM for short).\n\n* You compile your contract on both macOS and Linux distributions (we use Ubuntu 22.04 as the default Linux distribution);\n* For Windows users, we recommend setting up a Linux development environment with a virtual machine ([video tutorial](https://www.youtube.com/watch?v=x5MhydijWmc)).\n\n> **Note**\n>\n> The Mac M1/M2 chips do not support the deployment of a local testnet at this time. If you are using a machine with these chips, you will have to deploy to the live testnet through [DevPHAse](https://github.com/l00k/devphase), [swanky phala](swanky-phala-cli-tool.md), or [Phat UI](https://phat.phala.network).\n>\n> Information to connect to the Phala Live Testnet PoC6\n>\n> * RPC WS Endpoint: wss://poc6.phala.network/ws\n> * RPC HTTP Endpoint: https:/poc6.phala.network/rpc\n> * Cluster ID: 0x0000000000000000000000000000000000000000000000000000000000000001\n> * Worker: 0xac5087e0e21de2b2637511e6710db74e5ec2dbc3f02db76ffa02662878ecf333\n> * pRuntime URL: [https://phat-cluster-us.phala.network/poc6/pruntime/0xac5087e0](https://phat-cluster-us.phala.network/poc6/pruntime/0xac5087e0)\n\n## Install Toolchains\n\nPhat Contract shares the same toolchains as ink!.\n\n### Rust <a href=\"#rust\" id=\"rust\"></a>\n\nA prerequisite for compiling Phat Contracts is to have Rust and Cargo (Rust\u2019s project manager) installed.\n\nRust officially recommends using `rustup` tool to install and manage different Rust versions. Here\u2019s [an installation guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).\n\n### ink!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1754, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "903696fc-3106-460b-9306-905f4ad07fb5": {"__data__": {"id_": "903696fc-3106-460b-9306-905f4ad07fb5", "embedding": null, "metadata": {"file_path": "./phala_dist/environment-setup.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86564f1f-14b7-49a8-a8f4-9cbf1a8a3432", "node_type": "4", "metadata": {}, "hash": "329b980dda804e8a85f1e001e8d8c57de375d6bb440904f6e4e9d54b58f74219", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2a8803c-3f0e-4e95-b30f-43c18af9aafc", "node_type": "1", "metadata": {}, "hash": "bdc8178414248b5746c5d095232f2bb1e6b00a209bbac553d23f2500a3cff90c", "class_name": "RelatedNodeInfo"}}, "text": "<a href=\"#ink\" id=\"ink\"></a>\n\nWe recommend installing [`cargo-contract`](https://github.com/paritytech/cargo-contract). It\u2019s a CLI tool that helps set up and manage contracts written with ink!.\n\nThen you can install the `cargo-contract` with\n\n```\n# use the `--force` to ensure you are updated to the most recent version\ncargo install cargo-contract --force\n```\n\nThen check your `cargo-contract` and ensure it\u2019s updated to `3.2.x` with ink! 4 support\n\n```\ncargo contract --version\n# cargo-contract-contract 3.2.0-unknown-x86_64-unknown-linux-gnu\n```", "mimetype": "text/plain", "start_char_idx": 1755, "end_char_idx": 2303, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6422506d-78d1-428a-897d-f1fef7b5f054": {"__data__": {"id_": "6422506d-78d1-428a-897d-f1fef7b5f054", "embedding": null, "metadata": {"file_path": "./phala_dist/accelerate-khala-syncing.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "07d5e3f6-7f2a-4564-8ffe-1f805a5acbdf", "node_type": "4", "metadata": {}, "hash": "cecaa7d7b8dda54a473fcc45808f62f3528cbf528ddeebaaa863583a204cf368", "class_name": "RelatedNodeInfo"}}, "text": "# Accelerate Khala Syncing\n\n### Check Your Status <a href=\"#check-your-status\" id=\"check-your-status\"></a>\n\nA typical node log that is not up to date will look like this:\n\n```\n2021-09-15 13:33:27 [Relaychain] \u2699\ufe0f  Syncing 10.4 bps, target=#9236775 (20 peers), best: #9227955 (0xa897\u20264f36), finalized #9227895 (0x1d6d\u20261527), \u2b07 1.7MiB/s \u2b06 657.8kiB/s\n2021-09-15 13:33:27 [Parachain] \u2699\ufe0f  Syncing 40.4 bps, target=#400531 (1 peers), best: #396657 (0xb898\u20266c02), finalized #396443 (0xf470\u20262f54), \u2b07 378.7kiB/s \u2b06 1.6kiB/s\n```\n\nYou can check your node logs anytime by executing the following:\n\n```\nsudo docker logs -f phala-node\n```\n\nFor a status on your block heights, feel free to run:\n\n```\nsudo phala status\n```\n\n### Download a Snapshot <a href=\"#download-a-snapshot\" id=\"download-a-snapshot\"></a>\n\n> \u2139 If your node is close to the newest block height (about several hours to catch up) or already caught up, you don\u2019t need to do anything; sit and wait.\n\nDownload the snapshot using the torrent (updated at 4/30/2022): [here](https://wiki.phala.network/files/khala-node-snapshot-2022-04-30.tar.gz.torrent)\n\nThe download will take a while, as the file is large. Get some \u2615 in the meantime.\n\n> \u2139 The snapshot archive is \\~750 GB; if you don\u2019t have enough space, consider extracting to an external storage.\n\nTo extract the file execute:\n\n```\ntar -xvzf khala-node-snapshot-2022-04-30.tar.gz\n```\n\nThe extraction will take a while to complete as well. After extraction, you should get a folder named `khala-node`. You can list your files with `ls` to verify where you extracted the snapshot.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e8c9865-fede-4c00-940d-829fc53b894a": {"__data__": {"id_": "0e8c9865-fede-4c00-940d-829fc53b894a", "embedding": null, "metadata": {"file_path": "./phala_dist/personal.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f390dc4d-8290-4846-a172-3a6ff8f640f2", "node_type": "4", "metadata": {}, "hash": "e6e8f177e80b5283f8abfbd880c8c84b439e118bf424c79f6d22c1c44a8577a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7f87100-9dd8-4c1c-9db8-e4f0de49df2b", "node_type": "1", "metadata": {}, "hash": "435ed87920f504961a732821b51984342903db46099dbba6fe94e2012e4031b9", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: personal namespace\nsidebar_label: personal\nsidebar_position: 6\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### personal_importRawKey\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `keyData`: *string* (hex data)\n\n2. `passphrase`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_importRawKey\",\n      \"params\": [keyData, passphrase]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### personal_listAccounts\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_listAccounts\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### personal_lockAccount\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7f87100-9dd8-4c1c-9db8-e4f0de49df2b": {"__data__": {"id_": "f7f87100-9dd8-4c1c-9db8-e4f0de49df2b", "embedding": null, "metadata": {"file_path": "./phala_dist/personal.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f390dc4d-8290-4846-a172-3a6ff8f640f2", "node_type": "4", "metadata": {}, "hash": "e6e8f177e80b5283f8abfbd880c8c84b439e118bf424c79f6d22c1c44a8577a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e8c9865-fede-4c00-940d-829fc53b894a", "node_type": "1", "metadata": {}, "hash": "f9f1d892ddec26e973814d9a6c603cce659601b28477997391c45749235fdeb4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "366df3c8-e70a-4b53-afd6-f21ce07e312b", "node_type": "1", "metadata": {}, "hash": "245cb72d918818c0749b18bfec286a11b5c53b6f0d00558b4dbc4531af05a93d", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_lockAccount\",\n      \"params\": [address]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### personal_newAccount\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `passphrase`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_newAccount\",\n      \"params\": [passphrase]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### personal_unlockAccount\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `passphrase`: *string*", "mimetype": "text/plain", "start_char_idx": 1336, "end_char_idx": 2465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "366df3c8-e70a-4b53-afd6-f21ce07e312b": {"__data__": {"id_": "366df3c8-e70a-4b53-afd6-f21ce07e312b", "embedding": null, "metadata": {"file_path": "./phala_dist/personal.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f390dc4d-8290-4846-a172-3a6ff8f640f2", "node_type": "4", "metadata": {}, "hash": "e6e8f177e80b5283f8abfbd880c8c84b439e118bf424c79f6d22c1c44a8577a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7f87100-9dd8-4c1c-9db8-e4f0de49df2b", "node_type": "1", "metadata": {}, "hash": "435ed87920f504961a732821b51984342903db46099dbba6fe94e2012e4031b9", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_unlockAccount\",\n      \"params\": [address, passphrase]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 2468, "end_char_idx": 2917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f3a45c1-c3a9-4dd8-8ed6-4145e8c1393e": {"__data__": {"id_": "4f3a45c1-c3a9-4dd8-8ed6-4145e8c1393e", "embedding": null, "metadata": {"file_path": "./phala_dist/transaction-costs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e0fc43dd-da56-44ee-9b12-882b23506d9f", "node_type": "4", "metadata": {}, "hash": "a3aee2faa5dd5a8fd4d554af25246b8561648a3e7065f09aa24343daa9e955c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef8e75fd-0b02-41c8-ad61-cf5897d060af", "node_type": "1", "metadata": {}, "hash": "4ddeabd3f7a1e5dd8edac1d0d80afd0194ff604547b51d2c11d8976ba9736fba", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: >-\n  This page describes the costs to interact with low level Phat Contract (rust\n  sdk). It may not reflect that in a higher level (e.g. Javascript-based Phat\n  Contract).\n---\n\n# Transaction Costs\n\nThere are two types of the costs when interacting with a low level Phat Contract. The both costs may occur in transaction execution. Query is always free to user.\n\n## Concepts\n\n### Storage Deposit\n\nStorage Deposit is charged for every added byte stored in the cluster (contract storage). Correspondingly, when you free some bytes from the storage, you can get refunded at the same rate. Now the rate is fixed at around 1 PHA per kbyte. (See [#parameters](transaction-costs.md#parameters \"mention\") for details.)\n\n### Ink Gas Fee\n\nThe gas fee is charged for every gas used to execute on-chain transaction. Typically a transaction takes less than 1 PHA.\n\nLike EVM, the executed code in a transaction is measured by the virtual machine in a unit called `gas`. (`weight` in ink terminology). You must pay the gas fee calculated by `gas * gasPrice` to execute the transaction. Currently, `gasPrice` is a constant. (See [#parameters](transaction-costs.md#parameters \"mention\") for details.)\n\n### Fee Structure\n\nThe total fee required is defined by the sum of the gas fee and the storage deposit (could be negative):\n\n```\nfee = gas * gasPrice + storageDeposit\n```\n\n### Storage Deposit Limit and Gas Limit\n\nIt's hard to predict how much fee will be charged before actually executing the transaction. So Phat Contract requires you to specify a limit to the gas and Storage Deposit. It ensures you will never pay more than expectation.\n\nYou need to specify `gasLimit` and `storageDepositLimit` when sending a transaction, which can be estimated by an estimation API. Then the max fee is defined below:\n\n```\nmaxFee = gasLimit * gasPrice + storageDepositLimit\n```\n\nThe VM charges you `maxFee` before executing a transaction. Once executed, the VM will refund the remaining fee to your account (`maxFee - fee`).  If the transaction runs out of the gas or Storage Deposit, the transaction will be revered with an error (`OutOfGas` or `StorageDepositLimitExhausted`).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef8e75fd-0b02-41c8-ad61-cf5897d060af": {"__data__": {"id_": "ef8e75fd-0b02-41c8-ad61-cf5897d060af", "embedding": null, "metadata": {"file_path": "./phala_dist/transaction-costs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e0fc43dd-da56-44ee-9b12-882b23506d9f", "node_type": "4", "metadata": {}, "hash": "a3aee2faa5dd5a8fd4d554af25246b8561648a3e7065f09aa24343daa9e955c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4f3a45c1-c3a9-4dd8-8ed6-4145e8c1393e", "node_type": "1", "metadata": {}, "hash": "582755918ae6146fe1881ff3a138cc9465a987475033b90f090b191fb6894720", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e5dcc3fa-8382-4355-a28f-87b7b84e24fe", "node_type": "1", "metadata": {}, "hash": "03e6b4ff244aecbc19f706f08f5efaf8f9d0d3009cc5923843e8fe4f197e5ed7", "class_name": "RelatedNodeInfo"}}, "text": "## Transaction\n\nA typical transaction takes less than 1 PHA, unless you store large chunk of data in the storage.\n\nA regular transaction may involve gas fee and storage deposit. The gas fee (`gas * gasPrice`) is usually less than 1 PHA. The storage deposit fee is a bit more complex.\n\nWhen you add an entry to the contract storage like below, you will be charged a small storage deposit. It takes a few bytes to store the key and the value.\n\n```rust\nfn set(&mut self) {\n  // If the kv takes 50 bytes storage, the deposit would be 0.05 PHA.\n  self.a_map.insert(\"key\".to_string(), \"value\".to_string())\n}\n```\n\nHowever, you may also remove the storage item like below. In this case, the caller will get a refund as the storage deposit.\n\n```rust\nfn clear(&mut self) {\n  // If the kv takes 50 bytes storage, the refund would be 0.05 PHA.\n  self.a_map.remove(\"key\".to_string())\n}\n```\n\n## Contract Deployment\n\nDeploy (instantiate in ink terminology) a contract may take anywhere from <0.1 PHA to >1000 PHA.\n\nIn low level Phat Contract, you need to upload the WASM code to the storage before instantiating it. Usually the uploading step takes much more than instantiation.\n\n{% hint style=\"info\" %}\nThe uploaded code takes twice the space in the storage. For example, if you upload a 500kb WASM file, it stores around 1mb file in the storage. You will need to pay 1000 PHA as the storage deposit.\n{% endhint %}\n\nOnce the code is uploaded, you can instantiate the contract with the code hash. The VM will call the constructor function to initialize the contract. This step happens in the same way as executing a transaction. It will charge you gas fee as usual. It may also charge you additional storage deposit, if you write to the storage in the constructor.\n\nTypically, you pay a relatively large storage deposit for uploading, and a small gas fee for instantiating. However, sometimes you may deploy existing contracts. So you only pay a minor fee in the instantiating step, not the uploading step.", "mimetype": "text/plain", "start_char_idx": 2170, "end_char_idx": 4161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5dcc3fa-8382-4355-a28f-87b7b84e24fe": {"__data__": {"id_": "e5dcc3fa-8382-4355-a28f-87b7b84e24fe", "embedding": null, "metadata": {"file_path": "./phala_dist/transaction-costs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e0fc43dd-da56-44ee-9b12-882b23506d9f", "node_type": "4", "metadata": {}, "hash": "a3aee2faa5dd5a8fd4d554af25246b8561648a3e7065f09aa24343daa9e955c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef8e75fd-0b02-41c8-ad61-cf5897d060af", "node_type": "1", "metadata": {}, "hash": "4ddeabd3f7a1e5dd8edac1d0d80afd0194ff604547b51d2c11d8976ba9736fba", "class_name": "RelatedNodeInfo"}}, "text": "{% hint style=\"info\" %}\nIt's possible to free the storage deposit for uploaded contracts, but it's a rare case in the reality. Every uploaded code has a reference counter. If there's no contract instance referring your code, you can get the storage deposit back. To terminate a contract to reduce the reference, call `env.terminate_contract()` ([doc](https://docs.rs/ink\\_env/latest/ink\\_env/fn.terminate\\_contract.html))\n{% endhint %}\n\n## Parameters\n\n```\ngasPrice = 5\ndepositPerByte = 1 * PHA/KB = 1.000953674316 PHA\ndepositPerItem = 0.030517578125 PHA\n```", "mimetype": "text/plain", "start_char_idx": 4163, "end_char_idx": 4720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7d9c043-ba4c-4c1a-9d27-4d9efea99fd8": {"__data__": {"id_": "c7d9c043-ba4c-4c1a-9d27-4d9efea99fd8", "embedding": null, "metadata": {"file_path": "./phala_dist/connect-to-smart-contracts.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "478e42b0-199a-43e8-b0c6-92be0354730f", "node_type": "4", "metadata": {}, "hash": "4448b6f6a3fd65e0798406436350649782f6a3b58f08a224d4ce9d6a409f38e6", "class_name": "RelatedNodeInfo"}}, "text": "# Connect to Smart Contracts\n\n:construction\\_site: Work In Progress", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 67, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9108a664-bdbc-44ba-b55d-f3793ee8db41": {"__data__": {"id_": "9108a664-bdbc-44ba-b55d-f3793ee8db41", "embedding": null, "metadata": {"file_path": "./phala_dist/endpoints.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b78b7c0b-1e1d-4690-a1fd-cfd60e3921ed", "node_type": "4", "metadata": {}, "hash": "7f3affe1f6f6c0b6879db395ad6f04224b2e3b7b6709a34cc409982ae4aff320", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "003cf2a7-66a6-43ac-8724-fa3613095ab7", "node_type": "1", "metadata": {}, "hash": "3bb415a6247ed5c17d09b3bccb1fd8fdae7a47f5f98f191deb751d2b7f5680d1", "class_name": "RelatedNodeInfo"}}, "text": "# Available Phala Chains\n\n> Testnet can be updated and restarted any time, so do not store sensitive data in it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "003cf2a7-66a6-43ac-8724-fa3613095ab7": {"__data__": {"id_": "003cf2a7-66a6-43ac-8724-fa3613095ab7", "embedding": null, "metadata": {"file_path": "./phala_dist/endpoints.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b78b7c0b-1e1d-4690-a1fd-cfd60e3921ed", "node_type": "4", "metadata": {}, "hash": "7f3affe1f6f6c0b6879db395ad6f04224b2e3b7b6709a34cc409982ae4aff320", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9108a664-bdbc-44ba-b55d-f3793ee8db41", "node_type": "1", "metadata": {}, "hash": "1549fbbf15858a98ff90f296d365a76ac9c4bab9a505d20060d8fc1d14fadd57", "class_name": "RelatedNodeInfo"}}, "text": "<table><thead><tr><th align=\"center\">Chain</th><th width=\"158\" align=\"center\">Type</th><th width=\"272.40106201171875\" align=\"center\">RPC Endpoint</th><th align=\"center\">Cluster</th><th width=\"192\" align=\"center\">Worker Endpoint</th></tr></thead><tbody><tr><td align=\"center\"><a href=\"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpoc5.phala.network%2Fws#/explorer\">PoC-5</a></td><td align=\"center\"><strong>(DEPRECATED)</strong><br>Testnet</td><td align=\"center\">wss://poc5.phala.network/ws<br>https://poc5.phala.network/rpc</td><td align=\"center\">0x1</td><td align=\"center\">https://poc5.phala.network/tee-api-1/</td></tr><tr><td align=\"center\"><a href=\"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpoc6.phala.network%2Fws#/explorer\">PoC-6</a></td><td align=\"center\">Testnet</td><td align=\"center\">wss://poc6.phala.network/ws<br>https://poc6.phala.network/rpc</td><td align=\"center\">0x1</td><td align=\"center\">https://phat-cluster-us.phala.network/poc6/pruntime/0xac5087e0</td></tr><tr><td align=\"center\"><a href=\"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fapi.phala.network%2Fws#/explorer\">Phala</a></td><td align=\"center\">Mainnet</td><td align=\"center\">wss://api.phala.network/ws<br>https://api.phala.network/rpc</td><td align=\"center\">0x1</td><td align=\"center\"><p>https://phat-cluster-ca.phala.network/pruntime/0x04169c50<br></p><p><code>many other workers</code></p></td></tr></tbody></table>", "mimetype": "text/plain", "start_char_idx": 114, "end_char_idx": 1514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3499371-3068-43fc-8f8e-4b0993673eed": {"__data__": {"id_": "a3499371-3068-43fc-8f8e-4b0993673eed", "embedding": null, "metadata": {"file_path": "./phala_dist/examples-of-delegation.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ddce7c2f-8e20-41ac-a33e-681b93f44808", "node_type": "4", "metadata": {}, "hash": "2bb205976334d677e80f912f7c3292c9473207d22f9c4fb703fbdb2e5db3429b", "class_name": "RelatedNodeInfo"}}, "text": "# Examples of Delegation\n\nAfter the explanation of the complex underlying mechanism, we use two examples to demonstrate the real-world cases of delegation.\n\n### Example 1: Reward Distribution <a href=\"#example-1-reward-distribution\" id=\"example-1-reward-distribution\"></a>\n\n<figure><img src=\"../../../.gitbook/assets/reward-distribution.png\" alt=\"\"><figcaption></figcaption></figure>\n\nStakePool 1 has two delegators who have delegated 1000 PHA and 2000 PHA respectively.\n\nThe Owner stakes 2,500 PHA on Worker A and starts running.\n\nThe StakePool commission set by the owner is 40%. After a period of time, Worker A mined 10 PHA. 20% of it will be handed over to the Treasury, which is 2 PHA, and then 40% of the commission, which is 3.2 PHA, is left to the owner. The rest is distributed to the delegators according to the delegation. 1.6 PHA is distributed to Delegator A and 3.2 PHA is distributed to Delegator B.\n\n## Example 2: Reward Withdraw Timetable\n\n<figure><img src=\"../../../.gitbook/assets/reward-withdraw.png\" alt=\"\"><figcaption></figcaption></figure>\n\nThis begins with 1000 PHA Free Delegation in the StakePool.\n\n* 1st Day: Delegator A initiates a withdrawal application of 5000 PHA. Among them, 1000 PHA is immediately submitted, and the remaining 4000 PHA enters the withdrawal queue;\n* 2nd Day: Delegator B delegates 500 PHA. Then this 500 PHA will be withdrawn to Delegator A;\n* 3rd Day: Worker A in the StakePool completed shutdown and released 3000 PHA, which was withdrawn to Delegator A;\n* 8th Day: It has been 7 days since Delegator A applied for withdrawal, and his withdrawal had not been completed. At this time, all workers in the StakePool will be forced to stop;\n* 15th day: All workers in the Stakepool shut down. The withdrawal of Delegator A is then all satisfied.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1795, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b908496-e683-4d3b-8bb0-0ad996a67496": {"__data__": {"id_": "9b908496-e683-4d3b-8bb0-0ad996a67496", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd2e8181-040b-4fa1-abef-ebdd10f12529", "node_type": "1", "metadata": {}, "hash": "c92b691cccd562ded8ff658719434d5967f3a88f9c1b624e24f9d9be884ba9a5", "class_name": "RelatedNodeInfo"}}, "text": "# Staking Mechanism\n\n## Introduction <a href=\"#introduction\" id=\"introduction\"></a>\n\nUnlike Polkadot or other Proof-of-Stake consensus systems, Phala can manage as many as one million CPU cores from over 100k nodes, which requires our staking mechanism to outperform existing PoS in both performance and efficiency. That\u2019s why we propose **Stake Delegation**, which introduces an extra role of StakePool into our system to connect computing nodes with PHA holders. Anyone can create a StakePool, and a PHA holder can delegate their PHA to the pool. Then the pool Owner can manage and stake for any Workers belonging to the pool.\n\nTo secure the cloud of workers and the assigned jobs, the network will set a [Confidence Level](../run-workers-on-khala/solo-scripts-guidance/worker-confidence-level.md)[ ](../run-workers-on-khala/solo-scripts-guidance/worker-confidence-level.md)for each worker\u2019s CPU and require Staking (a delegation) to mine. Each worker can only earn value V if it first stakes several PHA tokens based on its CPU score, after which it can enter the staking system and start supplying compute power.\n\nSuppose a worker misbehaves or fails to respond. In that case, it will be punished by slashing the V, which strongly incentivizes participants to ensure their workers are running properly and disincentivizes attempts to cheat.\n\n## Roles & Relationships <a href=\"#roles--relationships\" id=\"roles--relationships\"></a>\n\n### Roles <a href=\"#secure-enclave-mining-roles\" id=\"secure-enclave-mining-roles\"></a>\n\n| **Role**      | **Description**                                                                                                                                                                                                                                                                |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Worker**    | A CPU. Responsible for off-chain computation in the Phala network (in a private and secure enclave).                                                                                                                                                                           |\n| **Operator**  | Authorized by a Worker to act as administrator, responsible for managing the workers.                                                                                                                                                                                          |\n| **PoolOwner** | The account which creates the StakePool. A StakePool manager who is responsible for the management of the pool and all the Workers bound to it.                                                                                                                                |\n| **StakePool** | A pool of stake from a group of parties backing a group of Workers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3063, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd2e8181-040b-4fa1-abef-ebdd10f12529": {"__data__": {"id_": "dd2e8181-040b-4fa1-abef-ebdd10f12529", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b908496-e683-4d3b-8bb0-0ad996a67496", "node_type": "1", "metadata": {}, "hash": "1063040307f65544d1a95a459cef313c4f1a3ebadb58d3f23152be307f35a1d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2eba023d-a30c-47cd-a835-1366de5b8eb7", "node_type": "1", "metadata": {}, "hash": "67ec2613f0b9091af987af8fb4e8c7bc1a8f631b50fa2ef798035d58f42e7328", "class_name": "RelatedNodeInfo"}}, "text": "It provides a middle layer of funds flowing between Workers and Delegators. It also provides on-chain management of staking. (Each StakePool is identified by a PID automatically generated by the system) |\n| **Delegator** | A PHA-holding address. It can participate in Phala Staking through **Stake Delegation.**                                                                                                                                                                                       |\n\n### Worker and StakePool <a href=\"#worker-and-stakepool\" id=\"worker-and-stakepool\"></a>\n\n<figure><img src=\"../../.gitbook/assets/staking.001.gif\" alt=\"\"><figcaption><p>Figure 1</p></figcaption></figure>\n\nAs shown in the initial image of Figure 1 above,\n\n* Owner-A creates Worker {A, B, C, D};\n* Owner-A creates Pool-1;\n* Owner-B creates Pool-2;\n\nIllustrated in the secondary visualization of Figure 1, a StakePool can add or manage a Worker only if the Operator of the Worker is the Owner of the pool. In this case,\n\n* Since Owner-A is both the Owner of Pool-1 and the Operator of Worker {A, B, C, D}, Pool-1 can bind Worker {A, B, C, D} to it, and Pool-1 can stake its PHA tokens for these Workers;\n* Owner-B is the Owner of Pool-2, while Pool-2 cannot add or manage any one of Worker {A, B, C, D} since Owner-B is not their Operator;\n\n> **Other cases:**\n>\n> * After Worker-A authorized Owner-A as an Operator, it cannot authorize Owner-B at the same time.", "mimetype": "text/plain", "start_char_idx": 3064, "end_char_idx": 4518, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2eba023d-a30c-47cd-a835-1366de5b8eb7": {"__data__": {"id_": "2eba023d-a30c-47cd-a835-1366de5b8eb7", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd2e8181-040b-4fa1-abef-ebdd10f12529", "node_type": "1", "metadata": {}, "hash": "c92b691cccd562ded8ff658719434d5967f3a88f9c1b624e24f9d9be884ba9a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ecf2a68d-0115-416e-b040-b470d054c6d4", "node_type": "1", "metadata": {}, "hash": "60a830c7030c2f2685a580b05f0af1d2da03d8229db6c40b9032357652c78b3f", "class_name": "RelatedNodeInfo"}}, "text": "If Worker-A wants to transfer its control to Owner-B, it must first stop mining for Owner-A;\n> * An ownership transfer of a StakePool is currently not supported;\n\n### Delegator and Worker <a href=\"#delegator-and-worker\" id=\"delegator-and-worker\"></a>\n\n<figure><img src=\"../../.gitbook/assets/staking.003.gif\" alt=\"\"><figcaption><p>Figure 2</p></figcaption></figure>\n\nIn the baseline situation, Figure 2 shows the relationship between Worker, StakePool, and Delegator:\n\n* A StakePool can add and manage Workers;\n* A Delegator delegates his/her PHA tokens to the StakePool;\n* The StatePool stakes the PHA tokens from the Delegators for its Workers;\n\nIt is worth noting that during the staking, all the PHA tokens are kept at Delegators' addresses, and no transfer will occur.\n\nFigure 2, its secondary state, shows the full lifecycle of our mining process:\n\n1. Pool-1 is created, and it adds Worker {A, B, C, D};\n2. A PHA holder delegates his/her PHA tokens to Pool-1;\n3. Pool-1 stakes Delegator\u2019s PHA from its Workers;\n4. The Workers starting mining;\n5. In each block, Phala Blockchain will reward all the StakePools according to their shares of computing power;\n6. Pool-1 will divide its rewards into two parts according to its Commission rate: one for Delegators and the other for the pool Owner;\n\n## Commission <a href=\"#commission\" id=\"commission\"></a>\n\nTo avoid the case that many Workers cannot start mining for insufficient staking, we create StakePool to enable Delegators to delegate their PHA tokens to the StakePool and stake for Workers. A StakePool needs to set up two parameters for the reward distribution:\n\n| Parameter  | Full Name       | Meaning                                                                                                 |\n| ---------- | --------------- | ------------------------------------------------------------------------------------------------------- |\n| Commission | Commission Rate | The commission rate of the StakePool.The commission portion is deposited into the pool\u2019s Owner address. |\n| Cap        | Capacity        | The capacity of the PHA tokens in the StakePool.", "mimetype": "text/plain", "start_char_idx": 4519, "end_char_idx": 6638, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ecf2a68d-0115-416e-b040-b470d054c6d4": {"__data__": {"id_": "ecf2a68d-0115-416e-b040-b470d054c6d4", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2eba023d-a30c-47cd-a835-1366de5b8eb7", "node_type": "1", "metadata": {}, "hash": "67ec2613f0b9091af987af8fb4e8c7bc1a8f631b50fa2ef798035d58f42e7328", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a5b7d2a-0fe6-4773-a4dd-d35699ba31fe", "node_type": "1", "metadata": {}, "hash": "9de8f6b16c386a92d8e9547687145ad47cc814249874a1308ff60d488d36dcf8", "class_name": "RelatedNodeInfo"}}, "text": "|\n\nThe rewards for the Owner and Delegators can be calculated by:\n\n* Owner Rewards = StakePool Rewards \u00d7 Commission\n* Delegator-A Rewards = StakePool Rewards \u00d7 (1 - Commission) \u00d7 Delegator-A\u2019s staking / All staking in StakePool\n\n> * If an Owner stakes to the pool, he/she is treated as a normal Delegator;\n> * All the staking in the pool can be divided into _deposit_ and _free_;\n\nAfter Delegators delegate their tokens to the pool, there are two more parameters:\n\n| Parameter       | Full Name       | Meaning                                                                                                                                      |\n| --------------- | --------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| Cap Gap         | Capacity Gap    | The difference between Cap and the real amount of delegated tokens. It shows the number of tokens that can be further delegated to the pool. |\n| Free Delegation | Free Delegation | The difference between the amount of delegated tokens and the ones that have been staked. It shows the free tokens which can be used.        |\n\nWhen there are free tokens in a pool, its Owner has multiple choices:\n\n* Add more Workers;\n* Overstake for its Workers (to change the staking of a Worker requires it to stop mining first, and this can cause a drop in value $V$);\n* Just keep the free tokens in case of Delegators' withdrawal;\n\n## Staking <a href=\"#staking\" id=\"staking\"></a>\n\n### Case 1: Insufficient Staking <a href=\"#case-1-insufficient-staking\" id=\"case-1-insufficient-staking\"></a>\n\n<figure><img src=\"../../.gitbook/assets/staking.005.png\" alt=\"\"><figcaption><p>Figure 3</p></figcaption></figure>\n\nAssuming Worker-A and Worker-B require staking of 2000 PHA, respectively. And Worker-C and Worker-C require staking of 3000 PHA, respectively.", "mimetype": "text/plain", "start_char_idx": 6694, "end_char_idx": 8594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a5b7d2a-0fe6-4773-a4dd-d35699ba31fe": {"__data__": {"id_": "7a5b7d2a-0fe6-4773-a4dd-d35699ba31fe", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ecf2a68d-0115-416e-b040-b470d054c6d4", "node_type": "1", "metadata": {}, "hash": "60a830c7030c2f2685a580b05f0af1d2da03d8229db6c40b9032357652c78b3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74906a56-147b-442e-a6a4-af801344e1e2", "node_type": "1", "metadata": {}, "hash": "d02b1f35ea92bafd6dae112ba65e2be651ffd1f7f941a408bfb5548ed369f3f9", "class_name": "RelatedNodeInfo"}}, "text": "If Delegators stake 7000 PHA in total to the StakePool:\n\n* Since all the Workers in Pool-1 require a minimum total staking of 10000 PHA, the amount of PHA in the pool is not enough for all the Workers to start mining;\n* Pool-1 could choose to only start Worker {A, B, C};\n\n### Case 2: Commission Setup and Reward Distribution <a href=\"#case-2-commission-setup-and-reward-distribution\" id=\"case-2-commission-setup-and-reward-distribution\"></a>\n\n<figure><img src=\"../../.gitbook/assets/staking.007.gif\" alt=\"\"><figcaption><p>Figure 4</p></figcaption></figure>\n\n**Scenario 1 in Figure 4** shows the whole process of reward distribution and the commission rate\u2019s effect on it:\n\n1. Pool-1 is created, and it adds Worker {A, B, C, D} with a minimum total staking of 10000 PHA. Its Commission is set to 60%;\n2. 5 Delegators each delegates 1400 PHA to the pool. Now there are 7000 PHA in the pool;\n3. Pool-1 stakes 7000 PHA for the Worker {A, B, C}, and Worker-D has no staking since there are not enough PHA;\n4. Worker {A, B, C} start mining;\n5. Phala Blockchain rewards 10 PHA to Pool-1 for its computing power;\n6. Pool-1 divides its rewards into two parts according to the 60% Commission: 4 PHA is distributed equally to the 5 Delegators, with 0.8 PHA for each; 6 PHA to the pool Owner;\n\n**Scenario 2 in Figure 4** shows the case of reward distribution when there are Free Delegation since the delegated tokens are more than those that have been staked:\n\n1. Pool-1 is created, and it adds Worker {A, B, C, D} with a minimum total staking of 10000 PHA. Its Commission is set to 60%;\n2. 5 Delegators each delegate 1400 PHA to the pool, and one more Delegator-Rich delegates 5000 PHA.", "mimetype": "text/plain", "start_char_idx": 8595, "end_char_idx": 10271, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74906a56-147b-442e-a6a4-af801344e1e2": {"__data__": {"id_": "74906a56-147b-442e-a6a4-af801344e1e2", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a5b7d2a-0fe6-4773-a4dd-d35699ba31fe", "node_type": "1", "metadata": {}, "hash": "9de8f6b16c386a92d8e9547687145ad47cc814249874a1308ff60d488d36dcf8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d92d0eae-ea83-46d8-94f2-2ebd6064194e", "node_type": "1", "metadata": {}, "hash": "787002943f2ce50ba53bf0aebfca74c7f75647eeff3c7db24f656d44ae777393", "class_name": "RelatedNodeInfo"}}, "text": "Now there are 12000 PHA in the pool;\n3. Pool-1 only stakes the necessary amount of tokens for each Worker (10000 PHA in total), and leaves 2000 PHA Free Delegation;\n4. Worker {A, B, C, D} start mining;\n5. Phala Blockchain rewards 10 PHA to Pool-1 for its computing power;\n6. Pool-1 divides its rewards into two parts according to the 60% Commission: 4 PHA is distributed to the Delegators, with 0.47 PHA for normal Delegator and 1.6 PHA for Delegator-Rich;\n7. 6 PHA is rewarded to the pool Owner;\n\n## Exit Staking <a href=\"#exit-staking\" id=\"exit-staking\"></a>\n\nIf the Owner and Delegators want to quit mining and withdraw their own staked PHA, they first suspend mining. After the request is initiated, the staked funds will undergo a 7-day freeze period in the StakePool, after which the balance will be unfrozen and returned. The Owner cannot withdraw other Delegators' deposits.\n\n<figure><img src=\"../../.gitbook/assets/staking.008.gif\" alt=\"\"><figcaption><p>Figure 5</p></figcaption></figure>\n\nAs shown in the first scenario in Figure 5, if a Delegator sends a withdrawal request, and the amount he requests is less than the Free Delegation in the pool, gets his funds back.\n\nWhile if the requested amount is larger than the Free Delegation, he can only get the Free Delegation and has to wait for the rest to be available.\n\nIn the second scenario in Figure 5, the Delegator wants to withdraw 4000 PHA; while there are only 2000 PHA Free Delegation in the pool, he will immediately get 2000 PHA and needs to wait for the rest of 2000 PHA.\n\nAt this time, there is a funding gap of 2000 PHA, and the Owner of Pool-1 has two choices:\n\nIn the third scenario in Figure 5, if no extra PHA is delegated to the pool within seven days, then all its Workers will be forced to stop mining and enter a 7-day freeze period. This freeze period cannot be interrupted by anyone.", "mimetype": "text/plain", "start_char_idx": 10272, "end_char_idx": 12139, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d92d0eae-ea83-46d8-94f2-2ebd6064194e": {"__data__": {"id_": "d92d0eae-ea83-46d8-94f2-2ebd6064194e", "embedding": null, "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd", "node_type": "4", "metadata": {}, "hash": "bf2e31383d4a6e502b5e37f455796b9d2077fd225b1cfa6a7f0dce5f5d47d8a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74906a56-147b-442e-a6a4-af801344e1e2", "node_type": "1", "metadata": {}, "hash": "d02b1f35ea92bafd6dae112ba65e2be651ffd1f7f941a408bfb5548ed369f3f9", "class_name": "RelatedNodeInfo"}}, "text": "Therefore, after seven days, the withdrawal request will be fulfilled.\n\nAs shown in the fourth scenario in Figure 5, within seven days, if additional PHA is delegated to the pool or workers stop mining and release the staking, then this Free Delegation will be sent to the owed Delegator until his withdrawal request is fulfilled.\n\n### How to reclaim <a href=\"#how-to-reclaim\" id=\"how-to-reclaim\"></a>\n\n{% embed url=\"https://youtu.be/U0yJ0SqR5hg?list=PLdAYriWvzwzqDXUp226VGVOntofoG5KRq\" %}\n\n## Summary <a href=\"#summary\" id=\"summary\"></a>\n\n* A Delegator can exit staking in at most 14 days;\n* The Owner of the StakePool should take care of the Free Delegation, and introduce extra delegation or reduce mining Workers as needed. Or all the Workers in the pool can be forced to stop mining.", "mimetype": "text/plain", "start_char_idx": 12140, "end_char_idx": 12928, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be9b8a15-ffab-4aae-9314-475b6626728c": {"__data__": {"id_": "be9b8a15-ffab-4aae-9314-475b6626728c", "embedding": null, "metadata": {"file_path": "./phala_dist/agent-wars-introduction.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "849e98cc-dd38-4186-9d0c-dd860dca8a7e", "node_type": "4", "metadata": {}, "hash": "38e36e5076401691cc78801d8f80cb46fe25c4ead86cabad8313c3dc81a3df20", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83d\udcdc Concepts\n\n## What is Agent Wars?\n\nAgent Wars is the first experiment on combining tokenomics and AI agents.\n\nAgent Wars enables anyone, even non-engineers, to create their own agent (a unique avatar tied to an X account). Importantly, each agent is born with default tokenomics, allowing the agent's creator and contributors to benefit from the agent's improvement.\n\nIn Agent Wars, we offer a default tokenomics that facilitates staking-based DAO governance on the agents. Briefly, each agent has keys as shares which users can buy and sell. Owning at least one key allows you to chat with the agent.\n\nKey to note is that all agent management is based on on-chain voting weighted by key numbers.\n\nThe key price increases as more keys are sold, thereby raising the value of existing keys. Hence, the most efficient way for key owners to profit is by improving their agents to attract more buyers.\n\n<figure><img src=\"../.gitbook/assets/AgentWars (1).png\" alt=\"\" width=\"563\"><figcaption></figcaption></figure>\n\n## How Does it Work?\n\nAgent Wars is consisted of two parts: the on-chain smart contracts that defines the tokenomics, and the off-chain agents that are fully controlled by the tokenomics contracts.\n\nThe enforcement of the tokenomics over agents is achieved by running agents on trustless infrastructure of Phala. With its secure off-chain workers, we can ensure the privacy of the agent setup (which is the soul of the agent), and each agent is correctly token-gated given the key distribution.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4fbd0ce-8ddb-46b6-b703-a856617d3f8d": {"__data__": {"id_": "a4fbd0ce-8ddb-46b6-b703-a856617d3f8d", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e7b0c66-22c3-4fba-a290-868185443897", "node_type": "1", "metadata": {}, "hash": "42ad75e75e6f6b14fa1248734074f032b371f918bfc6166dc59e3777116a7d85", "class_name": "RelatedNodeInfo"}}, "text": "# PRBv2 Deployment Guide\n\n## Now PRBv2 is out of date. Please use PRBv3 <a href=\"#understanding-runtime-bridge\" id=\"understanding-runtime-bridge\"></a>\n\n## Understanding Runtime Bridge <a href=\"#understanding-runtime-bridge\" id=\"understanding-runtime-bridge\"></a>\n\nFollowing services make a Runtime Bridge setup work:\n\n* Data Provider (a.k.a `data_provider`):\n  * Fetches and analyses block data from Substrate,\n  * Makes pre-encoded blobs that `pRuntime` consumes,\n  * Serves pre-encoded blobs for lifecycle managers;\n* Lifecycle Manager (a.k.a `lifecycle`):\n  * Sends block data blobs to workers(`pRuntime`),\n  * Registers worker on the chain,\n  * Starts mining with configured stake amount,\n  * Provides API to query workers and pools.\n* Trader (a.k.a `trade`):\n  * Sends transactions from queue to the chain.\n\nEvery service above uses [Runtime Bridge Walkie](https://github.com/Phala-Network/runtime-bridge-walkie) as a communication method built on `libp2p` and Protocol Buffer. On the first startup of each service, an RSA key pair will be generated(by default saved in `/var/data/keys/id`) to be used as the identity in the `libp2p` protocol. The current identity public key can be found in the stdout of running service by searching `Got my peer id` in the base58 format. And for lifecycle managers, the key pair is used to encrypt critical information. **DO BACK THE KEYS UP AND KEEP THE KEYS SAFE.**\n\nWhen the lifecycle manager has finished the initial blob synchronization, it will attempt to sync messages in the message queue between the `pRuntime` and the blockchain. After that, it will try to register workers and do the \u201cstart mining\u201d operation on the blockchain.\n\nExtrinsics (transactions) shall be sent to the blockchain for the operation mentioned above. To achieve this, the lifecycle manager shall push the extrinsics data to the trader queue(currently maintained with Redis). The trader will grab jobs from the queue and report the extrinsic results back.\n\nRuntime Bridge doesn\u2019t require a SGX environment.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e7b0c66-22c3-4fba-a290-868185443897": {"__data__": {"id_": "3e7b0c66-22c3-4fba-a290-868185443897", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4fbd0ce-8ddb-46b6-b703-a856617d3f8d", "node_type": "1", "metadata": {}, "hash": "f4ddfff7f51bf78fae80b7af3f0389e51b752b6eeb57bf04e1d5280e10da163a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0f85750-886e-4ed5-b9f1-0424913b2c7f", "node_type": "1", "metadata": {}, "hash": "c2db18134712f5f69ae1c0bca1e22006e1783b762db65a6bd6ca2e2fd996e446", "class_name": "RelatedNodeInfo"}}, "text": "### Understanding the startup process and internal dependencies <a href=\"#understanding-the-startup-process-and-internal-dependencies\" id=\"understanding-the-startup-process-and-internal-dependencies\"></a>\n\nData providers and lifecycle managers are designed to discover each other using `libp2p`. While starting the service, it connects to the blockchain then analyses the `chainIdentity` from the `parachain`, `libp2p` will be initialized with the identity key and the `chainIdentity`. After the initialization, the service should begin its work and discover other peers via mDNS as well as the bootstrap node configured.\n\nA data provider fetches data from the `parachain` and the `relaychain`(called `parent chain` in Substrate). It starts a standalone TCP server for blob synching due to the performance issue of `libp2p`, the port of which will be included in the peer handshake process.\n\nWhile starting the lifecycle manager, it connects to the Redis server for the trade queue. There should be only 1 lifecycle manager and 1 trader accessing the same Redis server. The trader paired with the lifecycle manager should use the same identity key to ensure that the trader can decrypt the private key of saved pools. While the lifecycle requires a specified Redis server to start, it doesn\u2019t require any data provider to start the service. It will wait until any valid data providers are discovered, which means it\u2019s safe to stop the data provider when the lifecycle manager running, and you can build an HA setup for data providers.\n\nData in the Redis server should never be persisted since the lifecycle manager always builds states from the blockchain and `pRuntime`. Restart the lifecycle manager, the trader, and the Redis server together when any error occurs.\n\n## Quickstart with Docker Compose <a href=\"#quickstart-with-docker-compose\" id=\"quickstart-with-docker-compose\"></a>\n\nWe recommend deploying the services with Docker Compose, to install Docker and Docker Compose, please refer to the documentation:\n\n* [Installing Docker](https://docs.docker.com/engine/install/#server)\n* [Installing Docker Compose](https://docs.docker.com/compose/install/)\n\nWe assume you have already [acknowledged the basic usage](https://docs.docker.com/compose/gettingstarted/) of Docker and Docker Compose to complete this guide.", "mimetype": "text/plain", "start_char_idx": 2030, "end_char_idx": 4350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0f85750-886e-4ed5-b9f1-0424913b2c7f": {"__data__": {"id_": "e0f85750-886e-4ed5-b9f1-0424913b2c7f", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e7b0c66-22c3-4fba-a290-868185443897", "node_type": "1", "metadata": {}, "hash": "42ad75e75e6f6b14fa1248734074f032b371f918bfc6166dc59e3777116a7d85", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8eaddc2c-fd04-40b4-bb9e-9c2d100e6370", "node_type": "1", "metadata": {}, "hash": "0446052890c253c950b6fa3f2fc07b12b3751ecd885ec013d3bdd20c3c1704bf", "class_name": "RelatedNodeInfo"}}, "text": "The `host` network driver is recommended when deploying with Docker to work with the auto discovery feature of Runtime Bridge.\n\n### Local Node <a href=\"#local-node\" id=\"local-node\"></a>\n\nEdit and save following content in `docker-compose.yml` in a directory for node deployment:\n\n```\nversion: \"3\"\nservices:\n  node:\n    image: phalanetwork/khala-node:latest\n    container_name: node\n    hostname: node\n    restart: always\n    ports:\n     - \"9933:9933\"\n     - \"9934:9934\"\n     - \"9944:9944\"\n     - \"9945:9945\"\n     - \"30333:30333\"\n     - \"30334:30334\"\n    environment:\n     - NODE_NAME=PNODE\n     - NODE_ROLE=MINER\n    volumes:\n     - /var/khala-dev-node:/root/data\n```\n\nIt\u2019s recommended to build a TCP load balancer for the node in production environment.", "mimetype": "text/plain", "start_char_idx": 4352, "end_char_idx": 5106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8eaddc2c-fd04-40b4-bb9e-9c2d100e6370": {"__data__": {"id_": "8eaddc2c-fd04-40b4-bb9e-9c2d100e6370", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0f85750-886e-4ed5-b9f1-0424913b2c7f", "node_type": "1", "metadata": {}, "hash": "c2db18134712f5f69ae1c0bca1e22006e1783b762db65a6bd6ca2e2fd996e446", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "025c3930-8363-4bb8-8766-3b2a7a348aac", "node_type": "1", "metadata": {}, "hash": "611db0cbcdd749d019ce2004a147bee9e8a1a6cddb918454d341229be5fff455", "class_name": "RelatedNodeInfo"}}, "text": "### Data Provider <a href=\"#data-provider\" id=\"data-provider\"></a>\n\nEdit and save following content in `docker-compose.yml` in another directory:\n\n```\nversion: \"3\"\n\nx-defaults: &defaults\n  volumes: &default-volume-config\n    - ./data:/var/data\n\nservices:\n  data_provider:\n    image: phalanetwork/prb:next\n    hostname: data_provider\n    network_mode: host\n    restart: always\n    volumes: *default-volume-config\n    logging:\n      options:\n        max-size: \"1g\"\n    environment:\n      - PHALA_MODULE=data_provider\n      - NODE_ENV=development\n      - PHALA_LOGGER_LEVEL=debug\n      - PHALA_PARENT_CHAIN_ENDPOINT=ws://path.to.kusama.node:9945\n      - PHALA_CHAIN_ENDPOINT=ws://path.to.khala.node:9944\n      - PHALA_WALKIE_LISTEN_ADDRESSES=/ip4/0.0.0.0/tcp/28888\n      - PHALA_BRIDGE_IDENTITY=production\n      - PHALA_LIFECYCLE_BLOB_SERVER_SESSION_MAX_MEMORY=64\n    entrypoint:\n      - \"node\"\n      - \"--trace-warnings\"\n      - \"--experimental-json-modules\"\n      - \"--es-module-specifier-resolution=node\"\n      - \"--harmony-top-level-await\"\n      - \"dist/index\"\n\n  monitor:\n    image: phalanetwork/prb-monitor:next\n    hostname: monitor\n    network_mode: host\n    environment:\n      - PTP_BOOT_NODES=/ip4/127.0.0.1/tcp/28888/peer_id_of_data_provider\n\n```\n\nRun `docker-compose up` to start the data provider, open the monitor with `http://localhost:3000` in the browser, you will see the status of the data provider even the `PTP_BOOT_NODES` has not been set properly.\n\nOne data provider can be shared by multiple lifecycle managers.", "mimetype": "text/plain", "start_char_idx": 5108, "end_char_idx": 6640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "025c3930-8363-4bb8-8766-3b2a7a348aac": {"__data__": {"id_": "025c3930-8363-4bb8-8766-3b2a7a348aac", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8eaddc2c-fd04-40b4-bb9e-9c2d100e6370", "node_type": "1", "metadata": {}, "hash": "0446052890c253c950b6fa3f2fc07b12b3751ecd885ec013d3bdd20c3c1704bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db017b93-73ac-4245-855a-ed6c84c126ee", "node_type": "1", "metadata": {}, "hash": "b1489c1a39eab2dbc342bc364aa7028f7af57e38dd00c3d3e086c9bd45a51136", "class_name": "RelatedNodeInfo"}}, "text": "### Lifecycle Manager and Trader <a href=\"#lifecycle-manager-and-trader\" id=\"lifecycle-manager-and-trader\"></a>\n\nEdit and save following content in `docker-compose.yml`:\n\n```\nversion: \"3\"\n\nx-defaults: &defaults\n  volumes: &default-volume-config\n    - ./data:/var/data\n\nservices:\n  redis-q:\n    network_mode: host\n    image: redis:alpine\n    hostname: redis-q\n    restart: always\n    logging:\n      options:\n        max-size: \"1g\"\n    command: [\"redis-server\", \"--port\", \"63792\", \"--appendonly\", \"no\", '--save', '']\n\n  lifecycle:\n    network_mode: host\n    image: phalanetwork/prb:next\n    hostname: lifecycle\n    restart: always\n    depends_on:\n      - redis-q\n    volumes: *default-volume-config\n    logging:\n      options:\n        max-size: \"1g\"\n    environment:\n      - PHALA_MODULE=lifecycle\n      - PHALA_PARENT_CHAIN_ENDPOINT=ws://path.to.kusama.node:9945\n      - PHALA_CHAIN_ENDPOINT=ws://path.to.khala.node:9944\n      - PHALA_Q_REDIS_ENDPOINT=redis://127.0.0.1:63792/\n      - PHALA_LRU_CACHE_SIZE=50\n      - PHALA_LRU_CACHE_MAX_AGE=90000\n      - PHALA_RUNNER_MAX_WORKER_NUMBER=100\n      - PHALA_PRPC_REQUEST_TIMEOUT=60000\n      - PHALA_BRIDGE_IDENTITY=production\n      - PHALA_WALKIE_LISTEN_ADDRESSES=/ip4/0.0.0.0/tcp/29888\n      - PHALA_WALKIE_BOOT_NODES=/ip4/ip.of.data.provider/tcp/28888/p2p/some_peer_id\n      - WORKER_KEEPALIVE_ENABLED=true\n      - USE_BUILT_IN_TRADER=true\n    entrypoint:\n      - \"node\"\n      - \"--trace-warnings\"\n      - \"--experimental-json-modules\"\n      - \"--es-module-specifier-resolution=node\"\n      - \"--harmony-top-level-await\"\n      - \"dist/index\"\n```\n\nRun `docker-compose up` to start the data provider, the lifecycle manager should be discovered and accessible in the monitor.", "mimetype": "text/plain", "start_char_idx": 6642, "end_char_idx": 8360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db017b93-73ac-4245-855a-ed6c84c126ee": {"__data__": {"id_": "db017b93-73ac-4245-855a-ed6c84c126ee", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "025c3930-8363-4bb8-8766-3b2a7a348aac", "node_type": "1", "metadata": {}, "hash": "611db0cbcdd749d019ce2004a147bee9e8a1a6cddb918454d341229be5fff455", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b664864c-8c4b-4fa2-8880-551b912563cf", "node_type": "1", "metadata": {}, "hash": "b394cc0ac9b38c7dd7faa8ff3d61c534eef7479792aea6bdda02a29087c4f71a", "class_name": "RelatedNodeInfo"}}, "text": "Open `http://127.0.0.1:4567` in the browser to check the queue of on-chain transactions.\n\n## Configuring Runtime Bridge <a href=\"#configuring-runtime-bridge\" id=\"configuring-runtime-bridge\"></a>\n\nServices with a Runtime Bridges setup are configured with environment variables.\n\n### Shared items <a href=\"#shared-items\" id=\"shared-items\"></a>\n\n| Name                             | Description                                                                                                                                                                                                                                                               |\n| -------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| NODE\\_ENV                        | Application environment, set to development to put the app in development mode.                                                                                                                                                                                           |\n| PHALA\\_MODULE                    | The module to start.                                                                                                                                                                                                                                                      |\n| PHALA\\_LOGGER\\_LEVEL             | Logger level, defaults to info. See https://github.com/trentm/node-bunyan for more information.                                                                                                                                                                           |\n| PHALA\\_CHAIN\\_ENDPOINT           | The WebSocket endpoint to the Substrate RPC of parachain.                                                                                                                                                                                                                 |\n| PHALA\\_PARENT\\_CHAIN\\_ENDPOINT   | The WebSocket endpoint to the Substrate RPC of relaychain(e.g. for Khala it\u2019s Kusama).                                                                                                                                                                                    |\n| PHALA\\_PEER\\_ID\\_PREFIX          | The path storing identity keys, defaults to \u2018/var/data/keys/id\u2019.                                                                                                                                                                                                          |\n| PHALA\\_WALKIE\\_LISTEN\\_ADDRESSES | The multiaddr(https://github.com/libp2p/specs/tree/master/addressing) of listen address for libp2p, defaults to \u2018/ip4/0.0.0.0/tcp/0,/ip6/::/tcp/0\u2019 which means listen to a random port on every interface. Only TCP protocol is supported. Use a comma between addresses. |\n| PHALA\\_WALKIE\\_BOOT\\_NODES       | The multiaddr list of bootstrap nodes for peer discovery, defaults to \u2018/ip4/0.0.0.0/tcp/18888,/ip6/::/tcp/28889\u2019 which means no bootstrap node. Only TCP protocol is supported. Use a comma between addresses.                                                            |\n| PHALA\\_BRIDGE\\_IDENTITY          | The bridge identity in the PRB Walkie protocol, used to specify namespace.", "mimetype": "text/plain", "start_char_idx": 8362, "end_char_idx": 11866, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b664864c-8c4b-4fa2-8880-551b912563cf": {"__data__": {"id_": "b664864c-8c4b-4fa2-8880-551b912563cf", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db017b93-73ac-4245-855a-ed6c84c126ee", "node_type": "1", "metadata": {}, "hash": "b1489c1a39eab2dbc342bc364aa7028f7af57e38dd00c3d3e086c9bd45a51136", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45adcf4d-fcb3-4848-b067-9564255eadba", "node_type": "1", "metadata": {}, "hash": "b2c9fca7f080cfd495b9979cfccc83ad0dc90b48ab6eb635ec71162269ba1161", "class_name": "RelatedNodeInfo"}}, "text": "|\n\n### Items for data providers <a href=\"#items-for-data-providers\" id=\"items-for-data-providers\"></a>\n\n| Name                                       | Description                                            |\n| ------------------------------------------ | ------------------------------------------------------ |\n| PHALA\\_LOCAL\\_DB\\_PATH                     | The path to database, defaults to \u2018/var/data/0\u2019.       |\n| PHALA\\_DATA\\_PROVIDER\\_LOCAL\\_SERVER\\_PORT | The listen port for the blob server, defaults to 8012. |\n\n### Items for lifecycle managers <a href=\"#items-for-lifecycle-managers\" id=\"items-for-lifecycle-managers\"></a>\n\n| Name                               | Description                                                                                                                                         |\n| ---------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| PHALA\\_Q\\_REDIS\\_ENDPOINT          | The endpoint to the Redis for trader task queue.                                                                                                    |\n| PHALA\\_RUNNER\\_MAX\\_WORKER\\_NUMBER | The maximum worker number of one runner, defaults to 150.                                                                                           |\n| PHALA\\_LIFECYCLE\\_CONFIG\\_MODE     | Whether the lifecycle manager should enter config mode, where it will start only the API to add/modify saved pools/workers. Set to true to enable.  |\n| PHALA\\_LRU\\_CACHE\\_SIZE            | The size of LRU cache, defaults to 5000.                                                                                                            |\n| PHALA\\_LRU\\_CACHE\\_MAX\\_AGE        | The maximum age of items in the LRU cache in milliseconds, defaults to 30 minutes.                                                                  |\n| PHALA\\_ENFORCE\\_MIN\\_BENCH\\_SCORE  | Whether the lifecycle manager should re-try the worker registration on the chain if the on-chain benchmark score to too low. Set to true to enable. |\n| PHALA\\_MIN\\_BENCH\\_SCORE           | Desired minimum benchmark score.                                                                                                                    |\n\n### Items for trader <a href=\"#items-for-trader\" id=\"items-for-trader\"></a>\n\n| Name                      | Description                               |\n| ------------------------- | ----------------------------------------- |\n| PHALA\\_Q\\_REDIS\\_ENDPOINT | The endpoint to the Redis for task queue. |\n\n### Configuring Node.js memory usage <a href=\"#configuring-nodejs-memory-usage\" id=\"configuring-nodejs-memory-usage\"></a>\n\nOnly do this when you are suffering from OOM issues.", "mimetype": "text/plain", "start_char_idx": 12058, "end_char_idx": 14869, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45adcf4d-fcb3-4848-b067-9564255eadba": {"__data__": {"id_": "45adcf4d-fcb3-4848-b067-9564255eadba", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b664864c-8c4b-4fa2-8880-551b912563cf", "node_type": "1", "metadata": {}, "hash": "b394cc0ac9b38c7dd7faa8ff3d61c534eef7479792aea6bdda02a29087c4f71a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "814ffbc4-916c-4e66-9f3d-37981f429eb4", "node_type": "1", "metadata": {}, "hash": "49edb0a04916c7580224c25e67617622437ee90ad5fe3a0113328b2fdc2865c6", "class_name": "RelatedNodeInfo"}}, "text": "Change the docker entrypoint to `node -trace-warnings -experimental-json-modules -es-module-specifier-resolution=node -harmony-top-level-await -max-old-space-size=$MAX_OLD_SPACE_SIZE dist/index`. Change the `$MAX_OLD_SPACE_SIZE` to your desired size in MB.\n\n[https://nodejs.org/dist/latest-v16.x/docs/api/cli.html#\u2013max-old-space-sizesize-in-megabytes](https://nodejs.org/dist/latest-v16.x/docs/api/cli.html#--max-old-space-sizesize-in-megabytes)\n\n## Using the monitor <a href=\"#using-the-monitor\" id=\"using-the-monitor\"></a>\n\nThe [monitor](https://github.com/Phala-Network/runtime-bridge/tree/next) is an example of the Walkie usage. It provides a simple management ability to play with Runtime Bridge.\n\nIt also implements a JSON proxy to the Walkie API.\n\n`POST /ptp/discover` returns the list of discovered peers.\n\n`POST /ptp/proxy/:peer_id/:method` sends the API request to the specified peer.\n\nThe API definition can be found in [https://github.com/Phala-Network/runtime-bridge-walkie/blob/master/src/proto/message.proto#L78](https://github.com/Phala-Network/runtime-bridge-walkie/blob/master/src/proto/message.proto#L78).", "mimetype": "text/plain", "start_char_idx": 14871, "end_char_idx": 15996, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "814ffbc4-916c-4e66-9f3d-37981f429eb4": {"__data__": {"id_": "814ffbc4-916c-4e66-9f3d-37981f429eb4", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45adcf4d-fcb3-4848-b067-9564255eadba", "node_type": "1", "metadata": {}, "hash": "b2c9fca7f080cfd495b9979cfccc83ad0dc90b48ab6eb635ec71162269ba1161", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be28ca22-b02f-4b2b-8256-093005520bde", "node_type": "1", "metadata": {}, "hash": "64932a8674b461d3144e942fd8422fe22b803b98929fe6448dc8d6295a1d22b9", "class_name": "RelatedNodeInfo"}}, "text": "## Import pools and workers <a href=\"#import-pools-and-workers\" id=\"import-pools-and-workers\"></a>\n\nTo import pools: [https://github.com/Phala-Network/runtime-bridge-walkie/blob/master/src/proto/message.proto#L95](https://github.com/Phala-Network/runtime-bridge-walkie/blob/master/src/proto/message.proto#L95)\n\nWith monitor:\n\n```\ncurl --location --request POST 'http://path.to.monitor/ptp/proxy/Qmbz...RjpwY/CreatePool' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"pools\": [\n        {\n            \"pid\": 2,\n            \"name\": \"test2\",\n            \"owner\": {\n                \"mnemonic\": \"boss...chase\"\n            },\n            \"enabled\": true,\n            \"realPhalaSs58\": \"3zieG9...1z5g\"\n        }\n    ]\n}'\n```\n\nTo import workers: [https://github.com/Phala-Network/runtime-bridge-walkie/blob/master/src/proto/message.proto#L98](https://github.com/Phala-Network/runtime-bridge-walkie/blob/master/src/proto/message.proto#L98)\n\nWith monitor:\n\n```\ncurl --location --request POST 'http://path.to.monitor/ptp/proxy/Qmbz...RjpwY/CreateWorker' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"workers\": [\n        {\n            \"pid\": 2,\n            \"name\": \"test-node-1\",\n            \"endpoint\": \"http://path.to.worker1:8000\",\n            \"enabled\": true,\n            \"stake\": \"4000000000000000\"\n        },\n        {\n            \"pid\": 2,\n            \"name\": \"test-node-2\",\n            \"endpoint\": \"http://path.to.worker2:8000\",\n            \"enabled\": true,\n            \"stake\": \"4000000000000000\"\n        }\n    ]\n}'\n```\n\nRestart the lifecycle manager after modified pools/workers.", "mimetype": "text/plain", "start_char_idx": 15998, "end_char_idx": 17610, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be28ca22-b02f-4b2b-8256-093005520bde": {"__data__": {"id_": "be28ca22-b02f-4b2b-8256-093005520bde", "embedding": null, "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a", "node_type": "4", "metadata": {}, "hash": "635c558ace1db3b41e37b6477eb520266f5fb27dcb8b0cba565b67850d407293", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "814ffbc4-916c-4e66-9f3d-37981f429eb4", "node_type": "1", "metadata": {}, "hash": "49edb0a04916c7580224c25e67617622437ee90ad5fe3a0113328b2fdc2865c6", "class_name": "RelatedNodeInfo"}}, "text": "## Community Works\n\nThese resources contributed by the community might be useful, use at your own risk:\n\n* [\u4e2d\u6587\u90e8\u7f72\u6559\u7a0b / Deployment guide in Chinese](https://github.com/suugee/phala-prb/tree/next)\n* [Staking Calculator](https://phala.one/stake/)", "mimetype": "text/plain", "start_char_idx": 17612, "end_char_idx": 17853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae85f9ca-00a6-4a07-8eb6-98e5efc400e3": {"__data__": {"id_": "ae85f9ca-00a6-4a07-8eb6-98e5efc400e3", "embedding": null, "metadata": {"file_path": "./phala_dist/phala-sdk.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c8d09dd7-f99f-435d-9636-c1df8da02652", "node_type": "4", "metadata": {}, "hash": "2662f478e0c6365e35884b13b488e8dda03f97801e7e07d718cf586533803085", "class_name": "RelatedNodeInfo"}}, "text": "# \u2692\ufe0f Phala SDK\n\nFor technical documentation on Phala's SDK, go to our [Phala SDK Docs](https://phala-docs.vercel.app/jssdk/getting-started).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 140, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d556e803-7bec-484a-9597-ef0a51e050f3": {"__data__": {"id_": "d556e803-7bec-484a-9597-ef0a51e050f3", "embedding": null, "metadata": {"file_path": "./phala_dist/cross-chain-transfer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90405cb0-1262-41e3-8921-3f8a0b9d5505", "node_type": "4", "metadata": {}, "hash": "c286a6776ce56fec1d6f3f9924b5bb68c2817fe826de076e211fa872984e81c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d067ccd0-8ac3-47e9-a5f4-e59d08ce6adb", "node_type": "1", "metadata": {}, "hash": "13280a02fc75f66ca69d57b31c2fbfa467bea2601d4720392838e69aaf52cebc", "class_name": "RelatedNodeInfo"}}, "text": "# Cross-chain Transfer\n\n### Transfer PHA: Ethereum <-> Khala <a href=\"#transfer-pha-ethereum---khala\" id=\"transfer-pha-ethereum---khala\"></a>\n\nThis tutorial takes the transfer of PHA from Ethereum to Khala as an example. You can also refer to this tutorial for other EVM <-> parachain bridge transfers.\\\n![](../../.gitbook/assets/subbridge-eth-khala.png)\n\n1. Open [SubBridge](https://subbridge.io/), switch _From_ chain to Ethereum, _To_ chain to Khala, and choose `PHA` as the currency;\n2. Press _Connect Wallet_ and connect to Metamask;\n3. Fill in the amount of ERC-20 PHA that you want to transfer from Ethereum;\n4. Enter the receiving account on Khala, note that it should be the Khala address;\n5. If it\u2019s the first time you are transferring your PHA assets, you may need to click on the _Approve_ button and sign with Metamask to confirm;\\\n   <img src=\"../../.gitbook/assets/subbridge-metamask.png\" alt=\"\" data-size=\"original\">\n6. Then confirm and click the _Transfer_ button;\n7. Double-check your accounts and figures and then click _Submit_ in the pop-up window, sign with Metamask, and submit your cross-chain asset transaction;\n8. You can go to Etherscan to check the sending details on the Etherscan block explorer when your transaction is sent; if you have any questions, you can consult our [Discord](https://discord.gg/phala-network).\n\n### Transfer PHA: Khala <-> Karura <a href=\"#transfer-pha-khala---karura\" id=\"transfer-pha-khala---karura\"></a>\n\nThis tutorial takes the transfer of PHA from Khala to Karura as an example, and vice versa for transferring from Karura to Khala. You can also refer to this tutorial for other parachain bridge transfers.\\\n![](../../.gitbook/assets/subbridge-transfer.png)\n\n1. Open [SubBridge](https://subbridge.io/), switch _From_ chain to Khala, _To_ chain to Karura, and choose `PHA` as the currency;\n2.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1850, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d067ccd0-8ac3-47e9-a5f4-e59d08ce6adb": {"__data__": {"id_": "d067ccd0-8ac3-47e9-a5f4-e59d08ce6adb", "embedding": null, "metadata": {"file_path": "./phala_dist/cross-chain-transfer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90405cb0-1262-41e3-8921-3f8a0b9d5505", "node_type": "4", "metadata": {}, "hash": "c286a6776ce56fec1d6f3f9924b5bb68c2817fe826de076e211fa872984e81c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d556e803-7bec-484a-9597-ef0a51e050f3", "node_type": "1", "metadata": {}, "hash": "7fd7201932aad518845c0c92b84617c420b3c25eb54706b341826b784caa8bcc", "class_name": "RelatedNodeInfo"}}, "text": "Connect the Source Chain (Khala)\u2019s account, enter the transfer amount;\n\n    > Note: Do not transfer all the token, you need to keep a certain fee in the account to ensure that it is not deleted.\n3. Enter the receiving account on destination chain (Karura), note that it should be the Karura address. The destination account is your source account by default, you can click _Edit manually_ to use other addresses;\n4. Click _Transfer_;\n5.  Confirm pop-up window;\n\n    > Note: A transfer fee of 0.0512 PHA will be charged for transferring from Khala to Karura. The bridge itself is completely free. This fee is used to pay the XCM fee of the Karura chain. It does not include the transaction fee of the Khala chain.\n6. Click _Submit_ to sign;\\\n   ![](../../.gitbook/assets/subbridge-confirm.png)\n7. The transaction is sent from Khala, wait for the transaction to be confirmed;\n8. Then you can go to destination chain\u2019s wallet (in this case, [Karura Apps](https://apps.karura.network/portfolio)) to check whether you have received the token (PHA). If it is not received within 1 minute, you can go to the Khala chain explorer ([Subscan](https://khala.subscan.io/)) to check whether you have sent a transaction; if you have any questions, you can consult our [Discord](https://discord.gg/phala-network).", "mimetype": "text/plain", "start_char_idx": 1852, "end_char_idx": 3150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd19c5e1-75c0-49cb-97c4-db84acc9c156": {"__data__": {"id_": "dd19c5e1-75c0-49cb-97c4-db84acc9c156", "embedding": null, "metadata": {"file_path": "./phala_dist/block-explorers.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0c6e83de-e66b-40c5-b04c-d60be3581d2f", "node_type": "4", "metadata": {}, "hash": "8878b380115d318ba97912de07d6b7c1878513c0e876e3dc483a26b540dbb694", "class_name": "RelatedNodeInfo"}}, "text": "# Block Explorers\n\n| Chain              | URL                                                                            |\n| ------------------ | ------------------------------------------------------------------------------ |\n| Phala Mainnet      | [https://phala.subscan.io/](https://phala.subscan.io/)                         |\n| Phala PoC6 Testnet | [https://poc6-statescan.phala.network/](https://poc6-statescan.phala.network/) |\n| Khala Mainnet      | [https://khala.subscan.io/](https://khala.subscan.io)                          |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 538, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4cb2197-0143-4261-a827-48d3e09c2133": {"__data__": {"id_": "f4cb2197-0143-4261-a827-48d3e09c2133", "embedding": null, "metadata": {"file_path": "./phala_dist/phat-contract-console.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab46cba2-bc85-406d-8e23-7a6da2ac297d", "node_type": "4", "metadata": {}, "hash": "0a31b2bcf978b1f41475e608f295cd9d7c8aba1a721bfcd5e3350fe0b3d1cef9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b875f125-909e-4d48-be62-36da329151e3", "node_type": "1", "metadata": {}, "hash": "b61576a2b326add3f07d5b94c7c07b5ccf6a8a07d4f6ce6a8b4d6c3ef93a6e3f", "class_name": "RelatedNodeInfo"}}, "text": "# Phat Contract Console\n\n[Phat Contract UI](https://phat.phala.network/) provides an easy way to upload your contract, instantiate it and interact with it.\n\n## Connect Your Wallet <a href=\"#connect-wallet\" id=\"connect-wallet\"></a>\n\n<figure><img src=\"../../../.gitbook/assets/phat-ui.png\" alt=\"\"><figcaption></figcaption></figure>\n\nOn the homepage, click _Connect Wallet_ in the right top corner, and select the wallet you are using. An _Authorize_ window will pop up, Click Yes to continue. Then you can connect to one of your accounts in the _Select Account_ window.\n\n## Connecting to the Blockchain <a href=\"#connect-to-blockchain\" id=\"connect-to-blockchain\"></a>\n\n<figure><img src=\"../../../.gitbook/assets/phat-ui-endpoint-setting.png\" alt=\"\"><figcaption></figcaption></figure>\n\nClicking the green dot beside your account will tell you the information about the current chain you are connected to.\n\n<figure><img src=\"../../../.gitbook/assets/SelectNetwork.png\" alt=\"\"><figcaption></figcaption></figure>\n\nBy default, the UI will connect to [Phala PoC-6 Testnet](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpoc5.phala.network%2Fws#/explorer). Check the full [chain list](../../support/endpoints.md).\n\nYou can connect to other chains by filling in the RPC Endpoint and clicking _Connect_. The UI will automatically read the cluster information from the chain and fill in the PRuntime for you, but you can always set it to other workers manually.\n\n> **Why two endpoints**\n>\n> Unlike other blockchains like Ethereum where you have to call your contracts through on-chain transactions, Phat Contracts are deployed to off-chain Workers so you can interact with them directly without submitting any transactions. The UI will ask for two endpoints, one to connect to the blockchain and another to the worker directly.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b875f125-909e-4d48-be62-36da329151e3": {"__data__": {"id_": "b875f125-909e-4d48-be62-36da329151e3", "embedding": null, "metadata": {"file_path": "./phala_dist/phat-contract-console.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab46cba2-bc85-406d-8e23-7a6da2ac297d", "node_type": "4", "metadata": {}, "hash": "0a31b2bcf978b1f41475e608f295cd9d7c8aba1a721bfcd5e3350fe0b3d1cef9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4cb2197-0143-4261-a827-48d3e09c2133", "node_type": "1", "metadata": {}, "hash": "304c1baa6e016627c8e2943d718549182e8dbb568a9c9abafc1d3eab3a5e5173", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "635ff0fe-763c-4162-b089-1f9b8845b7da", "node_type": "1", "metadata": {}, "hash": "3af41e34b634003754fffd34da1e7d106c3034fba8568489250df1eaa85c0edd", "class_name": "RelatedNodeInfo"}}, "text": "To connect to our mainnet or your local testnet, you need to specify two endpoints here:\n\n* An RPC endpoint to connect to one of the Phala blockchain nodes to read the chain state and send transactions;\n* A pRuntime endpoint to directly connect to one of our Workers where the [off-chain computation](https://medium.com/phala-network/fat-contract-introduce-off-chain-computation-to-smart-contract-dfc5839d5fb8) really happens;\n\n## Claim Test Tokens <a href=\"#claim-test-tokens\" id=\"claim-test-tokens\"></a>\n\nOnce the account is connected, you can find the _Get Test-PHA_ button on the right side of the page and request 100 test tokens by clicking it. The operations below require tokens as the transaction fee.\n\n## Uploading and Instantiating the Contract <a href=\"#upload-and-instantiate-the-contract\" id=\"upload-and-instantiate-the-contract\"></a>\n\nChoose `Upload` and locate your `phat_hello.contract` file that you downloaded. The UI will load the metadata of your contract and list all the constructor functions in the `Init Selector` section.\n\n<figure><img src=\"../../../.gitbook/assets/phat-ui-upload.png\" alt=\"\"><figcaption></figcaption></figure>\n\nAfter you click the `Submit`, the UI will ask for your permission to upload the contract WASM to the blockchain through a transaction. Click \"Approve\" to continue.\n\n> **What happened**\n>\n> Your contract code is uploaded to the blockchain via a transaction, hence the request for your signature. The code is public, together with your instantiation arguments, so that everyone can verify the initial state of the contract.\n>\n> The blockchain will automatically push the contract code to the workers belonging to the cluster you choose and instantiate it.\n\nAfter the successful instantiation, you will see the metadata of the deployed contract.\n\n<figure><img src=\"../../../.gitbook/assets/phat-ui-metadata.png\" alt=\"\"><figcaption></figcaption></figure>\n\nYou can also expand the lower bar to see the raw events when deploying the contract.", "mimetype": "text/plain", "start_char_idx": 1816, "end_char_idx": 3807, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "635ff0fe-763c-4162-b089-1f9b8845b7da": {"__data__": {"id_": "635ff0fe-763c-4162-b089-1f9b8845b7da", "embedding": null, "metadata": {"file_path": "./phala_dist/phat-contract-console.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab46cba2-bc85-406d-8e23-7a6da2ac297d", "node_type": "4", "metadata": {}, "hash": "0a31b2bcf978b1f41475e608f295cd9d7c8aba1a721bfcd5e3350fe0b3d1cef9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b875f125-909e-4d48-be62-36da329151e3", "node_type": "1", "metadata": {}, "hash": "b61576a2b326add3f07d5b94c7c07b5ccf6a8a07d4f6ce6a8b4d6c3ef93a6e3f", "class_name": "RelatedNodeInfo"}}, "text": "<figure><img src=\"../../../.gitbook/assets/phat-ui-events.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Interacting with Your Contract <a href=\"#interact-with-your-contract\" id=\"interact-with-your-contract\"></a>\n\nScrolling down the page, you can see all the interfaces of your contract, with their function names, types, and descriptions.\n\nThe interfaces are divided into two types, labeled by `TX` and `QUERY` respectively. This contract only contains one `QUERY` handler. The phat-hello contract has only one `QUERY` type interface, `get_eth_balance()`.\n\n<figure><img src=\"../../../.gitbook/assets/phat-ui-input.png\" alt=\"\"><figcaption></figcaption></figure>\n\nClick the run icon to send a request to the contract. For example, we can invoke the `get_eth_balance()` to get the current balance of a specific ETH address. The Polkadot.js extension will ask for your permission in the first click to encrypt your following traffic to the contract.\n\n> **What happened**\n>\n> Every transaction or query to the contract is encrypted and thus needs your signature. We implement a certificate mechanism to keep your query signature valid for 15 minutes.\n\nThe `QUERY` returns immediately since it involves no on-chain transactions. Click the bottom status bar to see the execution result.\n\n<figure><img src=\"../../../.gitbook/assets/phat-ui-result.png\" alt=\"\"><figcaption></figcaption></figure>\n\nCongrats\ud83c\udf89! You have finished the basic tutorial of Phat Contract!", "mimetype": "text/plain", "start_char_idx": 3809, "end_char_idx": 5266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f4eac06-cb23-4246-b937-4b9f50b0033a": {"__data__": {"id_": "7f4eac06-cb23-4246-b937-4b9f50b0033a", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da7c0fe2-04ec-4f98-b1b3-54d12accb17b", "node_type": "1", "metadata": {}, "hash": "3348a7800d8f6a925f7c99a5b21ee8dbaa562ab751090db883a847cee2f4e02a", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: Host your AI Agent Contract on Phala's decentralized serverless cloud.\n---\n\n# Build Your AI Agent Contract with OpenAI\n\n## [AI Agent Contract Template with OpenAI](https://github.com/Phala-Network/ai-agent-template-openai/tree/main)\n\n### Architecture Overview\n\n<figure><img src=\"../../.gitbook/assets/Screenshot 2024-04-04 at 11.02.11.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## \ud83e\udd16 What Is This?!\n\n***\n\nThe OpenAI AI Agent template is a **MINIMAL** template to build an AI Agent that can be hosted on Phala Network's decentralized hosting protocol. Unlike Vercel or other FaaS, it allows you to publish your AI Agent compiled code to IPFS and hosts it on a fully decentralized FaaS cloud with the following benefits:\n\n* \ud83d\udca8 Ship Fast: Build and ship with familiar toolchain in minutes\n* \u26d1\ufe0f Secure: Execution guarded by rock solid TEE / Intel SGX\n* \ud83d\udd12 Private: Host API keys and user privacy at ease\n* \ud83d\udc8e Unstoppable: Powered by IPFS and Phala's 35k+ decentralized TEE workers\n\n## Getting Started\n\n{% hint style=\"info\" %}\nFor this template to work, you will need to signup for a developer account on OpenAI and get and [OpenAI API Key](https://platform.openai.com/account/api-keys).\n{% endhint %}\n\n### Prepare\n\nClone git repo or use [degit](https://www.npmjs.com/package/degit) to get the source code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1319, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da7c0fe2-04ec-4f98-b1b3-54d12accb17b": {"__data__": {"id_": "da7c0fe2-04ec-4f98-b1b3-54d12accb17b", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f4eac06-cb23-4246-b937-4b9f50b0033a", "node_type": "1", "metadata": {}, "hash": "e18378f3888f6114195cb6927bf07b74385fcfe05a96531d67195b93a8e2df14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b805bc90-4f05-4ce2-965f-c48bea322d5b", "node_type": "1", "metadata": {}, "hash": "779e36d76fd7b8c8c6aa430047eae30764e777cf8171b210d9c112c243875fd2", "class_name": "RelatedNodeInfo"}}, "text": "{% tabs %}\n{% tab title=\"git\" %}\n```sh\ngit clone https://github.com/Phala-Network/ai-agent-template-openai.git\n```\n{% endtab %}\n\n{% tab title=\"degit\" %}\n```bash\nnpx degit github:Phala-Network/ai-agent-template-openai#main ai-agent-template-langchain\n```\n{% endtab %}\n{% endtabs %}\n\nInstall dependencies\n\n```shell\nnpm install\n```\n\n### Testing Locally\n\nCreate `.env` file with the default ThirdWeb API key for publishing your Agent Contract to IPFS\n\n```sh\ncp .env.example .env\n```\n\nBuild your Agent\n\n```sh\nnpm run build\n```\n\nTest your Agent locally\n\n```sh\nnpm run test\n```\n\nExpected Test Results\n\n```sh\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{\"chatQuery\":[\"When did humans land on the moon?\"],\"openAiModel\":[\"gpt-4o\"]},\"secret\":{\"openaiApiKey\":\"YOUR_API_KEY\"},\"headers\":{}}\nGET RESULT: {\n  status: 200,\n  body: `{\"message\":\"Humans first landed on the moon on July 20, 1969, during NASA's Apollo 11 mission. Astronauts Neil Armstrong and Edwin \\\\\"Buzz\\\\\" Aldrin became the first and second humans to walk on the lunar surface while Michael Collins remained in lunar orbit aboard the Command Module. Neil Armstrong famously declared, \\\\\"That's one small step for man, one giant leap for mankind,\\\\\" as he stepped onto the moon.\"}`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nINPUT: {\"method\":\"POST\",\"path\":\"/ipfs/CID\",\"queries\":{\"chatQuery\":[\"When did humans land on the moon?", "mimetype": "text/plain", "start_char_idx": 1321, "end_char_idx": 2761, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b805bc90-4f05-4ce2-965f-c48bea322d5b": {"__data__": {"id_": "b805bc90-4f05-4ce2-965f-c48bea322d5b", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da7c0fe2-04ec-4f98-b1b3-54d12accb17b", "node_type": "1", "metadata": {}, "hash": "3348a7800d8f6a925f7c99a5b21ee8dbaa562ab751090db883a847cee2f4e02a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a626cf5f-7200-451f-85d6-2e035e195c66", "node_type": "1", "metadata": {}, "hash": "150ab4f37c5e75311ffc41721f0e48f60dd693d6f9c9797621d621531eb0a7f3", "class_name": "RelatedNodeInfo"}}, "text": "\"],\"openAiModel\":[\"gpt-4o\"]},\"secret\":{\"openaiApiKey\":\"YOUR_API_KEY\"},\"headers\":{},\"body\":\"{}\"}\nPOST RESULT: {\n  status: 200,\n  body: '{\"message\":\"Not Implemented\"}',\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nNow you are ready to publish your agent, add secrets, and interact with your agent in the following steps:\n- Execute: 'npm run publish-agent'\n- Set secrets: 'npm run set-secrets'\n- Go to the url produced by setting the secrets (e.g. https://wapo-testnet.phala.network/ipfs/QmPQJD5zv3cYDRM25uGAVjLvXGNyQf9Vonz7rqkQB52Jae?key=b092532592cbd0cf)\n```\n\n### Publishing Your Agent\n\nUpload your compiled AI Agent code to IPFS.\n\n```sh\nnpm run publish-agent\n```\n\nUpon a successful upload, the command should show the URL to access your AI Agent.\n\n```sh\n\u2713 Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 2761, "end_char_idx": 3592, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a626cf5f-7200-451f-85d6-2e035e195c66": {"__data__": {"id_": "a626cf5f-7200-451f-85d6-2e035e195c66", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b805bc90-4f05-4ce2-965f-c48bea322d5b", "node_type": "1", "metadata": {}, "hash": "779e36d76fd7b8c8c6aa430047eae30764e777cf8171b210d9c112c243875fd2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c9f4583-59f2-4f07-8056-5842859f5e0c", "node_type": "1", "metadata": {}, "hash": "2a093685556f1fcf20688b027e6ee2935f0330b23d314be83f113e6867fa8386", "class_name": "RelatedNodeInfo"}}, "text": "76.86 KB  dist/index.js\nRunning command: npx thirdweb upload dist/index.js\nThis may require you to log into thirdweb and will take some time to publish to IPFS...\n\n    $$\\     $$\\       $$\\                 $$\\                         $$\\       \n    $$ |    $$ |      \\__|                $$ |                        $$ |      \n  $$$$$$\\   $$$$$$$\\  $$\\  $$$$$$\\   $$$$$$$ |$$\\  $$\\  $$\\  $$$$$$\\  $$$$$$$\\  \n  \\_$$  _|  $$  __$$\\ $$ |$$  __$$\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\ $$  __$$\\ \n    $$ |    $$ |  $$ |$$ |$$ |  \\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\n    $$ |$$\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\n    \\$$$$  |$$ |  $$ |$$ |$$ |      \\$$$$$$$ |\\$$$$$\\$$$$  |\\$$$$$$$\\ $$$$$$$  |\n     \\____/ \\__|  \\__|\\__|\\__|       \\_______| \\_____\\____/  \\_______|\\_______/ \n\n \ud83d\udc8e thirdweb v0.14.12 \ud83d\udc8e\n\n- Uploading file to IPFS. This may take a while depending on file sizes.\n\n\u2714 Successfully uploaded file to IPFS.", "mimetype": "text/plain", "start_char_idx": 3595, "end_char_idx": 4543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c9f4583-59f2-4f07-8056-5842859f5e0c": {"__data__": {"id_": "6c9f4583-59f2-4f07-8056-5842859f5e0c", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a626cf5f-7200-451f-85d6-2e035e195c66", "node_type": "1", "metadata": {}, "hash": "150ab4f37c5e75311ffc41721f0e48f60dd693d6f9c9797621d621531eb0a7f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d19f6812-970f-4409-a5d3-855c015459bc", "node_type": "1", "metadata": {}, "hash": "99826a017f605efa928e24866cda37cca329bb2c18b129d847ae417bc4ced139", "class_name": "RelatedNodeInfo"}}, "text": "\u2714 Files stored at the following IPFS URI: ipfs://QmdBwRk3YG78thoe9phf43CLAzShYUEiPHnWBu6bkqsJVY\n\u2714 Open this link to view your upload: https://b805a9b72767504353244e0422c2b5f9.ipfscdn.io/ipfs/bafybeig4up5mjx6kvkm5dizsv2njpkzk7pileis3kfheyd5wff2m3wbtrm/\n\nAgent Contract deployed at: https://wapo-testnet.phala.network/ipfs/QmdBwRk3YG78thoe9phf43CLAzShYUEiPHnWBu6bkqsJVY\n\nIf your agent requires secrets, ensure to do the following:\n1) Edit the ./secrets/default.json file or create a new JSON file in the ./secrets folder and add your secrets to it.\n2) Run command: 'npm run set-secrets' or 'npm run set-secrets [path-to-json-file]'\nLogs folder created.\nDeployment information updated in ./logs/latestDeployment.json\n```\n\n{% hint style=\"info\" %}\n\n\n**Note** that your latest deployment information will be logged to in file [`./logs/latestDeployment.json`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/latestDeployment.json). This file is updated every time you publish a new Agent Contract to IPFS. This file is also used to get the IPFS CID of your Agent Contract when setting secrets for your Agent Contract.\n\nHere is an example:\n\n```\n{\n  \"date\": \"2024-08-29T18:47:55.108Z\",\n  \"cid\": \"QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\",\n  \"url\": \"https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc\"\n}\n```\n{% endhint %}\n\n{% hint style=\"warning\" %}\n\n\n**Did Thirdweb fail to publish?", "mimetype": "text/plain", "start_char_idx": 4544, "end_char_idx": 5985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d19f6812-970f-4409-a5d3-855c015459bc": {"__data__": {"id_": "d19f6812-970f-4409-a5d3-855c015459bc", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c9f4583-59f2-4f07-8056-5842859f5e0c", "node_type": "1", "metadata": {}, "hash": "2a093685556f1fcf20688b027e6ee2935f0330b23d314be83f113e6867fa8386", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b53203f4-b10b-45c7-8555-f7c2e02e99b4", "node_type": "1", "metadata": {}, "hash": "b6b187b8f1941f1dcbe21e0659eeb6f0b5958d92b1c5a609c2b26edb32dce9e6", "class_name": "RelatedNodeInfo"}}, "text": "**\n\nIf ThirdWeb fails to publish, please signup for your own ThirdWeb account to publish your Agent Contract to IPFS. Signup or login at [https://thirdweb.com/dashboard/](https://thirdweb.com/dashboard/)\n\nWhenever you log into ThirdWeb, create a new API key and replace the default API Key with yours in the [.env](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/.env) file.\n\n```\nTHIRDWEB_API_KEY=\"YOUR_THIRDWEB_API_KEY\"\n```\n{% endhint %}\n\n### Accessing The Published Agent\n\nOnce published, your AI Agent is available at the URL: `https://wapo-testnet.phala.network/ipfs/<your-cid>`. You can get it from the \"Publish to IPFS\" step.\n\nYou can test it with `curl`.\n\n```sh\ncurl https://wapo-testnet.phala.network/ipfs/<your-cid>\n```\n\n### Adding Secrets\n\nBy default, all the compiled JS code is visible for anyone to view if they look at IPFS CID. This makes private info like API keys, signer keys, etc. vulnerable to be stolen. To protect devs from leaking keys, we have added a field called `secret` in the `Request` object. It allows you to store secrets in a vault for your AI Agent to access.\n\nTo add your secrets,\n\n1. Edit the [default.json](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/secrets/default.json) file or create a new JSON file in the `./secrets` folder and add your secrets to it.\n\n```sh\n{\n  \"apiKey\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n\n2.", "mimetype": "text/plain", "start_char_idx": 5985, "end_char_idx": 7378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b53203f4-b10b-45c7-8555-f7c2e02e99b4": {"__data__": {"id_": "b53203f4-b10b-45c7-8555-f7c2e02e99b4", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d19f6812-970f-4409-a5d3-855c015459bc", "node_type": "1", "metadata": {}, "hash": "99826a017f605efa928e24866cda37cca329bb2c18b129d847ae417bc4ced139", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5a944135-62ab-41bb-99b5-35170cdf5ac0", "node_type": "1", "metadata": {}, "hash": "e33d4b6329ff41760e2043a5898b2e4528cab3273517f75d36742b7407e92959", "class_name": "RelatedNodeInfo"}}, "text": "Run command to set the secrets\n\n```sh\nnpm run set-secrets\n# or if you have a custom JSON file\nnpm run set-secrets <path-to-json-file>\n```\n\nExpected output:\n\n```sh\nUse default secrets...\nStoring secrets...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   199    0    68  100   131    121    234 --:--:-- --:--:-- --:--:--   356\n{\"token\":\"5d9faaed6be5414a\",\"key\":\"a3a8a4ef2c057d5c\",\"succeed\":true}\n\nSecrets set successfully. Go to the URL below to interact with your agent:\nhttps://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c\nLog entry added to secrets.log\n```\n\n{% hint style=\"info\" %}\n**Note** that all your secrets will be logged in file [`./logs/secrets.log`](https://github.com/Phala-Network/ai-agent-template-redpill/blob/main/logs/secrets.log). This file is updated every time you add new secrets to your Agent Contract. If you have not published an Agent Contract, yet, this command will fail since there is not a CID to map the secrets to.", "mimetype": "text/plain", "start_char_idx": 7379, "end_char_idx": 8495, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a944135-62ab-41bb-99b5-35170cdf5ac0": {"__data__": {"id_": "5a944135-62ab-41bb-99b5-35170cdf5ac0", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b53203f4-b10b-45c7-8555-f7c2e02e99b4", "node_type": "1", "metadata": {}, "hash": "b6b187b8f1941f1dcbe21e0659eeb6f0b5958d92b1c5a609c2b26edb32dce9e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a181c346-fab3-4b5e-a9be-3c9265f3bf35", "node_type": "1", "metadata": {}, "hash": "ed41204a21ec2c8da3edc874b17ae09fc6750b060f13bcbc70e3c91dbbd9fa5e", "class_name": "RelatedNodeInfo"}}, "text": "Here is an example:\n\n```sh\n2024-08-29T18:54:16.643Z, CID: [QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc], Token: [5d9faaed6be5414a], Key: [a3a8a4ef2c057d5c], URL: [https://wapo-testnet.phala.network/ipfs/QmaUbZgNz9dZ5eGm87DDqegRtcBV7RdosxizYQcfe2bHRc?key=a3a8a4ef2c057d5c]\n```\n{% endhint %}\n\nThe API returns a `token` and a `key`. The `key` is the id of your secret. It can be used to specify which secret you are going to pass to your frame. The `token` can be used by the developer to access the raw secret. You should never leak the `token`.\n\nTo verify the secret, run the following command where `key` and `token` are replaced with the values from adding your `secret` to the vault.\n\n```sh\ncurl https://wapo-testnet.phala.network/vaults/<key>/<token>\n```\n\nExpected output:\n\n```sh\n{\"data\":{\"openaiApiKey\":\"<OPENAI_API_KEY>\"},\"succeed\":true}\n```\n\n### Accessing Queries\n\nTo help create custom logic, we have an array variable named `queries` that can be accessed in the `Request` class.", "mimetype": "text/plain", "start_char_idx": 8497, "end_char_idx": 9486, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a181c346-fab3-4b5e-a9be-3c9265f3bf35": {"__data__": {"id_": "a181c346-fab3-4b5e-a9be-3c9265f3bf35", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5a944135-62ab-41bb-99b5-35170cdf5ac0", "node_type": "1", "metadata": {}, "hash": "e33d4b6329ff41760e2043a5898b2e4528cab3273517f75d36742b7407e92959", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c0a3fbc-e32d-43c3-9ea4-eec887b0bbf2", "node_type": "1", "metadata": {}, "hash": "dba67157d11ed235951ff06ef6e8089b45675212334077f2452fe75db3028ee8", "class_name": "RelatedNodeInfo"}}, "text": "To access the `queries` array variable `chatQuery` value at index `0`, the syntax will look as follows:\n\n```sh\nconst query = req.queries.chatQuery[0] as string;\n```\n\nThe example at [https://wapo-testnet.phala.network/ipfs/Qmc7EDq1X8rfYGGfHyXZ6xsmcSUWQcqsDoeRMfmvFujih3?key=51f265212c26086c\\&chatQuery=When%20did%20humans%20land%20on%20the%20moon](https://wapo-testnet.phala.network/ipfs/Qmc7EDq1X8rfYGGfHyXZ6xsmcSUWQcqsDoeRMfmvFujih3?key=51f265212c26086c\\&chatQuery=When%20did%20humans%20land%20on%20the%20moon) will have a value of `When did humans land on the moon`. `queries` can have any field name, so `chatQuery` is just an example of a field name and not a mandatory name, but remember to update your `index.ts` file logic to use your expected field name.\n\n### Debugging Your Agent\n\nTo debug your agent, you can use the following command:\n\n```\ncurl https://wapo-testnet.phala.network/logs/all/ipfs/<CID>\n```\n\nAfter executing this command then you should see some output in the terminal to show the logs of requests to your agent.\n\n```\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] END Request: Duration: 166ms\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Is signature valid? ' true\n2024-09-04T03:18:34.", "mimetype": "text/plain", "start_char_idx": 9487, "end_char_idx": 10750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c0a3fbc-e32d-43c3-9ea4-eec887b0bbf2": {"__data__": {"id_": "7c0a3fbc-e32d-43c3-9ea4-eec887b0bbf2", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a181c346-fab3-4b5e-a9be-3c9265f3bf35", "node_type": "1", "metadata": {}, "hash": "ed41204a21ec2c8da3edc874b17ae09fc6750b060f13bcbc70e3c91dbbd9fa5e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b63f131-24fe-4293-a0f5-a7ed64bc9dc6", "node_type": "1", "metadata": {}, "hash": "984dce51dba6ccc832ce3e7cdd402d99451d0eaaecb927794f16b99f62ebb56f", "class_name": "RelatedNodeInfo"}}, "text": "758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Verifying Signature with PublicKey ' '0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540'\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=verify&data=tintinland%20message%20to%20sign&signature=0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] END Request: Duration: 183ms\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signature: 0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b'\n2024-09-04T03:17:15.", "mimetype": "text/plain", "start_char_idx": 10750, "end_char_idx": 11582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b63f131-24fe-4293-a0f5-a7ed64bc9dc6": {"__data__": {"id_": "6b63f131-24fe-4293-a0f5-a7ed64bc9dc6", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c0a3fbc-e32d-43c3-9ea4-eec887b0bbf2", "node_type": "1", "metadata": {}, "hash": "dba67157d11ed235951ff06ef6e8089b45675212334077f2452fe75db3028ee8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f529d0b-e0ca-4dc7-9ead-6077e62dbe72", "node_type": "1", "metadata": {}, "hash": "4318c97ca80b4fa66c64b0d7a234cf618b9eabcd2bad02282c4f9d7ca1378182", "class_name": "RelatedNodeInfo"}}, "text": "238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signing data [tintinland message to sign] with Account [0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540]'\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=sign&data=tintinland%20message%20to%20sign\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] END Request: Duration: 169ms\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] END Request: Duration: 158ms\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64\na1e805bfd\n```\n\nTo create logs in your Agent Contract, you can use the following syntax in your `index.ts` file.", "mimetype": "text/plain", "start_char_idx": 11582, "end_char_idx": 12587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f529d0b-e0ca-4dc7-9ead-6077e62dbe72": {"__data__": {"id_": "5f529d0b-e0ca-4dc7-9ead-6077e62dbe72", "embedding": null, "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3251df80-611e-4f20-a69e-005deec74e0b", "node_type": "4", "metadata": {}, "hash": "fd3c1f6be131d7eb4b82202c4ec7e5f36a45f0f9199613ac22090611564d2e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b63f131-24fe-4293-a0f5-a7ed64bc9dc6", "node_type": "1", "metadata": {}, "hash": "984dce51dba6ccc832ce3e7cdd402d99451d0eaaecb927794f16b99f62ebb56f", "class_name": "RelatedNodeInfo"}}, "text": "```\n// info logs\nconsole.log('info log message!')\n// error logs\nconsole.error('error log message!')\n```\n\nFor more information check the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/console) on `console` object.", "mimetype": "text/plain", "start_char_idx": 12589, "end_char_idx": 12814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41aaee03-f43f-41b9-a7fd-f2f07056735c": {"__data__": {"id_": "41aaee03-f43f-41b9-a7fd-f2f07056735c", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7433d21c-b438-4985-8dcc-aab444cb8f7d", "node_type": "1", "metadata": {}, "hash": "c3346f8a0ffb1c80a601f5a045fe6cca4b0d04196cbf3b99f25dae3a4ad68e3b", "class_name": "RelatedNodeInfo"}}, "text": "# ETHGlobal Hackathon Guide\n\n## Phala Hackathon Guide at ETHGlobal Singapore\n\nWelcome to the Phala Hackathon Guide! This guide will provide you with all the necessary information to get started building on our platform. Whether you're a seasoned developer or new to the ecosystem, this guide will help you navigate through the essential steps and resources for build on Phala's Agent Contract.\n\n{% hint style=\"info\" %}\nCheck out the an Agent Contract we deployed called the [TEE Cheat Sheet](https://bit.ly/tee-cheat-sheet)!\n\n* If you want to know how to host HTML pages with hono, check out the Agent Contract template [here](https://github.com/Phala-Network/ai-agent-template-hono-html).\n{% endhint %}\n\n### Introduction\n\nWelcome to the Hackathon guide for Phala's Agent Contracts. We are offering you the **key** to connecting to multiple sponsor's bounties through our general-purpose program executing in a TEE (Trusted Execution) on Phala Network at **ZERO** cost & **NO** new wallet required.\n\n**Why is Agent Contract Built DIFFERENT?!**\n\n* &#x20;\ud83d\udca8 **Ship Fast**: Build and ship with familiar toolchain in minutes\n* &#x20;\u26d1\ufe0f **Secure**: Execution guarded by rock solid TEE\n* &#x20;\ud83d\udd12 **Private**: Host API keys and user privacy at ease\n* \ud83d\udc8e **Unstoppable**: Powered by IPFS and Phala's 40k+ decentralized TEE workers\n* :fire: [**hono/tiny**](https://hono.dev/docs/api/presets#hono-tiny) **Support**: a small, simple, and ultrafast web framework built on Web Standards.\n* \ud83e\uddea [**Vite Test Framework**](https://vitest.dev/guide/): Vite Testing Framework support, but you're free to change the test framework to your desire.\n\nHere are our feature templates:\n\n* [RedPill Agent Contract](https://github.com/Phala-Network/ai-agent-template-redpill) - Get your [FREE RedPill API Key](https://red-pill.ai/ethglobal) and access top LLMs from OpenAI, Anthropic, Meta, Gwen, Mistral, and Google to create a Web3 x AI project for the hackathon.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1934, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7433d21c-b438-4985-8dcc-aab444cb8f7d": {"__data__": {"id_": "7433d21c-b438-4985-8dcc-aab444cb8f7d", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "41aaee03-f43f-41b9-a7fd-f2f07056735c", "node_type": "1", "metadata": {}, "hash": "eed6c42939beee2ae27cdf006155548d882fd3c095e6acb0a087374bb112b6cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6d8fc3c-d2f9-4ff7-b497-69657ee09b1c", "node_type": "1", "metadata": {}, "hash": "66b0c246b23221a9244149f3137ea53365e0d02856a77987230413c37290f441", "class_name": "RelatedNodeInfo"}}, "text": "* [Viem SDK Agent Contract](https://github.com/Phala-Network/ai-agent-contract-viem) - Learn about a **new paradigm in transacting onchain** with the [Viem SDK](https://viem.sh) Agent Contract Template with key features to:\n  * Derive an ECDSA account within a TEE\n  * Sign/Verify Data with the derived account\n  * Transact on any EVM chain\n\n### Prizes\n\nWe have exciting prizes for the top project:\n\n1. **1st Place**: $3,000 + Ledger Nano X\n2. **2nd Place**: $1,500 + TEE Swag\n3. **3rd Place**: $500 + TEE Swag\n\n**Bonus Bounty**: Reach the ETHGlobal finals, and you\u2019ll snag another Ledger Nano X on us!\n\nHow to qualify for as a top project?\n\n* (Strong Consideration) Integrate [Agent Contract with the Viem SDK](https://github.com/Phala-Network/ai-agent-contract-viem) to interact on-chain with any EVM Chain or other sponsor projects at ETHGlobal to create a unique product.\n* (Strong Consideration) Build an AI x Web3 product with [RedPill Agent Contract Template](https://github.com/Phala-Network/ai-agent-template-redpill) or any other AI related templates we support located in our [docs](https://docs.phala.network/ai-agent-contract/getting-started/ai-agent-contract-templates)\n* Deploy any custom Agent Contract that can be interacted with via HTTP requests\n\n### Important Dates\n\n* **Hackathon Start**: September 20th\n* **Submission Deadline**: September 22nd 9am\n* **Judging Period**: 2 Hours and 30 Minutes\n* **Winners Announcement**: September 22nd 3pm\n\n### Getting Started\n\nTo get started with Phala Network\n\n* **Take the RedPill and access top AI LLMs**: Get an API Key on [RedPill](https://red-pill.ai/ethglobal). This requires a code to get access. Reach out to the Phala Team to get access. In the meantime, use the free developer API key that is rate limited.", "mimetype": "text/plain", "start_char_idx": 1935, "end_char_idx": 3710, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6d8fc3c-d2f9-4ff7-b497-69657ee09b1c": {"__data__": {"id_": "e6d8fc3c-d2f9-4ff7-b497-69657ee09b1c", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7433d21c-b438-4985-8dcc-aab444cb8f7d", "node_type": "1", "metadata": {}, "hash": "c3346f8a0ffb1c80a601f5a045fe6cca4b0d04196cbf3b99f25dae3a4ad68e3b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "770eb057-c0f7-4d8d-abb3-011d562cc376", "node_type": "1", "metadata": {}, "hash": "94aa6300b10c672957175af26cf03fad32c7b65ae397c43b94677704902c31fe", "class_name": "RelatedNodeInfo"}}, "text": "* **Try a New Paradigm in Transacting Onchain**: Build on the [viem Agent Contract Template](https://github.com/Phala-Network/ai-agent-contract-viem) where you can derive an account within a TEE and utilize the account to transact on any EVM chain.\n* **Choose from a** [**List of Agent Contract Templates**](../../ai-agent-contract/getting-started/ai-agent-contract-templates.md) or build a custom Agent Contract that connect to any API or uses an SDK of your choosing!\n* **Explore Documentation**: Familiarize yourself with our [Developer Documentation](https://docs.phala.network/).\n* **Join the Community**: Connect with other developers on our [Discord Server](https://discord.gg/phala-network).\n\n### Get API Key on RedPill\n\nIf you want to use the global hackathon RedPill API key, here are the details:\n\n* Create a FREE API Key at [https://red-pill.ai/ethglobal](https://red-pill.ai/ethglobal)&#x20;\n* Free Rate-Limited API Key\n  * API Endpoint URL: [https://api.red-pill.ai/](https://api.red-pill.ai/)\n  * API Key: `sk-qVBlJkO3e99t81623PsB0zHookSQJxU360gDMooLenN01gv2`\n* Doc: [https://docs.red-pill.ai/getting-started/how-to-use](https://docs.red-pill.ai/getting-started/how-to-use)\n* Supported Models: [https://docs.red-pill.ai/get-started/list-models](https://docs.red-pill.ai/get-started/list-models)\n\nBefore you start building, you'll need to set up your development environment. Here are the prerequisites:\n\n1. **Node.js**: Install the latest version of Node.js from [nodejs.org](https://nodejs.org/).\n2. **Code Editor**: Any code editor will work. We recommend using [Visual Studio Code](https://code.visualstudio.com/).", "mimetype": "text/plain", "start_char_idx": 3711, "end_char_idx": 5343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "770eb057-c0f7-4d8d-abb3-011d562cc376": {"__data__": {"id_": "770eb057-c0f7-4d8d-abb3-011d562cc376", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6d8fc3c-d2f9-4ff7-b497-69657ee09b1c", "node_type": "1", "metadata": {}, "hash": "66b0c246b23221a9244149f3137ea53365e0d02856a77987230413c37290f441", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efc0b5a8-b073-427a-819e-4bfa3acb028f", "node_type": "1", "metadata": {}, "hash": "594496e078f51b224b95af7182e39c82041ef9068f58b597a09e381bb0c2123d", "class_name": "RelatedNodeInfo"}}, "text": "#### Test RedPill API\n\n```\ncurl https://api.red-pill.ai/v1/chat/completions\n-H \"Content-Type: application/json\"\n-H \"Authorization: Bearer <YOUR_REDPILL_API_KEY>\"\n-d '{ \"model\": \"o1-preview\", \"messages\": [ { \"role\": \"user\", \"content\": \"Hello world!\"", "mimetype": "text/plain", "start_char_idx": 5345, "end_char_idx": 5593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efc0b5a8-b073-427a-819e-4bfa3acb028f": {"__data__": {"id_": "efc0b5a8-b073-427a-819e-4bfa3acb028f", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "770eb057-c0f7-4d8d-abb3-011d562cc376", "node_type": "1", "metadata": {}, "hash": "94aa6300b10c672957175af26cf03fad32c7b65ae397c43b94677704902c31fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d81bc35-b8dc-46da-a959-1ddd656d6021", "node_type": "1", "metadata": {}, "hash": "4082d9726ccc753aba96a814d9970e9c1400e87d5782fa838c1978f8f4934870", "class_name": "RelatedNodeInfo"}}, "text": "} ], \"temperature\": 1 }'\n```\n\n### Set Up Your First Agent Contract\n\nTo set up your first Agent Contract, you can follow these resources:\n\n* **A New Paradigm in Transacting Onchain**\n  * **Viem SDK Template (Derive ECDSA Keys, Sign/Verify Data, Send TX)**: [AI Agent Contract Viem Template](https://github.com/Phala-Network/ai-agent-contract-viem)\n* **AI Related Templates**\n  * **RedPill Template**: [Build Your First AI Agent Contract](https://github.com/Phala-Network/ai-agent-template-redpill)\n  * **OpenAI Template**: [Build Your AI Agent Contract with OpenAI](https://github.com/Phala-Network/ai-agent-template-openai)\n  * **Anthropic Template**: [Anthropic Template Repo](https://github.com/Phala-Network/ai-agent-template-anthropic)\n  * **LangChain**: [Build Your Agent Contract with LangChain](https://github.com/Phala-Network/ai-agent-template-langchain)\n  * **Function Calling**: [Create a Weather Agent with Function Calling](https://github.com/Phala-Network/ai-agent-template-func-calling)\n    * GitHub Repository: [AI Agent Template with Function Calling](https://github.com/Phala-Network/ai-agent-template-func-calling)\n  * [**Brian**](https://www.brianknows.org/app/) **Template**: [Brian Agent Contract Template](https://github.com/Phala-Network/ai-agent-template-brian)\n  * [**'mbd.xyz**](https://console.mbd.xyz/dashboard) **Template**: ['mbd.xyz Agent Contract Template](https://github.com/Phala-Network/ai-agent-template-mbd)\n  * [**Chainbase**](https://console.chainbase.com/) **Template**: [Chainbase Agent Contract Template](https://github.com/Phala-Network/ai-agent-template-chainbase)\n* **Frontend Hosting Template**\n  * [**Hono HTML Agent Contract Template**](https://github.com/Phala-Network/ai-agent-template-hono-html)\n\n### Getting Rugged By The WiFi?!\n\nRun a local testnet with [`docker` support](https://docs.docker.com/desktop/).", "mimetype": "text/plain", "start_char_idx": 5594, "end_char_idx": 7455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d81bc35-b8dc-46da-a959-1ddd656d6021": {"__data__": {"id_": "6d81bc35-b8dc-46da-a959-1ddd656d6021", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efc0b5a8-b073-427a-819e-4bfa3acb028f", "node_type": "1", "metadata": {}, "hash": "594496e078f51b224b95af7182e39c82041ef9068f58b597a09e381bb0c2123d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ab3d3b6-89cb-47eb-b812-eef1042cc2d8", "node_type": "1", "metadata": {}, "hash": "e01235560c749263c86c59c631beee025ff9befd29fd9ad99d3b9f35227bbfc5", "class_name": "RelatedNodeInfo"}}, "text": "All you need to do to get a local testnet started is run:\n\n{% hint style=\"danger\" %}\nRunning the local testnet may return an error if port **`8000`** is already in use.\n{% endhint %}\n\n```shell\nnpm run dev\n```\n\n**Make a Request to Your Local Build**\n\n```shell\n# GET request\ncurl http://127.0.0.1:8000/local\n# GET request with URL queries\ncurl http://127.0.0.1:8000/local?query1=one&query2=two\n# POST request\ncurl http://127.0.0.1:8000/local -X POST -H 'content-type: application/json' -d '{\"foo\": \"bar\"}'\n```\n\n**Add Secrets to Your Local Build**\n\n```shell\ncurl http://127.0.0.1:8000/vaults -H 'Content-Type: application/json' -d '{\"cid\": \"local\", \"data\": {\"secretKey\":\"secretValue\"}}'\n```\n\n**Check The Logs of Your Local Build**\n\n```shell\ncurl 'http://127.0.0.1:8000/logs/all/local'\n```\n\n### Resources\n\nHere are some additional resources to assist you:\n\n* [**Hono Docs**](https://hono.dev/docs/api/presets#hono-tiny)\n  * We recommend using [@hono/tiny](https://hono.dev/docs/api/presets#hono-tiny) to avoid a large bundle size and the 20MB final artifact limitation.\n* [**Vite Test Framework**](https://vitest.dev/guide/)\n* **Docs**: [Developer Documentation](https://docs.phala.network/ai-agent-contract/getting-started/build-your-first-ai-agent-contract)\n  * [**Supported WapoJS Functions**](https://docs.phala.network/tech-specs/ai-agent-contract/wapojs-functions)\n* **Workshop**: [Video](https://www.youtube.com/watch?v=APcuWVdqJ2U)\n* **Tech Specs**: [Agent Contract Tech Specs](https://docs.phala.network/tech-specs/ai-agent-contract#wapojs)\n\n### Support\n\nIf you need help, we're here for you:\n\n* [Discord](https://discord.gg/phala-network): Join our Discord Server for real-time support.", "mimetype": "text/plain", "start_char_idx": 7456, "end_char_idx": 9148, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ab3d3b6-89cb-47eb-b812-eef1042cc2d8": {"__data__": {"id_": "1ab3d3b6-89cb-47eb-b812-eef1042cc2d8", "embedding": null, "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1", "node_type": "4", "metadata": {}, "hash": "bf3ba217b52a52d8d5605066395591a77c2786273f88a930a7c9043556e1f1f1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d81bc35-b8dc-46da-a959-1ddd656d6021", "node_type": "1", "metadata": {}, "hash": "4082d9726ccc753aba96a814d9970e9c1400e87d5782fa838c1978f8f4934870", "class_name": "RelatedNodeInfo"}}, "text": "* Forum: Post your questions on our Community Forum.\n* [FAQ](https://docs.phala.network/ai-agent-contract/faq): Agent Contract development FAQ\n\nWe can't wait to see what you build at the Phala Hackathon. Happy coding!\n\n***\n\n### Best Practices\n\nTo ensure a smooth development experience and to make the most out of the Phala platform, consider the following best practices:\n\n1. **Modular Code**: Write modular and reusable code to enhance maintainability.\n2. **Security First**: Always prioritize security, especially when dealing with sensitive data.\n3. **Documentation**: Document your code and APIs thoroughly to help others understand and contribute.\n4. **Testing**: Implement comprehensive testing to catch bugs early and ensure reliability.\n5. **Community Engagement**: Engage with the community to get feedback and improve your project.\n\n### Submission Guidelines\n\nTo submit your project for the hackathon, follow these steps:\n\n1. **Prepare Your Project**: Ensure your project is complete and well-documented.\n2. **Create a Repository**: Host your project on GitHub or any other version control platform.\n3. **Demo Video**: Include a short demo video showcasing your project and its features.\n\n### Judging Criteria\n\nProjects will be judged based on the following criteria:\n\n1. **Technical excellence**: How smoothly everything works\n2. **UX and design**: How great everything feels\n3. **Potential impact**: How it is going to make the world a better place\n4. **Wow factor**: How it would become the next big thing\n5. **Business model**: How it would generate ROI\n\n### Contact Us\n\nIf you have any questions or need further assistance, feel free to reach out:\n\n* **Email**: [support@phala.network](mailto:support@phala.network)\n* **Discord**: Join our [Discord Server](https://discord.gg/phala-network)\n* **Forum**: Visit our [Community Forum](https://forum.phala.network/)\n\nThank you for participating in the Phala Hackathon. We look forward to seeing your innovative solutions and wish you the best of luck!\n\n***\n\n_Phala Network Team_", "mimetype": "text/plain", "start_char_idx": 9149, "end_char_idx": 11189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3ba0457-eabf-4515-bb3b-bb57403e086e": {"__data__": {"id_": "e3ba0457-eabf-4515-bb3b-bb57403e086e", "embedding": null, "metadata": {"file_path": "./phala_dist/astar-zkatana-testnet.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0cd02182-e002-4546-a045-ac87d8f909bd", "node_type": "4", "metadata": {}, "hash": "c955ad09abe02ff5dffd97366102d0ea7a61f25a366b9132ce866c5d85f2f8e7", "class_name": "RelatedNodeInfo"}}, "text": "# Astar zKatana Testnet\n\nAstar zkEVM is a zero-knowledge scaling solution for Ethereum that offers an EVM-equivalent environment on which existing EVM smart contracts, developer tools, and wallets can work seamlessly. Astar zkEVM harnesses the power of zero-knowledge proofs to reduce transaction costs and increase throughput, while inheriting the security of Ethereum.\n\nTo learn more about Astar zkEVM, you can checkout their document [here](https://docs.astar.network/docs/build/zkEVM/).\n\n| Asset Pair  | Contract Address                           |\n| ----------- | ------------------------------------------ |\n| AAVE to USD | 0x49899fBd9be6b23d5e4AF697a92dc1E6C695862b |\n| BTC to USD  | 0xf38b25b79A72393Fca2Af88cf948D98c64726273 |\n| CRV to USD  | 0x89BC5048d634859aef743fF2152363c0e83a6a49 |\n| DAI to USD  | 0x2E1640853bB2dD9f47831582665477865F9240DB |\n| ETH to USD  | 0x739d71fC66397a28B3A3b7d40eeB865CA05f0185 |\n| USDC to USD | 0xB842f535a88021F95e1a94245Fa549a7f75084Dc |\n| USDT to USD | 0x1e73C20c42a7de166868da4c47963d137030492A |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b0e1f18-afe5-48e2-95fe-e29f31b8bfcf": {"__data__": {"id_": "0b0e1f18-afe5-48e2-95fe-e29f31b8bfcf", "embedding": null, "metadata": {"file_path": "./phala_dist/resource-limits.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c7da0b3-398f-458b-a513-2fde9ad061bf", "node_type": "4", "metadata": {}, "hash": "17106f852ff8b073e5fefcb774093ab10d654d5f971e0f6a84a0ba2af2f2c447", "class_name": "RelatedNodeInfo"}}, "text": "# Resource Limits\n\n## Resource Limits <a href=\"#resource-limits\" id=\"resource-limits\"></a>\n\n| Item                               | Description                                                                      | (LEGACY) ink | SideVM                            |\n| ---------------------------------- | -------------------------------------------------------------------------------- | ------------ | --------------------------------- |\n| Maximum code size                  | The maximum size of the compiled contract code that can be deployed              | 2 megabytes  | 32 megabytes                      |\n| Maximum ingress requests           | The maximum number of simultaneous query requests processed by a single worker   | 8 by default | unlimited                         |\n| Request fulfillment timeout        | The maximum duration of an in-flight query request                               | 10 seconds   | unlimited                         |\n| Maximum request size               | The maximum size of a incoming request (this includes all arguments)             | 1 megabytes  | unlimited, streaming is supported |\n| Maximum returned value size        | The maximum size of the response of a query                                      | 1 megabytes  | unlimited, streaming is supported |\n| Maximum query execution time       | The maximum amount of time that a single query can execute                       | 10 seconds   | N/A (continuously running)        |\n| Maximum memory allocated           | The maximum amount of memory allocated to your contract during execution         | 4 megabytes  | 16 MB                             |\n| HTTP - Maximum concurrent requests | The maximum number of HTTP requests that your source code can make               | 5            | unlimited                         |\n| HTTP - Request timeout             | The duration of an HTTP request before timeout                                   | 10 seconds   | unlimited                         |\n| HTTP - Maximum request length      | The maximum size of an HTTP request, including the request body and HTTP headers | 16 kilobytes | unlimited                         |\n| HTTP - Maximum response length     | The maximum size of an HTTP response                                             | 16 kilobytes | unlimited                         |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f13369a-5622-4bef-93e1-9c6a70acc52d": {"__data__": {"id_": "8f13369a-5622-4bef-93e1-9c6a70acc52d", "embedding": null, "metadata": {"file_path": "./phala_dist/system-requirements.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5e7f57c7-b6a0-4239-8e92-f62b9a2a0c4f", "node_type": "4", "metadata": {}, "hash": "c7afdef2d1c715b68d265ee0d751036b7335e252faedafd7efbcf48212b70c39", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11838006-0814-4214-902e-f2f4e56cfb6c", "node_type": "1", "metadata": {}, "hash": "1040d01e23c5c4c3ab1ef3f55db2c7a9f7688530924c6d4d7d8a70646188d2f1", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: System requirements\nsidebar_position: 1\n---\n\n## Supported operating systems\n\nNethermind supports a broad range of modern _64-bit_ operating systems including but not limited to:\n\n- **Linux**\n\t- Alpine 3.17+\n\t- CentOS Stream 9+\n\t- Debian 11+\n\t- Fedora 37+\n\t- openSUSE 15+\n\t- RHEL 8+\n\t- SLES 15+\n\t- Ubuntu 20.04+\n- **Windows**\n\t- Windows 10+ (x64 only)\n\t- Windows Server 2012+ (x64 only)\n- **macOS** 10.15+\n\n## Hardware requirements\n\nSuggested requirements can be found below.\n\n| Network             | Memory | CPU cores |\n|---------------------|:------:|:---------:|\n| **Mainnet**         | 16 GB  | 4         |\n| **Mainnet archive** | 128 GB | 8         |\n| **Gnosis**          | 16 GB  | 2         |\n| **Energy Web**      | 8 GB   | 2         |\n| **Volta**           | 8 GB   | 2         |\n\n### Disk requirements\n\nRunning an Ethereum Mainnet full node requires at least a 1 TB fast disk, such as NVMe or a fast SSD. However, **2\nTB is recommended** to minimize maintenance requirements. To choose a specific disk model, we recommend\nchecking out [this guide](https://gist.github.com/yorickdowne/f3a3e79a573bf35767cd002cc977b038#the-good).\\\nChoosing a 2 TB disk is a comfortable option for most common Mainnet node usage patterns, including staking.\nNonetheless, for a comprehensive understanding of disk growth and usage, we recommend delving further into the topic.\n\n#### Database growth\n\nNethermind requires approximately 898 GB of disk space (as of Jan 2024) after a fresh Ethereum Mainnet sync using default parameters. This size increases over time as the Ethereum chain grows. The node's database is in its most optimal state immediately after a sync or full pruning. Following the initial sync, the database grows at a rate of approximately 27 GB per week.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11838006-0814-4214-902e-f2f4e56cfb6c": {"__data__": {"id_": "11838006-0814-4214-902e-f2f4e56cfb6c", "embedding": null, "metadata": {"file_path": "./phala_dist/system-requirements.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5e7f57c7-b6a0-4239-8e92-f62b9a2a0c4f", "node_type": "4", "metadata": {}, "hash": "c7afdef2d1c715b68d265ee0d751036b7335e252faedafd7efbcf48212b70c39", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f13369a-5622-4bef-93e1-9c6a70acc52d", "node_type": "1", "metadata": {}, "hash": "c9b942c6b62bb996a6a63e0e711d6e1c0a59dc0c70cac37eba3be51f2e648a2f", "class_name": "RelatedNodeInfo"}}, "text": "To maintain this process, occasional resyncing or pruning of the node is necessary to bring it back to its optimal database size. For more info on managing node disk usage growth, see [how to reduce database size](../fundamentals/database.md#reducing-database-size).\\\nHaving a larger disk space allocation reduces the need for frequent maintenance and alleviates concerns about the chain outgrowing the available space. It's worth noting that the only drawback of running a smaller disk is the requirement for more regular resyncing or pruning. We believe that a 2 TB disk will suffice for most users. However, the choice between 1 TB and 2 TB depends on factors such as hardware costs, cloud provider expenses, and individual requirements.\n\nFor more details, see [Database size](../fundamentals/database.md#database-size).\n\n#### Disk speed\n\nThe speed of the disk often acts as a bottleneck for the node's performance. It is crucial for optimizing your validator's performance rewards and the syncing process. We highly recommend a disk with a minimum of 10,000 IOPS for both write and read operations. Slower disks may hinder your ability to synchronize the blockchain successfully.\n\n#### Sync modes and disk usage\n\nA node can be run using different syncing options, and each option has different characteristics of disk space usage.\n\n- **Archive node.** This mode stores the full historical state for all blocks. As of July 2023, an archive node requires at least 14 TB of disk space, and it grows by approximately 60 GB per week. \n- **Ancient barriers.** Nethermind allows you to specify how many old block bodies and receipts you want to store. By default, Nethermind sets the ancient barrier at block 11052984. This block is significant because it marks the deployment of the deposit contract required for consensus client deposit scanning for validators. Peers and JSON-RPC requests will not have access to block bodies and receipts older than the ancient barrier.\n- **Non-validator mode.** This mode drops all historical receipts and bodies, but it cannot be used for validation.\n\nFor more details, see [sync modes](../fundamentals/sync.md).", "mimetype": "text/plain", "start_char_idx": 1776, "end_char_idx": 3924, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0813a86e-5bc8-48d7-a213-13ee3f553c88": {"__data__": {"id_": "0813a86e-5bc8-48d7-a213-13ee3f553c88", "embedding": null, "metadata": {"file_path": "./phala_dist/secret-key-hierarchy.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ca44f813-d1fe-4d7d-9dca-f574de8c3ddd", "node_type": "4", "metadata": {}, "hash": "bd1196c4a7058aec51f0c99036b6d3b0d4daecbed6531ccc02c6ecccac05b932", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c29c70f2-5b9a-421a-bcca-a97b8cbb75d8", "node_type": "1", "metadata": {}, "hash": "bf2d5444cbfd7079457a86b477b345bb7ec005cec0ebd8848f9f311764856e2a", "class_name": "RelatedNodeInfo"}}, "text": "# Secret Key Hierarchy\n\n## Key Hierarchy Management <a href=\"#key-hierarchy-management\" id=\"key-hierarchy-management\"></a>\n\nThe world\u2019s first key hierarchy for blockchain-TEE hybrid system was proposed by the \\[Ekiden [paper](https://ieeexplore.ieee.org/document/8806762) in 2019 and serves as the basis for the Oasis project. As a compute cloud, Phala improves this design to make it viable for a network of \\~100k nodes. We also introduce novel mechanisms like key rotation to further improve the robustness of the cloud.\n\nBefore we really dig into the details of our contract key management, it\u2019s important for readers to know that every entity in our system has its own identity key. Every user has their account, and every worker and gatekeeper (which are elected by the workers) has its own sr25519 WorkerKey pair, which is generated inside pRuntime (so also in SGX) and the private key never leaves the SGX. The identity key is used to:\n\n* Identify an entity\u2019s message with signing;\n* Establish an encrypted communication channel between users, workers, and gatekeepers with ECDH key agreement. **By default, any communication between any entities is encrypted in Phala**.\n\n![](https://miro.medium.com/max/4800/0\\*Kncy1jrLZ6ZiLltq)\n\nMasterKey is the root of trust for the whole network. All the contract-related keys, including ClusterKey and ContractKey, are derived from MasterKey. MasterKey is generated and shared by all the gatekeepers (through the encrypted communication channel mentioned above), making the security of MasterKey totally dependent on the security of gatekeepers. This is why gatekeepers are distinguished from other workers in that:\n\n* Gatekeepers are workers of top confidence level: they are immune to all known SGX vulnerabilities;\n* Unlike normal workers, the endpoints of gatekeepers are not public and you cannot deploy contracts to them. This reduces remote access to gatekeepers;\n* Increased staking amounts are required from gatekeepers to discourage bad behavior from their operators.\n\nIn Phala, workers are grouped into clusters to provide serverless computing services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c29c70f2-5b9a-421a-bcca-a97b8cbb75d8": {"__data__": {"id_": "c29c70f2-5b9a-421a-bcca-a97b8cbb75d8", "embedding": null, "metadata": {"file_path": "./phala_dist/secret-key-hierarchy.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ca44f813-d1fe-4d7d-9dca-f574de8c3ddd", "node_type": "4", "metadata": {}, "hash": "bd1196c4a7058aec51f0c99036b6d3b0d4daecbed6531ccc02c6ecccac05b932", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0813a86e-5bc8-48d7-a213-13ee3f553c88", "node_type": "1", "metadata": {}, "hash": "3394dc816ca1adfe2709e4faae4202bd43b2ec305e5a6080ace44f002b68a7c2", "class_name": "RelatedNodeInfo"}}, "text": "A unique ClusterKey is generated for each cluster using the MasterKey (through [key derivation](https://en.wikipedia.org/wiki/Key\\_derivation\\_function)), but you cannot revert this process to infer the MasterKey given the ClusterKey. The ClusterKey is shared with all the workers in that cluster.\n\nFinally, when a contract is deployed to a cluster, it\u2019s deployed to all the workers in that cluster. These workers will follow the deterministic process and derive the ClusterKey to get the same ContractKey. The ContractKeys are unique for different contracts.\n\n> _What are the consequences if certain keys are leaked?_\n>\n> If a WorkerKey is leaked, the attackers can decrypt all the messages sent to it such as the ClusterKey of its cluster, which can be used to access the ContractKeys of that cluster. Attackers could even impersonate a worker to provide false results to users. Such malicious activity can be detected by comparing the results from multiple workers, and then the chain would slash the compromised worker and confiscate that worker\u2019s staked PHA;\n>\n> If a ContractKey is leaked, the attackers can decrypt the states and all the historical inputs of that contract;\n>\n> If a ClusterKey is leaked, the attackers can know the above information of all the contracts in that cluster;\n>\n> If the MasterKey is leaked, then all historical data is leaked.\n\n> _What can we do if the worst case happens?_\n>\n> Phala has implemented the Key Rotation for gatekeepers, which means that with the permission of the Council, gatekeepers can update the MasterKey, then correspondingly the ClusterKeys and ContractKeys.\n>\n> So when the worst case happens, we will first register the new gatekeepers with the latest hardware, deregister all the old ones (since they are likely to be vulnerable) and switch to a new MasterKey.\n\n### Future Security Mechanism <a href=\"#future-security-mechanism\" id=\"future-security-mechanism\"></a>\n\n* Use Multi-Party Computation to manage MasterKey\n  * Currently, the same MasterKey is shared across all gatekeepers, so it\u2019s leaked if any one of them is compromised. By turning this into MPC, the attackers will have to compromise a majority of the gatekeepers to access the MasterKey.", "mimetype": "text/plain", "start_char_idx": 2113, "end_char_idx": 4325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35214b57-3e88-4e2c-b2a7-f7345b995b4c": {"__data__": {"id_": "35214b57-3e88-4e2c-b2a7-f7345b995b4c", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59a8533a-77b7-48eb-9627-19418ab4761e", "node_type": "1", "metadata": {}, "hash": "3606058fe14ac7b34ebde681006b1247ab7603575e9519ed98c19b5019b30be2", "class_name": "RelatedNodeInfo"}}, "text": "# Create a Weather Agent w/ Function Calling\n\n{% hint style=\"info\" %}\nView the example code [here](https://github.com/HashWarlock/ai-agent-template-hello). The code is based on the [guide](https://cookbook.openai.com/examples/how\\_to\\_build\\_an\\_agent\\_with\\_the\\_node\\_sdk) on how to build an agent from the OpenAI Cookbook.\n{% endhint %}\n\n## Overview\n\nIn this tutorial, you will learn how to create an agent with 2 functions to enable [function calling](https://platform.openai.com/docs/guides/function-calling) for your agent. The 2 functions we will implement are:\n\n* `getLocation()`  - Get the current location (latitude, longitude) based on the IP of the worker node if no location is described in the user prompt.\n* `getWeatherData(latitude, longitude)` - Get the current weather data based on the latitude and longitude retrieved from `getLocation()`.&#x20;\n\nThese two functions will be described for your agent to understand the purpose of the functions. Then we will set the system prompt for the agent with:\n\n```\nYou are a helpful assistant. Only use the functions you have been provided with.\n```\n\n## Getting Started\n\n### Prepare\n\nClone git repo or use [degit](https://www.npmjs.com/package/degit) to get the source code.\n\n{% tabs %}\n{% tab title=\"git\" %}\n```sh\ngit clone https://github.com/Phala-Network/ai-agent-template-openai.git\n```\n{% endtab %}\n\n{% tab title=\"degit\" %}\n```sh\nnpx degit github:Phala-Network/ai-agent-template-openai#main ai-agent-template-openai\n```\n{% endtab %}\n{% endtabs %}\n\nInstall dependencies\n\n```\nnpm install\n```\n\n## Creating Your Functions\n\nIn this step, we will create our 2 functions `getLocation()` and `getWeatherData(latitude, longitude)` then we will describe our functions for the agent to understand how to use the functions.\n\nGo to your `src/index.ts` file, your initial file should look like the following.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59a8533a-77b7-48eb-9627-19418ab4761e": {"__data__": {"id_": "59a8533a-77b7-48eb-9627-19418ab4761e", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35214b57-3e88-4e2c-b2a7-f7345b995b4c", "node_type": "1", "metadata": {}, "hash": "609756572568bebf1d79a043af8a8e1b00825283283896a16092426b46c96475", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "48b635cd-c863-40cf-a2b9-bd1fa1c5c5db", "node_type": "1", "metadata": {}, "hash": "1f0843e6a545b4a9c3c34b3174249b8049d97da37a0e1f5c398cb3618f0dea81", "class_name": "RelatedNodeInfo"}}, "text": "<details>\n\n<summary>src/index.ts</summary>\n\n```typescript\nimport { Request, Response, route } from './httpSupport'\nimport { renderHtml } from './uiSupport'\n\nimport OpenAI from 'openai'\n\nasync function GET(req: Request): Promise<Response> {\n    const secret = req.queries?.key ?? '';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const completion = await openai.chat.completions.create({\n        messages: [{ role: \"system\", content: `${query}` }],\n        model: 'gpt-3.5-turbo',\n    });\n\n    return new Response(renderHtml(completion.choices[0].message.content as string))\n}\n\nasync function POST(req: Request): Promise<Response> {\n    const secret = req.queries?.key ?? '';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const completion = await openai.chat.completions.create({\n        messages: [{ role: \"system\", content: `${query}` }],\n        model: 'gpt-3.5-turbo',\n    });\n\n    return new Response(renderHtml(completion.choices[0].message.content as string))\n}\n\nexport default async function main(request: string) {\n    return await route({ GET, POST }, request)\n}\n```\n\n</details>\n\n### Create getLocation()\n\nFor the `getLocation()` function, we will need to call an API to get the location based on [https://ipapi.co/](https://ipapi.co/). Traditionally, devs will not have access to the internet, but with Phala's AI Agent Contracts, devs now can make async HTTP calls to bring more data for fine tuning their agents.&#x20;\n\nThe implementation is simple and we will add this following code.", "mimetype": "text/plain", "start_char_idx": 1860, "end_char_idx": 3617, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48b635cd-c863-40cf-a2b9-bd1fa1c5c5db": {"__data__": {"id_": "48b635cd-c863-40cf-a2b9-bd1fa1c5c5db", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59a8533a-77b7-48eb-9627-19418ab4761e", "node_type": "1", "metadata": {}, "hash": "3606058fe14ac7b34ebde681006b1247ab7603575e9519ed98c19b5019b30be2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da9dc258-4911-46ab-b2f7-97114d8022e4", "node_type": "1", "metadata": {}, "hash": "96955a75a24090cc2849dc3806131617512cbea855da160772fda28c4fc3b53b", "class_name": "RelatedNodeInfo"}}, "text": "```typescript\nasync function getLocation() {\n    const response = await fetch(\"https://ipapi.co/json/\");\n    const locationData = await response.json();\n    return locationData;\n}\n```\n\n### Create getWeatherData(latitude, longitude)\n\nFor the getWeatherData(latitude, longitude) function, we will call the free weather API by [https://open-meteo.com/](https://open-meteo.com/).&#x20;\n\nWe will add the following code to our `index.ts` file.\n\n```typescript\nasync function getCurrentWeather(latitude: any, longitude: any) {\n    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=apparent_temperature`;\n    const response = await fetch(url);\n    const weatherData = await response.json();\n    return weatherData;\n}\n```\n\n### Describe Functions\n\nFor our OpenAI agent to understand the purpose of these functions, we need to describe them using a specific schema. We'll create an array called `tools` that contains one object per function. Each object will have two keys: `type`, `function`, and the `function` key has three subkeys: `name`, `description`, and `parameters`.\n\n```typescript\nconst tools = [\n    {\n        type: \"function\",\n        function: {\n            name: \"getCurrentWeather\",\n            description: \"Get the current weather in a given location\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    latitude: {\n                        type: \"string\",\n                    },\n                    longitude: {\n                        type: \"string\",\n                    },\n                },\n                required: [\"longitude\", \"latitude\"],\n            },\n        }\n    },\n    {\n        type: \"function\",\n        function: {\n            name: \"getLocation\",\n            description: \"Get the user's location based on their IP address\",\n            parameters: {\n                type: \"object\",\n                properties: {},\n            },\n        }\n    },\n];\n\nconst availableTools = {\n    getCurrentWeather,\n    getLocation,\n};\n```\n\n## Add Agent Functionality\n\n### Setup Messages for Agent\n\nWe need to define a `messages` array. This will keep track of all of the messages back and forth between our app and OpenAI. Here we create a type `MessageInfo` that will be the fields that may be included in the `messages` array.", "mimetype": "text/plain", "start_char_idx": 3619, "end_char_idx": 5964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da9dc258-4911-46ab-b2f7-97114d8022e4": {"__data__": {"id_": "da9dc258-4911-46ab-b2f7-97114d8022e4", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48b635cd-c863-40cf-a2b9-bd1fa1c5c5db", "node_type": "1", "metadata": {}, "hash": "1f0843e6a545b4a9c3c34b3174249b8049d97da37a0e1f5c398cb3618f0dea81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdae48e4-0ba8-43d9-b164-f7db9f884f7d", "node_type": "1", "metadata": {}, "hash": "7e8c0694f8c59f502c6216e556a13a43fc75cc2a6bfd812e36de928c23345170", "class_name": "RelatedNodeInfo"}}, "text": "The first object in the array should always have the `role` property set to `\"system\"`, which tells OpenAI that this is how we want it to behave.\n\n```typescript\ntype MessageInfo = {\n    role: any,\n    content: any,\n    name?: any,\n}\n\nconst messages: MessageInfo[] = [\n    {\n        role: \"system\",\n        content: `You are a helpful assistant. Only use the functions you have been provided with.`,\n    },\n];\n```\n\n### Create Agent Function For User Input\n\nWe are now ready to build the logic of our app, which lives in the `agent` function. It is asynchronous and takes one argument: the `userInput`.\n\nWe start by pushing the `userInput` to the messages array. This time, we set the `role` to `\"user\"`, so that OpenAI knows that this is the input from the user.\n\n```typescript\nasync function agent(openai, userInput) {\n  messages.push({\n    role: \"user\",\n    content: userInput,\n  });\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: messages,\n    tools: tools,\n  });\n  console.log(response);\n}\n```\n\nNext, we'll send a request to the Chat completions endpoint via the `chat.completions.create()` method in the Node SDK. This method takes a configuration object as an argument. In it, we'll specify three properties:\n\n* `model` - Decides which AI model we want to use (in our case, GPT-4).\n* `messages` - The entire history of messages between the user and the AI up until this point.\n* `tools` - A list of tools the model may call. Currently, only functions are supported as a tool., we'll we use the `tools` array we created earlier.\n\n### Turn OpenAI Agent Response into Functions\n\nNow that we have the name of the function as a string, we'll need to translate that into a function call.", "mimetype": "text/plain", "start_char_idx": 5966, "end_char_idx": 7698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdae48e4-0ba8-43d9-b164-f7db9f884f7d": {"__data__": {"id_": "fdae48e4-0ba8-43d9-b164-f7db9f884f7d", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da9dc258-4911-46ab-b2f7-97114d8022e4", "node_type": "1", "metadata": {}, "hash": "96955a75a24090cc2849dc3806131617512cbea855da160772fda28c4fc3b53b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1df9970-2a8f-455c-ae29-52b85692227e", "node_type": "1", "metadata": {}, "hash": "1cce29a21f358328777e6079cc311c14ba4fdc1adebff633ffd4ee0852545df0", "class_name": "RelatedNodeInfo"}}, "text": "To help us with that, we'll gather both of our functions in an object called `availableTools`:\n\n```typescript\nconst availableTools = {  getCurrentWeather,  getLocation,};\n```\n\nThis is handy because we'll be able to access the `getLocation` function via bracket notation and the string we got back from OpenAI, like this: `availableTools[\"getLocation\"]`.\n\n```typescript\nconst { finish_reason, message } = response.choices[0]; \nif (finish_reason === \"tool_calls\" && message.tool_calls) {  \n    const functionName = message.tool_calls[0].function.name;  \n    const functionToCall = availableTools[functionName];  \n    const functionArgs = JSON.parse(message.tool_calls[0].function.arguments);  \n    const functionArgsArr = Object.values(functionArgs);  \n    const functionResponse = await functionToCall.apply(null, functionArgsArr);  \n    console.log(functionResponse);\n}\n```\n\nWe're also grabbing ahold of any arguments OpenAI wants us to pass into the function: `message.tool_calls[0].function.arguments`. However, we won't need any arguments for this first function call.\n\nIf we run the code again with the same input (`\"Where am I located right now?\"`), we'll see that `functionResponse` is an object filled with location about where the user is located right now. In my case, that is Oslo, Norway.", "mimetype": "text/plain", "start_char_idx": 7699, "end_char_idx": 8998, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1df9970-2a8f-455c-ae29-52b85692227e": {"__data__": {"id_": "b1df9970-2a8f-455c-ae29-52b85692227e", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdae48e4-0ba8-43d9-b164-f7db9f884f7d", "node_type": "1", "metadata": {}, "hash": "7e8c0694f8c59f502c6216e556a13a43fc75cc2a6bfd812e36de928c23345170", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "18a64f86-c099-4b2c-9064-dffbaaf03ca4", "node_type": "1", "metadata": {}, "hash": "5274399673e8225230b0bd733b17b9814670b06d9c52801786b72e9ea0c55497", "class_name": "RelatedNodeInfo"}}, "text": "```bash\n{ip: \"193.212.60.170\", network: \"193.212.60.0/23\", version: \"IPv4\", city: \"Oslo\", region: \"Oslo County\", region_code: \"03\", country: \"NO\", country_name: \"Norway\", country_code: \"NO\", country_code_iso3: \"NOR\", country_capital: \"Oslo\", country_tld: \".no\", continent_code: \"EU\", in_eu: false, postal: \"0026\", latitude: 59.955, longitude: 10.859, timezone: \"Europe/Oslo\", utc_offset: \"+0200\", country_calling_code: \"+47\", currency: \"NOK\", currency_name: \"Krone\", languages: \"no,nb,nn,se,fi\", country_area: 324220, country_population: 5314336, asn: \"AS2119\", org: \"Telenor Norge AS\"}\n```\n\nWe'll add this data to a new item in the `messages` array, where we also specify the name of the function we called.\n\n```typescript\nmessages.push({\n  role: \"function\",\n  name: functionName,\n  content: `The result of the last function was this: ${JSON.stringify(\n    functionResponse\n  )}\n  `,\n});\n```\n\nNotice that the `role` is set to `\"function\"`. This tells OpenAI that the `content` parameter contains the result of the function call and not the input from the user.\n\nAt this point, we need to send a new request to OpenAI with this updated `messages` array. However, we don\u2019t want to hard code a new function call, as our agent might need to go back and forth between itself and GPT several times until it has found the final answer for the user.\n\nThis can be solved in several different ways, e.g. recursion, a while-loop, or a for-loop. We'll use a good old for-loop for the sake of simplicity.&#x20;\n\n### Creating The Loop\n\nAt the top of the `agent` function, we'll create a loop that lets us run the entire procedure up to five times.", "mimetype": "text/plain", "start_char_idx": 9000, "end_char_idx": 10634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18a64f86-c099-4b2c-9064-dffbaaf03ca4": {"__data__": {"id_": "18a64f86-c099-4b2c-9064-dffbaaf03ca4", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1df9970-2a8f-455c-ae29-52b85692227e", "node_type": "1", "metadata": {}, "hash": "1cce29a21f358328777e6079cc311c14ba4fdc1adebff633ffd4ee0852545df0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8b442c6-50e6-4301-849e-15e43ac323ee", "node_type": "1", "metadata": {}, "hash": "1fc465da41e82459ceaf12ba92086260d4c980586c0087a5dfba562014f6d8ec", "class_name": "RelatedNodeInfo"}}, "text": "If we get back `finish_reason: \"tool_calls\"` from GPT, we'll just push the result of the function call to the `messages` array and jump to the next iteration of the loop, triggering a new request.\n\nIf we get `finish_reason: \"stop\"` back, then GPT has found a suitable answer, so we'll return the function and cancel the loop.\n\n```typescript\nfor (let i = 0; i < 5; i++) {\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: messages,\n    tools: tools,\n  });\n  const { finish_reason, message } = response.choices[0];\n \n  if (finish_reason === \"tool_calls\" && message.tool_calls) {\n    const functionName = message.tool_calls[0].function.name;\n    const functionToCall = availableTools[functionName];\n    const functionArgs = JSON.parse(message.tool_calls[0].function.arguments);\n    const functionArgsArr = Object.values(functionArgs);\n    const functionResponse = await functionToCall.apply(null, functionArgsArr);\n \n    messages.push({\n      role: \"function\",\n      name: functionName,\n      content: `\n          The result of the last function was this: ${JSON.stringify(\n            functionResponse\n          )}\n          `,\n    });\n  } else if (finish_reason === \"stop\") {\n    messages.push(message);\n    return message.content;\n  }\n}\nreturn \"The maximum number of iterations has been met without a suitable answer. Please try again with a more specific input.\";\n```\n\nIf we don't see a `finish_reason: \"stop\"` within our five iterations, we'll return a message saying we couldn\u2019t find a suitable answer.\n\n## Update GET() and POST()\n\nNow we need to call our `agent(openai, userInput)` in our `GET` and `POST` calls that will pass in a users prompt that can be accessed in the `chatQuery` property. The code change is minimial and our functions look like the following.\n\n```typescript\nasync function GET(req: Request): Promise<Response> {\n    const secret = req.queries?.key ??", "mimetype": "text/plain", "start_char_idx": 10636, "end_char_idx": 12556, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8b442c6-50e6-4301-849e-15e43ac323ee": {"__data__": {"id_": "f8b442c6-50e6-4301-849e-15e43ac323ee", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18a64f86-c099-4b2c-9064-dffbaaf03ca4", "node_type": "1", "metadata": {}, "hash": "5274399673e8225230b0bd733b17b9814670b06d9c52801786b72e9ea0c55497", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a340a6ce-db64-44e6-b4e2-83a744e1c9c5", "node_type": "1", "metadata": {}, "hash": "7aa0b80fc8bc75fa22a4095a00b6414fb67dde5f61e6ee1578b6dfacb75ca02b", "class_name": "RelatedNodeInfo"}}, "text": "'';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const response = await agent(openai, query);\n\n    return new Response(renderHtml(response as string))\n}\n\nasync function POST(req: Request): Promise<Response> {\n    const secret = req.queries?.key ?? '';\n    const openaiApiKey = req.secret?.openaiApiKey as string;\n    const openai = new OpenAI({ apiKey: openaiApiKey })\n    const query = req.queries.chatQuery[0] as string;\n\n    const response = await agent(openai, query);\n\n    return new Response(renderHtml(response as string))\n}\n```\n\n## Test Locally\n\nNow that we have the code implemented to interact with APIs and call the functions, let's test the code locally.\n\nCreate `.env` file with the default ThirdWeb API key for publishing your Agent Contract to IPFS\n\n```\ncp .env.local .env\n```\n\nIn `./secrets/default.json` file replace `YOUR_OPENAI_KEY` with your API Key\n\n```json\n{\n  \"openaiApiKey\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n\n> In your `./tests/test.ts` file. Add your API Key manually to have a functional test.\n>\n> ```typescript\n> let getResult = await execute({\n>     method: 'GET',\n>     path: '/ipfs/CID',\n>     queries: { chatQuery: [\"Who are you?\"] },\n>     secret: { openaiApiKey: \"YOUR_OPENAI_API_KEY\" },\n>     headers: {},\n> })\n> ```\n\nBuild your Agent\n\n```\nnpm run build\n```\n\nTest your Agent locally\n\n```\nnpm run test\n```\n\nExpected output:\n\n```bash\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{},\"secret\":{\"openaiApiKey\":\"OPENAI_API_KEY\"},\"headers\":{}}\n[0]chat\n[1]chat\n[2]chat\nGET RESULT: {\n  status: 200,\n  body: `{\"message\":\"There's a lot to do in Austin, Texas! Here are some activities you might consider based on the current weather and various interests:\\\\n\\\\n### Outdoor Activities\\\\n1.", "mimetype": "text/plain", "start_char_idx": 12557, "end_char_idx": 14401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a340a6ce-db64-44e6-b4e2-83a744e1c9c5": {"__data__": {"id_": "a340a6ce-db64-44e6-b4e2-83a744e1c9c5", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8b442c6-50e6-4301-849e-15e43ac323ee", "node_type": "1", "metadata": {}, "hash": "1fc465da41e82459ceaf12ba92086260d4c980586c0087a5dfba562014f6d8ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b5577030-cab5-4527-965b-4b879c24049c", "node_type": "1", "metadata": {}, "hash": "aaf0e8260d75b17cfbca591f96a9523c04cce1c5f7271a22c8e300b3b33afb35", "class_name": "RelatedNodeInfo"}}, "text": "**Lady Bird Lake & Zilker Park**\\\\n   - **Kayaking/Paddleboarding**: Enjoy a relaxing paddle on Lady Bird Lake.\\\\n   - **Hiking/Biking**: Explore the trails around Zilker Park and Barton Springs.\\\\n\\\\n2. **Barton Springs Pool**\\\\n   - A perfect spot for a swim and to cool off from the summer heat.\\\\n\\\\n3. **Mount Bonnell**\\\\n   - For those who love scenic views and a bit of hiking, head to Mount Bonnell for a panoramic view of the city.\\\\n\\\\n### Cultural Activities\\\\n1. **Blanton Museum of Art**\\\\n   - Explore a variety of art collections ranging from contemporary to ancient.\\\\n\\\\n2. **Bullock Texas State History Museum**\\\\n   - Learn about the rich history of Texas through exhibits and films.\\\\n\\\\n3. **South Congress Avenue (SoCo)**\\\\n   - Wander through boutique shops, galleries, and enjoy some street performances.\\\\n\\\\n### Music & Nightlife\\\\n1. **Live Music**\\\\n   - Check out iconic venues like the Continental Club or Antone\u2019s for some live performances.\\\\n\\\\n2. **Rainey Street Historic District**\\\\n   - Explore a variety of bars and food trucks in this lively area.\\\\n\\\\n### Food & Beverage\\\\n1. **BBQ Heaven**\\\\n   - Visit Franklin Barbecue or la Barbecue for some of the best BBQ in the city.\\\\n   \\\\n2. **Food Trucks**\\\\n   - Explore the diverse array of food trucks offering a variety of cuisines.\\\\n\\\\n### Weather Considerations\\\\n- The apparent temperature during the day can reach up to 37.2\u00b0C (98.96\u00b0F) with some moments going as high as 38.9\u00b0C (102.02\u00b0F). Ensure you stay hydrated and take breaks in shaded or air-conditioned areas.\\\\n\\\\nNo matter what your interests are, Austin has a variety of activities to make your day enjoyable. Make sure to check local event listings as well for any special events or festivals happening today.", "mimetype": "text/plain", "start_char_idx": 14402, "end_char_idx": 16168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5577030-cab5-4527-965b-4b879c24049c": {"__data__": {"id_": "b5577030-cab5-4527-965b-4b879c24049c", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a340a6ce-db64-44e6-b4e2-83a744e1c9c5", "node_type": "1", "metadata": {}, "hash": "7aa0b80fc8bc75fa22a4095a00b6414fb67dde5f61e6ee1578b6dfacb75ca02b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dcfda2cd-9e75-486e-b6cb-be1ffbf9a94c", "node_type": "1", "metadata": {}, "hash": "a7dabb7349ebbab040ea262e5fd2ab83ce775f7fb17b8e017c6605b95e79dd35", "class_name": "RelatedNodeInfo"}}, "text": "\"}`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nINPUT: {\"method\":\"GET\",\"path\":\"/ipfs/CID\",\"queries\":{\"chatQuery\":[\"What are some activities based in Brussels today?\"]},\"secret\":{\"openaiApiKey\":\"OPENAI_API_KEY\"},\"headers\":{}}\n[0]chat\n[1]chat\n[2]chat\n[3]chat\nGET RESULT: {\n  status: 200,\n  body: `{\"message\":\"Brussels is a vibrant city with a lot of things to offer on any given day. Here are some activities you can enjoy today:\\\\n\\\\n### Outdoor Activities\\\\n1. **Grand Place**\\\\n   - Visit the heart of Brussels and marvel at the stunning architecture. You might catch some street performances as well.\\\\n\\\\n2. **Parc du Cinquantenaire**\\\\n   - Take a relaxing stroll or have a picnic in this beautiful park.\\\\n\\\\n3. **Atomium**\\\\n   - Explore this unique building and enjoy panoramic views of the city.\\\\n\\\\n### Cultural Activities\\\\n1. **Royal Museums of Fine Arts of Belgium**\\\\n   - Explore Belgian art and various exhibitions ranging from ancient to modern art.\\\\n\\\\n2. **Magritte Museum**\\\\n   - Dive into the surreal world of Ren\u00e9 Magritte, one of Belgium's most famous artists.\\\\n\\\\n3. **Belgian Comic Strip Center**\\\\n   - Discover the rich history of comic strips in Belgium, including famous characters like Tintin.\\\\n\\\\n### Gourmet Experiences\\\\n1. **Chocolate and Beer Tours**\\\\n   - Take a guided tour to sample some of Brussels' best chocolates and beers.\\\\n\\\\n2. **Waffles and Frites**\\\\n   - Enjoy traditional Belgian waffles and fries at local eateries.\\\\n\\\\n### Shopping and Markets\\\\n1. **Galeries Royales Saint-Hubert**\\\\n   - Explore this beautiful shopping arcade filled with boutique shops and cafes.\\\\n\\\\n2. **Marolles Flea Market**\\\\n   - Hunt for unique items and antiques at this bustling market.\\\\n\\\\n### Theatre and Music\\\\n1.", "mimetype": "text/plain", "start_char_idx": 16168, "end_char_idx": 17979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcfda2cd-9e75-486e-b6cb-be1ffbf9a94c": {"__data__": {"id_": "dcfda2cd-9e75-486e-b6cb-be1ffbf9a94c", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b5577030-cab5-4527-965b-4b879c24049c", "node_type": "1", "metadata": {}, "hash": "aaf0e8260d75b17cfbca591f96a9523c04cce1c5f7271a22c8e300b3b33afb35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f2b306a-501c-404c-a818-8e8b18154436", "node_type": "1", "metadata": {}, "hash": "b13922e4659cd9dcb9c381e05e9fa40e336be1bb0f5e384ca4a8250fb32101e9", "class_name": "RelatedNodeInfo"}}, "text": "**Ancienne Belgique**\\\\n   - Check out the schedule for any concerts or performances happening today.\\\\n\\\\n2. **La Monnaie/De Munt**\\\\n   - Attend an opera or a ballet performance if available.\\\\n\\\\n### Historical Sites\\\\n1. **Manneken Pis**\\\\n   - Visit this famous statue, which often gets dressed up in various costumes.\\\\n\\\\n2. **Palais de Justice**\\\\n   - Visit this impressive courthouse and enjoy the views from its location.\\\\n\\\\n### Weather Considerations\\\\n- The apparent temperature in Brussels today ranges from 15.9\u00b0C (60.62\u00b0F) in the early morning to a high of around 31.6\u00b0C (88.88\u00b0F) in the late afternoon. Thus, it is quite pleasant for outdoor activities.\\\\n\\\\nWhatever your interests, Brussels has something to offer for everyone. Make sure to check local event listings as well for any special events or festivals happening today. Enjoy your day!\"}`,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  }\n}\nNow you are ready to publish your agent, add secrets, and interact with your agent in the following steps:\n- Execute: 'npm run publish-agent'\n- Set secrets: 'npm run set-secrets'\n- Go to the url produced by setting the secrets (e.g. https://wapo-testnet.phala.network/ipfs/QmPQJD5zv3cYDRM25uGAVjLvXGNyQf9Vonz7rqkQB52Jae?key=b092532592cbd0cf)\n```\n\n## Publish & Interact with Agent\n\nWith our test passing and everything working as expected, now we can build and publish our agent code to IPFS. Then we will set our secrets and access our deployed agent via the Phala Gateway at https://wapo-testnet.phala.network/ipfs/\\<cid>?key=\\<key\\_id>\\&chatQuery=\\<chat\\_query>.\n\nUpload your compiled AI Agent code to IPFS.\n\n```bash\nnpm run publish-agent\n```\n\nUpon a successful upload, the command should show the URL to access your AI Agent.\n\n```\n\u2713 Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 17980, "end_char_idx": 19806, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f2b306a-501c-404c-a818-8e8b18154436": {"__data__": {"id_": "7f2b306a-501c-404c-a818-8e8b18154436", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dcfda2cd-9e75-486e-b6cb-be1ffbf9a94c", "node_type": "1", "metadata": {}, "hash": "a7dabb7349ebbab040ea262e5fd2ab83ce775f7fb17b8e017c6605b95e79dd35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70968419-04ec-48d5-8de9-b53ce45f7e5e", "node_type": "1", "metadata": {}, "hash": "1517482869521cea284c7280a3ce3b5d88905844608737171e976e444b77005c", "class_name": "RelatedNodeInfo"}}, "text": "78.19 KB  dist/index.js\nRunning command: npx thirdweb upload dist/index.js\nThis may require you to log into thirdweb and will take some time to publish to IPFS...\n\n    $$\\     $$\\       $$\\                 $$\\                         $$\\       \n    $$ |    $$ |      \\__|                $$ |                        $$ |      \n  $$$$$$\\   $$$$$$$\\  $$\\  $$$$$$\\   $$$$$$$ |$$\\  $$\\  $$\\  $$$$$$\\  $$$$$$$\\  \n  \\_$$  _|  $$  __$$\\ $$ |$$  __$$\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\ $$  __$$\\ \n    $$ |    $$ |  $$ |$$ |$$ |  \\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\n    $$ |$$\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\n    \\$$$$  |$$ |  $$ |$$ |$$ |      \\$$$$$$$ |\\$$$$$\\$$$$  |\\$$$$$$$\\ $$$$$$$  |\n     \\____/ \\__|  \\__|\\__|\\__|       \\_______| \\_____\\____/  \\_______|\\_______/ \n\n \ud83d\udc8e thirdweb v0.14.12 \ud83d\udc8e\n\n- Uploading file to IPFS. This may take a while depending on file sizes.\n\n\u2714 Successfully uploaded file to IPFS.", "mimetype": "text/plain", "start_char_idx": 19809, "end_char_idx": 20757, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70968419-04ec-48d5-8de9-b53ce45f7e5e": {"__data__": {"id_": "70968419-04ec-48d5-8de9-b53ce45f7e5e", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f2b306a-501c-404c-a818-8e8b18154436", "node_type": "1", "metadata": {}, "hash": "b13922e4659cd9dcb9c381e05e9fa40e336be1bb0f5e384ca4a8250fb32101e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f3694e2-4a5b-49a7-a4ff-2073eae508fb", "node_type": "1", "metadata": {}, "hash": "aad5f1e91c64c1c8b2af8c471fdeb431572025c91bf394ef39b77e6cd20ca133", "class_name": "RelatedNodeInfo"}}, "text": "\u2714 Files stored at the following IPFS URI: ipfs://QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n\n\u2714 Open this link to view your upload: https://b805a9b72767504353244e0422c2b5f9.ipfscdn.io/ipfs/bafybeibbasdv4xt32ea74ga77rpr5kgnkxcgqbtoslgxagzhmmujcjwkym/\n\nAgent Contract deployed at: https://wapo-testnet.phala.network/ipfs/QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n\n\nIf your agent requires secrets, ensure to do the following:\n1) Edit the ./secrets/default.json file or create a new JSON file in the ./secrets folder and add your secrets to it.\n2) Run command: 'npm run set-secrets' or 'npm run set-secrets [path-to-json-file]'\nLogs folder created.\nDeployment information updated in ./logs/latestDeployment.json\n```\n\n{% hint style=\"info\" %}\n**Note** that your latest deployment information will be logged to in file [`./logs/latestDeployment.json`](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/logs/latestDeployment.json). This file is updated every time you publish a new Agent Contract to IPFS. This file is also used to get the IPFS CID of your Agent Contract when setting secrets for your Agent Contract.\n\nHere is an example:\n\n```\n{\n  \"date\": \"2024-08-29T20:28:20.081Z\",\n  \"cid\": \"QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu\",\n  \"url\": \"https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu\"\n}\n```\n{% endhint %}\n\n{% hint style=\"warning\" %}\n**Did Thirdweb fail to publish?", "mimetype": "text/plain", "start_char_idx": 20758, "end_char_idx": 22200, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f3694e2-4a5b-49a7-a4ff-2073eae508fb": {"__data__": {"id_": "2f3694e2-4a5b-49a7-a4ff-2073eae508fb", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70968419-04ec-48d5-8de9-b53ce45f7e5e", "node_type": "1", "metadata": {}, "hash": "1517482869521cea284c7280a3ce3b5d88905844608737171e976e444b77005c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1ae6e68-80be-4dba-8be2-b8c4792eb92c", "node_type": "1", "metadata": {}, "hash": "ea67436df927e99e58e58376279243c69f7fb4f166744234c0d9b8fbb5cffd0f", "class_name": "RelatedNodeInfo"}}, "text": "**\n\nIf ThirdWeb fails to publish, please signup for your own ThirdWeb account to publish your Agent Contract to IPFS. Signup or login at [https://thirdweb.com/dashboard/](https://thirdweb.com/dashboard/)\n\nWhenever you log into ThirdWeb, create a new API key and replace the default API Key with yours in the [.env](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/.env) file.\\\n`THIRDWEB_API_KEY=\"YOUR_THIRDWEB_API_KEY\"`\n{% endhint %}\n\n### Add Secrets\n\nBy default, all the compiled JS code is visible for anyone to view if they look at IPFS CID. This makes private info like API keys, signer keys, etc. vulnerable to be stolen. To protect devs from leaking keys, we have added a field called `secret` in the `Request` object. It allows you to store secrets in a vault for your AI Agent to access.\n\nTo add your secrets,\n\n1. Edit the [default.json](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/secrets/default.json) file or create a new JSON file in the `./secrets` folder and add your secrets to it.\n\n```\n{\n  \"openaiApiKey\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n\n2. Run command to set the secrets\n\n```\nnpm run set-secrets\n# or if you have a custom JSON file\nnpm run set-secrets <path-to-json-file>\n```\n\nExpected output:\n\n```sh\nUse default secrets...\nStoring secrets...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   205    0    68  100   137    105    213 --:--:-- --:--:-- --:--:--   319\n{\"token\":\"37a0f3f344a3bbf7\",\"key\":\"343e2a7dc130fedf\",\"succeed\":true}\n\nSecrets set successfully.", "mimetype": "text/plain", "start_char_idx": 22200, "end_char_idx": 23844, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1ae6e68-80be-4dba-8be2-b8c4792eb92c": {"__data__": {"id_": "b1ae6e68-80be-4dba-8be2-b8c4792eb92c", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f3694e2-4a5b-49a7-a4ff-2073eae508fb", "node_type": "1", "metadata": {}, "hash": "aad5f1e91c64c1c8b2af8c471fdeb431572025c91bf394ef39b77e6cd20ca133", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ccb5fe5-5620-4651-bf69-45e2d5868b04", "node_type": "1", "metadata": {}, "hash": "bb89d8575f8ad4dd6332024d915288a30215df48c57ccabdd6f3b539ddcbfbb9", "class_name": "RelatedNodeInfo"}}, "text": "Go to the URL below to interact with your agent:\nhttps://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu?key=343e2a7dc130fedf\nLog entry added to secrets.log\n```\n\n> Note that all your secrets will be logged in file [`./logs/secrets.log`](https://github.com/Phala-Network/ai-agent-template-func-calling/blob/main/logs/secrets.log). This file is updated every time you add new secrets to your Agent Contract. If you have not published an Agent Contract, yet, this command will fail since there is not a CID to map the secrets to.\n>\n> Here is an example:\n>\n> ```\n> 2024-08-29T20:30:35.480Z, CID: [QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu], Token: [37a0f3f344a3bbf7], Key: [343e2a7dc130fedf], URL: [https://wapo-testnet.phala.network/ipfs/QmYzBTdQNPewdhD9GdBJ9TdV7LVhrh9YVRiV8aBup7qZGu?key=343e2a7dc130fedf]\n> ```\n\nThe API returns a `token` and a `key`. The `key` is the id of your secret. It can be used to specify which secret you are going to pass to your frame. The `token` can be used by the developer to access the raw secret. You should never leak the `token`.\n\nTo verify the secret, run the following command where `key` and `token` are replaced with the values from adding your `secret` to the vault.", "mimetype": "text/plain", "start_char_idx": 23845, "end_char_idx": 25086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ccb5fe5-5620-4651-bf69-45e2d5868b04": {"__data__": {"id_": "5ccb5fe5-5620-4651-bf69-45e2d5868b04", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1ae6e68-80be-4dba-8be2-b8c4792eb92c", "node_type": "1", "metadata": {}, "hash": "ea67436df927e99e58e58376279243c69f7fb4f166744234c0d9b8fbb5cffd0f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6bd7703-29fb-4cae-af77-c7288b49e5f1", "node_type": "1", "metadata": {}, "hash": "0556d6f77179c75cb34d21dedbf9e2b1a9957dfd416bf8f78d85e41cf688ee77", "class_name": "RelatedNodeInfo"}}, "text": "```\ncurl https://wapo-testnet.phala.network/vaults/<key>/<token>\n```\n\nExpected output:\n\n```\n{\"data\":{\"openaiApiKey\":\"<OPENAI_API_KEY>\"},\"succeed\":true}\n```\n\n### Access Queries\n\nTo help create custom logic, we have an array variable named `queries` that can be accessed in the `Request` class. To access the `queries` array variable `chatQuery` value at index `0`, the syntax will look as follows:\n\n```\nconst query = req.queries.chatQuery[0] as string;\n```\n\nHere is an example of adding a URL query named `chatQuery` with a value of `When did humans land on the moon`. `queries` can have any field name, so `chatQuery` is just an example of a field name and not a mandatory name, but remember to update your `index.ts` file logic to use your expected field name.\n\n> [https://wapo-testnet.phala.network/ipfs/Qmc7EDq1X8rfYGGfHyXZ6xsmcSUWQcqsDoeRMfmvFujih3?key=51f265212c26086c&<mark style=\"background-color:yellow;\">**chatQuery**</mark>=When%20did%20humans%20land%20on%20the%20moon](https://wapo-testnet.phala.network/ipfs/Qmc7EDq1X8rfYGGfHyXZ6xsmcSUWQcqsDoeRMfmvFujih3?key=51f265212c26086c\\&chatQuery=When%20did%20humans%20land%20on%20the%20moon)\n\n### Query Your Deployed Agent\n\nNow that your agent is deployed, you can access the agent through a `curl` request or insert the url with the `key` and `chatQuery` defined. Here is an example of the code from the tutorial we just walked through.", "mimetype": "text/plain", "start_char_idx": 25088, "end_char_idx": 26478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6bd7703-29fb-4cae-af77-c7288b49e5f1": {"__data__": {"id_": "d6bd7703-29fb-4cae-af77-c7288b49e5f1", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ccb5fe5-5620-4651-bf69-45e2d5868b04", "node_type": "1", "metadata": {}, "hash": "bb89d8575f8ad4dd6332024d915288a30215df48c57ccabdd6f3b539ddcbfbb9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df393344-8401-44c6-9328-7396c7b77d79", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "Example: [https://wapo-testnet.phala.network/ipfs/QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n?key=5150856fe20eb558&<mark style=\"background-color:yellow;\">chatQuery</mark>=What%20are%20activities%20to%20do%20in%20Singapore%20today](https://wapo-testnet.phala.network/ipfs/QmQZYAkEz8RnX9phpWscDLsv1u7uBATaAYHb1prpFGvD4n?key=5150856fe20eb558\\&chatQuery=What%20are%20activities%20to%20do%20in%20Singapore%20today)\n\n### Debugging Your Agent\n\nTo debug your agent, you can use the following command:\n\n```\ncurl https://wapo-testnet.phala.network/logs/all/ipfs/<CID>\n```\n\nAfter executing this command then you should see some output in the terminal to show the logs of requests to your agent.\n\n```\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] END Request: Duration: 166ms\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Is signature valid? ' true\n2024-09-04T03:18:34.758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [INFO] 'Verifying Signature with PublicKey ' '0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540'\n2024-09-04T03:18:34.", "mimetype": "text/plain", "start_char_idx": 26480, "end_char_idx": 27547, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df393344-8401-44c6-9328-7396c7b77d79": {"__data__": {"id_": "df393344-8401-44c6-9328-7396c7b77d79", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6bd7703-29fb-4cae-af77-c7288b49e5f1", "node_type": "1", "metadata": {}, "hash": "0556d6f77179c75cb34d21dedbf9e2b1a9957dfd416bf8f78d85e41cf688ee77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5654f98-d63c-406d-b066-4efd01fab2c6", "node_type": "1", "metadata": {}, "hash": "9629fd0b6d24b2b2c7f655a205315bff15ba8067078a66ecf2dba35795739c31", "class_name": "RelatedNodeInfo"}}, "text": "758Z [95f5ec53-3d71-4bb5-bbb6-66065211102c] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=verify&data=tintinland%20message%20to%20sign&signature=0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] END Request: Duration: 183ms\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signature: 0x34c4d8c83406e7a292ecc940d60b34c9b11024db10a8872c753b9711cd6dbc8f746da8be9bc2ae0898ebf8f49f48c2ff4ba2a851143c3e4b371647eed32f707b1b'\n2024-09-04T03:17:15.238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [INFO] 'Signing data [tintinland message to sign] with Account [0xC1BF8dB4D06416c43Aca3deB289CF7CC0aAFF540]'\n2024-09-04T03:17:15.", "mimetype": "text/plain", "start_char_idx": 27547, "end_char_idx": 28398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5654f98-d63c-406d-b066-4efd01fab2c6": {"__data__": {"id_": "c5654f98-d63c-406d-b066-4efd01fab2c6", "embedding": null, "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce", "node_type": "4", "metadata": {}, "hash": "289e2fdda07c68793f5f8c0c5bc78127bd82c40fdaa99912f036066be5ee03ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df393344-8401-44c6-9328-7396c7b77d79", "node_type": "1", "metadata": {}, "hash": "63a02dad60a8552625d205da7f8cd0a30408caa8a67122d2db20e397b1cf7bd2", "class_name": "RelatedNodeInfo"}}, "text": "238Z [768b6fda-f9f1-463f-86bd-a948e002bf80] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd&type=sign&data=tintinland%20message%20to%20sign\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] END Request: Duration: 169ms\n2024-09-04T03:16:38.507Z [3717d307-bff0-4fc0-bc98-8f66c33dd46f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64a1e805bfd\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] END Request: Duration: 158ms\n2024-09-04T03:15:00.375Z [793f58f9-f24f-4580-8ebc-04debb7d727f] [REPORT] START Request: GET /ipfs/QmfLpQjxAMsppUX9og7xpmfSKZAZ8zuWJV5g42DmpASSWz?key=0e26a64\na1e805bfd\n```\n\nTo create logs in your Agent Contract, you can use the following syntax in your `index.ts` file.\n\n```\n// info logs\nconsole.log('info log message!')\n// error logs\nconsole.error('error log message!')\n```\n\nFor more information check the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/console) on `console` object.", "mimetype": "text/plain", "start_char_idx": 28398, "end_char_idx": 29457, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "135147d6-ce8d-48e6-9f4e-18c09710608a": {"__data__": {"id_": "135147d6-ce8d-48e6-9f4e-18c09710608a", "embedding": null, "metadata": {"file_path": "./phala_dist/create-and-play-with-social-agents.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cec680df-a496-4129-b16a-c293c82d4e19", "node_type": "4", "metadata": {}, "hash": "28f032fe9f36df4858efcba6e4706640e4df57e49bfbba11f5cfac277698d6ba", "class_name": "RelatedNodeInfo"}}, "text": "# Create and Play with Social Agents\n\n<figure><img src=\"../../.gitbook/assets/Agent_wars_coming_soon.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 147, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3267ee0d-cb81-4032-8da5-dffb6bed731f": {"__data__": {"id_": "3267ee0d-cb81-4032-8da5-dffb6bed731f", "embedding": null, "metadata": {"file_path": "./phala_dist/call-your-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ce7b196-10ce-4de3-ac11-d3573b59bad7", "node_type": "4", "metadata": {}, "hash": "bebf1e5abfbee0b996a3b1c0833f98c64ca8b15b0ace6a677201daa398115133", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b8b8f094-b252-4968-95c1-468a4a8f4b48", "node_type": "1", "metadata": {}, "hash": "7ab6e14de8aac98b1d7b7d6cef51aea5abe1f8ee5d19b4894f1bc6da7245786c", "class_name": "RelatedNodeInfo"}}, "text": "# Call Your Contract\n\n## Query and Transaction <a href=\"#query-and-transaction\" id=\"query-and-transaction\"></a>\n\nYou can call your Phat Contract in two ways: on-chain _transactions_ and off-chain _queries_. A Phat contract supports both types of input, but they are very different.\n\nWe recommend using more queries in your contracts and only using the transactions to set some important configurations. This is because many unique features of Phat Contract are only available in query handler functions.\n\n|                       | Transaction | Query |\n| --------------------- | ----------- | ----- |\n| Encrypted             | \u2705           | \u2705     |\n| Posted on chain       | \u2705           | \u274c     |\n| Direct to worker      | \u274c           | \u2705     |\n| Read contract state   | \u2705           | \u2705     |\n| Change contract state | \u2705           | \u274c     |\n| No gas fee            | \u274c           | \u2705     |\n| Latency               | 6s          | 0s    |\n| Deterministic         | \u2705           | \u274c     |\n| Internet Access       | \u274c           | \u2705     |\n\n## Handle Query and Transaction <a href=\"#handle-query-and-transaction\" id=\"handle-query-and-transaction\"></a>\n\nDespite the obscure underlying mechanism, from the code side, handling the queries and transactions can be really easy in Phat Contract.\n\n```\n#[ink(message)]\npub fn query_handler(&self, arg1: AccountId, arg2: u32) {\n    // actual implementation\n}\n\n#[ink(message)]\npub fn transaction_handler(&mut self, arg1: AccountId, arg2: u32) {\n    // actual implementation\n}\n```\n\nIn Phat Contract, defining a user request handler is as simple as labeling a function with `#[ink(message)]`. The only difference between a transaction handler and a query handler is how they refer to the contract state:\n\n* Query handler holds immutable reference `&self`, they can read the current contract states but should not change them;\n* Transaction handler holds mutable reference `&mut self`, so they are allowed to update the contract states.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8b8f094-b252-4968-95c1-468a4a8f4b48": {"__data__": {"id_": "b8b8f094-b252-4968-95c1-468a4a8f4b48", "embedding": null, "metadata": {"file_path": "./phala_dist/call-your-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ce7b196-10ce-4de3-ac11-d3573b59bad7", "node_type": "4", "metadata": {}, "hash": "bebf1e5abfbee0b996a3b1c0833f98c64ca8b15b0ace6a677201daa398115133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3267ee0d-cb81-4032-8da5-dffb6bed731f", "node_type": "1", "metadata": {}, "hash": "e0303967b25536b15966ffc4e752040c9ea5abf46a95460b81c7633279392acc", "class_name": "RelatedNodeInfo"}}, "text": "### Available Functionalities <a href=\"#available-functionalities\" id=\"available-functionalities\"></a>\n\nPhat Contract has unique capabilities, and they are provided as functions in [pink-extension](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink) (short for Phala ink! Extension). You can use all these functions in your query handler functions, but some of them are disabled in transaction handlers since they can lead to inconsistent on-chain states.\n\nCheck the detailed list in the following section.\n\n## Learn More about Query <a href=\"#learn-more-about-query\" id=\"learn-more-about-query\"></a>\n\nFor all existing smart contracts, a user needs to send a transaction on-chain and wait for it to be processed by the contract.\n\nThe most significant difference between Phat Contract and other smart contracts is that it runs off-chain. This enables it to directly receive and process users' off-chain requests (called _Query_), other than the traditional on-chain transactions. For the first time, you can process these two kinds of requests in one contract.\n\n> If you do not know what\u2019s transaction and how they are processed in traditional smart contracts, refer to [Ethereum\u2019s introduction on smart contract](https://ethereum.org/en/developers/docs/smart-contracts/). The transactions are processed in exactly the same way in Phat Contract.\n\n<figure><img src=\"../../../../.gitbook/assets/general-node-design.png\" alt=\"\"><figcaption></figcaption></figure>\n\nSince queries are never submitted on-chain, it has unique features compared with transactions:\n\n* it is never recorded on-chain, thus volatile. So query handling logic is not allowed to change the contract states on-chain (but you are free to read these states when processing queries);\n* it requires no gas fee for users to send queries to a contract;\n* there is zero latency in query processing since it does not need to wait for block production.\n\nBoth the advantages and disadvantages of the query are clear:\n\n* Pros: Query removes the performance and functional limitations on transaction processing, while still able to read the contract states;\n* Cons: You need to be extremely careful when you allow queries to affect your contract states since concurrent query handling can lead to unexpected execution results.\n\nThat\u2019s why we choose to start with stateless DApp building: it totally avoids the weakness of the query. We leave the stateful application building as an advanced topic.", "mimetype": "text/plain", "start_char_idx": 1968, "end_char_idx": 4442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb3c75c8-4631-43be-b19d-4344f31b7f8d": {"__data__": {"id_": "eb3c75c8-4631-43be-b19d-4344f31b7f8d", "embedding": null, "metadata": {"file_path": "./phala_dist/cluster-of-workers.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ebddc10-3409-4e20-beb5-47e530dbd813", "node_type": "4", "metadata": {}, "hash": "63483a623e913f39011aefcb2e8bd36f768c854f1a01d1d4f06018cf9fda8b89", "class_name": "RelatedNodeInfo"}}, "text": "# Cluster of Workers\n\n## Cluster: Abstraction of Workers <a href=\"#cluster-abstraction-of-workers\" id=\"cluster-abstraction-of-workers\"></a>\n\nPhala has many Workers but we do not expose them to developers directly. They are organized into _Clusters_ and used by our developers.\n\n![](https://i.imgur.com/G4T51Ht.png)\n\n* Contracts must be deployed to a Cluster, and a Cluster can hold multiple contracts\n  * Contracts in different Clusters have no relationship, even if they share the same code\n  * Contracts in one Cluster can call each other, and contracts in different Clusters need to call each other in an XCM-like way (BTW, the XCM support is WIP, so this should be supported soon)\n* A Cluster is backed by one or more Workers\n  * The Worker will run all the contracts in this Cluster\n* Different access controls can be defined for different Clusters\n  * like who can deploy how many contracts in this Cluster\n\nAccordingly, we have a two-level contract tokenomics for this design.\n\n* The L1 tokenomics define how you stake $PHA to rent Workers and form your Cluster\n  * We will provide the public good Clusters, and people can stake $PHA to get the proportional computing power in our network\n* The L2 tokenomics define how Cluster owners charge the contract deployers\n  * We provide a [template implementation](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink-drivers) (with `Public` and `OnlyOwner` rules) and will allow owners to implement their own logic with Phat Contract", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bc73f01-97d3-469a-b145-dba543e6bab1": {"__data__": {"id_": "4bc73f01-97d3-469a-b145-dba543e6bab1", "embedding": null, "metadata": {"file_path": "./phala_dist/cross-chain-solutions.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "915c1c22-3978-49af-b5af-f4d55e5d46e3", "node_type": "4", "metadata": {}, "hash": "e3a2097f1899d5c44fcc36f6af0ec9e95400a2b6dfc27667c12d7f673564bb0d", "class_name": "RelatedNodeInfo"}}, "text": "# Cross Chain Solutions\n\nThe Phat Contract Offchain Rollup documentation is located in our GitHub Repository [here](https://github.com/Phala-Network/phat-offchain-rollup).\n\n* [EVM Details](https://github.com/Phala-Network/phat-offchain-rollup/blob/main/EvmRollup.md) for deploying an offchain rollup on EVM based chains.\n* [Technical details](https://github.com/Phala-Network/phat-offchain-rollup/blob/main/TechnicalDetails.md) of the overall architecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c52261dc-67a5-449a-a006-8b0bf857ade5": {"__data__": {"id_": "c52261dc-67a5-449a-a006-8b0bf857ade5", "embedding": null, "metadata": {"file_path": "./phala_dist/create-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7bc81cd-e68b-425b-b6b6-e25c18a53d8b", "node_type": "4", "metadata": {}, "hash": "d3276915a6130f6188c9ef1ecaea84c71bd2789d86718c5102f2a2e767e76811", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "221acc83-ba32-496e-a38a-14310e2f5083", "node_type": "1", "metadata": {}, "hash": "984ba056c63ea28aa46283458470a702a168a5d8ccdaedd8b9ec88f27ef0f570", "class_name": "RelatedNodeInfo"}}, "text": "# Create Contract\n\n## Create and Compile Your First Contract <a href=\"#create-and-compile-your-first-contract\" id=\"create-and-compile-your-first-contract\"></a>\n\nThere are a couple ways to get you started.\n\n{% tabs %}\n{% tab title=\"Swanky Phala\" %}\n> If you have not installed `swanky phala` CLI tool, follow these [steps](swanky-phala-cli-tool.md) to get started.\n\nGo to your development workspace and initialize a new project. For this tutorial, we will name the project `Norwhich` and choose the `phat_hello` template.\n\n```bash\nswanky phala init Norwhich\n```\n\nHere is a video example of the creating the new project called `Norwhich`.\n\n{% embed url=\"https://youtu.be/gAPV01e9Ljs\" %}\nswanky phala init\n{% endembed %}\n\nNext, `cd` into the `Norwhich` directory and compile the `phat_hello` Phat Contract that was generated with the following command:\n\n```\nswanky phala contract compile -c phat_hello\n```\n\nHere is a short clip of compiling the `phat_hello` contract.\n\n{% embed url=\"https://youtu.be/pHQOk69OOYA\" %}\nswanky phala contract compile\n{% endembed %}\n{% endtab %}\n\n{% tab title=\"GitHub\" %}\nIn order to initialize a new Phat Contract project you can use our hello world template:\n\n```\ngit clone https://github.com/Phala-Network/phat-hello\n```\n\n> **Contract Examples**\n>\n> More Phat contract examples can be found in [phat-contract-examples](https://github.com/Phala-Network/phat-contract-examples) and [awesome-phat-contracts](../../../../.gitbook/assets/awesome%20phat%20contracts/) repositories.\n\nThis will create a folder `phat-hello` in your work directory. The folder contains a scaffold `Cargo.toml` and a `lib.rs`, which both contain the necessary building blocks for using Phat Contract.\n\nThe `lib.rs` contains our hello world contract \u2012 an ETH balance reader.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "221acc83-ba32-496e-a38a-14310e2f5083": {"__data__": {"id_": "221acc83-ba32-496e-a38a-14310e2f5083", "embedding": null, "metadata": {"file_path": "./phala_dist/create-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f7bc81cd-e68b-425b-b6b6-e25c18a53d8b", "node_type": "4", "metadata": {}, "hash": "d3276915a6130f6188c9ef1ecaea84c71bd2789d86718c5102f2a2e767e76811", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c52261dc-67a5-449a-a006-8b0bf857ade5", "node_type": "1", "metadata": {}, "hash": "cf8d524257f1a5363d6487fca3724c7a2b20cec5f3105fe00222eaf9a9b8a969", "class_name": "RelatedNodeInfo"}}, "text": "In order to build the contract just execute this command in the `phat-hello` folder:\n\n```\ncargo contract build\n```\n{% endtab %}\n{% endtabs %}\n\nAs a result, you\u2019ll get the following files in the `target/ink` folder of your contract: `phat_hello.wasm`, `metadata.json`, and `phat_hello.contract`. The `.contract` file combines the WASM and metadata into one file and needs to be used when instantiating the contract.\n\n## Run Unit Tests Locally <a href=\"#run-unit-tests-locally\" id=\"run-unit-tests-locally\"></a>\n\nBefore you really upload and deploy your contract to the blockchain, you are encouraged to run local unit tests to check its correctness.\n\nIn the `phat-hello` folder, run\n\n```\ncargo test -- --nocapture\n```\n\nand ensure you see all tests passed.\n\n> Do not use `cargo contract test` here, `cargo test` will give you more details if something goes wrong.\n>\n> `-- --nocapture` is optional to see the output during testing.\n\nNow you have successfully compiled and locally test your first Phat Contract. Now it\u2019s time to deploy it to a real blockchain.", "mimetype": "text/plain", "start_char_idx": 1776, "end_char_idx": 2831, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5bb7a7d-a00a-4aa6-8782-0ab2b9b8ca6a": {"__data__": {"id_": "c5bb7a7d-a00a-4aa6-8782-0ab2b9b8ca6a", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8d0ab61-ae51-4692-a9ab-a2c1ca0589cc", "node_type": "1", "metadata": {}, "hash": "74a5e17082642362ddabe1278a8609d6a9fadb33481bc615a1a742e2395d2679", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: debug namespace\nsidebar_label: debug\nsidebar_position: 2\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### debug_deleteChainSlice\n\nDeletes a slice of a chain from the tree on all branches (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `startNumber`: *string* (hex integer)\n\n2. `force`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_deleteChainSlice\",\n      \"params\": [startNumber, force]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### debug_getBadBlocks\n\nReturn list of invalid blocks.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getBadBlocks\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `block`: *object*\n    - `author`: *string* (address)\n    - `baseFeePerGas`: *string* (hex integer)\n    - `blobGasUsed`: *string* (hex integer)\n    - `difficulty`: *string* (hex integer)\n    - `excessBlobGas`: *string* (hex integer)\n    - `extraData`: *string* (hex data)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8d0ab61-ae51-4692-a9ab-a2c1ca0589cc": {"__data__": {"id_": "f8d0ab61-ae51-4692-a9ab-a2c1ca0589cc", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5bb7a7d-a00a-4aa6-8782-0ab2b9b8ca6a", "node_type": "1", "metadata": {}, "hash": "61bf89793df71989cfe6970eac3a8dbe79e847d5ac540a89d091b4d912bb8e62", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "731775c6-8145-420a-876d-bb9fda44afae", "node_type": "1", "metadata": {}, "hash": "b33af4773b28108431ed3eea50b0ec3dd1331f3af59e96563ea7c36f40a53ad5", "class_name": "RelatedNodeInfo"}}, "text": "- `gasLimit`: *string* (hex integer)\n    - `gasUsed`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `logsBloom`: *string* (hex data)\n    - `miner`: *string* (address)\n    - `mixHash`: *string* (hash)\n    - `nonce`: *string* (hex data)\n    - `number`: *string* (hex integer)\n    - `parentBeaconBlockRoot`: *string* (hash)\n    - `parentHash`: *string* (hash)\n    - `receiptsRoot`: *string* (hash)\n    - `sha3Uncles`: *string* (hash)\n    - `signature`: *string* (hex data)\n    - `size`: *string* (hex integer)\n    - `stateRoot`: *string* (hash)\n    - `step`: *string* (hex integer)\n    - `timestamp`: *string* (hex integer)\n    - `totalDifficulty`: *string* (hex integer)\n    - `transactions`: array of *object*\n    - `transactionsRoot`: *string* (hash)\n    - `uncles`: array of *string* (hash)\n    - `withdrawals`: array of *object*\n      - `address`: *string* (address)\n      - `amountInGwei`: *string* (hex integer)\n      - `amountInWei`: *string* (hex integer)\n      - `index`: *string* (hex integer)\n      - `validatorIndex`: *string* (hex integer)\n    - `withdrawalsRoot`: *string* (hash)\n  - `hash`: *string* (hash)\n  - `rlp`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getBlockRlp\n\nRetrieves a block in the RLP-serialized form.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `number`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 1580, "end_char_idx": 2922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "731775c6-8145-420a-876d-bb9fda44afae": {"__data__": {"id_": "731775c6-8145-420a-876d-bb9fda44afae", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8d0ab61-ae51-4692-a9ab-a2c1ca0589cc", "node_type": "1", "metadata": {}, "hash": "74a5e17082642362ddabe1278a8609d6a9fadb33481bc615a1a742e2395d2679", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87947ab9-2c4a-4418-9241-2ff7f35708f8", "node_type": "1", "metadata": {}, "hash": "55e589aaf4ce8bfa36af02c29a930248ca4e47ef6a930371254e411a5994f398", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getBlockRlp\",\n      \"params\": [number]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getBlockRlpByHash\n\nRetrieves a block in the RLP-serialized form.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getBlockRlpByHash\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getChainLevel\n\nRetrieves a representation of tree branches on a given chain level (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `number`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 2925, "end_char_idx": 4175, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87947ab9-2c4a-4418-9241-2ff7f35708f8": {"__data__": {"id_": "87947ab9-2c4a-4418-9241-2ff7f35708f8", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "731775c6-8145-420a-876d-bb9fda44afae", "node_type": "1", "metadata": {}, "hash": "b33af4773b28108431ed3eea50b0ec3dd1331f3af59e96563ea7c36f40a53ad5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f23876b-6b33-4dce-95ba-bd4e346a0a56", "node_type": "1", "metadata": {}, "hash": "1db6ce56553f4361521f12d0b122f96a8611cb7a537e611a1ec94430a71522c7", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getChainLevel\",\n      \"params\": [number]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `blockInfos`: array of *object*\n    - `blockHash`: *string* (hash)\n    - `isFinalized`: *boolean*\n    - `totalDifficulty`: *string* (hex integer)\n    - `wasProcessed`: *boolean*\n  - `hasBlockOnMainChain`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_getConfigValue\n\nRetrieves the Nethermind configuration value, e.g. JsonRpc.Enabled\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `category`: *string*\n\n2. `name`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getConfigValue\",\n      \"params\": [category, name]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n\n</TabItem>\n</Tabs>\n\n### debug_getRawBlock\n\nGet Raw Block format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 4178, "end_char_idx": 5686, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f23876b-6b33-4dce-95ba-bd4e346a0a56": {"__data__": {"id_": "6f23876b-6b33-4dce-95ba-bd4e346a0a56", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87947ab9-2c4a-4418-9241-2ff7f35708f8", "node_type": "1", "metadata": {}, "hash": "55e589aaf4ce8bfa36af02c29a930248ca4e47ef6a930371254e411a5994f398", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a623195-250f-4b5c-a9a9-49db2fc1ba33", "node_type": "1", "metadata": {}, "hash": "f7d69f4c6c744538d803aefc786d9199ef4e9e593a06dce52cc663b873fd9fe2", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawBlock\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getRawHeader\n\nGet Raw Header format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawHeader\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getRawReceipts\n\nGet Raw Receipt format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 5689, "end_char_idx": 7040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a623195-250f-4b5c-a9a9-49db2fc1ba33": {"__data__": {"id_": "8a623195-250f-4b5c-a9a9-49db2fc1ba33", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f23876b-6b33-4dce-95ba-bd4e346a0a56", "node_type": "1", "metadata": {}, "hash": "1db6ce56553f4361521f12d0b122f96a8611cb7a537e611a1ec94430a71522c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd11839d-647d-4e17-8fbe-9ff089f57168", "node_type": "1", "metadata": {}, "hash": "640ab66906b0d2bdddd04fc8f4f228a2b61ed64ec3348f3f63dde5b114162f18", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawReceipts\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getRawTransaction\n\nGet Raw Transaction format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transactionHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 7043, "end_char_idx": 7653, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd11839d-647d-4e17-8fbe-9ff089f57168": {"__data__": {"id_": "cd11839d-647d-4e17-8fbe-9ff089f57168", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a623195-250f-4b5c-a9a9-49db2fc1ba33", "node_type": "1", "metadata": {}, "hash": "f7d69f4c6c744538d803aefc786d9199ef4e9e593a06dce52cc663b873fd9fe2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e55b472a-0430-42ca-97d4-7b390be2ddea", "node_type": "1", "metadata": {}, "hash": "6afab61773af630da96a0e82b8aaf6927e2a0400c9a4822ef5c7dc40d396860d", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawTransaction\",\n      \"params\": [transactionHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getSyncStage\n\nRetrives Nethermind Sync Stage, With extra Metadata\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getSyncStage\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `currentStage`: *string*\n\n</TabItem>\n</Tabs>\n\n### debug_insertReceipts\n\nInsert receipts for the block after verifying receipts root correctness.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2.", "mimetype": "text/plain", "start_char_idx": 7656, "end_char_idx": 8920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e55b472a-0430-42ca-97d4-7b390be2ddea": {"__data__": {"id_": "e55b472a-0430-42ca-97d4-7b390be2ddea", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd11839d-647d-4e17-8fbe-9ff089f57168", "node_type": "1", "metadata": {}, "hash": "640ab66906b0d2bdddd04fc8f4f228a2b61ed64ec3348f3f63dde5b114162f18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "535b7d48-018f-4f15-b6aa-e0c113f509a8", "node_type": "1", "metadata": {}, "hash": "6471d44299df32ed47c5c266287f0a062a3eca8235202167e1275bf92b17bda7", "class_name": "RelatedNodeInfo"}}, "text": "`receiptForRpc`: array of *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*", "mimetype": "text/plain", "start_char_idx": 8921, "end_char_idx": 9961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "535b7d48-018f-4f15-b6aa-e0c113f509a8": {"__data__": {"id_": "535b7d48-018f-4f15-b6aa-e0c113f509a8", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e55b472a-0430-42ca-97d4-7b390be2ddea", "node_type": "1", "metadata": {}, "hash": "6afab61773af630da96a0e82b8aaf6927e2a0400c9a4822ef5c7dc40d396860d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d27b14bf-ec02-402b-a4d2-f702a6a2e6b3", "node_type": "1", "metadata": {}, "hash": "835b22aaf8c24dd27b28073531821b51823543e485ec5b15a1e90e17cb13fb61", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_insertReceipts\",\n      \"params\": [blockParameter, receiptForRpc]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_migrateReceipts\n\nSets the block number up to which receipts will be migrated to (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockNumber`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_migrateReceipts\",\n      \"params\": [blockNumber]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_resetHead\n\nUpdates / resets head block - use only when the node got stuck due to DB / memory corruption (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 9964, "end_char_idx": 11295, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d27b14bf-ec02-402b-a4d2-f702a6a2e6b3": {"__data__": {"id_": "d27b14bf-ec02-402b-a4d2-f702a6a2e6b3", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "535b7d48-018f-4f15-b6aa-e0c113f509a8", "node_type": "1", "metadata": {}, "hash": "6471d44299df32ed47c5c266287f0a062a3eca8235202167e1275bf92b17bda7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e4937e2-30a6-4d8a-98ff-cd27dd149cfd", "node_type": "1", "metadata": {}, "hash": "2ad4e03a06081c56fb4f3b8c2f44f442c81e7f4793a007c4872884ba795007a9", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_resetHead\",\n      \"params\": [blockHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_standardTraceBadBlockToFile\n\nThis method is similar to the `debug_standardTraceBlockToFile` method, but can be used to obtain information about a block that has been rejected as invalid.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 11298, "end_char_idx": 12430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e4937e2-30a6-4d8a-98ff-cd27dd149cfd": {"__data__": {"id_": "5e4937e2-30a6-4d8a-98ff-cd27dd149cfd", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d27b14bf-ec02-402b-a4d2-f702a6a2e6b3", "node_type": "1", "metadata": {}, "hash": "835b22aaf8c24dd27b28073531821b51823543e485ec5b15a1e90e17cb13fb61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd14055f-0cfd-4f94-8406-60a011fa0214", "node_type": "1", "metadata": {}, "hash": "f0811fd4a4d00b4011fd7b70d1e732b3708257dd1e11195c34b97b1a24261e71", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_standardTraceBadBlockToFile\",\n      \"params\": [blockHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_standardTraceBlockToFile\n\nWrites to a file the full stack trace of all invoked opcodes of the transaction specified (or all transactions if not specified) that was included in the block specified. The parent of the block must be present or it will fail.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 12433, "end_char_idx": 13667, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd14055f-0cfd-4f94-8406-60a011fa0214": {"__data__": {"id_": "cd14055f-0cfd-4f94-8406-60a011fa0214", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e4937e2-30a6-4d8a-98ff-cd27dd149cfd", "node_type": "1", "metadata": {}, "hash": "2ad4e03a06081c56fb4f3b8c2f44f442c81e7f4793a007c4872884ba795007a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "070dabb5-69bb-49a2-882f-1c20ba99f191", "node_type": "1", "metadata": {}, "hash": "6ab7c244e4327cb623408b12c60d0211f25a9927184bb8745a7062581ddc1032", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_standardTraceBlockToFile\",\n      \"params\": [blockHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceBlock\n\nReturns the full stack trace of all invoked opcodes of all transactions that were included in the block specified. The parent of the block must be present or it will fail.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockRlp`: *string* (hex data)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 13670, "end_char_idx": 14834, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "070dabb5-69bb-49a2-882f-1c20ba99f191": {"__data__": {"id_": "070dabb5-69bb-49a2-882f-1c20ba99f191", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd14055f-0cfd-4f94-8406-60a011fa0214", "node_type": "1", "metadata": {}, "hash": "f0811fd4a4d00b4011fd7b70d1e732b3708257dd1e11195c34b97b1a24261e71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "397f51b1-40a0-4feb-929e-07eedf0aaaa8", "node_type": "1", "metadata": {}, "hash": "4ee2e1ce1f1c21c86f07ba1469144a42386bc4ebb8d109452f9f27838f7da75a", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceBlock\",\n      \"params\": [blockRlp, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceBlockByHash\n\nSimilar to debug_traceBlock, this method accepts a block hash and replays the block that is already present in the database.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2.", "mimetype": "text/plain", "start_char_idx": 14837, "end_char_idx": 16076, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "397f51b1-40a0-4feb-929e-07eedf0aaaa8": {"__data__": {"id_": "397f51b1-40a0-4feb-929e-07eedf0aaaa8", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "070dabb5-69bb-49a2-882f-1c20ba99f191", "node_type": "1", "metadata": {}, "hash": "6ab7c244e4327cb623408b12c60d0211f25a9927184bb8745a7062581ddc1032", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89cbebf3-81c4-405f-af7a-26e24041cebe", "node_type": "1", "metadata": {}, "hash": "88c0fdf4a31c2ce8fc99d08f0d2b6542ca30879479f334de79b9df23ee50100e", "class_name": "RelatedNodeInfo"}}, "text": "`options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceBlockByHash\",\n      \"params\": [blockHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceBlockByNumber\n\nSimilar to debug_traceBlock, this method accepts a block number as well as \"latest\" or \"finalized\" and replays the block that is already present in the database.", "mimetype": "text/plain", "start_char_idx": 16077, "end_char_idx": 17688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89cbebf3-81c4-405f-af7a-26e24041cebe": {"__data__": {"id_": "89cbebf3-81c4-405f-af7a-26e24041cebe", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "397f51b1-40a0-4feb-929e-07eedf0aaaa8", "node_type": "1", "metadata": {}, "hash": "4ee2e1ce1f1c21c86f07ba1469144a42386bc4ebb8d109452f9f27838f7da75a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e36276b-a7c1-4768-8584-3e75e32ba130", "node_type": "1", "metadata": {}, "hash": "9a36df2b38b4d799f686185f66785eeb1f7c0af7b1f5a11efd0a97ae828a8c59", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 17690, "end_char_idx": 18280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e36276b-a7c1-4768-8584-3e75e32ba130": {"__data__": {"id_": "5e36276b-a7c1-4768-8584-3e75e32ba130", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89cbebf3-81c4-405f-af7a-26e24041cebe", "node_type": "1", "metadata": {}, "hash": "88c0fdf4a31c2ce8fc99d08f0d2b6542ca30879479f334de79b9df23ee50100e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97d967e0-0f7b-4055-be87-840dd1f72a88", "node_type": "1", "metadata": {}, "hash": "9407e3ff6312502239a5064959c22a1380d9c36bf42ff0884722fe45a92158fb", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceBlockByNumber\",\n      \"params\": [blockParameter, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceCall\n\nThis method lets you run an eth_call within the context of the given block execution using the final state of parent block as the base. The block can be specified either by hash or by number. It takes the same input object as a eth_call. It returns the same output as debug_traceTransaction.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 18283, "end_char_idx": 19663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97d967e0-0f7b-4055-be87-840dd1f72a88": {"__data__": {"id_": "97d967e0-0f7b-4055-be87-840dd1f72a88", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e36276b-a7c1-4768-8584-3e75e32ba130", "node_type": "1", "metadata": {}, "hash": "9a36df2b38b4d799f686185f66785eeb1f7c0af7b1f5a11efd0a97ae828a8c59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "88c6aa60-ff0e-45ea-ae28-e17a2b15af65", "node_type": "1", "metadata": {}, "hash": "22e3f8926d090bb71f779b8bbaf71113e8e8831de35f9e21313d2a50f38252a8", "class_name": "RelatedNodeInfo"}}, "text": "`call`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n3.", "mimetype": "text/plain", "start_char_idx": 19664, "end_char_idx": 20896, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88c6aa60-ff0e-45ea-ae28-e17a2b15af65": {"__data__": {"id_": "88c6aa60-ff0e-45ea-ae28-e17a2b15af65", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97d967e0-0f7b-4055-be87-840dd1f72a88", "node_type": "1", "metadata": {}, "hash": "9407e3ff6312502239a5064959c22a1380d9c36bf42ff0884722fe45a92158fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3fa10454-a1f4-40a0-9efa-152d01c2fcdb", "node_type": "1", "metadata": {}, "hash": "b71d3a1a04d54f29374ef8fde020b73b1f756195818670ce4ed490cdb6ad96c5", "class_name": "RelatedNodeInfo"}}, "text": "`options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceCall\",\n      \"params\": [call, blockParameter, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransaction\n\nThis method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.", "mimetype": "text/plain", "start_char_idx": 20897, "end_char_idx": 22618, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3fa10454-a1f4-40a0-9efa-152d01c2fcdb": {"__data__": {"id_": "3fa10454-a1f4-40a0-9efa-152d01c2fcdb", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88c6aa60-ff0e-45ea-ae28-e17a2b15af65", "node_type": "1", "metadata": {}, "hash": "22e3f8926d090bb71f779b8bbaf71113e8e8831de35f9e21313d2a50f38252a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e39bbfd-b6da-4323-a35c-a20a3017f57d", "node_type": "1", "metadata": {}, "hash": "112f459bfdea21ba5d5da5c9bd820b3e7a91b771de6dcd06648a08fba616c1ee", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transactionHash`: *string* (hash)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransaction\",\n      \"params\": [transactionHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionByBlockAndIndex\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 22620, "end_char_idx": 24228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e39bbfd-b6da-4323-a35c-a20a3017f57d": {"__data__": {"id_": "8e39bbfd-b6da-4323-a35c-a20a3017f57d", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3fa10454-a1f4-40a0-9efa-152d01c2fcdb", "node_type": "1", "metadata": {}, "hash": "b71d3a1a04d54f29374ef8fde020b73b1f756195818670ce4ed490cdb6ad96c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6970594-0d2e-4b2d-b957-9fa4e7260f57", "node_type": "1", "metadata": {}, "hash": "c20d54cc65defd8f628b80c16091c8e7631c3b541e7b289cab4851149411fa19", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `txIndex`: *string* (hex integer)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 24229, "end_char_idx": 24802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6970594-0d2e-4b2d-b957-9fa4e7260f57": {"__data__": {"id_": "d6970594-0d2e-4b2d-b957-9fa4e7260f57", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e39bbfd-b6da-4323-a35c-a20a3017f57d", "node_type": "1", "metadata": {}, "hash": "112f459bfdea21ba5d5da5c9bd820b3e7a91b771de6dcd06648a08fba616c1ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66654028-1bf8-4d17-8904-ab61f69a0012", "node_type": "1", "metadata": {}, "hash": "65fecd709e6a5de5f81cf758b3578c15518487a1b188cd4f2067b92eb1c4ae7c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionByBlockAndIndex\",\n      \"params\": [blockParameter, txIndex, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionByBlockhashAndIndex\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `txIndex`: *string* (hex integer)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 24805, "end_char_idx": 26415, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66654028-1bf8-4d17-8904-ab61f69a0012": {"__data__": {"id_": "66654028-1bf8-4d17-8904-ab61f69a0012", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6970594-0d2e-4b2d-b957-9fa4e7260f57", "node_type": "1", "metadata": {}, "hash": "c20d54cc65defd8f628b80c16091c8e7631c3b541e7b289cab4851149411fa19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3df44ab9-101b-405e-a9a2-bee3cd7e2d1b", "node_type": "1", "metadata": {}, "hash": "9461c0564167892130432c4e534ac9815539e92169d14a7569f22c8040b79efd", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionByBlockhashAndIndex\",\n      \"params\": [blockHash, txIndex, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionInBlockByHash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockRlp`: *string* (hex data)\n\n2. `transactionHash`: *string* (hash)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 26418, "end_char_idx": 28025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3df44ab9-101b-405e-a9a2-bee3cd7e2d1b": {"__data__": {"id_": "3df44ab9-101b-405e-a9a2-bee3cd7e2d1b", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66654028-1bf8-4d17-8904-ab61f69a0012", "node_type": "1", "metadata": {}, "hash": "65fecd709e6a5de5f81cf758b3578c15518487a1b188cd4f2067b92eb1c4ae7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b59b021-8d47-486f-9f83-9d2aa779e8ab", "node_type": "1", "metadata": {}, "hash": "1e98f9024f0e3d90d57c037bde73f8426cec522f5f141bcb1a28a9fa452f4387", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionInBlockByHash\",\n      \"params\": [blockRlp, transactionHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionInBlockByIndex\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockRlp`: *string* (hex data)\n\n2. `txIndex`: *string* (hex integer)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 28028, "end_char_idx": 29636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b59b021-8d47-486f-9f83-9d2aa779e8ab": {"__data__": {"id_": "2b59b021-8d47-486f-9f83-9d2aa779e8ab", "embedding": null, "metadata": {"file_path": "./phala_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b386f2bf-8350-4270-b238-8d43c4c4365f", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3df44ab9-101b-405e-a9a2-bee3cd7e2d1b", "node_type": "1", "metadata": {}, "hash": "9461c0564167892130432c4e534ac9815539e92169d14a7569f22c8040b79efd", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionInBlockByIndex\",\n      \"params\": [blockRlp, txIndex, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 29639, "end_char_idx": 30655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a886c0b-4e8c-4862-b5cc-495a49577de7": {"__data__": {"id_": "7a886c0b-4e8c-4862-b5cc-495a49577de7", "embedding": null, "metadata": {"file_path": "./phala_dist/ai-agent-contract-templates.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ad6bbd65-c12b-4895-a95f-b6631f056e32", "node_type": "4", "metadata": {}, "hash": "51bdfee87910f3b98fd80f05d99a79192bbabec03f842002e6bdc020e7856557", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f93da22-810b-42d2-887e-95e30cb5cc02", "node_type": "1", "metadata": {}, "hash": "afae513ff5e61b08e4263b3420ff03f98d5bc8c3205cc71fd58d5333bc130ee9", "class_name": "RelatedNodeInfo"}}, "text": "# AI Agent Contract Templates\n\n<table><thead><tr><th width=\"247\">AI Agent Contract Name</th><th>Vendor</th><th width=\"220\">Repo</th><th>API Key</th></tr></thead><tbody><tr><td>Viem SDK Template<br>(Derive ECDSA Key, Sign/Verify Data, Send Onchain TXs)</td><td><a href=\"https://viem.sh\">viem</a></td><td><a href=\"https://github.com/Phala-Network/ai-agent-contract-tools\">https://github.com/Phala-Network/ai-agent-contract-tools</a></td><td>None</td></tr><tr><td>RedPill Template</td><td>RedPill</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-redpill\">https://github.com/Phala-Network/ai-agent-template-redpill</a></td><td><a href=\"https://red-pill.ai\">https://red-pill.ai</a></td></tr><tr><td>OpenAI Template</td><td>OpenAI</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-openai\">ai-agent-template-openai</a></td><td><a href=\"https://platform.openai.com/account/api-keys\">https://platform.openai.com/account/api-keys</a></td></tr><tr><td>Anthropic Template</td><td>Anthropic</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-anthropic\">https://github.com/Phala-Network/ai-agent-template-anthropic</a></td><td><a href=\"https://console.anthropic.com/login?returnTo=%2F%3F\">https://console.anthropic.com/login?returnTo=%2F%3F</a></td></tr><tr><td>LangChain Template</td><td>LangChain</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-langchain\">https://github.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f93da22-810b-42d2-887e-95e30cb5cc02": {"__data__": {"id_": "7f93da22-810b-42d2-887e-95e30cb5cc02", "embedding": null, "metadata": {"file_path": "./phala_dist/ai-agent-contract-templates.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ad6bbd65-c12b-4895-a95f-b6631f056e32", "node_type": "4", "metadata": {}, "hash": "51bdfee87910f3b98fd80f05d99a79192bbabec03f842002e6bdc020e7856557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a886c0b-4e8c-4862-b5cc-495a49577de7", "node_type": "1", "metadata": {}, "hash": "f33bdd2fb8674c8fe300f343ac9d12c982f38754127449d8ec1f1c7234ce50b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "213914c3-0585-4574-83c7-b7f61e853931", "node_type": "1", "metadata": {}, "hash": "f5ccf2eef649cba99c13e75de3fad644288445382c2027b82f8024c4646608ac", "class_name": "RelatedNodeInfo"}}, "text": "com/Phala-Network/ai-agent-template-langchain</a></td><td><a href=\"https://platform.openai.com/account/api-keys\">https://platform.openai.com/account/api-keys</a></td></tr><tr><td>Function Calling Template</td><td>OpenAI</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-func-calling\">https://github.com/Phala-Network/ai-agent-template-func-calling</a></td><td><a href=\"https://platform.openai.com/account/api-keys\">https://platform.openai.com/account/api-keys</a></td></tr><tr><td>Brian Template</td><td>Brian</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-brian\">https://github.com/Phala-Network/ai-agent-template-brian</a></td><td><a href=\"https://www.brianknows.org/app\">https://www.brianknows.org/app</a></td></tr><tr><td>'mbd.xyz Template</td><td>'mbd</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-mbd\">https://github.com/Phala-Network/ai-agent-template-mbd</a></td><td><a href=\"https://console.mbd.xyz/dashboard\">https://console.mbd.xyz/dashboard</a></td></tr><tr><td>Apillon Template</td><td>Apillon</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-apillon\">https://github.com/Phala-Network/ai-agent-template-apillon</a></td><td><a href=\"https://app.apillon.io/login\">https://app.apillon.io/login</a></td></tr><tr><td>Chainbase Template</td><td>Chainbase</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-chainbase\">https://github.com/Phala-Network/ai-agent-template-chainbase</a></td><td><a href=\"https://console.", "mimetype": "text/plain", "start_char_idx": 1433, "end_char_idx": 2952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "213914c3-0585-4574-83c7-b7f61e853931": {"__data__": {"id_": "213914c3-0585-4574-83c7-b7f61e853931", "embedding": null, "metadata": {"file_path": "./phala_dist/ai-agent-contract-templates.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ad6bbd65-c12b-4895-a95f-b6631f056e32", "node_type": "4", "metadata": {}, "hash": "51bdfee87910f3b98fd80f05d99a79192bbabec03f842002e6bdc020e7856557", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f93da22-810b-42d2-887e-95e30cb5cc02", "node_type": "1", "metadata": {}, "hash": "afae513ff5e61b08e4263b3420ff03f98d5bc8c3205cc71fd58d5333bc130ee9", "class_name": "RelatedNodeInfo"}}, "text": "chainbase.com/\">https://console.chainbase.com/</a></td></tr><tr><td>Pond Template</td><td>Pond</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-pond\">https://github.com/Phala-Network/ai-agent-template-pond</a></td><td><a href=\"https://doc.cryptopond.xyz/docs/how-to-get-api\">https://doc.cryptopond.xyz/docs/how-to-get-api</a></td></tr><tr><td>Allora Template</td><td>Allora</td><td><a href=\"https://github.com/Phala-Network/ai-agent-template-allora\">https://github.com/Phala-Network/ai-agent-template-allora</a></td><td><a href=\"https://developer.upshot.xyz/signup\">https://developer.upshot.xyz/signup</a></td></tr></tbody></table>", "mimetype": "text/plain", "start_char_idx": 2952, "end_char_idx": 3602, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e5415e3-d744-402b-9cac-25aa34edb6d0": {"__data__": {"id_": "9e5415e3-d744-402b-9cac-25aa34edb6d0", "embedding": null, "metadata": {"file_path": "./phala_dist/net.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a1a6977d-4d98-4755-ba6f-36437522168a", "node_type": "4", "metadata": {}, "hash": "c0e8367c0a9f47df2488ca9e5cfbfc1c21f5ee146ecc2b7f80777a826add30af", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e515a89-c878-4eae-910e-e23ee1d72f5c", "node_type": "1", "metadata": {}, "hash": "bd7a68d7e7d0d905b17ea532da72ebe4149356a5be10870baa5771a51b64b9f9", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: net namespace\nsidebar_label: net\nsidebar_position: 4\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### net_listening\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_listening\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### net_localAddress\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_localAddress\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### net_localEnode\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_localEnode\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e515a89-c878-4eae-910e-e23ee1d72f5c": {"__data__": {"id_": "5e515a89-c878-4eae-910e-e23ee1d72f5c", "embedding": null, "metadata": {"file_path": "./phala_dist/net.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a1a6977d-4d98-4755-ba6f-36437522168a", "node_type": "4", "metadata": {}, "hash": "c0e8367c0a9f47df2488ca9e5cfbfc1c21f5ee146ecc2b7f80777a826add30af", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e5415e3-d744-402b-9cac-25aa34edb6d0", "node_type": "1", "metadata": {}, "hash": "e14cb3773b917fb00f1d640fd30cdf8a27208396124fdc6f7b5318e3facecb14", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### net_peerCount\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_peerCount\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### net_version\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_version\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 1406, "end_char_idx": 2352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24aac1c5-6c18-4728-b4c2-cf0e62d43663": {"__data__": {"id_": "24aac1c5-6c18-4728-b4c2-cf0e62d43663", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74787427-8216-43e2-bda6-8e6a0b28101e", "node_type": "1", "metadata": {}, "hash": "e88d275713ca353013fc444b54cc1dfb3b37b913542606bc104b2468a8f6a0c8", "class_name": "RelatedNodeInfo"}}, "text": "---\ndescription: >-\n  Next step in requesting data from your deployed LensAPI Oracle. Deploy a\n  Polygon Consumer Smart Contract.\n---\n\n# \ud83e\uddd1\u200d\ud83d\ude80 Polygon Consumer Contract for LensAPI Oracle\n\n## Overview\n\nThis project represents a basic Polygon Consumer Contract that is compatible with a deployed LensAPI Oracle via [Phat Contract 2.0 UI](https://bricks.phala.network). This tutorial assumes the developer is familiar with executing commands in a terminal.\n\n<figure><img src=\"../../../../.gitbook/assets/image (1) (1) (2).png\" alt=\"\"><figcaption></figcaption></figure>\n\n## Prerequisites\n\n* Active deployed LensAPI Oracle Blueprint via [Phala Dashboard](https://dashboard.phala.network)\n* Address of the \"[Oracle Endpoint](https://docs.phala.network/developers/bricks-and-blueprints/featured-blueprints/lensapi-oracle#step-3-connect-your-smart-contract-to-the-oracle)\" in deployed LensAPI Oracle\n* [Hardhat](https://hardhat.org)\n* For Polygon Mainnet deployments:\n  * Polygonscan API Key that can be generated on [polygonscan](https://polygonscan.com)\n* RPC Endpoint for Polygon Mainnet & Mumbai Testnet\n  * [Alchemy](https://alchemy.com) - This repo example uses Alchemy's API Key.\n  * [Infura](https://infura.io)\n  * Personal RPC Node\n* Test Tokens at [Phala Faucet](https://bit.ly/3Tomopi)\n\n### Environment Variables: <a href=\"#user-content-environment-variables\" id=\"user-content-environment-variables\"></a>\n\nCheck out the environment variables here in [.env.local](https://github.com/Phala-Network/lensapi-oracle-consumer-contract/blob/refactor/.env.local) file.\n\n## Getting Started <a href=\"#user-content-getting-started\" id=\"user-content-getting-started\"></a>\n\n> Note: If you cloned this repo or created a template, skip to [Create a Phala Profile](https://github.com/Phala-Network/lensapi-oracle-consumer-contract/blob/refactor/LENSAPI\\_ORACLE.md#create-a-bricks-profile)\n\nFirst you will need to install the `@phala/fn` CLI tool using your node package manager (`npm`) or use node package execute (`npx`).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2008, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74787427-8216-43e2-bda6-8e6a0b28101e": {"__data__": {"id_": "74787427-8216-43e2-bda6-8e6a0b28101e", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "24aac1c5-6c18-4728-b4c2-cf0e62d43663", "node_type": "1", "metadata": {}, "hash": "a87e27cb00fd88c14726ae5d4cc9874555cc1460c27bcfeb922e4f46d3e2e5e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "871347ad-00df-42a7-afaa-b46edbcedd62", "node_type": "1", "metadata": {}, "hash": "04a2553a182ca3edce7ae2d7a5a8f5e7eb2603f67d9eb6dbf3b9565bbb1c12e4", "class_name": "RelatedNodeInfo"}}, "text": "In this tutorial we use `npx`.\n\nNow create your first template with the CLI tool command:\n\n```sh\nnpx @phala/fn init example\n```\n\nWe currently have only one template. Just press enter to see something similar to the example below:\n\n```sh\nnpx @phala/fn@latest init example\n? Please select one of the templates for your \"example\" project: \n  phat-contract-starter-kit: Send data from any API to your smart contract with Javascript. \n\u276f lensapi-oracle-consumer-contract: Send data from Lens API to your smart contract to empower your Web3 Social dApp. \n  vrf-oracle: TEE-guarded Verifiable Random Function template to bring randomness to your smart contract. \n  airstack-phat-contract: Request an account\u2019s data from Airstack\u2019s API to compute trust score and send to your Web3 dApp on-chain. \n  thegraph-phat-contract: Connect your subgraphs from The Graph to your on-chain dApps via Phat Contract.  \n```\n\n`cd` into the newly created template and `ls` the directory which will look similar to below.\n\n```sh\ncd example\nls\n# total 736\n# drwxr-xr-x  18 hashwarlock  staff   576B Sep  6 15:32 .\n# drwxr-xr-x  35 hashwarlock  staff   1.1K Sep  6 15:32 .\n# -rw-r--r--   1 hashwarlock  staff   2.1K Sep  6 15:32 .env.local\n# -rw-r--r--   1 hashwarlock  staff   227B Sep  6 15:32 .gitignore\n# -rw-r--r--   1 hashwarlock  staff    34K Sep  6 15:32 LICENSE\n# -rw-r--r--   1 hashwarlock  staff   8.9K Sep  6 15:32 README.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "871347ad-00df-42a7-afaa-b46edbcedd62": {"__data__": {"id_": "871347ad-00df-42a7-afaa-b46edbcedd62", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74787427-8216-43e2-bda6-8e6a0b28101e", "node_type": "1", "metadata": {}, "hash": "e88d275713ca353013fc444b54cc1dfb3b37b913542606bc104b2468a8f6a0c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2956b2c2-64f5-4dbf-b95a-91a080e8763b", "node_type": "1", "metadata": {}, "hash": "8ba0ef497199c57c951266431170d6b277353cce81b0372e8694a4757543d62a", "class_name": "RelatedNodeInfo"}}, "text": "md\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 abis\n# drwxr-xr-x   4 hashwarlock  staff   128B Sep  6 15:32 assets\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 contracts\n# -rw-r--r--   1 hashwarlock  staff   1.3K Sep  6 15:32 hardhat.config.ts\n# -rw-r--r--   1 hashwarlock  staff    95B Sep  6 15:32 mumbai.arguments.ts\n# -rw-r--r--   1 hashwarlock  staff   2.6K Sep  6 15:32 package.json\n# -rw-r--r--   1 hashwarlock  staff    96B Sep  6 15:32 polygon.arguments.ts\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 scripts\n# drwxr-xr-x   3 hashwarlock  staff    96B Sep  6 15:32 src\n# drwxr-xr-x   3 hashwarlock  staff    96B Sep  6 15:32 test\n# -rw-r--r--   1 hashwarlock  staff   201B Sep  6 15:32 tsconfig.json\n# -rw-r--r--   1 hashwarlock  staff   290K Sep  6 15:32 package-lock.json\n```\n\n### Create a Bricks Profile <a href=\"#user-content-create-a-bricks-profile\" id=\"user-content-create-a-bricks-profile\"></a>\n\nThis step requires you to have a Polkadot account.", "mimetype": "text/plain", "start_char_idx": 3415, "end_char_idx": 4412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2956b2c2-64f5-4dbf-b95a-91a080e8763b": {"__data__": {"id_": "2956b2c2-64f5-4dbf-b95a-91a080e8763b", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "871347ad-00df-42a7-afaa-b46edbcedd62", "node_type": "1", "metadata": {}, "hash": "04a2553a182ca3edce7ae2d7a5a8f5e7eb2603f67d9eb6dbf3b9565bbb1c12e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c532c073-4591-4bad-a790-8d916925aee1", "node_type": "1", "metadata": {}, "hash": "4e403b573d84d4bb2a114687a795a441bc42cc39d188d17eb398bf9eb37717e1", "class_name": "RelatedNodeInfo"}}, "text": "You can get an account from one of the following:\n\n* [Polkadot.js Wallet Extension](https://polkadot.js.org/extension/)\n* [Talisman Wallet](https://www.talisman.xyz/)\n* [SubWallet](https://www.subwallet.app/) (**Support for iOS/Android**)\n\nFirst, create your Bricks Profile account on the [Phala PoC6 Testnet](https://bricks-poc5.phala.network/) or [Phala Mainnet](https://bricks.phala.network/). Here is a quick 1 minute [YouTube video](https://youtu.be/z1MR48NYtYc) on setting up from scratch.\n\nHere is what your Bricks Profile account overview should look like:&#x20;\n\n<figure><img src=\"https://github.com/Phala-Network/lensapi-oracle-consumer-contract/raw/refactor/assets/BricksProfileCheck.png\" alt=\"\"><figcaption></figcaption></figure>\n\nAfter creating your Bricks Profile, set your `.env` variable `POLKADOT_WALLET_SURI` to the mnemonic phrase from generating the new Polkadot Account.\n\nHere is a screenshot of how to set `POLKADOT_WALLET_SURI`:&#x20;\n\n<figure><img src=\"https://github.com/Phala-Network/lensapi-oracle-consumer-contract/raw/refactor/assets/PolkadotAccountSuri.png\" alt=\"\"><figcaption></figcaption></figure>\n\n\\\nTesting Locally\n---------------\n\n### Test Default Function Locally <a href=\"#user-content-test-default-function-locally\" id=\"user-content-test-default-function-locally\"></a>\n\nWith a template created and a basic default function example ready to test, let\u2019s step through the process of preparing your repo to execute the test locally.\n\nFirst step is to install the package dependencies with the following command:\n\n```\nnpm install\n```\n\nEverything should go smoothly and produce similar output below:\n\n```\nnpm install\n# [1/4] \ud83d\udd0d  Resolving packages...\n# [2/4] \ud83d\ude9a  Fetching packages...\n# [3/4] \ud83d\udd17  Linking dependencies...\n# warning \" > @typechain/ethers-v5@10.1.0\" has unmet peer dependency \"@ethersproject/bytes@^5.0.0\".", "mimetype": "text/plain", "start_char_idx": 4413, "end_char_idx": 6261, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c532c073-4591-4bad-a790-8d916925aee1": {"__data__": {"id_": "c532c073-4591-4bad-a790-8d916925aee1", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2956b2c2-64f5-4dbf-b95a-91a080e8763b", "node_type": "1", "metadata": {}, "hash": "8ba0ef497199c57c951266431170d6b277353cce81b0372e8694a4757543d62a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2ea066e-c0be-4add-a1fb-aae03f2b9258", "node_type": "1", "metadata": {}, "hash": "d328a3374b847a33c131d4fac673466fa5d58ab6df19a76164b9d9f132d0f989", "class_name": "RelatedNodeInfo"}}, "text": "# [4/4] \ud83d\udd28  Building fresh packages...\n# \u2728  Done in 4.95s.\n```\n\nNow that the package dependencies are installed, lets build the default function which is located in `./src/index.ts`.\n\n<details>\n\n<summary>View file <code>./src/index.ts</code></summary>\n\n```typescript\n// *** YOU ARE LIMITED TO THE FOLLOWING IMPORTS TO BUILD YOUR PHAT CONTRACT     ***\n// *** ADDING ANY IMPORTS WILL RESULT IN ERRORS & UPLOADING YOUR CODE TO PHALA  ***\n// *** NETWORK WILL FAIL. IF YOU WANT TO KNOW MORE, JOIN OUR DISCORD TO SPEAK   ***\n// *** WITH THE PHALA TEAM AT https://discord.gg/5HfmWQNX THANK YOU             ***\n// *** FOR DOCS ON HOW TO CUSTOMIZE YOUR PC 2.0 https://bit.ly/customize-pc-2-0 ***\nimport \"@phala/pink-env\";\nimport {decodeAbiParameters, encodeAbiParameters, parseAbiParameters} from \"viem\";\n\ntype HexString = `0x${string}`;\nconst encodeReplyAbiParams = 'uint respType, uint id, uint256 data';\nconst decodeRequestAbiParams = 'uint id, string reqData';\n\nfunction encodeReply(abiParams: string, reply: any): HexString {\n  return encodeAbiParameters(parseAbiParameters(abiParams),\n      reply\n  );\n}\n\nfunction decodeRequest(abiParams: string, request: HexString): any {\n  return decodeAbiParameters(parseAbiParameters(abiParams),\n      request\n  );\n}\n\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\nenum Error {\n  BadRequestString = \"BadRequestString\",\n  FailedToFetchData = \"FailedToFetchData\",\n  FailedToDecode = \"FailedToDecode\",\n  MalformedRequest = \"MalformedRequest\",\n}\n\nfunction errorToCode(error: Error): number {\n  switch (error) {\n    case Error.BadRequestString:\n      return 1;\n    case Error.FailedToFetchData:\n      return 2;\n    case Error.FailedToDecode:\n      return 3;\n    case Error.MalformedRequest:\n      return 4;\n    default:\n      return 0;", "mimetype": "text/plain", "start_char_idx": 6262, "end_char_idx": 8068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2ea066e-c0be-4add-a1fb-aae03f2b9258": {"__data__": {"id_": "c2ea066e-c0be-4add-a1fb-aae03f2b9258", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c532c073-4591-4bad-a790-8d916925aee1", "node_type": "1", "metadata": {}, "hash": "4e403b573d84d4bb2a114687a795a441bc42cc39d188d17eb398bf9eb37717e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79ebc8ce-31d7-4277-bc65-242a39a5430a", "node_type": "1", "metadata": {}, "hash": "1b10049c83c9cda658df2b33f102a3293d403f027a6f13f91bb3d533abb647f1", "class_name": "RelatedNodeInfo"}}, "text": "}\n}\n\nfunction stringToHex(str: string): string {\n  var hex = \"\";\n  for (var i = 0; i < str.length; i++) {\n    hex += str.charCodeAt(i).toString(16);\n  }\n  return \"0x\" + hex;\n}\n\nfunction fetchApiStats(apiUrl: string, requestStr: string): any {\n  let headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"phat-contract\",\n  };\n  let query = JSON.stringify({\n    query: `\n      query Profile {\n        profile(request: { forProfileId: \"${requestStr}\" }) {\n          stats {\n              followers\n              following\n              comments\n              countOpenActions\n              posts\n              quotes\n              mirrors\n              publications\n              reacted\n              reactions\n          }\n        }\n      }\n    `,\n  });\n  let body = stringToHex(query);\n  //\n  // In Phat Contract runtime, we not support async/await, you need use `pink.batchHttpRequest` to\n  // send http request. The Phat Contract will return an array of response.\n  //\n  let response = pink.batchHttpRequest(\n    [\n      {\n        url: apiUrl,\n        method: \"POST\",\n        headers,\n        body,\n        returnTextBody: true,\n      },\n    ],\n    10000 // Param for timeout in milliseconds. Your Phat Contract script has a timeout of 10 seconds\n  )[0]; // Notice the [0]. This is important bc the `pink.batchHttpRequest` function expects an array of up to 5 HTTP requests.\n  if (response.statusCode !== 200) {\n    console.log(\n      `Fail to read Lens api with status code: ${response.statusCode}, error: ${\n        response.error || response.body\n      }}`\n    );\n    throw Error.FailedToFetchData;\n  }\n  let respBody = response.body;\n  if (typeof respBody !== \"string\") {\n    throw Error.FailedToDecode;\n  }\n  return JSON.parse(respBody);\n}\n\n//\n// Here is what you need to implemented for Phat Contract, you can customize your logic with\n// JavaScript here.", "mimetype": "text/plain", "start_char_idx": 8071, "end_char_idx": 9949, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79ebc8ce-31d7-4277-bc65-242a39a5430a": {"__data__": {"id_": "79ebc8ce-31d7-4277-bc65-242a39a5430a", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2ea066e-c0be-4add-a1fb-aae03f2b9258", "node_type": "1", "metadata": {}, "hash": "d328a3374b847a33c131d4fac673466fa5d58ab6df19a76164b9d9f132d0f989", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9a7b1819-0e40-4221-aa6c-1de0c8cebc73", "node_type": "1", "metadata": {}, "hash": "a3140bea1a794be0936a03f41f9bf1258a1a4308e827e1eeeab6ee166544969f", "class_name": "RelatedNodeInfo"}}, "text": "//\n// The Phat Contract will be called with two parameters:\n//\n// - request: The raw payload from the contract call `request` (check the `request` function in TestLensApiConsumerConract.sol).\n//            In this example, it's a tuple of two elements: [requestId, profileId]\n// - secrets: The custom secrets you set with the `config_core` function of the Action Offchain Rollup Phat Contract. In\n//            this example, it just a simple text of the lens api url prefix. For more information on secrets, checkout the SECRETS.md file.\n//\n// Your returns value MUST be a hex string, and it will send to your contract directly. Check the `_onMessageReceived` function in\n// OracleConsumerContract.sol for more details. We suggest a tuple of three elements: [successOrNotFlag, requestId, data] as\n// the return value.\n//\nexport default function main(request: HexString, secrets: string): HexString {\n  console.log(`handle req: ${request}`);\n  // Uncomment to debug the `secrets` passed in from the Phat Contract UI configuration.", "mimetype": "text/plain", "start_char_idx": 9950, "end_char_idx": 10979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a7b1819-0e40-4221-aa6c-1de0c8cebc73": {"__data__": {"id_": "9a7b1819-0e40-4221-aa6c-1de0c8cebc73", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79ebc8ce-31d7-4277-bc65-242a39a5430a", "node_type": "1", "metadata": {}, "hash": "1b10049c83c9cda658df2b33f102a3293d403f027a6f13f91bb3d533abb647f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74415c35-5f6e-4575-9fa9-78f3343c9205", "node_type": "1", "metadata": {}, "hash": "e6717b7911e203620c739bd21d42949ae227ef8c81a5025a389e10f609557171", "class_name": "RelatedNodeInfo"}}, "text": "// console.log(`secrets: ${secrets}`);\n  let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = decodeRequest(decodeRequestAbiParams, request);\n    console.log(`[${requestId}]: ${encodedReqStr}`);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    return encodeReply(encodeReplyAbiParams, [BigInt(TYPE_ERROR), 0n, BigInt(errorToCode(error as Error))]);\n  }\n  console.log(`Request received for profile ${encodedReqStr}`);\n  try {\n    const respData = fetchApiStats(secrets, encodedReqStr);\n    let stats = respData.data.profile.stats.posts;\n    console.log(\"response:\", [TYPE_RESPONSE, requestId, stats]);\n    return encodeReply(encodeReplyAbiParams, [TYPE_RESPONSE, requestId, stats]);\n  } catch (error) {\n    if (error === Error.FailedToFetchData) {\n      throw error;\n    } else {\n      // otherwise tell client we cannot process it\n      console.log(\"error:\", [TYPE_ERROR, requestId, error]);\n      return encodeReply(encodeReplyAbiParams, [TYPE_ERROR, requestId, errorToCode(error as Error)]);\n    }\n  }\n}\n\n```\n\n</details>\n\nBuild the default function with this command:\n\n```sh\nnpx @phala/fn build\n```\n\nYou will see output similar to the example below. and a file in `./dist/index.js` will be generated.\n\n```sh\nnpx @phala/fn build\n# Creating an optimized build... done\n# Compiled successfully.\n#\n#   17.66 KB  dist/index.js\n# \u2728  Done in 3.48s.\n```\n\nWith our default function built, we can run some initial tests. First test will be simple.", "mimetype": "text/plain", "start_char_idx": 10982, "end_char_idx": 12461, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74415c35-5f6e-4575-9fa9-78f3343c9205": {"__data__": {"id_": "74415c35-5f6e-4575-9fa9-78f3343c9205", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a7b1819-0e40-4221-aa6c-1de0c8cebc73", "node_type": "1", "metadata": {}, "hash": "a3140bea1a794be0936a03f41f9bf1258a1a4308e827e1eeeab6ee166544969f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "09f6487e-4040-4435-a61e-907e9c182406", "node_type": "1", "metadata": {}, "hash": "99bb8e8f3ea601f4a678a8df8fd7a01b5438a9434353c480681452a4eb951c07", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpx @phala/fn run dist/index.js\n```\n\nIt was expected for it to fail like this:\n\n```sh\nnpx @phala/fn run dist/index.js\n# handle req: undefined\n# Malformed request received\n# {\"output\":\"0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"}\n# \u2728  Done in 0.96s.\n```\n\nNotice that the test fails and reports that a `Malformed request received` was emitted and the request was `undefined`. This is expected as you will need to define the parameters by adding a `-a abi.encode(requestId, profileId) https://api-v2-mumbai-live.lens.dev` to your command.\n\nTo simulate the expected result locally, run the Phala Oracle function now with this command:\n\n> Go to [https://playground.ethers.org](https://playground.ethers.org) to `decode` and `encode` the hexstring you want to pass into your Phat Contract `main` function.", "mimetype": "text/plain", "start_char_idx": 12463, "end_char_idx": 13420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09f6487e-4040-4435-a61e-907e9c182406": {"__data__": {"id_": "09f6487e-4040-4435-a61e-907e9c182406", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74415c35-5f6e-4575-9fa9-78f3343c9205", "node_type": "1", "metadata": {}, "hash": "e6717b7911e203620c739bd21d42949ae227ef8c81a5025a389e10f609557171", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0bd2d75e-f6fe-4cb3-b96f-0bf0482cb904", "node_type": "1", "metadata": {}, "hash": "5c19b45a08892f3bae92836ba51e998286ece21e74806153312ac25a1395d39c", "class_name": "RelatedNodeInfo"}}, "text": ">\n> In this example, the hexstring  `0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000` represents types `uint id` and `string reqData`\n>\n> Here is what you will enter in the playground:\n>\n> * `utils.defaultAbiCoder.decode(['uint id', 'string reqData'], '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000')`\n> * `[ BigNumber { value: \"1\" }, \"0x01\", id: BigNumber { value: \"1\" }, reqData: \"0x01\" ]`\n>\n> You can easily validate this by encoding the types and data with the `utils.defaultAbiCoder.encode()` function like below.", "mimetype": "text/plain", "start_char_idx": 13421, "end_char_idx": 14363, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bd2d75e-f6fe-4cb3-b96f-0bf0482cb904": {"__data__": {"id_": "0bd2d75e-f6fe-4cb3-b96f-0bf0482cb904", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "09f6487e-4040-4435-a61e-907e9c182406", "node_type": "1", "metadata": {}, "hash": "99bb8e8f3ea601f4a678a8df8fd7a01b5438a9434353c480681452a4eb951c07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4aee9564-034e-4955-8cf0-a96754d1b73c", "node_type": "1", "metadata": {}, "hash": "5f9add33f63657ba6eb6a6dbe46c5d0e8e4374c0336ab44f5539b19dc99f0694", "class_name": "RelatedNodeInfo"}}, "text": ">\n> * `utils.defaultAbiCoder.encode(['uint id', 'string reqData'], [1, \"0x01\"])`\n> * `\"0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000\"`\n\n```sh\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000 https://api-v2-mumbai-live.lens.dev\n```\n\n> **What are the ingredients for the `npx @phala/fn run` command?**\n>\n> Our Phat Contract script, now fully constructed, is ready for a trial run. This simulation mirrors the live script's operation when deployed on the Phala Network.\n>\n> The command's first parameter is a HexString, representing a tuple of types `[uint, bytes]`. This serves as the entry function. The second parameter is a `string`, embodying the configurable secrets fed into the main function.\n>\n> The `Coders.decode` function deciphers these parameters, yielding the decoded `requestId` and `encodedReqStr`. These decoded elements then become the raw material for the rest of the custom logic within the script.\n>\n> ```solidity\n> export default function main(request: HexString, settings: string): HexString {\n>   console.log(`handle req: ${request}`);\n>   let requestId, encodedReqStr;\n>   try {\n>     [requestId, encodedReqStr] = decodeRequest(decodeRequestAbiParams, request);\n>   } catch (error) {\n>     console.info(\"Malformed request received\");\n>   }\n> // .", "mimetype": "text/plain", "start_char_idx": 14364, "end_char_idx": 16091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4aee9564-034e-4955-8cf0-a96754d1b73c": {"__data__": {"id_": "4aee9564-034e-4955-8cf0-a96754d1b73c", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0bd2d75e-f6fe-4cb3-b96f-0bf0482cb904", "node_type": "1", "metadata": {}, "hash": "5c19b45a08892f3bae92836ba51e998286ece21e74806153312ac25a1395d39c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b68d7d7-30bc-4f99-8fd5-37fe891601b1", "node_type": "1", "metadata": {}, "hash": "bbca9212e8c9f43acfec6cba762a0c1b37319dc57f6f29e8e5ebb795cd51b643", "class_name": "RelatedNodeInfo"}}, "text": "> }\n> ```\n\n<details>\n\n<summary>How the query looks under the hood</summary>\n\n* HTTP Endpoint: [https://api-v2-mumbai-live.lens.dev](https://api-mumbai.lens.dev/)\n* Profile ID: `0x01`\n* Expected Graphql Query:\n\n```graphql\nquery Profile {\n    profile(request: { forProfileId: \"0x01\" }) {\n      stats {\n          followers\n          following\n          comments\n          countOpenActions\n          posts\n          quotes\n          mirrors\n          publications\n          reacted\n          reactions\n      }\n    }\n}\n```\n\n* Expected Output:\n\n```graphql\n{\n\"data\": {\n  \"profile\": {\n    \"stats\": {\n      \"followers\": 2,\n      \"following\": 0,\n      \"comments\": 0,\n      \"countOpenActions\": 1,\n      \"posts\": 14,\n      \"quotes\": 0,\n      \"mirrors\": 0,\n      \"publications\": 14,\n      \"reacted\": 0,\n      \"reactions\": 0\n    }\n  }\n}\n```\n\n</details>\n\nYou will see:\n\n```bash\nnpx @phala/fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000 https://api-v2-mumbai-live.lens.dev/\n\n> lensapi-oracle-consumer-contract@0.0.1 run-function\n> phat-fn run dist/index.js -a 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000 https://api-v2-mumbai-live.", "mimetype": "text/plain", "start_char_idx": 16094, "end_char_idx": 17660, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b68d7d7-30bc-4f99-8fd5-37fe891601b1": {"__data__": {"id_": "5b68d7d7-30bc-4f99-8fd5-37fe891601b1", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4aee9564-034e-4955-8cf0-a96754d1b73c", "node_type": "1", "metadata": {}, "hash": "5f9add33f63657ba6eb6a6dbe46c5d0e8e4374c0336ab44f5539b19dc99f0694", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad367bdc-0dc7-4790-84f0-0bd389e1bf7c", "node_type": "1", "metadata": {}, "hash": "b924a0e2b71b3f88b74ccfd75fa98496d62d90777a1729be4a99817f69a19bd8", "class_name": "RelatedNodeInfo"}}, "text": "lens.dev/\n\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000\n[1]: 0x01\nRequest received for profile 0x01\nresponse: 0,1,14\n{\"output\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000e\"}\n```\n\nWe have now successfully tested the default function and ran a test to verify the function returns a response as expected.\n\n### Testing Default Function with Local Hardhat Node <a href=\"#user-content-testing-default-function-with-local-hardhat-node\" id=\"user-content-testing-default-function-with-local-hardhat-node\"></a>\n\nPreviously we showed how to test the default function locally without a running node, but we can also run two other tests.\n\n1. Run the default mocha e2e tests.\n2. Run local hardhat node and watch the requests that are pushed and see how the function transforms the data.\n\n### **Run the default mocha e2e tests**\n\nLets\u2019s start with the first test case.\n\n> Note: You will need to ensure you configure your local vars `POLYGON_RPC_URL` and `MUMBAI_RPC_URL` `.env` file. You can do this with `cp .env.local .env` then edit the `.env` with your information.\n\n<details>\n\n<summary>Expected error if <code>.env</code> not configured.</summary>\n\n```sh\nnpm run localhost-test\n# Error HH8: There's one or more errors in your config file:\n\n#  * Invalid value undefined for HardhatConfig.networks.polygon.url - Expected a value of type string.\n#  * Invalid value undefined for HardhatConfig.networks.mumbai.url - Expected a value of type string.", "mimetype": "text/plain", "start_char_idx": 17660, "end_char_idx": 19471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad367bdc-0dc7-4790-84f0-0bd389e1bf7c": {"__data__": {"id_": "ad367bdc-0dc7-4790-84f0-0bd389e1bf7c", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b68d7d7-30bc-4f99-8fd5-37fe891601b1", "node_type": "1", "metadata": {}, "hash": "bbca9212e8c9f43acfec6cba762a0c1b37319dc57f6f29e8e5ebb795cd51b643", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "27153ee6-43e7-4c53-b771-41bdca6acc05", "node_type": "1", "metadata": {}, "hash": "eddaa6d9454b65eccee4ee8c9cbf83818aaa9f75633af197317f48146a87a684", "class_name": "RelatedNodeInfo"}}, "text": "# To learn more about Hardhat's configuration, please go to https://hardhat.org/config/\n\n# For more info go to https://hardhat.org/HH8 or run Hardhat with --show-stack-traces\n# error Command failed with exit code 1.\n```\n\n</details>\n\n```sh\nnpm run localhost-test\n```\n\nYou will now see that all test cases have passed.\n\n```sh\nnpm run localhost-test\n# Compiled 14 Solidity files successfully\n#\n#  TestLensApiConsumerContract\n#    \u2714 Push and receive message (1664ms)\n#\n#  1 passing (2s)\n#\n# \u2728  Done in 3.29s.\n```\n\nThis is how the e2e mocha test will look like. You can customize this file at `./test/TestLensApiConsumerContract.ts`.\n\n<details>\n\n<summary>View file <code>TestLensApiConsumerContract.ts</code></summary>\n\n```typescript\nimport { expect } from \"chai\";\nimport { type Contract, type Event } from \"ethers\";\nimport { ethers } from \"hardhat\";\nimport { execSync } from \"child_process\";\n\nasync function waitForResponse(consumer: Contract, event: Event) {\n  const [, data] = event.args!", "mimetype": "text/plain", "start_char_idx": 19475, "end_char_idx": 20461, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27153ee6-43e7-4c53-b771-41bdca6acc05": {"__data__": {"id_": "27153ee6-43e7-4c53-b771-41bdca6acc05", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad367bdc-0dc7-4790-84f0-0bd389e1bf7c", "node_type": "1", "metadata": {}, "hash": "b924a0e2b71b3f88b74ccfd75fa98496d62d90777a1729be4a99817f69a19bd8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d6aa7ba-b641-4bc9-b557-8ded67f3cc38", "node_type": "1", "metadata": {}, "hash": "6bf5bdf182f2c0d2c7c88958002e2063f0b6b443f3992cc963dfcf5a79a49171", "class_name": "RelatedNodeInfo"}}, "text": ";\n  // Run Phat Function\n  const result = execSync(`phat-fn run --json dist/index.js -a ${data} https://api-mumbai.lens.dev/`).toString();\n  const json = JSON.parse(result);\n  const action = ethers.utils.hexlify(ethers.utils.concat([\n    new Uint8Array([0]),\n    json.output,\n  ]));\n  // Make a response\n  const tx = await consumer.rollupU256CondEq(\n    // cond\n    [],\n    [],\n    // updates\n    [],\n    [],\n    // actions\n    [action],\n  );\n  const receipt = await tx.wait();\n  return receipt.events;\n}\n\ndescribe(\"TestLensApiConsumerContract\", function () {\n  it(\"Push and receive message\", async function () {\n    // Deploy the contract\n    const [deployer] = await ethers.getSigners();\n    const TestLensApiConsumerContract = await ethers.getContractFactory(\"TestLensApiConsumerContract\");\n    const consumer = await TestLensApiConsumerContract.deploy(deployer.address);\n\n    // Make a request\n    const profileId = \"0x01\";\n    const tx = await consumer.request(profileId);\n    const receipt = await tx.wait();\n    const reqEvents = receipt.events;\n    expect(reqEvents![0]).to.have.property(\"event\", \"MessageQueued\");\n\n    // Wait for Phat Function response\n    const respEvents = await waitForResponse(consumer, reqEvents![0])\n\n    // Check response data\n    expect(respEvents[0]).to.have.property(\"event\", \"ResponseReceived\");\n    const [reqId, input, value] = respEvents[0].args;\n    expect(ethers.BigNumber.isBigNumber(reqId)).to.be.true;\n    expect(input).to.equal(profileId);\n    expect(ethers.BigNumber.isBigNumber(value)).to.be.true;\n  });\n});\n```\n\n</details>\n\n**Run local hardhat node and watch the requests that are pushed and see how the function transforms the data**\n\nFirst we will start a local hardhat node.\n\n```\nnpm run localhost-node\n```\n\n<details>\n\n<summary>Example output</summary>\n\n```sh\nnpm run localhost-node\n# Started HTTP and WebSocket JSON-RPC server at http://127.0.0.1:8545/\n\n# Accounts\n# ========\n\n# WARNING: These accounts, and their private keys, are publicly known.", "mimetype": "text/plain", "start_char_idx": 20461, "end_char_idx": 22462, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d6aa7ba-b641-4bc9-b557-8ded67f3cc38": {"__data__": {"id_": "0d6aa7ba-b641-4bc9-b557-8ded67f3cc38", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27153ee6-43e7-4c53-b771-41bdca6acc05", "node_type": "1", "metadata": {}, "hash": "eddaa6d9454b65eccee4ee8c9cbf83818aaa9f75633af197317f48146a87a684", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "000c8bd9-e962-4991-b073-c7d581c2eac9", "node_type": "1", "metadata": {}, "hash": "9e08d3ce3531030017a89fb9660f5b0706dfb8e4c486992259bb3b1affd5409a", "class_name": "RelatedNodeInfo"}}, "text": "# Any funds sent to them on Mainnet or any other live network WILL BE LOST.\n```\n\n</details>\n\nWith our hardhat node running locally, we can now deploy the `LensApiConsumerContract.sol` contract to the local hardhat network.\n\n```sh\nnpm run localhost-deploy \n```\n\n```sh\nnpm run localhost-deploy\n# Deploying...\n# Deployed { consumer: '0x0165878A594ca255338adfa4d48449f69242Eb8F' }\n# \u2728  Done in 0.94s.\n```\n\nMake sure to copy the deployed contract address when you deploy your own contract locally. Note you contract address will be different than `0x0165878A594ca255338adfa4d48449f69242Eb8F`. We will now start watching the hardhat node deployed contract for any new requests.\n\n```sh\nnpx @phala/fn watch 0x0165878A594ca255338adfa4d48449f69242Eb8F artifacts/contracts/TestLensApiConsumerContract.sol/TestLensApiConsumerContract.json dist/index.js -a https://api-mumbai.lens.dev/\n```\n\n```sh\nnpx @phala/fn watch 0x0165878A594ca255338adfa4d48449f69242Eb8F artifacts/contracts/TestLensApiConsumerContract.sol/TestLensApiConsumerContract.json dist/index.js -a https://api-v2-mumbai-live.lens.dev/\n# $ phat-fn watch 0x0165878A594ca255338adfa4d48449f69242Eb8F artifacts/contracts/TestLensApiConsumerContract.sol/TestLensApiConsumerContract.json dist/index.js -a https://api-v2-mumbai-live.lens.dev/\n# Listening for TestLensApiConsumerContract MessageQueued events...\n```\n\nLet\u2019s now make a new request and see what happens with the listener\u2019s output. In separate tab, you will push a request with the following.", "mimetype": "text/plain", "start_char_idx": 22463, "end_char_idx": 23960, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "000c8bd9-e962-4991-b073-c7d581c2eac9": {"__data__": {"id_": "000c8bd9-e962-4991-b073-c7d581c2eac9", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d6aa7ba-b641-4bc9-b557-8ded67f3cc38", "node_type": "1", "metadata": {}, "hash": "6bf5bdf182f2c0d2c7c88958002e2063f0b6b443f3992cc963dfcf5a79a49171", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53702a7b-19e7-4da6-835a-3bc9aff9a2b9", "node_type": "1", "metadata": {}, "hash": "4f7ae62b35cfb3736dada60e9c014631f9d989847f86570f6e5674372b908ddc", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x0165878A594ca255338adfa4d48449f69242Eb8F npm run localhost-push-request\n```\n\n```sh\nLOCALHOST_CONSUMER_CONTRACT_ADDRESS=0x0165878A594ca255338adfa4d48449f69242Eb8F npm run localhost-push-request\n# Pushing a request...\n# Received event [ResponseReceived]: {\n#  reqId: BigNumber { value: \"1\" },\n#  input: '0x01',\n#  value: BigNumber { value: \"3361\" }\n# }\n# \u2728  Done in 4.99s.\n```\n\nIf we look back at the listener tab, we will see output has been appended.\n\n```sh\nListening for TestLensApiConsumerContract MessageQueued events...\nReceived event [MessageQueued]: {\n  tail: 0n,\n  data: '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000'\n}\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000\nRequest received for profile 0x01\nresponse: 0,1,14\nJS Execution output: 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c9\n```\n\n## Deployment\n\nNow that you have the prerequisites to deploy a Polygon Consumer Contract on Polygon, lets begin with some initials tasks.", "mimetype": "text/plain", "start_char_idx": 23962, "end_char_idx": 25527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53702a7b-19e7-4da6-835a-3bc9aff9a2b9": {"__data__": {"id_": "53702a7b-19e7-4da6-835a-3bc9aff9a2b9", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "000c8bd9-e962-4991-b073-c7d581c2eac9", "node_type": "1", "metadata": {}, "hash": "9e08d3ce3531030017a89fb9660f5b0706dfb8e4c486992259bb3b1affd5409a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc9253db-122d-44b3-8329-88a687879d74", "node_type": "1", "metadata": {}, "hash": "31718359467f459e281ce22811a2a12b20f89bc1c78cbc7691d1e47da6a00e70", "class_name": "RelatedNodeInfo"}}, "text": "### Install Dependencies & Compile Contracts\n\n```shell\n# install dependencies\n$ npm install\n\n# compile contracts\n$ npm run compile\n```\n\n### &#x20;Deploy to Polygon Mumbai Testnet <a href=\"#user-content-deploy-to-polygon-mumbai-testnet\" id=\"user-content-deploy-to-polygon-mumbai-testnet\"></a>\n\n{% hint style=\"danger\" %}\n**Important**\n\nThis guide references the `mumbai` testnet chain.&#x20;\n\nThe`mumbai` testnet is [deprecated since 2024/04/08](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos), meaning the steps to deploy to a testnet will no longer work out of the box.\n\nYou can opt to use the [`amoy`](https://polygon.technology/blog/introducing-the-amoy-testnet-for-polygon-pos) testnet or any other EVM testnet instead.\n{% endhint %}\n\nWith the contracts successfully compiled, now we can begin deploying first to Polygon Mumbai Testnet. If you have not gotten `MATIC` for Mumbai Testnet then get `MATIC` from a [faucet](https://mumbaifaucet.com/). Ensure to save the address after deploying the Consumer Contract because this address will be use in the \"[Configure Client](https://docs.phala.network/developers/bricks-and-blueprints/featured-blueprints/lensapi-oracle#step-4-configure-the-client-address)\" section of Phat Bricks UI. The deployed address will also be set to the environment variable [`MUMBAI_CONSUMER_CONTRACT_ADDRESS`](https://github.com/Phala-Network/lensapi-oracle-consumer-contract/blob/refactor/.env.local).", "mimetype": "text/plain", "start_char_idx": 25529, "end_char_idx": 26990, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc9253db-122d-44b3-8329-88a687879d74": {"__data__": {"id_": "fc9253db-122d-44b3-8329-88a687879d74", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53702a7b-19e7-4da6-835a-3bc9aff9a2b9", "node_type": "1", "metadata": {}, "hash": "4f7ae62b35cfb3736dada60e9c014631f9d989847f86570f6e5674372b908ddc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a77825a-fc2c-4167-b1b0-8bf73c8bcb38", "node_type": "1", "metadata": {}, "hash": "2be8bd9c9df570a625914ecc14189fef63c89c4699c2faebafa2307242b41713", "class_name": "RelatedNodeInfo"}}, "text": "```sh\nnpm run test-deploy\n```\n\n```sh\n# deploy contracts to testnet mumbai\nnpm run test-deploy\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://mumbai.polygonscan.com/address/0x10FA409109E073C15b77A8352cB6A89C12CD1605\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# MUMBAI_CONSUMER_CONTRACT_ADDRESS=0x10FA409109E073C15b77A8352cB6A89C12CD1605\n#\n# Configuring...\n# Done\n# \u2728  Done in 8.20s.\n```\n\n### **(Optional) Verify Contract on Polygon Mumbai Testnet**\n\nEnsure to update the [`mumbai.arguments.ts`](https://github.com/Phala-Network/lensapi-oracle-consumer-contract/blob/refactor/mumbai.arguments.ts) file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `mumbai.arguments.ts` file.\n\n> **Note**: Your contract address will be different than `0x090E8fDC571d65459569BC87992C1026121DB955` when verifying your contract. Make sure to get your actual contract address from the console log output after executing `npm run test-deploy`.\n\n```sh\nnpm run test-verify -- <MUMBAI_CONSUMER_CONTRACT_ADDRESS>\n```\n\n```sh\nnpm run test-verify -- 0x090E8fDC571d65459569BC87992C1026121DB955\n# $ hardhat verify --network mumbai --constructor-args mumbai.arguments.ts 0x090E8fDC571d65459569BC87992C1026121DB955\n# Nothing to compile\n# No need to generate any newer typings.\n# Successfully submitted source code for contract\n# contracts/TestLensApiConsumerContract.sol:TestLensApiConsumerContract at 0x090E8fDC571d65459569BC87992C1026121DB955\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract TestLensApiConsumerContract on Etherscan.", "mimetype": "text/plain", "start_char_idx": 26992, "end_char_idx": 28752, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a77825a-fc2c-4167-b1b0-8bf73c8bcb38": {"__data__": {"id_": "0a77825a-fc2c-4167-b1b0-8bf73c8bcb38", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc9253db-122d-44b3-8329-88a687879d74", "node_type": "1", "metadata": {}, "hash": "31718359467f459e281ce22811a2a12b20f89bc1c78cbc7691d1e47da6a00e70", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90b1a3ca-6da7-44c7-b3c9-cac59dcd3651", "node_type": "1", "metadata": {}, "hash": "3d4995ef936c22b4489b6315c8ab82406fd2c786b0a586e734c4a1ee0344e83b", "class_name": "RelatedNodeInfo"}}, "text": "# https://mumbai.polygonscan.com/address/0x090E8fDC571d65459569BC87992C1026121DB955#code\n# \u2728  Done in 5.91s.\n```\n\n### Deploy Phat Contract to PoC6 Testnet <a href=\"#user-content-deploy-phat-contract-to-poc5-testnet\" id=\"user-content-deploy-phat-contract-to-poc5-testnet\"></a>\n\nFor customizing your Phat Contract, checkout Phat Contract custom configurations in [JS\\_API\\_DOC.md](https://github.com/Phala-Network/lensapi-oracle-consumer-contract/blob/refactor/src/JS\\_API\\_DOC.md) to learn more before deploying to PoC6 testnet.\n\nNow that are Phat Contract has built successfully, let's deploy to Phala PoC6 Testnet with the following command:\n\n```sh\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --coreSettings=https://api-v2-mumbai-live.lens.dev/\n# If polkadot-account.json is in the root of project\nnpx @phala/fn upload --coreSettings=https://api-v2-mumbai-live.lens.dev/ -a ./polkadot-account.json\n```\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```sh\nnpx @phala/fn upload --coreSettings=https://api-v2-mumbai-live.lens.dev/ -a ./polkadot-account.json\n# ? Please enter your client RPC URL https://polygon-mumbai.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# ? Please enter your consumer address 0xA4Be456Fd0d41968a52b34Cdb8Ba875F2281134a\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.", "mimetype": "text/plain", "start_char_idx": 28753, "end_char_idx": 30253, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90b1a3ca-6da7-44c7-b3c9-cac59dcd3651": {"__data__": {"id_": "90b1a3ca-6da7-44c7-b3c9-cac59dcd3651", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a77825a-fc2c-4167-b1b0-8bf73c8bcb38", "node_type": "1", "metadata": {}, "hash": "2be8bd9c9df570a625914ecc14189fef63c89c4699c2faebafa2307242b41713", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94e4880b-90af-45a1-a624-6ec52e7a35a3", "node_type": "1", "metadata": {}, "hash": "3196f0d40be830a151dedfd1f08c9cb4f3e2645d723822390cc6b0cebfcfe412", "class_name": "RelatedNodeInfo"}}, "text": "#\n#  17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://poc6.phala.network/ws... \u287f\n# (node:25497) ExperimentalWarning: buffer.Blob is an experimental feature. This feature could change at any time\n# Connecting to the endpoint: wss://poc6.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Instantiating the ActionOffchainRollup contract... done\n# The ActionOffchainRollup contract has been instantiated: 0x9c777c16b0a185caa895835b8f3b9e8d67be9f5e30197f71b4d32d2b8fde4b3b\n# Setting up the actions... done\n# \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks-poc6.phala.network/workflows/0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd/3\n# Your Attestor address: 0x2b5fe2920cce2f522d69613adaa9378ba43b687d\n# Your WORKFLOW_ID: 3\n# \u2728  Done in 73.22s.\n```\n\nGo to the [PoC6 Testnet Bricks UI](https://bricks-poc5.phala.network/) Dashboard and you can see your newly deployed Phat Contract.&#x20;\n\n<figure><img src=\"https://github.com/Phala-Network/lensapi-oracle-consumer-contract/raw/refactor/assets/Function-added.png\" alt=\"\" width=\"375\"><figcaption></figcaption></figure>\n\n### **Interact with Consumer Contract on Polygon Mumbai**\n\nTest Consumer Contract on Mumbai with a few tests to check for malformed requests failures, successful requests, and set the attestor.", "mimetype": "text/plain", "start_char_idx": 30254, "end_char_idx": 31695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94e4880b-90af-45a1-a624-6ec52e7a35a3": {"__data__": {"id_": "94e4880b-90af-45a1-a624-6ec52e7a35a3", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90b1a3ca-6da7-44c7-b3c9-cac59dcd3651", "node_type": "1", "metadata": {}, "hash": "3d4995ef936c22b4489b6315c8ab82406fd2c786b0a586e734c4a1ee0344e83b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7a747b9-2222-4e2e-926a-f328286da410", "node_type": "1", "metadata": {}, "hash": "63dfb3765dafb2457d4a2275fa24a8420857d31895b44a2708e946acab80eeee", "class_name": "RelatedNodeInfo"}}, "text": "**Please make sure your have set your attestor address in .env file `MUMBAI_PHALA_ORACLE_ATTESTOR`**\n\n```sh\nnpm run test-set-attestor\n```\n\n```sh\nnpm run test-set-attestor\n# $ hardhat run --network mumbai ./scripts/mumbai/set-attestor.ts\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Bricks \ud83e\uddf1 UI dashboard (https://bricks-poc6.phala.network)\n# - Go to 'Configure Client' section where a text box reads 'Add Consumer Smart Contract'\n# - Set value to 0x090E8fDC571d65459569BC87992C1026121DB955\n# Done\n# \u2728  Done in 2.69s.\n```\n\nTest pushing a malform request.\n\n```sh\nnpm run test-push-malformed-request\n```\n\n```sh\nnpm run test-push-malformed-request\n# $ hardhat run --network mumbai ./scripts/mumbai/push-malformed-request.ts\n# Pushing a malformed request...\n# Done\n# \u2728  Done in 2.48s.\n```\n\nTest pushing a valid request.\n\n```sh\nnpm run test-push-request\n```\n\n```sh\nnpm run test-push-request\n# Pushing a request...\n# Done\n# \u2728  Done in 2.97s.\n```\n\n### Update Phat Contract on Phala PoC6 Testnet <a href=\"#user-content-update-phat-contract-on-phala-poc5-testnet\" id=\"user-content-update-phat-contract-on-phala-poc5-testnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. We now allow you to update your Phat Contract easily in the commandline.", "mimetype": "text/plain", "start_char_idx": 31697, "end_char_idx": 33073, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7a747b9-2222-4e2e-926a-f328286da410": {"__data__": {"id_": "b7a747b9-2222-4e2e-926a-f328286da410", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94e4880b-90af-45a1-a624-6ec52e7a35a3", "node_type": "1", "metadata": {}, "hash": "3196f0d40be830a151dedfd1f08c9cb4f3e2645d723822390cc6b0cebfcfe412", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db550ca6-d1ca-49bf-a4cf-5dc25287c4ec", "node_type": "1", "metadata": {}, "hash": "8f0b092d344e4416b61b56a8e6b682e89430b967d2f7bf3a7637de13fb85e6e5", "class_name": "RelatedNodeInfo"}}, "text": "Now let's update the Phat Contract with the following command:\n\n```sh\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update -a ./polkadot-account.json\n```\n\n```sh\nnpx @phala/fn update -a ./polkadot-account.json\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.\n#\n#   17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://poc6.phala.network/ws... \u287f\n# (node:25392) ExperimentalWarning: buffer.Blob is an experimental feature. This feature could change at any time\n# Connecting to the endpoint: wss://poc6.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Checking your workflow settings... done\n# Updating... done\n# The Phat Function for workflow 1 has been updated.\n# \u2728  Done in 10.82s.\n```\n\nCongrats! You've now successfully updated your Phat Contract!\n\n### Deploy to Polygon Mainnet <a href=\"#user-content-deploy-to-polygon-mainnet\" id=\"user-content-deploy-to-polygon-mainnet\"></a>\n\nEnsure to save the address after deploying the Consumer Contract because this address will be used in the \"[Configure Client](https://docs.phala.network/developers/bricks-and-blueprints/featured-blueprints/lensapi-oracle#step-4-configure-the-client-address)\" section of Phat Bricks UI. The deployed address will also be set to the environment variable `POLYGON_CONSUMER_CONTRACT_ADDRESS`.\n\n> **Note**: Your contract address will be different than `0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4` when verifying your contract.", "mimetype": "text/plain", "start_char_idx": 33074, "end_char_idx": 34820, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db550ca6-d1ca-49bf-a4cf-5dc25287c4ec": {"__data__": {"id_": "db550ca6-d1ca-49bf-a4cf-5dc25287c4ec", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7a747b9-2222-4e2e-926a-f328286da410", "node_type": "1", "metadata": {}, "hash": "63dfb3765dafb2457d4a2275fa24a8420857d31895b44a2708e946acab80eeee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bba88364-9d11-4f61-aef3-007fb15cad7d", "node_type": "1", "metadata": {}, "hash": "febd3c8431fae732323b487ca6c3e23a193ca280a8ec0d7aae686f99a9f0e60a", "class_name": "RelatedNodeInfo"}}, "text": "Make sure to get your actual contract address from the console log output after executing `npm run main-deploy`.\n\n```sh\nnpm run main-deploy\n# Deploying...\n#\n# \ud83c\udf89 Your Consumer Contract has been deployed, check it out here: https://polygonscan.com/address/0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n#\n# You also need to set up the consumer contract address in your .env file:\n#\n# POLYGON_CONSUMER_CONTRACT_ADDRESS=0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n#\n# Configuring...\n# Done\n# \u2728  Done in 8.20s.\n```\n\n### **(Optional) Verify Contract on Polygon Mainnet**\n\nEnsure to update the `polygon.arguments.ts` file with the constructor arguments used to instantiate the Consumer Contract. If you add additional parameters to the constructor function then make sure to update the `polygon.arguments.ts` file.\n\n```sh\nnpm run main-verify -- 0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n# Nothing to compile\n# No need to generate any newer typings.\n# Successfully submitted source code for contract\n# contracts/TestLensApiConsumerContract.sol.sol:TestLensApiConsumerContract.sol.sol at 0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n# for verification on the block explorer. Waiting for verification result...\n#\n# Successfully verified contract TestLensApiConsumerContract.sol on Etherscan.\n# https://polygonscan.com/address/0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4#code\n# Done in 8.88s.", "mimetype": "text/plain", "start_char_idx": 34821, "end_char_idx": 36195, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bba88364-9d11-4f61-aef3-007fb15cad7d": {"__data__": {"id_": "bba88364-9d11-4f61-aef3-007fb15cad7d", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db550ca6-d1ca-49bf-a4cf-5dc25287c4ec", "node_type": "1", "metadata": {}, "hash": "8f0b092d344e4416b61b56a8e6b682e89430b967d2f7bf3a7637de13fb85e6e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d20b43cf-15fe-4d98-af09-af53eb8c80f5", "node_type": "1", "metadata": {}, "hash": "e34fcedd0bdeed2b96138863112308f8ecfd4196079e925382be16e46209ea8d", "class_name": "RelatedNodeInfo"}}, "text": "```\n\n### Deploy Phat Contract to Phala Mainnet <a href=\"#user-content-deploy-phat-contract-to-phala-mainnet\" id=\"user-content-deploy-phat-contract-to-phala-mainnet\"></a>\n\nFor customizing your Phat Contract, Phat Contract custom configurations can be found here in [JS\\_API\\_DOC.md](https://github.com/Phala-Network/lensapi-oracle-consumer-contract/blob/main/src/JS\\_API\\_DOC.md) to learn more before deploying to Phala Mainnet.\n\nNow that are Phat Contract has built successfully, let's deploy to Phala Mainnet with the following command:\n\n```sh\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn upload --mode=production --coreSettings=https://api-v2.lens.dev/\n# If polkadot-account.json is in the root of project\nnpx @phala/fn upload --mode=production --coreSettings=https://api-v2.lens.dev/ -a ./polkadot-account.json\n```\n\nHere is the expected output:\n\n> Note: your contract IDs will vary and not be the same as the IDs below.\n\n```sh\nnpx @phala/fn upload --mode=production --coreSettings=https://api-v2.lens.dev/ -a ./polkadot-account.json\n# ? Please enter your client RPC URL https://polygon.g.alchemy.com/v2/JLjOfWJycWFOA0kK_SJ4jLGjtXkMN1wc\n# ? Please enter your consumer address 0xA4Be456Fd0d41968a52b34Cdb8Ba875F2281134a\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.\n#\n#  17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://api.phala.network/ws... \u287f\n# (node:25497) ExperimentalWarning: buffer.Blob is an experimental feature.", "mimetype": "text/plain", "start_char_idx": 36196, "end_char_idx": 37769, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d20b43cf-15fe-4d98-af09-af53eb8c80f5": {"__data__": {"id_": "d20b43cf-15fe-4d98-af09-af53eb8c80f5", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bba88364-9d11-4f61-aef3-007fb15cad7d", "node_type": "1", "metadata": {}, "hash": "febd3c8431fae732323b487ca6c3e23a193ca280a8ec0d7aae686f99a9f0e60a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef9c58a7-ee4a-464c-9207-0c6f6d06ab26", "node_type": "1", "metadata": {}, "hash": "cecde46c23a545af10b1e723b73a338740fe269facfadd5517ad3a7b54a8a615", "class_name": "RelatedNodeInfo"}}, "text": "This feature could change at any time\n# Connecting to the endpoint: wss://api.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Instantiating the ActionOffchainRollup contract... done\n# The ActionOffchainRollup contract has been instantiated: 0x9c777c16b0a185caa895835b8f3b9e8d67be9f5e30197f71b4d32d2b8fde4b3b\n# Setting up the actions... done\n# \ud83c\udf89 Your workflow has been added, you can check it out here: https://bricks-poc6.phala.network/workflows/0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd/3\n# Your Attestor address: 0x2b5fe2920cce2f522d69613adaa9378ba43b687d\n# Your WORKFLOW_ID: 2\n# \u2728  Done in 73.22s.\n```\n\n### **Interact with Consumer Contract on Polygon Mainnet**\n\nExecute Scripts to Consumer Contract on Polygon Mainnet. The Consumer Contract on Polygon Mainnet with a few actions to mimic a malformed request, successful requests, and set the attestor.\n\n```sh\nnpm run main-set-attestor\n# Setting attestor...\n# \ud83d\udea8NOTE\ud83d\udea8\n# Make sure to set the Consumer Contract Address in your Phat Bricks \ud83e\uddf1 UI dashboard (https://bricks-poc6.phala.network)\n# - Go to 'Configure Client' section where a text box reads 'Add Consumer Smart Contract'\n# - Set value to 0xbb0d733BDBe151dae3cEf8D7D63cBF74cCbf04C4\n# Done\n# \u2728  Done in 1.56s.", "mimetype": "text/plain", "start_char_idx": 37770, "end_char_idx": 39141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef9c58a7-ee4a-464c-9207-0c6f6d06ab26": {"__data__": {"id_": "ef9c58a7-ee4a-464c-9207-0c6f6d06ab26", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d20b43cf-15fe-4d98-af09-af53eb8c80f5", "node_type": "1", "metadata": {}, "hash": "e34fcedd0bdeed2b96138863112308f8ecfd4196079e925382be16e46209ea8d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca835b75-5996-45af-a32c-71cff752b846", "node_type": "1", "metadata": {}, "hash": "87057e1459278d832b5afdffc12d9964a99ac45140b37f0d7a227f446d9adc2e", "class_name": "RelatedNodeInfo"}}, "text": "# execute push-malformed-request\nnpm run main-push-malformed-request\n# Pushing a malformed request...\n# Done\n# execute push-request\nnpm run main-push-request\n# Pushing a request...\n# Done\n```\n\n### Update Phat Contract on Phala Mainnet <a href=\"#user-content-update-phat-contract-on-phala-mainnet\" id=\"user-content-update-phat-contract-on-phala-mainnet\"></a>\n\nSometimes you may have had a bug in your script or you want to test things out on the fly without deploying a whole new Phat Contract. We now allow you to update your Phat Contract easily in the command-line. Now let's update the Phat Contract with the following command:\n\n```sh\n# If you did not export your Polkadot account in a \n# polkadot-account.json file in the root of project\nnpx @phala/fn update --mode=production\n# If polkadot-account.json is in the root of project\nnpx @phala/fn update --mode=production -a ./polkadot-account.json\n```\n\n```sh\nnpx @phala/fn update --mode=production -a ./polkadot-account.json\n# ? Please Enter hahaha account password [hidden]\n# Creating an optimized build... done\n# Compiled successfully.\n#\n#   17.64 KB  dist/index.js\n# Connecting to the endpoint: wss://api.phala.network/ws... \u287f\n# (node:25392) ExperimentalWarning: buffer.Blob is an experimental feature. This feature could change at any time\n# Connecting to the endpoint: wss://api.phala.network/ws... done\n# Querying your Brick Profile contract ID... done\n# Your Brick Profile contract ID: 0x4071788a8ce6fbab0cacea0cb1aa52853b5537db7955643e5010c22913c2b1dd\n# Checking your workflow settings... done\n# Updating... done\n# The Phat Function for workflow 1 has been updated.\n# \u2728  Done in 10.82s.", "mimetype": "text/plain", "start_char_idx": 39142, "end_char_idx": 40788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca835b75-5996-45af-a32c-71cff752b846": {"__data__": {"id_": "ca835b75-5996-45af-a32c-71cff752b846", "embedding": null, "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90af409f-c756-463a-bcdd-5fe821a41086", "node_type": "4", "metadata": {}, "hash": "5b49ebf1bf1e9efefc1189d1a2a3dcc74ce039f39e91c1cc6368ad92714721ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef9c58a7-ee4a-464c-9207-0c6f6d06ab26", "node_type": "1", "metadata": {}, "hash": "cecde46c23a545af10b1e723b73a338740fe269facfadd5517ad3a7b54a8a615", "class_name": "RelatedNodeInfo"}}, "text": "```\n\n## Closing\n\nOnce you have stored, the deployed address of the Consumer Contract and set the value in the \"Configure Client\" section of the deployed LensAPI Oracle, you will now have a basic boilerplate example of how to connect your Polygon dApp to a LensAPI Oracle Blueprint. Execute a new requests and check if your configuration is correct like below:\n\n<figure><img src=\"../../../../.gitbook/assets/polygonscan-ex.png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 40789, "end_char_idx": 41257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62eaa8af-ceb0-4513-9710-94b8ba5682c0": {"__data__": {"id_": "62eaa8af-ceb0-4513-9710-94b8ba5682c0", "embedding": null, "metadata": {"file_path": "./phala_dist/budget-balancer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1a27334-ce28-4019-bc1b-b33da3799538", "node_type": "4", "metadata": {}, "hash": "629d2634f505137f27fa0daf24753806c5752c7a61721f62b28d205a02597b07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5546439-8131-4832-8fc7-a494e93e6f3f", "node_type": "1", "metadata": {}, "hash": "beff39e05c01c01faa8986012eb6aa6cb9f98cca261e3367196bb7c44749a212", "class_name": "RelatedNodeInfo"}}, "text": "# Budget balancer\n\n**Budget Balancer** is a Phat Contract used to balance the computing power rewards between Phala and Khala networks, aiming to ensure the effective working of the Gemini Tokenomics.\n\n### **How it works**\n\nThe budget balancer adjusts the rewards budget by querying the total number of shares for workers on both Phala\\&Khala networks daily, calculating the reward allocation between the two chains, and sending a budget change transaction to both chains.\n\nIt consists of three major components:\n\n#### Subsquid query service\n\n* Regularly query information on Phala and Khala chains and store data snapshots\n* Generate snapshot database and output API for the phat contract to read relevant data\n\n#### **Contract,** which is divided into two parts:\n\n* Computation part\n  * The strategy (rules) of the contract is all coded in the computation part, which calculates the budget amount of the two chains for each period.\n* Transaction sending\n  * Based on the calculated amount and comparing the on-chain transaction restrictions, it determines whether a transaction has been issued within this period (only one transaction can be completed in a period).\n  * If the judgment is correct, send the transaction request to the chain from the contract-generated address. The transaction will be sent to both Phala\\&Khala.\n\n#### **On-chain functions and on-chain contract account whitelist**\n\n* The function of flexibly adjusting the on-chain budget through transactions has been developed on the chain, and the budget can be adjusted by sending transactions from specific accounts\n* There are two ways to change the budget on the chain\n  * Using the above function, the whitelisted account configured on the chain can be used to send transactions, which can directly change the budget without going through community governance; however, the configuration of whitelist permissions for the account needs to be authorized through `Motion` voting.\n  * Submit a `Motion` proposal to directly change the budget to a specific value, and the change will take effect after the vote is passed\n* Replacing the balancer strategy is to deploy a new balancer contract, thereby generating a new contract address, and replace the old contract address in the whitelist through Motion voting to achieve the strategy update.\n\n### The mathematical logic of the balancer\n\nAs we mentioned in [worker-rewards.md](worker-rewards.md \"mention\"), Phala and Khala share a total of 700 million in computing power rewards.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5546439-8131-4832-8fc7-a494e93e6f3f": {"__data__": {"id_": "c5546439-8131-4832-8fc7-a494e93e6f3f", "embedding": null, "metadata": {"file_path": "./phala_dist/budget-balancer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1a27334-ce28-4019-bc1b-b33da3799538", "node_type": "4", "metadata": {}, "hash": "629d2634f505137f27fa0daf24753806c5752c7a61721f62b28d205a02597b07", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62eaa8af-ceb0-4513-9710-94b8ba5682c0", "node_type": "1", "metadata": {}, "hash": "bd742d73685a5fe2ca49c90ad8b730f8d5c02a866fd18f096b4128b77cdfe83e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f2bf05f-a882-4d2a-bda4-e059a1d73c3b", "node_type": "1", "metadata": {}, "hash": "0535a0107d9d42515d6eb2232d576d03a7ce29dfc692faa3e6875fd13a2a1dfe", "class_name": "RelatedNodeInfo"}}, "text": "The reward distribution between the two chains depends on the computing power quality & quantity of each chain, that is, the sum of shares of workers on the chain.\n\n#### Basic parameters\n\n* **Halving cycle = 180 days**&#x20;\n  * It's physical time, regardless of the number of blocks\n  * Starting from the 3rd halving cycle on June 12, 2023\n* **Initial total budget for each unit = 720K / 24 / 60 \\* P = 500P**\n  * Assuming the time of each calculation cycle is **P** minutes\n  * 720K is the standard daily budget for the first halving cycle\n* **The real-time halving coefficient = 0.75^(n-1)**&#x20;\n  * **n** is the halving period (n for the first period is 1, not 0).", "mimetype": "text/plain", "start_char_idx": 2502, "end_char_idx": 3172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f2bf05f-a882-4d2a-bda4-e059a1d73c3b": {"__data__": {"id_": "1f2bf05f-a882-4d2a-bda4-e059a1d73c3b", "embedding": null, "metadata": {"file_path": "./phala_dist/budget-balancer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1a27334-ce28-4019-bc1b-b33da3799538", "node_type": "4", "metadata": {}, "hash": "629d2634f505137f27fa0daf24753806c5752c7a61721f62b28d205a02597b07", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5546439-8131-4832-8fc7-a494e93e6f3f", "node_type": "1", "metadata": {}, "hash": "beff39e05c01c01faa8986012eb6aa6cb9f98cca261e3367196bb7c44749a212", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4641231a-d154-4a46-b251-26bffaff5d7a", "node_type": "1", "metadata": {}, "hash": "091a36d471238f637ef76197fee9cfaf2cd981148d39ba0c2ce35a226ffb4397", "class_name": "RelatedNodeInfo"}}, "text": "* n = 3 + roundup\\[(day(now) - (2023.6.12)) / 180days]\n\nIn summary, **each unit's real-time total budget = 500P \\* 0.75^(n-1)**\n\n#### key equations\n\n* Real-time total budget per unit = Phala's total budget per unit + Khala's total budget per unit\n* Phala's total budget per unit / Phala total share = Khala's total budget per unit / Khala total share\n* Phala's total budget per unit = Phala's total budget per block \\* Phala's actual block number per unit\n* Khala's total budget per day = Khala's total budget per block \\* Khala's actual block number per unit\n* From this, we can deduce the equations and get the final formula\n  * **Phala's total budget per block = Khala's total share / (Phala's total share + Khala's total share) / Phala's actual block number per unit \\* Initial total budget per unit \\* Real-time halving coefficient**\n  * **Khala's total budget per block = Phala's total share / (Phala's total share + Khala's total share) / Khala's actual block number per unit \\* Initial total budget per unit \\* Real-time halving coefficient**\n\n_The actual block number of each unit on each chain and the total share of workers can be calculated via the Subsquid query service._\n\n### Budget balancer & Halving period\n\n#### Once we calculated the halving cycle using block time.\n\nBefore the Budget balancer was launched, **Khala** staking mechanism started on #1,467,069, and it went to the next halving period every 1,296,000 blocks.&#x20;\n\n**Phala** staking mechanism started on #2,491,061, and it went to the next halving period after the Budget balancer launched\n\n#### Now we calculated the halving cycle using calendar days&#x20;\n\nThe internal rules of the Budget Balancer implement it.&#x20;\n\nWe have set the initial value to June 12th, 2023 (this day is the start of the third halving period of the Khala network). From then on, every 180 calendar days, it will enter the next halving period.", "mimetype": "text/plain", "start_char_idx": 3175, "end_char_idx": 5080, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4641231a-d154-4a46-b251-26bffaff5d7a": {"__data__": {"id_": "4641231a-d154-4a46-b251-26bffaff5d7a", "embedding": null, "metadata": {"file_path": "./phala_dist/budget-balancer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1a27334-ce28-4019-bc1b-b33da3799538", "node_type": "4", "metadata": {}, "hash": "629d2634f505137f27fa0daf24753806c5752c7a61721f62b28d205a02597b07", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f2bf05f-a882-4d2a-bda4-e059a1d73c3b", "node_type": "1", "metadata": {}, "hash": "0535a0107d9d42515d6eb2232d576d03a7ce29dfc692faa3e6875fd13a2a1dfe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f66fbe2-adfc-4f6e-b385-3dd9c647e162", "node_type": "1", "metadata": {}, "hash": "c9b868e9b264183dd11ebbaba183a21dc8b7073229395dd3ef76c13dba977cdb", "class_name": "RelatedNodeInfo"}}, "text": "Phala network follows the same rule.\n\n#### Why we made it\n\n* When two chains share one tokenomics, it is necessary to unify the halving periods; otherwise, the two chains may easily experience situations where one side has significantly higher rewards due to the gap in halving periods.\n* It is difficult to ensure that the block speeds on both sides are the same, making it impossible to guarantee consistent halving periods based on blocks. Therefore, it must be adjusted to use natural time as the unit.\n* The block production speed will be considered in the budget balancer's adjustment parameters, ensuring that workers' earnings on both sides are equal within the same unit of natural time. If the block production speed slows down, the budget will naturally increase, so the current issue of unstable returns due to blocked blocks will also be resolved.\n\n### **Two constraints for budget adjustment**\n\n#### Nonce constraint\n\nOnly one transaction can be successfully executed in a unit of time.\n\nThis is to prevent excessive budget adjustments due to Balancer bugs.\n\nAdditionally, if the Balancer does experience a bug, we can propose a motion for a budget change, inputting the nonce value for the next period's transaction. In this way, a buggy Balancer cannot interfere with on-chain information during the current and next period, serving as a protective measure.\n\n#### Max budget\n\nTo avoid excessively issuing computing rewards due to unusually high budgets caused by special circumstances (hacks, bugs, etc.), we have set a basic limit: the budget on a single chain can only be adjusted up to twice the total budget for a single block under normal circumstances.\n\nAt the same time, if an extreme situation occurs where block production is slow, causing a shortage of rewards for a given period, we need to consider how to compensate for this issue in the next nonce period. One precondition is ensuring the block production speed can recover after the t+1 period. Thus, even if no rewards were issued in the previous period, as long as the second period is normal, we can effectively compensate for the amount of the first period using the twice-the-budget limit.\n\nTherefore, we have set the maximum budget value to twice the total budget, which can be used to compensate for deficiencies in the previous period during extreme situations.", "mimetype": "text/plain", "start_char_idx": 5082, "end_char_idx": 7432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f66fbe2-adfc-4f6e-b385-3dd9c647e162": {"__data__": {"id_": "6f66fbe2-adfc-4f6e-b385-3dd9c647e162", "embedding": null, "metadata": {"file_path": "./phala_dist/budget-balancer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d1a27334-ce28-4019-bc1b-b33da3799538", "node_type": "4", "metadata": {}, "hash": "629d2634f505137f27fa0daf24753806c5752c7a61721f62b28d205a02597b07", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4641231a-d154-4a46-b251-26bffaff5d7a", "node_type": "1", "metadata": {}, "hash": "091a36d471238f637ef76197fee9cfaf2cd981148d39ba0c2ce35a226ffb4397", "class_name": "RelatedNodeInfo"}}, "text": "### Potential issues and solutions\n\n#### How to ensure security?&#x20;\n\nThe contract deployed on Phat Contract is not controlled by humans but by open-source with controllable strategies.&#x20;\n\nThe whitelist accounts for transactions sent on the chain are contract accounts, not controlled by humans.&#x20;\n\n#### Is the Budget Balancer decentralized?&#x20;\n\nYes, it is.&#x20;\n\nThe governance of the whitelist relies on the community, and the data query service is deployed in a decentralized manner through Subsquid, not locally.&#x20;\n\n#### How to handle risks when they occur?  (fallback plan)\n\n**If there is an issue with Subsquid:**&#x20;\n\nWe can deploy a local Subsquid database for temporary use within 2-4 hours and complete motion governance to change the contract (in reality, using the same contract strategy but changing the database API connected to the contract) within 2 days. This temporary solution can resolve the issue within 1 period of the contract strategy.&#x20;\n\n**If there is an issue with the contract:**&#x20;\n\nWe can directly modify the on-chain budget through motion voting and remove the contract address from the whitelist to prevent the contract from causing secondary on-chain failure.", "mimetype": "text/plain", "start_char_idx": 7434, "end_char_idx": 8652, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1311a242-bad8-4c15-91a5-dd4c8bb08eca": {"__data__": {"id_": "1311a242-bad8-4c15-91a5-dd4c8bb08eca", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8c1caf5-72e1-4c64-b27b-42ea66c81904", "node_type": "1", "metadata": {}, "hash": "713aaf641f177ed0ba907622d2fbaf36978cd662d2298a76823f2be0339cd731", "class_name": "RelatedNodeInfo"}}, "text": "# \ud83c\udfd7\ufe0f Customizing Your Phat Contract\n\n> For detailed docs on `phat_js` , go [here](https://bit.ly/phat\\_js) for the latest.\n\n## What Can You Do With Your Phat Contract? <a href=\"#user-content-what-can-you-do-with-your-function\" id=\"user-content-what-can-you-do-with-your-function\"></a>\n\nIn the `README.md` [link](https://github.com/Phala-Network/phat-contract-starter-kit/blob/main/GETTING\\_STARTED.md), you learned how to generate a new default function template and execute the 3 separate ways to test and validate your the results of the function. Now we will dive into what you can do with your function to extend the capabilities.\n\nWhat you will learn:\n\n* Available Capabilities of `@phala/pink-env`\n  * Call into a contract (Phat Contract).\n  * Invoke a delegate call on a contract code by a code hash (Phat Contract).\n  * Send an HTTP request and returns the response as either a Uint8Array or a string.\n    * Single HTTP request\n    * Batch HTTP requests\n    * Error Handling\n  * Derive a secret key from a salt.\n  * Hash a message using the specified algorithm.\n    * blake2b128\n    * blake2b256\n    * sha256\n    * keccak256\n* Customize Your Default Function and Test Locally.\n* Handle the abi encoding/decoding with [`viem`](https://viem.sh/).\n\n## Getting Started <a href=\"#user-content-getting-started\" id=\"user-content-getting-started\"></a>\n\nFirst you will need to install the `@phala/fn` CLI tool using your node package manager (`npm`) or use node package execute (`npx`). In this tutorial we use `npx`.\n\nNow create your first template with the CLI tool command:\n\n```sh\nnpx @phala/fn init example\n```\n\nWe currently have only one template. Just press enter to see something similar to the example below:\n\n```\nnpx @phala/fn init example\n# ? Please select one of the templates for your \"example\" project: phala-oracle-consumer-contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1846, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8c1caf5-72e1-4c64-b27b-42ea66c81904": {"__data__": {"id_": "f8c1caf5-72e1-4c64-b27b-42ea66c81904", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1311a242-bad8-4c15-91a5-dd4c8bb08eca", "node_type": "1", "metadata": {}, "hash": "3b2461fed0c4f41071354d353359418dc6b5b361d5137ff05557dc7c7cf4b504", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba312d85-05f3-4a1d-b5fa-b8d814a33a59", "node_type": "1", "metadata": {}, "hash": "e4a4561c04a93efb4e4a9589b43778788164fe3fce43ff4d173e926ad3e0da9e", "class_name": "RelatedNodeInfo"}}, "text": "Polygon Consumer Contract for LensAPI Oracle\n# Downloading the template: https://github.com/Phala-Network/phala-oracle-consumer-contract... \u2714\n# The project is created in ~/Projects/Phala/example\n```\n\n`cd` into the newly created template and `ls` the directory which will look similar to below.\n\n```sh\ncd example\nls                                                                                                                      ~/Projects/Phala/example\n# total 736\n# drwxr-xr-x  18 hashwarlock  staff   576B Sep  6 15:32 .\n# drwxr-xr-x  35 hashwarlock  staff   1.1K Sep  6 15:32 .\n# -rw-r--r--   1 hashwarlock  staff   2.1K Sep  6 15:32 .env.local\n# -rw-r--r--   1 hashwarlock  staff   227B Sep  6 15:32 .gitignore\n# -rw-r--r--   1 hashwarlock  staff    34K Sep  6 15:32 LICENSE\n# -rw-r--r--   1 hashwarlock  staff   8.9K Sep  6 15:32 README.md\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 abis\n# drwxr-xr-x   4 hashwarlock  staff   128B Sep  6 15:32 assets\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 contracts\n# -rw-r--r--   1 hashwarlock  staff   1.3K Sep  6 15:32 hardhat.config.ts\n# -rw-r--r--   1 hashwarlock  staff    95B Sep  6 15:32 mumbai.arguments.ts\n# -rw-r--r--   1 hashwarlock  staff   2.6K Sep  6 15:32 package.json\n# -rw-r--r--   1 hashwarlock  staff    96B Sep  6 15:32 polygon.arguments.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba312d85-05f3-4a1d-b5fa-b8d814a33a59": {"__data__": {"id_": "ba312d85-05f3-4a1d-b5fa-b8d814a33a59", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8c1caf5-72e1-4c64-b27b-42ea66c81904", "node_type": "1", "metadata": {}, "hash": "713aaf641f177ed0ba907622d2fbaf36978cd662d2298a76823f2be0339cd731", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8fa4ce7b-08e8-42e1-8dd9-1dbcc3121686", "node_type": "1", "metadata": {}, "hash": "015020e23425231e227d0beb1e34d33af290e86dfdfc1aefc818fb6d351d23bf", "class_name": "RelatedNodeInfo"}}, "text": "ts\n# drwxr-xr-x   5 hashwarlock  staff   160B Sep  6 15:32 scripts\n# drwxr-xr-x   3 hashwarlock  staff    96B Sep  6 15:32 src\n# drwxr-xr-x   3 hashwarlock  staff    96B Sep  6 15:32 test\n# -rw-r--r--   1 hashwarlock  staff   201B Sep  6 15:32 tsconfig.json\n# -rw-r--r--   1 hashwarlock  staff   290K Sep  6 15:32 package-lock.json\n```\n\nLastly, we will `cd` into `./src` where the `index.ts` file resides. This file will be where we customize our function logic.\n\n```sh\ncd src\n```\n\n## Available Capabilities of `@phala/pink-env` <a href=\"#user-content-available-capabilities-of-phalapink-env\" id=\"user-content-available-capabilities-of-phalapink-env\"></a>\n\nIn the `GETTING_STARTED.md` we introduced the basic functionality of making a single HTTP request to Lens API. The example code can be seen below:\n\n```typescript\nfunction fetchApiStats(lensApi: string, profileId: string): any {\n  // profile_id should be like 0x0001\n  let headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"phat-contract\",\n  };\n  let query = JSON.stringify({\n    query: `query Profile {\n      profile(request: { forProfileId: \"0x01\" }) {\n        stats {\n            followers\n            following\n            comments\n            countOpenActions\n            posts\n            quotes\n            mirrors\n            publications\n            reacted\n            reactions\n        }\n      }\n    }`,\n  });\n  let body = stringToHex(query);\n  //\n  // In Phat Function runtime, we not support async/await, you need use `pink.batchHttpRequest` to\n  // send http request. The function will return an array of response.", "mimetype": "text/plain", "start_char_idx": 3180, "end_char_idx": 4784, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fa4ce7b-08e8-42e1-8dd9-1dbcc3121686": {"__data__": {"id_": "8fa4ce7b-08e8-42e1-8dd9-1dbcc3121686", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba312d85-05f3-4a1d-b5fa-b8d814a33a59", "node_type": "1", "metadata": {}, "hash": "e4a4561c04a93efb4e4a9589b43778788164fe3fce43ff4d173e926ad3e0da9e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "837aac04-f924-4f52-a7ff-ca4c8105b519", "node_type": "1", "metadata": {}, "hash": "f98b1f8332095b7f83d6b9d7924a6b066fab2d9c7f89594a31db1f735ce8ae6e", "class_name": "RelatedNodeInfo"}}, "text": "//\n  let response = pink.batchHttpRequest(\n    [\n      {\n        url: lensApi,\n        method: \"POST\",\n        headers,\n        body,\n        returnTextBody: true,\n      },\n    ],\n    2000\n  )[0];\n  if (response.statusCode !== 200) {\n    console.log(\n      `Fail to read Lens api with status code: ${response.statusCode}, error: ${\n        response.error || response.body\n      }}`\n    );\n    throw Error.FailedToFetchData;\n  }\n  let respBody = response.body;\n  if (typeof respBody !== \"string\") {\n    throw Error.FailedToDecode;\n  }\n  return JSON.parse(respBody);\n}\n```\n\nHere we utilize the `pink.batchHttpRequest()` function, but we only use a single HTTP request. Before going any further, let's clarify what is available with `@phala/pink-env`.\n\n### `pink.invokeContract()` & `pink.invokeContractDelegate()` <a href=\"#user-content-pinkinvokecontract--pinkinvokecontractdelegate\" id=\"user-content-pinkinvokecontract--pinkinvokecontractdelegate\"></a>\n\n* `pink.invokeContract()` allows for a call to a specified address of a Phat contract deployed on Phala's Mainnet or PoC6 Testnet depending on where you deploy your function.\n* `pink.invokeContractDelegate()` is similar but instead the call on a Phat Contract is targeted by the code hash.\n\n```typescript\n// Delegate calling\nconst delegateOutput = pink.invokeContractDelegate({\n  codeHash:\n    \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  selector: 0xdeadbeef,\n  input: \"0x00\",\n});\n\n// Instance calling\nconst contractOutput = pink.invokeContract({\n  callee: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  input: \"0x00\",\n  selector: 0xdeadbeef,\n  gasLimit: 0n,\n  value: 0n,\n});\n```\n\nThis is the low-level API for cross-contract call. If you have the contract metadata file, there is a [script](https://bit.ly/phat-js-meta2js) to help generate the high-level API for cross-contract call.", "mimetype": "text/plain", "start_char_idx": 4787, "end_char_idx": 6678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "837aac04-f924-4f52-a7ff-ca4c8105b519": {"__data__": {"id_": "837aac04-f924-4f52-a7ff-ca4c8105b519", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8fa4ce7b-08e8-42e1-8dd9-1dbcc3121686", "node_type": "1", "metadata": {}, "hash": "015020e23425231e227d0beb1e34d33af290e86dfdfc1aefc818fb6d351d23bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4042e1e5-432a-4df3-bdf9-3649f3a34d7d", "node_type": "1", "metadata": {}, "hash": "240edda0681297160c3d45770af963d4dd31baa6f048e83100b4af499d8a4588", "class_name": "RelatedNodeInfo"}}, "text": "For example run the following command:\n\n```bash\npython meta2js.py --keep System::version /path/to/system.contract\n```\n\nWould generate the following code:\n\n```typescript\nfunction invokeContract(callee, selector, args, metadata, registry) {\n    const inputCodec = pink.SCALE.codec(metadata.inputs, registry);\n    const outputCodec = pink.SCALE.codec(metadata.output, registry);\n    const input = inputCodec.encode(args ?? []);\n    const output = pink.invokeContract({ callee, selector, input });\n    return outputCodec.decode(output);\n}\nclass System {\n    constructor(address) {\n        this.typeRegistryRaw = '#u16\\n(0,0,0)\\n<CouldNotReadInput::1>\\n<Ok:1,Err:2>'\n        this.typeRegistry = pink.SCALE.parseTypes(this.typeRegistryRaw);\n        this.address = address;\n    }\n   \n    system$Version() {\n        const io = {\"inputs\": [], \"output\": 3};\n        return invokeContract(this.address, 2278132365, [], io, this.typeRegistry);\n    }\n}\n```\n\nThen you can use the high-level API to call the contract:\n\n```typescript\nconst system = new System(systemAddress);\nconst version = system.system$Version();\nconsole.log(\"version:\", version);\n```\n\n### `pink.httpRequest()` <a href=\"#user-content-pinkhttprequest\" id=\"user-content-pinkhttprequest\"></a>\n\n> HTTP request is supported in the JS environment. However, the API is **sync** rather than **async**. This is different from other JavaScript engines.\n\nThe `pink.httpRequest()` allows for you to make a single HTTP request from your function to an HTTP endpoint. You will have to define your args:\n\n* `url: string` \u2013 The URL to send the request to.\n* `method?: string` \u2013 (Optional) The HTTP method to use for the request (e.g. GET, POST, PUT). Defaults to GET.\n* `headers?: Headers` \u2013 (Optional) An map-like object containing the headers to send with the request.\n* `body?: Uint8Array | string` \u2013 (Optional) The body of the request, either as a Uint8Array or a string.\n* `returnTextBody?", "mimetype": "text/plain", "start_char_idx": 6679, "end_char_idx": 8611, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4042e1e5-432a-4df3-bdf9-3649f3a34d7d": {"__data__": {"id_": "4042e1e5-432a-4df3-bdf9-3649f3a34d7d", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "837aac04-f924-4f52-a7ff-ca4c8105b519", "node_type": "1", "metadata": {}, "hash": "f98b1f8332095b7f83d6b9d7924a6b066fab2d9c7f89594a31db1f735ce8ae6e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7b723ad-3ae2-4186-90d9-dd2ae8bd4d7c", "node_type": "1", "metadata": {}, "hash": "cadbfce75150ca1ad9ae0260c9602be9ecd47502cd6ce1738a5cecb9de799c92", "class_name": "RelatedNodeInfo"}}, "text": ": boolean` \u2013 (Optional) A flag indicating whether the response body should be returned as a string (true) or a Uint8Array (false).\n\nReturned is the `Object` response from the HTTP request containing the following fields:\n\n* `{number} statusCode` - The HTTP status code of the response.\n* `{string} reasonPhrase` - The reason phrase of the response.\n* `{Headers} headers` - An object containing the headers of the response.\n* `{(Uint8Array|string)} body` - The response body, either as a `Uint8Array` or a string depending on the value of `args.returnTextBody`.\n\nHere is an example:\n\n```typescript\nconst response = pink.httpRequest({\n  url: \"https://httpbin.org/ip\",\n  method: \"GET\",\n  returnTextBody: true,\n});\nconsole.log(response.body);\n```\n\n### `pink.batchHttpRequest()` <a href=\"#user-content-pinkbatchhttprequest\" id=\"user-content-pinkbatchhttprequest\"></a>\n\nNow you may need to call multiple APIs at once, this would require you to use the `pink.batchHttpRequest()` function to ensure you do not timeout (timeouts for Phat Contract is 10 seconds) on your response. The `args` and returned `Object` are the same as `pink.httpRequest()`, but instead you can create an array of HTTP requests within the function. Since we have an example above of how to use a `pink.batchHttpRequest()`, before an examples let's look at the syntax. You will have to define your **array** of args:\n\n* `url: string` \u2013 The URL to send the request to.\n* `method?: string` \u2013 (Optional) The HTTP method to use for the request (e.g. GET, POST, PUT). Defaults to GET.\n* `headers?: Headers` \u2013 (Optional) An map-like object containing the headers to send with the request.\n* `body?: Uint8Array | string` \u2013 (Optional) The body of the request, either as a Uint8Array or a string.\n* `returnTextBody?: boolean` \u2013 (Optional) A flag indicating whether the response body should be returned as a string (true) or a Uint8Array (false).", "mimetype": "text/plain", "start_char_idx": 8611, "end_char_idx": 10513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7b723ad-3ae2-4186-90d9-dd2ae8bd4d7c": {"__data__": {"id_": "e7b723ad-3ae2-4186-90d9-dd2ae8bd4d7c", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4042e1e5-432a-4df3-bdf9-3649f3a34d7d", "node_type": "1", "metadata": {}, "hash": "240edda0681297160c3d45770af963d4dd31baa6f048e83100b4af499d8a4588", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f95ae7f2-4c18-4acd-be96-f9ec1430d9d4", "node_type": "1", "metadata": {}, "hash": "eef87fde16f96fc3635bc2af2efe744699d463aa681d810962ec5886225297c4", "class_name": "RelatedNodeInfo"}}, "text": "* `[x]` - this value is what you will see below as `[0]` which points to index `0` in the array of HTTP requests.\n* `timeout_ms?: number` - (Optional) a number representing the number of milliseconds before the batch HTTP requests timeout. Returned is the `Object` response from the HTTP request containing the following fields:\n* `{number} statusCode` - The HTTP status code of the response.\n* `{string} reasonPhrase` - The reason phrase of the response.\n* `{Headers} headers` - An object containing the headers of the response.\n* `{(Uint8Array|string)} body` - The response body, either as a `Uint8Array` or a string depending on the value of `args.returnTextBody`.\n* `error?: string` - (Optional) The `error` string that will be mapped to the error corresponding to the index of the HTTP request in the batch HTTP requests.\n* `[x]` - this value is what you will see below as `[0]` which points to index `0` in the array of HTTP requests.\n\nLet's create a unique example.", "mimetype": "text/plain", "start_char_idx": 10514, "end_char_idx": 11486, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f95ae7f2-4c18-4acd-be96-f9ec1430d9d4": {"__data__": {"id_": "f95ae7f2-4c18-4acd-be96-f9ec1430d9d4", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7b723ad-3ae2-4186-90d9-dd2ae8bd4d7c", "node_type": "1", "metadata": {}, "hash": "cadbfce75150ca1ad9ae0260c9602be9ecd47502cd6ce1738a5cecb9de799c92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a0d491ff-abef-48a1-b83a-3272b630685d", "node_type": "1", "metadata": {}, "hash": "b0ed3dc2d71150e9afaefe9db8b3dee9e7c8dce66c994d6532de0209a809c396", "class_name": "RelatedNodeInfo"}}, "text": "In this example, we will:\n\n* Use `pink.batchHttpRequest()` to:\n  * Query [The Odds API](https://the-odds-api.com) for MLB games today\n  * Set Hello World in Key Value DB on [kvdb.io](https://kvdb.io)\n* Take response body of The Odds API query and send to a [Telegram Group](https://api.telegram.org) in a single `pink.httpRequest()`\n\n```typescript\nconst sportName = 'baseball_mlb'\nconst odds_http_endpoint = `https://api.the-odds-api.com/v4/sports/${sportName}/scores/?apiKey=37af51c4c3d1823308ae2966bcfe7`;\nconst kvdb_http_endpoint = `https://kvdb.io/AwA4DS6fJN69q4erVyjKzY`;\nconst tg_bot_http_endpoint = `https://api.telegram.org/bot4876363250:A1W7F0jeyMmvJAGd7K_12y_5qFjbXwPgpTQ/sendMessage?chat_id=-1001093498619&text=`;\n// headers for the HTTP request args\nlet headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"phat-contract\",\n};\n// Create body for updating kvdb.io\nconst kvdbUpdate = JSON.stringify({\n    \"txn\": [\n        {\"set\": \"hello\", \"value\": \"world\"}\n    ]\n});\nconst body2 = stringToHex(kvdbUpdate);\n// Notice that depending on the number of queries, you will define and array of responses from the response.\nconst [res1, res2] = pink.batchHttpRequest([\n    {\n        url: odds_http_endpoint,\n        method: \"GET\",\n        headers,\n        returnTextBody: true,\n    },\n    {\n        url: `${kvdb_http_endpoint}/hello`,\n        method: \"POST\",\n        headers: headers2,\n        body: body2,\n        returnTextBody: true,\n    }\n]);\n// Notice that the single HTTP request uses the response data from the first HTTP request in the batchHttpRequest function.", "mimetype": "text/plain", "start_char_idx": 11487, "end_char_idx": 13075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0d491ff-abef-48a1-b83a-3272b630685d": {"__data__": {"id_": "a0d491ff-abef-48a1-b83a-3272b630685d", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f95ae7f2-4c18-4acd-be96-f9ec1430d9d4", "node_type": "1", "metadata": {}, "hash": "eef87fde16f96fc3635bc2af2efe744699d463aa681d810962ec5886225297c4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9eeee46a-158d-4820-a250-05e4b0a9d47d", "node_type": "1", "metadata": {}, "hash": "9e4d21e2eec87be806ee4740ff0b297839b1144aace0029ab8dca09b2a454784", "class_name": "RelatedNodeInfo"}}, "text": "const res3 = pink.httpRequest({\n    url: `${tg_bot_http_endpoint}${res1.body}`,\n    method: \"POST\",\n    headers,\n    returnTextBody: true,\n});\n```\n\nHere are the expected result of executing this:\n\n*   KV DB on kvdb.io&#x20;\n\n    <figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/KVDB-hw.png\" alt=\"\"><figcaption></figcaption></figure>\n*   Telegram Bot Updates Telegram Group&#x20;\n\n    <figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/TG-Bot.png\" alt=\"\"><figcaption></figcaption></figure>\n\nPretty nifty, right? This is the power of the customized function with the ability to make single or batch HTTP requests. However, this example is missing some error handling which is our next topic.\n\n### Error Handling <a href=\"#user-content-error-handling\" id=\"user-content-error-handling\"></a>\n\nTo add some error handling to an HTTP request, you can check the default example with the query to Lens API above.\n\nA simple example can be defined:\n\n```typescript\ntry {\n  const response = pink.httpReqeust({\n    url: \"https://httpbin.org/ip\",\n    method: 42,\n    returnTextBody: true,\n  });\n  console.log(response.body);\n} catch (err) {\n  console.log(\"Some error ocurred:\", err);\n}\n```\n\nThis would send an error to the logserver:\n\n```\nJS: Some error ocurred: TypeError: invalid value for field 'method'\n```\n\n### `pink.deriveSecret()` <a href=\"#user-content-pinkderivesecret\" id=\"user-content-pinkderivesecret\"></a>\n\n`pink.deriveSecret()` takes in a salt of either `UInt8Array | string` and generates a secret key response of type `UInt8Array`.\n\nLet's build an example that will derive a secret from a salt `howdy` and update the Telegram group from above about the secret.", "mimetype": "text/plain", "start_char_idx": 13076, "end_char_idx": 14822, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9eeee46a-158d-4820-a250-05e4b0a9d47d": {"__data__": {"id_": "9eeee46a-158d-4820-a250-05e4b0a9d47d", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a0d491ff-abef-48a1-b83a-3272b630685d", "node_type": "1", "metadata": {}, "hash": "b0ed3dc2d71150e9afaefe9db8b3dee9e7c8dce66c994d6532de0209a809c396", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4acc4f74-9616-4773-97d1-c3848cddf09c", "node_type": "1", "metadata": {}, "hash": "c7ffabf4c7c79077ef77043206a141f6d568b58bc1f08c27bcaeb5c8def2b7e6", "class_name": "RelatedNodeInfo"}}, "text": "```typescript\nconst tg_bot_http_endpoint = `https://api.telegram.org/bot4876363250:A1W7F0jeyMmvJAGd7K_12y_5qFjbXwPgpTQ/sendMessage?chat_id=-1001093498619&text=`;\n// headers for the HTTP request args\nlet headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"phat-contract\",\n};\nconst res3 = pink.httpRequest({\n    url: `${tg_bot_http_endpoint}shhhhhhh\\nthis_is_a_secret:\\n[${secret}]`,\n    method: \"POST\",\n    headers,\n    returnTextBody: true,\n});\n```\n\nHere is the result :stuck\\_out\\_tongue\\_winking\\_eye:\n\n<figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/Secret-TG.png\" alt=\"\"><figcaption></figcaption></figure>\n\n### `pink.hash()` <a href=\"#user-content-pinkhash\" id=\"user-content-pinkhash\"></a>\n\n`pink.hash()` generates a hash based on the following params:\n\n* `algorithm`- the hash algorithm to use. Supported values are \u201cblake2b128\u201d, \u201cblake2b256\u201d, \u201csha256\u201d, \u201ckeccak256\u201d.\n* `message` \u2013 The message to hash, either as a `Uint8Array` or a `string`.\n\nLet's create an example to hash the values of `hello` and `world` to store in the KVDB we used earlier. We can also send the mapping to Telegram group to show a `pink.batchHttpRequest()`.", "mimetype": "text/plain", "start_char_idx": 14824, "end_char_idx": 16023, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4acc4f74-9616-4773-97d1-c3848cddf09c": {"__data__": {"id_": "4acc4f74-9616-4773-97d1-c3848cddf09c", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9eeee46a-158d-4820-a250-05e4b0a9d47d", "node_type": "1", "metadata": {}, "hash": "9e4d21e2eec87be806ee4740ff0b297839b1144aace0029ab8dca09b2a454784", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6827ab4c-a3c9-48fe-a1ec-923f7af364b0", "node_type": "1", "metadata": {}, "hash": "1609204fbc6c5f1cc157379b91d4e10843780a19b2b3ed1c69d13ccd6647f977", "class_name": "RelatedNodeInfo"}}, "text": "```typescript\nconst kvdb_http_endpoint = `https://kvdb.io/AwA4DS6fJN69q4erVyjKzY`;\nconst tg_bot_http_endpoint = `https://api.telegram.org/bot4876363250:A1W7F0jeyMmvJAGd7K_12y_5qFjbXwPgpTQ/sendMessage?chat_id=-1001093498619&text=`;\n// headers for the HTTP request args\nlet headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"phat-contract\",\n};\n// Generate a hash for each algorithm for hello\nconst blake2b128Hello = pink.hash('blake2b128', 'hello');\nconst blake2b256Hello = pink.hash('blake2b256', 'hello');\nconst sha256Hello = pink.hash('sha256', 'hello');\nconst keccak256Hello = pink.hash('keccak256', 'hello');\nconst tgText = JSON.stringify({\n    blake2b128Hello: blake2b128Hello,\n    blake2b256Hello: blake2b256Hello,\n    sha256Hello: sha256Hello,\n    keccak256Hello: keccak256Hello\n});\n// KV Update Body\nconst kvdbUpdate = JSON.stringify({\n    \"txn\": [\n        {\"set\": \"blake2b128Hello\", \"value\": `${blake2b128Hello}`},\n        {\"set\": \"blake2b256Hello\", \"value\": `${blake2b256Hello}`},\n        {\"set\": \"sha256Hello\", \"value\": `${sha256Hello}`},\n        {\"set\": \"keccak256Hello\", \"value\": `${keccak256Hello}`}\n    ]\n});\nconst body2 = stringToHex(kvdbUpdate);\n// Batch HTTP request\nconst [res1, res2] = pink.batchHttpRequest([\n    {\n        url: `${kvdb_http_endpoint}/hello`,\n        method: \"POST\",\n        headers: headers2,\n        body: body2,\n        returnTextBody: true,\n    },\n    {\n        url: `${tg_bot_http_endpoint}\\n${tgText}`,\n        method: \"POST\",\n        headers,\n        returnTextBody: true,\n    }\n]);\n```\n\nLet's see how the results look.", "mimetype": "text/plain", "start_char_idx": 16025, "end_char_idx": 17607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6827ab4c-a3c9-48fe-a1ec-923f7af364b0": {"__data__": {"id_": "6827ab4c-a3c9-48fe-a1ec-923f7af364b0", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4acc4f74-9616-4773-97d1-c3848cddf09c", "node_type": "1", "metadata": {}, "hash": "c7ffabf4c7c79077ef77043206a141f6d568b58bc1f08c27bcaeb5c8def2b7e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e14c13d5-e059-47e3-95c5-91e79d8214cd", "node_type": "1", "metadata": {}, "hash": "afc303dd0927f70a0f00ce07af6b1068e4a3991f587760d3b0976ba84b490151", "class_name": "RelatedNodeInfo"}}, "text": "*   KVDB hashes for `hello`&#x20;\n\n    <figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/KVDB-hashes.png\" alt=\"\"><figcaption></figcaption></figure>\n*   Telegram bot sends hashes for `hello`&#x20;\n\n    <figure><img src=\"https://github.com/Phala-Network/phat-contract-starter-kit/raw/main/assets/TG-hashes.png\" alt=\"\"><figcaption></figcaption></figure>\n\n## SCALE Codec\n\nLet\u2019s introduce the details of the SCALE codec API which is not documented in the above link.\n\nThe SCALE codec API is mounted on the global object `pink.SCALE` which contains the following functions:\n\n* `pink.SCALE.parseTypes(types: string): TypeRegistry`\n* `pink.SCALE.codec(type: string | number | number[], typeRegistry?", "mimetype": "text/plain", "start_char_idx": 17609, "end_char_idx": 18343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e14c13d5-e059-47e3-95c5-91e79d8214cd": {"__data__": {"id_": "e14c13d5-e059-47e3-95c5-91e79d8214cd", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6827ab4c-a3c9-48fe-a1ec-923f7af364b0", "node_type": "1", "metadata": {}, "hash": "1609204fbc6c5f1cc157379b91d4e10843780a19b2b3ed1c69d13ccd6647f977", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c27127b-a148-4355-9480-531e0d6f4406", "node_type": "1", "metadata": {}, "hash": "e26e2977037ecebe4288938d65ac616808be4a2db170a8ab48e429af62f00936", "class_name": "RelatedNodeInfo"}}, "text": ": TypeRegistry): Codec`\n\nLet\u2019s make a basice example to show how to use the SCALE codec API:\n\n```\nconst types = `\n  Hash=[u8;32]\n  Info={hash:Hash,size:u32}\n`;\nconst typeRegistry = pink.SCALE.parseTypes(types);\nconst infoCodec = pink.SCALE.codec(`Info`, typeRegistry);\nconst encoded = infoCodec.encode({\n hash: \"0x1234567890123456789012345678901234567890123456789012345678901234\",\n size: 1234,\n});\nconsole.log(\"encoded:\", encoded);\nconst decoded = infoCodec.decode(encoded);\npink.inspect(\"decoded:\", decoded);\n```\n\nThe above code will output:\n\n```\nJS: encoded: 18,52,86,120,144,18,52,86,120,144,18,52,86,120,144,18,52,86,120,144,18,52,86,120,144,18,52,86,120,144,18,52,210,4,0,0\nJS: decoded: {\nJS: hash: 0x1234567890123456789012345678901234567890123456789012345678901234,\nJS: size: 1234\nJS: }\n```\n\nOr using the direct encode/decode api which support literal type definition as well as a typename or id, for example:\n\n```\nconst data = { name: \"Alice\", age: 18 };\nconst encoded = pink.SCALE.encode(data, \"{ name: str, age: u8 }\");\nconst decoded = pink.SCALE.decode(encoded, \"{ name: str, age: u8 }\");\n```\n\n### Grammar of The Type Definition\n\nIn the above example, we use the following type definition:\n\n```\nHash=[u8;32]\nInfo={hash:Hash,size:u32}\n```\n\nwhere we define a type `Hash` which is an array of 32 bytes, and a type `Info` which is a struct containing a `Hash` and a `u32`.\n\nThe grammar is defined as follows:\n\nEach entry is type definition, which is of the form `name=type`. Where name must be a valid identifier, and type is a valid type expression described below.", "mimetype": "text/plain", "start_char_idx": 18343, "end_char_idx": 19915, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c27127b-a148-4355-9480-531e0d6f4406": {"__data__": {"id_": "2c27127b-a148-4355-9480-531e0d6f4406", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e14c13d5-e059-47e3-95c5-91e79d8214cd", "node_type": "1", "metadata": {}, "hash": "afc303dd0927f70a0f00ce07af6b1068e4a3991f587760d3b0976ba84b490151", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d03e7f22-4540-41a2-9776-4461f95c3c44", "node_type": "1", "metadata": {}, "hash": "c159f88bed91728d6fb50531daf110ff719f3263c283466c22c304451734b51d", "class_name": "RelatedNodeInfo"}}, "text": "Type expression can be one of the following:\n\n<table data-full-width=\"true\"><thead><tr><th>Type Expression</th><th>Description</th><th>Example</th><th>JS type</th></tr></thead><tbody><tr><td><code>bool</code></td><td>Primitive type bool</td><td></td><td><code>true</code>, <code>false</code></td></tr><tr><td><code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>, <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>i128</code></td><td>Primitive number types</td><td></td><td>number or bigint</td></tr><tr><td><code>str</code></td><td>Primitive type str</td><td></td><td>string</td></tr><tr><td><code>[type;size]</code></td><td>Array type with element type <code>type</code> and size <code>size</code>.</td><td><code>[u8; 32]</code></td><td>Array of elements. (Uint8Array or <code>0x</code> prefixed hex string is allowed for [u8; N])</td></tr><tr><td><code>[type]</code></td><td>Sequence type with element type <code>type</code>.</td><td><code>[u8]</code></td><td>Array of elements. (Uint8Array or <code>0x</code> prefixed hex string is allowed for <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</td></tr><tr><td><code>(type1, type2, ...)</code></td><td>Tuple type with elements of type <code>type1</code>, <code>type2</code>, \u2026</td><td><code>(u8, str)</code></td><td>Array of value for inner type. (e.g.", "mimetype": "text/plain", "start_char_idx": 19917, "end_char_idx": 21309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d03e7f22-4540-41a2-9776-4461f95c3c44": {"__data__": {"id_": "d03e7f22-4540-41a2-9776-4461f95c3c44", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c27127b-a148-4355-9480-531e0d6f4406", "node_type": "1", "metadata": {}, "hash": "e26e2977037ecebe4288938d65ac616808be4a2db170a8ab48e429af62f00936", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a3a35c9e-6770-487c-af13-b5f7b843bf14", "node_type": "1", "metadata": {}, "hash": "47a32bb255dea336b3ad7529d99289baeb260bfcf8370c4e6544e1cd54b9f65a", "class_name": "RelatedNodeInfo"}}, "text": "<code>[42, 'foobar']</code>)</td></tr><tr><td><code>{field1:type1, field2:type2, ...}</code></td><td>Struct type with fields and types.</td><td><code>{age:u32, name:str}</code></td><td>Object with field name as key</td></tr><tr><td><code>&#x3C;variant1:type1, variant2:type2, ...></code></td><td>Enum type with variants and types. if the variant is a unit variant, then the type expression can be omitted.</td><td><code>&#x3C;Success:i32, Error:str></code>, <code>&#x3C;None,Some:u32></code></td><td>Object with variant name as key. (e.g. <code>{Some: 42}</code>)</td></tr><tr><td><code>@type</code></td><td>Compact number types. Only unsigned number types is supported</td><td><code>@u64</code></td><td>number or bigint</td></tr></tbody></table>\n\n### Generic Type Support\n\nGeneric parameters can be added to the type definition, for example:\n\n```\nVec<T>=[T]\n```\n\n### Option Type\n\nThe Option type is not a special type, but a vanilla enum type. It is needed to be defined by the user explicitly. Same for the Result type.\n\n```\nOption<T>=<None,Some:T>\nResult<T,E>=<Ok:T,Err:E>\n```\n\nThere is one special syntax for the Option type:\n\n```\nOption<T>=<_None,_Some:T>\n```\n\nIf the Option type is defined in this way, then the `None` variant would be decoded as `null` instead of `{None: null}` and the `Some` variant would be decoded as the inner value directly instead of `{Some: innerValue}`.", "mimetype": "text/plain", "start_char_idx": 21310, "end_char_idx": 22696, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3a35c9e-6770-487c-af13-b5f7b843bf14": {"__data__": {"id_": "a3a35c9e-6770-487c-af13-b5f7b843bf14", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d03e7f22-4540-41a2-9776-4461f95c3c44", "node_type": "1", "metadata": {}, "hash": "c159f88bed91728d6fb50531daf110ff719f3263c283466c22c304451734b51d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a3df816-cde5-421c-9676-c2f1d3bae85c", "node_type": "1", "metadata": {}, "hash": "fbe5828d8540ba81902dd3fcd182614ebef8f1fc75d670352c7ade6b90e9e2cd", "class_name": "RelatedNodeInfo"}}, "text": "For example:\n\n```\nconst encoded = pink.SCALE.encode(42, \"<_None,_Some:u32>\");\nconst decoded = pink.SCALE.decode(encoded, \"<_None,_Some:u32>\");\nconsole.log(decoded); // 42\n```\n\n### Nested Type Definition\n\nType definition can be nested, for example:\n\n```\nBlock={header:{hash:[u8;32],size:u32}}\n```\n\n## Handle EVM Smart Contract Encoding & Decoding\n\n> For TypeScript/JavaScript example scripts, check out [`@phala/pink-env` examples](https://bit.ly/phala-fn-ex-scripts).\n>\n> \\\n> **Note**: `@phala/ethers` will be no longer be maintained in favor of native support of [`viem`](https://viem.sh/).\n\n{% tabs %}\n{% tab title=\"viem\" %}\n#### Why viem\n\n`viem` is a TypeScript Interface for Ethereum that provides low-level stateless primitives for interacting with Ethereum. An alternative to ethers.js and web3.js with a focus on reliability, efficiency, and excellent developer experience.\n\nUsing native `viem` in Phat Contract 2.0 to handle EVM Smart Contract encoding/decoding helps reduce the friction of maintaining custom code. For more information on the `viem`'s why, check out the link below.\n\n{% embed url=\"https://viem.sh/docs/introduction.html\" fullWidth=\"true\" %}\nWhy viem\n{% endembed %}\n\nFor docs on how to use `viem`, check out the [ABI section](https://viem.sh/docs/abi/decodeAbiParameters.html) of the `viem` docs.&#x20;\n{% endtab %}\n\n{% tab title=\"@phala/ethers\" %}\n> **Note**: `@phala/ethers` is no longer being maintained. Instead use the latest version of `viem` to handle the EVM Smart Contract ABI encoding/decoding.\n\nIn the `index.ts` file of your Phat Contract starter kit, there is an npm package available called `@phala/ethers` and your file will import `Coders` which has the following types available.", "mimetype": "text/plain", "start_char_idx": 22697, "end_char_idx": 24418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a3df816-cde5-421c-9676-c2f1d3bae85c": {"__data__": {"id_": "3a3df816-cde5-421c-9676-c2f1d3bae85c", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a3a35c9e-6770-487c-af13-b5f7b843bf14", "node_type": "1", "metadata": {}, "hash": "47a32bb255dea336b3ad7529d99289baeb260bfcf8370c4e6544e1cd54b9f65a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e27477ab-c688-49e1-9ccb-788b2aed20c5", "node_type": "1", "metadata": {}, "hash": "debd8904746af05faa07dcd8a3810d6d1fc65e047d58bbd201e1629e18e15199", "class_name": "RelatedNodeInfo"}}, "text": "```typescript\n// From https://github.com/Phala-Network/phat-contract-starter-kit/blob/37e7ee2fa96c42f90f4418d45a9c47be570d59f5/src/index.ts#L6\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\n```\n\nAs a developer you can utilize these types in many ways. Here are some examples of how to handle each type with the TypeScript `EncodeReply()` function on the Phat Contract side and `_onMessageReceived()`on the Solidity Smart Contract side.\n\n`AddressCoder` Example\n\n`index.ts`\n\n```typescript\n// .\n// Encode Address\nconst addressCoder = new Coders.AddressCoder(\"address\");\n// uint Coder\nconst uintCoder = new Coders.NumberCoder(32, false, \"uint256\");\nfunction encodeReply(reply: [uint, uint, string]): HexString {\n  return Coders.encode([uintCoder, uintCoder, addressCoder], reply) as HexString;\n}\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\n// main entry function\nexport default function main(request: HexString, settings: string): HexString {\n  //.\n   let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = Coders.decode([uintCoder, bytesCoder], request);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    return encodeReply([TYPE_ERROR, 0, errorToCode(error as Error)]);\n  }\n  //.\n  try {\n    const response = \"0x0e9e628d715003ff5045fc92002c67ddab364683\";\n    return encodeReply([TYPE_RESPONSE, requestId, response]);", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e27477ab-c688-49e1-9ccb-788b2aed20c5": {"__data__": {"id_": "e27477ab-c688-49e1-9ccb-788b2aed20c5", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a3df816-cde5-421c-9676-c2f1d3bae85c", "node_type": "1", "metadata": {}, "hash": "fbe5828d8540ba81902dd3fcd182614ebef8f1fc75d670352c7ade6b90e9e2cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9078663a-03fb-4e65-bc16-08ad53964b49", "node_type": "1", "metadata": {}, "hash": "0d5599c24c72145a71cf4ddb0b3a8208c163f0c99777bb5cf641e02163c6228b", "class_name": "RelatedNodeInfo"}}, "text": "} catch (error) {\n    // Define error logic\n    // otherwise tell client we cannot process it\n    console.log(\"error:\", [TYPE_ERROR, requestId, \"0x0\"]);\n    return encodeReply([TYPE_ERROR, requestId, \"0x0\"]);\n  }\n}\n// .\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\nevent ResponseReceived(uint reqId, string reqStr, address memory value);\nevent ErrorReceived(uint reqId, string reqStr, address memory errno);\n// .\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//.\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // Optional to check length of action\n    // require(action.length == 32 * 3, \"cannot parse action\");\n    (uint respType, uint id, address memory addr) = abi.decode(\n        action,\n        (uint, uint, address)\n    );\n    if (respType == TYPE_RESPONSE) {\n        emit ResponseReceived(id, requests[id], addr);\n        delete requests[id];\n    } else if (respType == TYPE_ERROR) {\n        emit ErrorReceived(id, requests[id], addr);\n        delete requests[id];\n    }\n}\n// .\n```\n\n`BooleanCoder` Example\n\n`index.ts`\n\n```typescript\n// .\n// bool Coder\nconst booleanCoder = new Coders.BooleanCoder(\"bool\");\n// uint Coder\nconst uintCoder = new Coders.NumberCoder(32, false, \"uint256\");\nfunction encodeReply(reply: [uint, uint, bool]): HexString {\n  return Coders.encode([uintCoder, uintCoder, booleanCoder], reply) as HexString;\n}\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\n// main entry function\nexport default function main(request: HexString, settings: string): HexString {\n  //.\n   let requestId, encodedReqStr;", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9078663a-03fb-4e65-bc16-08ad53964b49": {"__data__": {"id_": "9078663a-03fb-4e65-bc16-08ad53964b49", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e27477ab-c688-49e1-9ccb-788b2aed20c5", "node_type": "1", "metadata": {}, "hash": "debd8904746af05faa07dcd8a3810d6d1fc65e047d58bbd201e1629e18e15199", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f75ca808-9c4d-4a82-8ebc-347a5eaeca09", "node_type": "1", "metadata": {}, "hash": "2870d4db1fa145ca8a7f5bffa870f1b92cac3a3935c2fb83f7479b577039f104", "class_name": "RelatedNodeInfo"}}, "text": "try {\n    [requestId, encodedReqStr] = Coders.decode([uintCoder, bytesCoder], request);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    return encodeReply([TYPE_ERROR, 0, errorToCode(error as Error)]);\n  }\n  //.\n  try {\n    const response = true;\n    return encodeReply([TYPE_RESPONSE, requestId, response]);\n  } catch (error) {\n    // Define error logic\n    // otherwise tell client we cannot process it\n    console.log(\"error:\", [TYPE_ERROR, requestId, error]);\n    return encodeReply([TYPE_ERROR, requestId, errorToCode(error as Error)]);\n  }\n}\n// .\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\nevent ResponseReceived(uint reqId, string reqStr, bool value);\nevent ErrorReceived(uint reqId, string reqStr, bool errno);\n// .\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//.\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // Optional to check length of action\n    // require(action.length == 32 * 3, \"cannot parse action\");\n    (uint respType, uint id, bool data) = abi.decode(\n        action,\n        (uint, uint, bool)\n    );\n    if (respType == TYPE_RESPONSE) {\n        emit ResponseReceived(id, requests[id], data);\n        delete requests[id];\n    } else if (respType == TYPE_ERROR) {\n        emit ErrorReceived(id, requests[id], data);\n        delete requests[id];\n    }\n}\n// .\n```\n\n`NumberCoder`Example\n\n`index.ts`\n\n```typescript\n// .\n// Encode number\nconst uintCoder = new Coders.NumberCoder(32, false, \"uint256\");\nfunction encodeReply(reply: [number, number, number]): HexString {\n  return Coders.encode([uintCoder, uintCoder, uintCoder],", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f75ca808-9c4d-4a82-8ebc-347a5eaeca09": {"__data__": {"id_": "f75ca808-9c4d-4a82-8ebc-347a5eaeca09", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9078663a-03fb-4e65-bc16-08ad53964b49", "node_type": "1", "metadata": {}, "hash": "0d5599c24c72145a71cf4ddb0b3a8208c163f0c99777bb5cf641e02163c6228b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67cbd19f-e2a8-4bda-b58e-b06184fa7b7e", "node_type": "1", "metadata": {}, "hash": "c4424ea1407130962d5f424bf20cf39bed5abd6a2d02a9e20b61dafd525e9a65", "class_name": "RelatedNodeInfo"}}, "text": "reply) as HexString;\n}\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\n// main entry function\nexport default function main(request: HexString, settings: string): HexString {\n  //.\n   let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = Coders.decode([uintCoder, bytesCoder], request);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    return encodeReply([TYPE_ERROR, 0, errorToCode(error as Error)]);\n  }\n  //.\n  try {\n    const response = 2813308004;\n    return encodeReply([TYPE_RESPONSE, requestId, stats]);\n  } catch (error) {\n    // Define error logic\n    // otherwise tell client we cannot process it\n    console.log(\"error:\", [TYPE_ERROR, requestId, error]);\n    return encodeReply([TYPE_ERROR, requestId, errorToCode(error as Error)]);\n  }\n}\n// .\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\nevent ResponseReceived(uint reqId, string reqData, uint256 value);\nevent ErrorReceived(uint reqId, string reqData, uint256 errno);\n// .\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//.\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // Optional to check length of action\n    // require(action.length == 32 * 3, \"cannot parse action\");\n    (uint respType, uint id, uint256 data) = abi.decode(\n        action,\n        (uint, uint, uint256)\n    );\n    if (respType == TYPE_RESPONSE) {\n        emit ResponseReceived(id, requests[id], data);\n        delete requests[id];\n    } else if (respType == TYPE_ERROR) {\n        emit ErrorReceived(id, requests[id], data);\n        delete requests[id];\n    }\n}\n// .", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67cbd19f-e2a8-4bda-b58e-b06184fa7b7e": {"__data__": {"id_": "67cbd19f-e2a8-4bda-b58e-b06184fa7b7e", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f75ca808-9c4d-4a82-8ebc-347a5eaeca09", "node_type": "1", "metadata": {}, "hash": "2870d4db1fa145ca8a7f5bffa870f1b92cac3a3935c2fb83f7479b577039f104", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ace2373-1dd2-4288-95c8-28765c76d658", "node_type": "1", "metadata": {}, "hash": "7cefecb920dc84960d950683df82d3a9f5bcd3fcaf6f04de411c7f3b9422ab48", "class_name": "RelatedNodeInfo"}}, "text": "```\n\n`StringCoder` Example\n\n`index.ts`\n\n```typescript\n// .\n// Encode String\nconst stringCoder = new Coders.StringCoder(\"string\");\nconst uintCoder = new Coders.NumberCoder(32, false, \"uint256\");\nfunction encodeReply(reply: [number, number, string]): HexString {\n  return Coders.encode([uintCoder, uintCoder, stringCoder], reply) as HexString;\n}\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\n// main entry function\nexport default function main(request: HexString, settings: string): HexString {\n  //.\n   let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = Coders.decode([uintCoder, bytesCoder], request);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    return encodeReply([TYPE_ERROR, 0, errorToCode(error as Error)]);\n  }\n  //.\n  try {\n    const response = \"hello\";\n    return encodeReply([TYPE_RESPONSE, requestId, response]);\n  } catch (error) {\n    // Define error logic\n    // otherwise tell client we cannot process it\n    console.log(\"error:\", [TYPE_ERROR, requestId, error]);\n    return encodeReply([TYPE_ERROR, requestId, errorToCode(error as Error)]);\n  }\n}\n// .\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\nevent ResponseReceived(uint reqId, string reqStr, string memory value);\nevent ErrorReceived(uint reqId, string reqStr, string memory errno);\n// .\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//.\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // Optional to check length of action\n    // require(action.length == 32 * 3, \"cannot parse action\");\n    (uint respType, uint id, string memory data) = abi.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ace2373-1dd2-4288-95c8-28765c76d658": {"__data__": {"id_": "7ace2373-1dd2-4288-95c8-28765c76d658", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67cbd19f-e2a8-4bda-b58e-b06184fa7b7e", "node_type": "1", "metadata": {}, "hash": "c4424ea1407130962d5f424bf20cf39bed5abd6a2d02a9e20b61dafd525e9a65", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "10e716c9-4285-47b6-886a-98c9f3d6ca95", "node_type": "1", "metadata": {}, "hash": "f99c760287d4aa40dede2a6b5270e899e0cf6e6649a35fd1f4964461eced167f", "class_name": "RelatedNodeInfo"}}, "text": "decode(\n        action,\n        (uint, uint, string)\n    );\n    if (respType == TYPE_RESPONSE) {\n        emit ResponseReceived(id, requests[id], data);\n        delete requests[id];\n    } else if (respType == TYPE_ERROR) {\n        emit ErrorReceived(id, requests[id], data);\n        delete requests[id];\n    }\n}\n// .\n```\n\n`ArrayCoder` Static Array Example\n\n> Static arrays can be created by defining a `number` > 0. as the `length` parameter in the `Coders.ArrayCoder(coder: Coder, length: number, localName: string)` function.\n\n`index.ts`\n\n```typescript\n// ...\n// Encode String\nconst stringCoder = new Coders.StringCoder(\"string\");\nconst stringArrayCoder = new Coders.ArrayCoder(stringCoder, 3, \"string[]\");\nfunction encodeReply(reply: [number, number, string[]]): HexString {\n  return Coders.encode([uintCoder, uintCoder, stringArrayCoder], reply) as HexString;\n}\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\n// main entry function\nexport default function main(request: HexString, settings: string): HexString {\n  //...\n   let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = Coders.decode([uintCoder, bytesCoder], request);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    // ...\n  }\n  //...\n  try {\n    const response = [\"Who?", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10e716c9-4285-47b6-886a-98c9f3d6ca95": {"__data__": {"id_": "10e716c9-4285-47b6-886a-98c9f3d6ca95", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ace2373-1dd2-4288-95c8-28765c76d658", "node_type": "1", "metadata": {}, "hash": "7cefecb920dc84960d950683df82d3a9f5bcd3fcaf6f04de411c7f3b9422ab48", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4fa255da-c6af-439f-9d40-1983372d7731", "node_type": "1", "metadata": {}, "hash": "d7bdffdb057a10ff836f4a2435a3440fac5078be20ebc780f8d7392d8c409354", "class_name": "RelatedNodeInfo"}}, "text": "\", \"Mike\", \"Jones\"];\n    return encodeReply([TYPE_RESPONSE, requestId, response]);\n  } catch (error) {\n    // Define error logic\n    // otherwise tell client we cannot process it\n    // ...\n  }\n}\n// ...\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\n// ...\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//...\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // Optional to check length of action\n    // require(action.length == 32 * 3, \"cannot parse action\");\n    (uint respType, uint id, string [3] memory data) = abi.decode(\n        action,\n        (uint, uint, string[3])\n    );\n    // ...\n}\n// ...\n```\n\n`ArrayCoder` Dynamic Array Example\n\n> Dynamic arrays can be created by using `-1` as the `length` parameter in the `Coders.ArrayCoder(coder: Coder, length: number, localName: string)` function.\n\n`index.ts`\n\n```typescript\n// ...\n// Encode String\nconst stringCoder = new Coders.StringCoder(\"string\");\n// Dynamic arrays just put `-1` for the length parameter\nconst stringArrayCoder = new Coders.ArrayCoder(stringCoder, -1, \"string[]\");\nfunction encodeReply(reply: [number, number, string[]]): HexString {\n  return Coders.encode([uintCoder, uintCoder, stringArrayCoder], reply) as HexString;\n}\n// Defined in OracleConsumerContract.sol\nconst TYPE_RESPONSE = 0;\nconst TYPE_ERROR = 2;\n\n// main entry function\nexport default function main(request: HexString, settings: string): HexString {\n  //...\n   let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = Coders.decode([uintCoder, bytesCoder], request);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    // ...\n  }\n  //...\n  try {\n    const response = [\"Who?\", \"Mike\", \"Jones\", \"is\", \"dynamic\"];", "mimetype": "text/plain", "start_char_idx": 35094, "end_char_idx": 37066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fa255da-c6af-439f-9d40-1983372d7731": {"__data__": {"id_": "4fa255da-c6af-439f-9d40-1983372d7731", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10e716c9-4285-47b6-886a-98c9f3d6ca95", "node_type": "1", "metadata": {}, "hash": "f99c760287d4aa40dede2a6b5270e899e0cf6e6649a35fd1f4964461eced167f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e77c3f1-4328-4824-81de-b0dde5f8c3c7", "node_type": "1", "metadata": {}, "hash": "c6ba3c0b02066f33bcf17d46d45e98696052381340b66df157715803a8ce071b", "class_name": "RelatedNodeInfo"}}, "text": "return encodeReply([TYPE_RESPONSE, requestId, response]);\n  } catch (error) {\n    // Define error logic\n    // otherwise tell client we cannot process it\n    // .\n  }\n}\n// .\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\n// .\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//.\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    (uint respType, uint id, string[] memory data) = abi.decode(\n        action,\n        (uint, uint, string[3])\n    );\n    // .\n}\n// .\n```\n\nComplex example using\n\n* `BytesCoder`\n* `FixedBytesCoder`\n* `NullCoder`\n* `TupleCoder`\n\n`index.ts`\n\n```typescript\n// .\n// Encode Address\nimport { Coders } from \"@phala/ethers\";\n\nconst bytesCoder = new Coders.BytesCoder('bytes');\nconst fixedCoder = new Coders.FixedBytesCoder(16, 'bytes')\nconst nullCoder = new Coders.NullCoder('nullCoder')\nconst tupleCoder = new Coders.TupleCoder([bytesCoder, fixedCoder, nullCoder], 'tupleCoder')\n\nexport default function main() {\n  return Coders.encode([tupleCoder], [[new Uint8Array(0), new Uint8Array(16), null]])\n}\n// .\n```\n\n`OracleConsumerContract.sol`\n\n```solidity\n// .\n// request action request for Phat Contract to respond to\nfunction request(string calldata reqData) public {\n    // assemble the request\n    uint id = nextRequest;\n    requests[id] = reqData;\n    _pushMessage(abi.encode(id, reqData));\n    nextRequest += 1;\n}\n//.\n// _onMessageReceived response from Phat Contract\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // .\n    (bytes16 bytesResp, bytes16 bytes16Resp, uint null) = abi.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e77c3f1-4328-4824-81de-b0dde5f8c3c7": {"__data__": {"id_": "2e77c3f1-4328-4824-81de-b0dde5f8c3c7", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4fa255da-c6af-439f-9d40-1983372d7731", "node_type": "1", "metadata": {}, "hash": "d7bdffdb057a10ff836f4a2435a3440fac5078be20ebc780f8d7392d8c409354", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b64c24e7-2e76-4207-a72e-48b77e302d5c", "node_type": "1", "metadata": {}, "hash": "9f9450eaec281213d7004692ee55fda7f60ca6f2aa0b9808d63d87d85e34a3cf", "class_name": "RelatedNodeInfo"}}, "text": "decode(\n       action,\n       (bytes16, bytes16, uint)\n    );\n    //.\n}\n// .\n```\n{% endtab %}\n{% endtabs %}\n\n### Example\n\nIn the Phat Contract 2.0 Starter Kit, there is a file in `src/viem/coder.ts` which will look like the following:\n\n```typescript\nimport {decodeAbiParameters, encodeAbiParameters, parseAbiParameters} from \"viem\";\n\nexport type HexString = `0x${string}`\nexport const encodeReplyAbiParams = 'uint respType, uint id, uint256 data';\nexport const decodeRequestAbiParams = 'uint id, string reqData';\n\nexport function encodeReply(abiParams: string, reply: [bigint, bigint, bigint]): HexString {\n    return encodeAbiParameters(parseAbiParameters(abiParams),\n        reply\n    );\n}\n\nexport function decodeRequest(abiParams: string, request: HexString): any {\n    return decodeAbiParameters(parseAbiParameters(abiParams),\n        request\n    );\n}\n```\n\nThe 2 important functions in this file are:\n\n* `decodeRequest(abiParams, request)` - decodes the action `request` `HexString` that is passed into the `main(request, secrets)` entry function of the Phat Contract. You can find the expected encoded `HexString` in the `OracleConsumerContract.sol` `request(string calldata reqData)` function where the action is encoded with a `uint id` and `string reqData` in the `_pushMessage(abi.encode(id, reqData))` function.\n* `encodeReply(abiParams, reply)` - encodes the action reply to be sent back to the Consumer Contract on the EVM change. The Consumer Contract consumes the action reply via the `_onMessageReceived(bytes calldata action)` function where data encoded can be decoded and handled based on the Consumer Contract logic. The default example encodes a tuple of `uint respType`, `uint id`, and `uint256 data` that in turn gets decoded in  `OracleConsumerContract.sol`  `_onMessageReceived(bytes calldata action)` function with `(uint respType, uint id, uint256 data) = abi.decode(action, (uint, uint, uint256)`.\n\nLet's breakdown the example and step through the process.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b64c24e7-2e76-4207-a72e-48b77e302d5c": {"__data__": {"id_": "b64c24e7-2e76-4207-a72e-48b77e302d5c", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e77c3f1-4328-4824-81de-b0dde5f8c3c7", "node_type": "1", "metadata": {}, "hash": "c6ba3c0b02066f33bcf17d46d45e98696052381340b66df157715803a8ce071b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56984496-8ee4-454d-9b90-428fe9b9eac5", "node_type": "1", "metadata": {}, "hash": "a17c4d5a68ad434b1ebd0ec7b6dde3809ad6a2bb5edf39c4c5ff802ad872e86f", "class_name": "RelatedNodeInfo"}}, "text": "1. encode action request in `request(string calldata)` of `OracleConsumerContract.sol`\n2. decode action request when parsing the encoded action in the Phat Contract 2.0 `main(request, secrets)` entry function in the `src/index.ts` file.\n3. encode the action reply in the Phat Contract to send to the `OracleConsumerContract.sol`\n4. decode the action reply in the `OracleConsumerContract.sol` function `_onMessageReceived(bytes calldata action)`\n\n{% tabs %}\n{% tab title=\"Step 1\" %}\nHere is a snippet of the code to encode a tuple that includes the `uint id` representing the request id and `string calldata reqData` that is the request data string.\n\nFor the example, we will pass in:\n\n* `id` = `1`\n* `reqData` = `\"0x01\"`\n\n`OracleConsumerContract.sol`\n\n<pre class=\"language-solidity\"><code class=\"lang-solidity\">function request(string calldata reqData) public {\n   // assemble the request\n<strong>   uint id = nextRequest;\n</strong>   requests[id] = reqData;\n   _pushMessage(abi.encode(id, reqData));\n   nextRequest += 1;\n}\n   \n</code></pre>\n\nThis will produce a `HexString` `0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000` representing `(1, \"0x01\")`\n{% endtab %}\n\n{% tab title=\"Step 2\" %}\nIn the `src/index.ts` file, we handle the decoding by calling the `decodeRequest(abiParams, request)` to parse the expected variables of `id` equal to `1` and `reqData` equal to `\"0x01\"`.", "mimetype": "text/plain", "start_char_idx": 40899, "end_char_idx": 42488, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56984496-8ee4-454d-9b90-428fe9b9eac5": {"__data__": {"id_": "56984496-8ee4-454d-9b90-428fe9b9eac5", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b64c24e7-2e76-4207-a72e-48b77e302d5c", "node_type": "1", "metadata": {}, "hash": "9f9450eaec281213d7004692ee55fda7f60ca6f2aa0b9808d63d87d85e34a3cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05c322dc-485d-4797-88c6-2874f4a36407", "node_type": "1", "metadata": {}, "hash": "a24f806acc995e74de9822015e9978e80c5508b94e1fda188740065c1410b5e9", "class_name": "RelatedNodeInfo"}}, "text": "`src/main.ts`\n\n```typescript\nexport default function main(request: HexString, secrets: string): HexString {\n  console.log(`handle req: ${request}`);\n  let requestId, encodedReqStr;\n  try {\n    [requestId, encodedReqStr] = decodeRequest(decodeRequestAbiParams, request);\n    console.log(`[${requestId}]: ${encodedReqStr}`);\n  } catch (error) {\n    console.info(\"Malformed request received\");\n    return encodeReply(encodeReplyAbiParams, [BigInt(TYPE_ERROR), 0n, BigInt(errorToCode(error as Error))]);\n  }\n```\n\nYou will see logs that will look like the following when printing the encoded `request` and decoded values into `requestId` and `encodedReqStr`.\n\n```bash\nhandle req: 0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043078303100000000000000000000000000000000000000000000000000000000\n[1]: 0x01\n```\n\nNotice that we have error handling to ensure that the `request` can be decoded or else the error will be sent back to the Consumer Contract with `encodeReply(abiParams, reply)`.\n{% endtab %}\n\n{% tab title=\"Step 3\" %}\nOnce the results are computed in the Phat Contract, the action reply is composed and sent via the `encodeReply(abiParams, reply)` function. In this example, we query the Lens v2 API to get profile id `\"0x01\"` and returns the total posts back as part of the encoded reply.", "mimetype": "text/plain", "start_char_idx": 42490, "end_char_idx": 43927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05c322dc-485d-4797-88c6-2874f4a36407": {"__data__": {"id_": "05c322dc-485d-4797-88c6-2874f4a36407", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56984496-8ee4-454d-9b90-428fe9b9eac5", "node_type": "1", "metadata": {}, "hash": "a17c4d5a68ad434b1ebd0ec7b6dde3809ad6a2bb5edf39c4c5ff802ad872e86f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c18bef5b-decc-4cbf-b851-e591eeee5b0f", "node_type": "1", "metadata": {}, "hash": "25d9011fca415c57a01949db43faca3ea966d46e21a5475a86f74d551bb0e10a", "class_name": "RelatedNodeInfo"}}, "text": "`src/index.ts`\n\n```typescript\ntry {\n    const respData = fetchApiStats(secrets, encodedReqStr);\n    let stats = respData.data.profile.stats.posts;\n    console.log(\"response:\", [TYPE_RESPONSE, requestId, stats]);\n    return encodeReply(encodeReplyAbiParams, [BigInt(TYPE_RESPONSE), requestId, stats]);\n  } catch (error) {\n    if (error === Error.FailedToFetchData) {\n      throw error;\n    } else {\n      // otherwise tell client we cannot process it\n      console.log(\"error:\", [TYPE_ERROR, requestId, error]);\n      return encodeReply(encodeReplyAbiParams, [BigInt(TYPE_ERROR), requestId, BigInt(errorToCode(error as Error))]);\n    }\n  }\n```\n\nThe expected posts count at the time of writing was `201` so the logs should print something similar to below where `0` equals `TYPE_RESPONSE`, `1` equals to the request id, and `201` is the total posts from profile `\"0x01\"`\n\n```bash\nresponse: 0,1,201\n{\"output\":\"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c9\"}\n```\n{% endtab %}\n\n{% tab title=\"Step 4\" %}\nThe encoded action reply is lastly handled by the `OracleconsumerContract.sol` in the `_onMessageReceived(bytes calldata action)` with the expected value of action being `0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c9` which is decoded to equal `(0, 1, 201)`. This can be seen with the example below.", "mimetype": "text/plain", "start_char_idx": 43929, "end_char_idx": 45524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c18bef5b-decc-4cbf-b851-e591eeee5b0f": {"__data__": {"id_": "c18bef5b-decc-4cbf-b851-e591eeee5b0f", "embedding": null, "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b", "node_type": "4", "metadata": {}, "hash": "7757589ef3f2151417cb5666c9d7d60437982ad9a3beb25ce4f0493e51414ce1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05c322dc-485d-4797-88c6-2874f4a36407", "node_type": "1", "metadata": {}, "hash": "a24f806acc995e74de9822015e9978e80c5508b94e1fda188740065c1410b5e9", "class_name": "RelatedNodeInfo"}}, "text": "`OracleConsumerContract.sol`\n\n```solidity\nfunction _onMessageReceived(bytes calldata action) internal override {\n    // Optional to check length of action\n    // require(action.length == 32 * 3, \"cannot parse action\");\n    (uint respType, uint id, uint256 data) = abi.decode(\n        action,\n        (uint, uint, uint256)\n    );\n    if (respType == TYPE_RESPONSE) {\n        emit ResponseReceived(id, requests[id], data);\n        delete requests[id];\n    } else if (respType == TYPE_ERROR) {\n        emit ErrorReceived(id, requests[id], data);\n        delete requests[id];\n    }\n}\n```\n{% endtab %}\n{% endtabs %}\n\n## [Closing](https://github.com/Phala-Network/phat-contract-starter-kit/blob/main/src/JS\\_API\\_DOC.md#closing) <a href=\"#user-content-closing\" id=\"user-content-closing\"></a>\n\nCongratulations! You now possess the power to extend the functionality of your functions in many unique ways. If this sparks some ideas that require some extensive functionality that is not supported in `@phala/pink-env`, jump in our [discord](https://discord.gg/dB4AuP4Q), and we can help you learn a little rust to build some Phat Contracts with the Rust SDK then leverage the functions `pink.invokeContract()` & `pink.invokeContractDelegate()` to make calls to the Rust SDK deployed Phat Contracts.", "mimetype": "text/plain", "start_char_idx": 45526, "end_char_idx": 46814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a9d626a-249f-46d9-9ee4-f561e5c5fcff": {"__data__": {"id_": "6a9d626a-249f-46d9-9ee4-f561e5c5fcff", "embedding": null, "metadata": {"file_path": "./phala_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "723e9505-e44a-4945-b233-42bf0747a2c7", "node_type": "1", "metadata": {}, "hash": "514ae492b553db05636e403cdef53907a0defdb53d8ca1330460611e93d51395", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Private networks\ndescription: Use Kurtosis to deploy a private Ethereum devnet with Nethermind and any consensus client at any scale you need, wherever you need it.\nsidebar_position: 8\n---\n\nThis guide will walk you through using [Kurtosis `ethereum-package`](https://github.com/ethpandaops/ethereum-package) to spin up a private, proof-of-stake (PoS) Ethereum devnet with three full Ethereum nodes locally over Docker. At the end of the guide, you will learn how to scale up your testnet on Kubernetes as well as enable optional services for your local testnet, such as network observability tools (e.g., Grafana, Prometheus) and Flashbot's `mev-boost` infrastructure to simulate MEV workflows.\n\n## Step 1: Prerequisites\n\nBefore you begin, ensure you have [Kurtosis CLI](https://docs.kurtosis.com/install) and [Docker](https://docs.docker.com/get-docker) installed. The [`ethereum-package`](https://github.com/ethpandaops/ethereum-package) is a Kurtosis environment definition known as a [package](https://docs.kurtosis.com/concepts-reference/packages). For more info about Kurtosis, see the [Kurtosis docs](https://docs.kurtosis.com).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "723e9505-e44a-4945-b233-42bf0747a2c7": {"__data__": {"id_": "723e9505-e44a-4945-b233-42bf0747a2c7", "embedding": null, "metadata": {"file_path": "./phala_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a9d626a-249f-46d9-9ee4-f561e5c5fcff", "node_type": "1", "metadata": {}, "hash": "7beef6ffdfe03f8212ca94fdfa458f183023bbeea75e030005601a0459235d96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b41e8fd4-c499-49f4-8a56-45d1daeec168", "node_type": "1", "metadata": {}, "hash": "ab04133a2265500c330425936e64418918ef31f6282eca4bb9af544a572ac980", "class_name": "RelatedNodeInfo"}}, "text": "## Step 2: Configure your network\n\nNext, in your home directory, create a file with the name `network_params.json` and populate it with the following contents:\n\n```json title=\"network_params.json\"\n{\n  \"participants\": [\n    {\n      \"el_client_type\": \"nethermind\",\n      \"el_client_image\": \"nethermind/nethermind:latest\",\n      \"cl_client_type\": \"lighthouse\",\n      \"cl_client_image\": \"sigp/lighthouse:latest\",\n      \"count\": 1\n    },\n    {\n      \"el_client_type\": \"nethermind\",\n      \"el_client_image\": \"nethermind/nethermind:latest\",\n      \"cl_client_type\": \"teku\",\n      \"cl_client_image\": \"consensys/teku:latest\",\n      \"count\": 1\n    },\n    {\n      \"el_client_type\": \"nethermind\",\n      \"el_client_image\": \"nethermind/nethermind:latest\",\n      \"cl_client_type\": \"lodestar\",\n      \"cl_client_image\": \"chainsafe/lodestar:next\",\n      \"count\": 1\n    }\n  ],\n  \"mev_type\": \"None\",\n  \"launch_additional_services\": false\n}\n```\n\nAs you can see above, you have effectively created a network configuration file that Kurtosis will use to pass in the necessary parameters at runtime for your network. Notice that the `participant` key describes the execution and consensus client pairing desired for each full node and how many nodes of that type to instantiate.\n\nThere are many other configurations and flags you can use, including metrics and observability tools (e.g., Grafana, Prometheus, etc). For all supported options, see the `ethereum-package` [configuration](https://github.com/ethpandaops/ethereum-package#configuration).\n\n## Step 3: Deploy\n\nFinally, once you have saved the `network_params.json` file, it is time to deploy the private net:\n\n```bash\nkurtosis run github.com/ethpandaops/ethereum-package \"$(cat ~/network_params.json)\"\n```\n\nKurtosis will use the `ethereum-package` environment definition and your custom network configuration (defined in `network_params.json`) to spin up your network.", "mimetype": "text/plain", "start_char_idx": 1148, "end_char_idx": 3050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b41e8fd4-c499-49f4-8a56-45d1daeec168": {"__data__": {"id_": "b41e8fd4-c499-49f4-8a56-45d1daeec168", "embedding": null, "metadata": {"file_path": "./phala_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "723e9505-e44a-4945-b233-42bf0747a2c7", "node_type": "1", "metadata": {}, "hash": "514ae492b553db05636e403cdef53907a0defdb53d8ca1330460611e93d51395", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffe0a4a9-a251-4e28-9602-7e5a99db225d", "node_type": "1", "metadata": {}, "hash": "b278c1119370c1363f6b555a6cd82d9a275bb58a5a64cd0319bf5e3fed9b806e", "class_name": "RelatedNodeInfo"}}, "text": "Kurtosis will first spin up an [enclave][enclaves] (i.e., an ephemeral, isolated environment) and begin to configure and instantiate the nodes in your network. In the end, Kurtosis will print the services running in your enclave that form your private testnet alongside all the container ports and files that were generated and used to start up the private testnet.\n\nHere is a sample output:\n\n```\nINFO[2023-09-01T16:10:45-04:00] ====================================================\nINFO[2023-09-01T16:10:45-04:00] ||          Created enclave: timid-knoll          ||\nINFO[2023-09-01T16:10:45-04:00] ====================================================\nName:            timid-knoll\nUUID:            939dfb5d59b0\nStatus:          RUNNING\nCreation Time:   Fri, 01 Sep 2023 16:08:57 EDT\n\n========================================= Files Artifacts =========================================\nUUID           Name\na876b06035b7   1-lighthouse-nethermind-0-63\n87955ef69845   2-teku-nethermind-64-127\n4f77377da494   3-lodestar-nethermind-128-191\n9734313101e3   cl-genesis-data\n4164ed5c594c   el-genesis-data\na49a3d2774b5   genesis-generation-config-cl\n16fcc4f96236   genesis-generation-config-el\n5fc72346f646   geth-prefunded-keys\n96ae153a0b51   prysm-password\n\n========================================== User Services ==========================================\nUUID           Name                                       Ports                                         Status\nf369802ad2ae   cl-1-lighthouse-nethermind                 http: 4000/tcp -> http://127.0.0.1:49894      RUNNING\n                                                          metrics: 5054/tcp -> http://127.0.0.1:49892\n                                                          tcp-discovery: 9000/tcp -> 127.0.0.1:49893\n                                                          udp-discovery: 9000/udp -> 127.0.0.1:64949\n5e14eb26ef45   cl-1-lighthouse-nethermind-validator       http: 5042/tcp -> 127.", "mimetype": "text/plain", "start_char_idx": 3051, "end_char_idx": 5007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffe0a4a9-a251-4e28-9602-7e5a99db225d": {"__data__": {"id_": "ffe0a4a9-a251-4e28-9602-7e5a99db225d", "embedding": null, "metadata": {"file_path": "./phala_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b41e8fd4-c499-49f4-8a56-45d1daeec168", "node_type": "1", "metadata": {}, "hash": "ab04133a2265500c330425936e64418918ef31f6282eca4bb9af544a572ac980", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "138b5e24-47a8-4b6c-afee-c9d8820939aa", "node_type": "1", "metadata": {}, "hash": "99ecaa63d688652c1a0354502338aa8c0a03704f865a3b31dfad50464234b32c", "class_name": "RelatedNodeInfo"}}, "text": "0.0.1:49895             RUNNING\n                                                          metrics: 5064/tcp -> http://127.0.0.1:49896\nfed533d0e143   cl-2-teku-nethermind                       http: 4000/tcp -> 127.0.0.1:49899             RUNNING\n                                                          metrics: 8008/tcp -> 127.0.0.1:49897\n                                                          tcp-discovery: 9000/tcp -> 127.0.0.1:49898\n                                                          udp-discovery: 9000/udp -> 127.0.0.1:55521\n69cd832de246   cl-3-lodestar-nethermind                   http: 4000/tcp -> 127.0.0.1:49903             RUNNING\n                                                          metrics: 8008/tcp -> 127.0.0.1:49901\n                                                          tcp-discovery: 9000/tcp -> 127.0.0.1:49902\n                                                          udp-discovery: 9000/udp -> 127.0.0.1:50507\n75e3eec0c7d1   cl-3-lodestar-nethermind-validator         metrics: 8008/tcp -> 127.0.0.1:49904          RUNNING\ne10c3f07e0e0   el-1-nethermind-lighthouse                 engine-rpc: 8551/tcp -> 127.0.0.1:49872       RUNNING\n                                                          rpc: 8545/tcp -> 127.0.0.1:49870\n                                                          tcp-discovery: 30303/tcp -> 127.0.0.1:49869\n                                                          udp-discovery: 30303/udp -> 127.0.0.1:64508\n                                                          ws: 8546/tcp -> 127.0.0.1:49871\nc6a28d3136fe   el-2-nethermind-teku                       engine-rpc: 8551/tcp -> 127.0.0.1:49873       RUNNING\n                                                          rpc: 8545/tcp -> 127.0.0.1:49875\n                                                          tcp-discovery: 30303/tcp -> 127.0.0.", "mimetype": "text/plain", "start_char_idx": 5007, "end_char_idx": 6865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "138b5e24-47a8-4b6c-afee-c9d8820939aa": {"__data__": {"id_": "138b5e24-47a8-4b6c-afee-c9d8820939aa", "embedding": null, "metadata": {"file_path": "./phala_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffe0a4a9-a251-4e28-9602-7e5a99db225d", "node_type": "1", "metadata": {}, "hash": "b278c1119370c1363f6b555a6cd82d9a275bb58a5a64cd0319bf5e3fed9b806e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db536609-7c03-4972-8d62-372ed7260936", "node_type": "1", "metadata": {}, "hash": "2c0bc5babbc85c5374c7bf16b6d3f6101fd9c7c7b4a28a2a760c0831fe2f4f0d", "class_name": "RelatedNodeInfo"}}, "text": "1:49874\n                                                          udp-discovery: 30303/udp -> 127.0.0.1:52495\n                                                          ws: 8546/tcp -> 127.0.0.1:49876\n2fae3b3c41d3   el-3-nethermind-lodestar                   engine-rpc: 8551/tcp -> 127.0.0.1:49890       RUNNING\n                                                          rpc: 8545/tcp -> 127.0.0.1:49888\n                                                          tcp-discovery: 30303/tcp -> 127.0.0.1:49891\n                                                          udp-discovery: 30303/udp -> 127.0.0.1:62119\n                                                          ws: 8546/tcp -> 127.0.0.1:49889\n403cafe8416e   prelaunch-data-generator-cl-genesis-data   <none>                                        RUNNING\nebea71008cf4   prelaunch-data-generator-el-genesis-data   <none>                                        RUNNING\n```\n\nAnd that is it! You now have a 3-node, private Ethereum devnet with Nethermind/Lodestar, Nethermind/Teku, and Nethermind/Lighthouse execution and consensus client combinations.\n\nNotice how, at the end, Kurtosis will print out the contents of your enclave, which includes both the various [files artifacts](https://docs.kurtosis.com/concepts-reference/files-artifacts) and services that form your network. Kurtosis also maps the container ports to ephemeral local ports on your machine.\n\nGenesis data was generated using this [genesis-generator](https://github.com/ethpandaops/ethereum-genesis-generator) to bootstrap the execution and consensus clients for each node. The end result will be a private testnet with nodes deployed as Docker containers in an ephemeral, isolated environment on your machine called an [enclave][enclaves].\n\nKurtosis packages are modular, reproducible, and will work over Docker or Kubernetes. Read on to learn about additional services and configurations you may want to add to your private network.\n\n## Step 4: Optional workflows\n\nThis section briefly covers some optional configurations for your private devnet that are commonly used for validating and testing node-level behavior.", "mimetype": "text/plain", "start_char_idx": 6865, "end_char_idx": 9003, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db536609-7c03-4972-8d62-372ed7260936": {"__data__": {"id_": "db536609-7c03-4972-8d62-372ed7260936", "embedding": null, "metadata": {"file_path": "./phala_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "138b5e24-47a8-4b6c-afee-c9d8820939aa", "node_type": "1", "metadata": {}, "hash": "99ecaa63d688652c1a0354502338aa8c0a03704f865a3b31dfad50464234b32c", "class_name": "RelatedNodeInfo"}}, "text": "### Simulating MEV workflows with `mev-boost`\n\nThe `ethereum-package` can simulate out-of-protocol Proposer Builder Separation (PBS) workflows using Flashbot's `mev-boost` infrastructure. With a single flag, you can configure your network's validators to be instantiated with `mev-boost` and be registered with a relayer to receive payloads from builders.\n\nTo enable this in your `network_params.json` file, set `\"mev_type\":` to `\"full\"` or `\"mock\"`.\n\nTo learn more about how the `mev-boost` infrastructure works with your private network, check out [this guide](https://docs.kurtosis.com/how-to-full-mev-with-ethereum-package).\n\n### Observability tools\n\nThe `ethereum-package` comes out of the box with a few observability tools, including:\n\n- A Grafana and Prometheus instance\n- A [beacon metrics gazer service](https://github.com/dapplion/beacon-metrics-gazer) to collect network-wide participation metrics\n- A [JSON-RPC Snooper](https://github.com/ethDreamer/json_rpc_snoop) to log responses & requests between the execution engine API and the consensus client\n\nTo add your own custom Grafana dashboard template, fork the `ethereum-package` repository and add your configuration [here](https://github.com/ethpandaops/ethereum-package/tree/main/static_files/grafana-config/dashboards).\n\n### Deploying on Kubernetes\n\nAs mentioned earlier, Kurtosis packages (i.e. environment definitions) are portable and will work the same way over Docker or on Kubernetes. Should you require a larger scale devnet, Kurtosis can deploy any package, including the `ethereum-package` on Kubernetes, see [Running Kurtosis in Kubernetes](https://docs.kurtosis.com/k8s).\n\n## Questions and feedback\n\nIf you need help with your Nethermind full node in the private devnet, please don't hesitate to contact the Kurtosis team on [GitHub](https://github.com/ethpandaops/ethereum-package) or [Discord](https://discord.gg/jJFG7XBqcY).\n\n[enclaves]: https://docs.kurtosis.com/concepts-reference/enclaves", "mimetype": "text/plain", "start_char_idx": 9005, "end_char_idx": 10979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97470287-fa73-4694-bc3d-2210a6816ca3": {"__data__": {"id_": "97470287-fa73-4694-bc3d-2210a6816ca3", "embedding": null, "metadata": {"file_path": "./phala_dist/dotnet-counters.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "584639c9-78c1-4cdb-b0b6-cf17c165b565", "node_type": "4", "metadata": {}, "hash": "3274a83dadc597bc7954a5af32124aafda3d9b8c668ad55c876a981c3bc1fdfa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "847fe7c9-4b5b-48c7-a76e-d808810d5492", "node_type": "1", "metadata": {}, "hash": "420371c93dd6b4d2b52b3dfe5cfbcb7c6939fbb2d90b23419272de3a21e45415", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: dotnet-counters\nsidebar_position: 1\n---\n\nThis guide will walk you through setting up performance counters using the [dotnet-counters](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters) performance monitoring tool that observes counters published via the [EventCounters API](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventcounter).\n\n## Step 1: Install dotnet-counters\n\ndotnet-counters can be either installed locally or in a Docker container.\n\n### Installing locally\n\nUse the dotnet tool install command as follows:\n\n```bash\ndotnet tool install -g dotnet-counters\n```\n\nOnce installed, you can run the tool from the command line by typing `dotnet-counters`.\n\n\n### Installing in a Docker container\n\nTo install dotnet-counters in a Docker container, create a Dockerfile with the following content:\n\n```docker title=\"Dockerfile\"\nFROM mcr.microsoft.com/dotnet/sdk:8.0\n\nRUN dotnet tool install -g dotnet-counters\n\nENV PATH=\"$PATH:/root/.dotnet/tools\"\n\nENTRYPOINT [\"/bin/bash\"]\n```\n\nThen, build the Docker image:\n\n```bash\ndocker build -t dotnet-counters .\n```\n\n## Step 2: Run Nethermind\n\nTo enable performance counters in Nethermind, use the command line option `--Metrics.CountersEnabled true`. For more options, see the [Metrics](../../fundamentals/configuration.md#metrics) configuration section.\n\n:::warning Important\nA [consensus client](../../get-started/consensus-clients.md) of your choice must be running before you start Nethermind.\n:::\n\n### Running locally\n\nTo enable performance counters, run Nethermind as follows:\n\n```bash\nnethermind -c mainnet --Metrics.CountersEnabled true\n```\n\n### Running in a Docker container\n\nThe easiest way of collecting metrics in a Docker container is to use Docker Compose.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1772, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "847fe7c9-4b5b-48c7-a76e-d808810d5492": {"__data__": {"id_": "847fe7c9-4b5b-48c7-a76e-d808810d5492", "embedding": null, "metadata": {"file_path": "./phala_dist/dotnet-counters.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "584639c9-78c1-4cdb-b0b6-cf17c165b565", "node_type": "4", "metadata": {}, "hash": "3274a83dadc597bc7954a5af32124aafda3d9b8c668ad55c876a981c3bc1fdfa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97470287-fa73-4694-bc3d-2210a6816ca3", "node_type": "1", "metadata": {}, "hash": "725f281d3281782faac9d5f766a4ef4ca3d7c8b71f6defcfb19af7ab946c5d55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6062d01d-d55c-4395-873b-117ba037552a", "node_type": "1", "metadata": {}, "hash": "210bdc6225784ef447e28ea76550d7638a8b4efacdd951a070bd338d84a9dddb", "class_name": "RelatedNodeInfo"}}, "text": "Below, we use the Nethermind official Docker image and the `dotnet-counters` image we created earlier:\n\n```yaml title=\"docker-compose.yml\"\nservices:\n\n  dotnet-counters:\n    image: dotnet-counters\n    container_name: dotnet-counters\n    stdin_open: true\n    tty: true\n    pid: service:nethermind\n    volumes:\n      - metrics:/tmp\n    depends_on:\n      - nethermind\n  \n  nethermind:\n    image: nethermind/nethermind:latest\n    container_name: nethermind\n    restart: unless-stopped\n    ports:\n      - 8545:8545\n      - 8551:8551\n      - 30303:30303\n    command: -c mainnet --Metrics.CountersEnabled true\n    volumes:\n      - ./keystore:/nethermind/keystore\n      - ./logs:/nethermind/logs\n      - ./nethermind_db:/nethermind/nethermind_db\n      - metrics:/tmp\n\nvolumes:\n  metrics:\n```\n\n:::info\ndotnet-counters uses IPC socket communication to monitor the target process. For this, we use the `metrics` volume to share the IPC socket directory with the `nethermind` and `dotnet-counter` services. The `pid` option in the `dotnet-counters` service is used to share the PID namespace with the `nethermind` service. This is necessary for `dotnet-counters` to be able to see the Nethermind process.\n:::\n\nWe can run the above file as follows:\n\n```bash\ndocker compose up\n```\n\n## Step 3: Collect metrics\n\nOnce dotnet-counters is installed and Nethermind is running, we can start collecting the metrics. If you chose to collect metrics in the containers, run the following command in the `dotnet-counters` container:\n\n```bash\ndotnet-counters collect -n nethermind\n```\n\nBy default, dotnet-counters stores the collected metrics in the current directory in CSV format. However, you may also store them in JSON format and another directory.", "mimetype": "text/plain", "start_char_idx": 1773, "end_char_idx": 3498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6062d01d-d55c-4395-873b-117ba037552a": {"__data__": {"id_": "6062d01d-d55c-4395-873b-117ba037552a", "embedding": null, "metadata": {"file_path": "./phala_dist/dotnet-counters.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "584639c9-78c1-4cdb-b0b6-cf17c165b565", "node_type": "4", "metadata": {}, "hash": "3274a83dadc597bc7954a5af32124aafda3d9b8c668ad55c876a981c3bc1fdfa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "847fe7c9-4b5b-48c7-a76e-d808810d5492", "node_type": "1", "metadata": {}, "hash": "420371c93dd6b4d2b52b3dfe5cfbcb7c6939fbb2d90b23419272de3a21e45415", "class_name": "RelatedNodeInfo"}}, "text": "For instance:\n\n```bash\ndotnet-counters collect -n nethermind -f json -o /tmp/counters.json\n```\n\nFor more info about dotnet-counters, see its [official docs](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters).", "mimetype": "text/plain", "start_char_idx": 3499, "end_char_idx": 3731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba693fcd-56bc-4e40-9186-bdb68ddcbb4c": {"__data__": {"id_": "ba693fcd-56bc-4e40-9186-bdb68ddcbb4c", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc1f674a-93f3-4524-b3ea-b6a5a31fb717", "node_type": "1", "metadata": {}, "hash": "4039254934c0d78f9c1a5b3c8d53bc8fe6a0b60c91d1aabd9de3c3f5496d9708", "class_name": "RelatedNodeInfo"}}, "text": "# Governance Mechanism\n\n> Go to the [Governance](./) section for more detailed tutorials on voting and Treasury application.\n\nThe early Khala network will use a governance mechanism consistent with Polkadot and Kusama, enabling it to evolve gracefully over time at the ultimate behest of its assembled stakeholders. The stated goal is to ensure that the majority of the stake can always command the network.\n\nTherefore, the following Khala democratic mechanism basically adopts the same process and instructions as the [Polkadot wiki](https://wiki.polkadot.network/docs/learn-governance).\n\nTo do this, we bring together various novel mechanisms, including an amorphous state-transition function stored on-chain and defined in a platform-neutral intermediate language (i.e. WebAssembly) and several on-chain voting mechanisms such as referenda with adaptive super-majority thresholds and batch approval voting. All changes to the protocol must be agreed upon by stake-weighted referenda.\n\n## Mechanism <a href=\"#mechanism\" id=\"mechanism\"></a>\n\nTo make any changes to the network, the idea is to compose active token holders and the council together to administrate a network upgrade decision. No matter whether the proposal is proposed by the public (PHA token holders) or the council, it finally will have to go through a referendum to let all holders, weighted by stake, make the decision.\n\nTo better understand how the council is formed, please read the council section.\n\n## Referenda <a href=\"#referenda\" id=\"referenda\"></a>\n\nReferenda are simple, inclusive, stake-based voting schemes. Each referendum has a specific _proposal_ on-chain associated with it that takes the form of a privileged function call (that includes the most powerful call: `set_code`, which can switch out the entire code of the Runtime, achieving updates on-chain).\n\nReferenda are discrete events, have a fixed period where voting happens, and then are tallied and the function call is made if the vote is approved. Referenda are always binary; your only options in voting are \u201caye\u201d, \u201cnay\u201d, or abstaining entirely.\n\nReferenda can be started in one of several ways:\n\n* Publicly submitted proposals;\n* Proposals submitted by the council, either through a majority or unanimously;\n* Proposals submitted as part of the enactment of a prior referendum;\n* Emergency proposals submitted by the Technical Committee and approved by the Council.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc1f674a-93f3-4524-b3ea-b6a5a31fb717": {"__data__": {"id_": "bc1f674a-93f3-4524-b3ea-b6a5a31fb717", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba693fcd-56bc-4e40-9186-bdb68ddcbb4c", "node_type": "1", "metadata": {}, "hash": "58a6dd4620ef7394bdf347b59287138e4f5f357b0b48b6db45ed828b9c5c8f7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "885e7028-37a3-4139-abb0-1428a68a2e01", "node_type": "1", "metadata": {}, "hash": "4a3690b44c9c7a410f3ce163bc4ae35a8a2b88823b8c00a42148eab58e614db1", "class_name": "RelatedNodeInfo"}}, "text": "All referenda have an _enactment delay_ associated with them. This is the period between the referendum ending and, assuming the proposal was approved, the changes being enacted. For the first two ways that a referendum is launched, this is a fixed time. In Phala, it is 7 days. For the third type, it can be set as desired.\n\nEmergency proposals deal with major problems with the network that need to be \u201cfast-tracked\u201d. These will have a shorter enactment time.\n\n## Proposing a Referendum <a href=\"#proposing-a-referendum\" id=\"proposing-a-referendum\"></a>\n\n### **Public Referenda**\n\nAnyone can propose a referendum by depositing the minimum amount of PHA for a certain period (number of blocks). If someone agrees with the proposal, they may deposit the same amount of tokens to support it - this action is called _seconding_. The proposal with the highest amount of bonded support will be selected to be a referendum in the next voting cycle.\n\nNote that this may be different from the absolute number of seconds; for instance, three accounts bonding 20 PHA each would \u201coutweigh\u201d ten accounts bonding a single PHA each. The bonded tokens will be released once the proposal is tabled (that is, brought to a vote).\n\nThere can be a maximum of 100 public proposals in the proposal queue.\n\n### **Council Referenda**\n\nUnanimous Council - When all members of the council agree on a proposal, it can be moved to a referendum. This referendum will have a negative turnout bias (that is, the smaller the amount of stake voting, the smaller the amount necessary for it to pass - see \u201cAdaptive Quorum Biasing\u201d, below).\n\nMajority Council - When agreement from only a simple majority of council members occurs, the referendum can also be voted upon, but it will be majority-carries (51% wins).\n\nThere can only be one active referendum at any given time, except when there is also an emergency referendum in progress.\n\n### **Voting Timetable**\n\nEvery 7 days on Phala, a new referendum will come up for a vote, assuming there is at least one proposal in one of the queues. There is a queue for Council-approved proposals and a queue for publicly submitted proposals. The referendum to be voted upon alternates between the top proposal in the two queues.", "mimetype": "text/plain", "start_char_idx": 2414, "end_char_idx": 4651, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "885e7028-37a3-4139-abb0-1428a68a2e01": {"__data__": {"id_": "885e7028-37a3-4139-abb0-1428a68a2e01", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc1f674a-93f3-4524-b3ea-b6a5a31fb717", "node_type": "1", "metadata": {}, "hash": "4039254934c0d78f9c1a5b3c8d53bc8fe6a0b60c91d1aabd9de3c3f5496d9708", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6a9a312-9ec5-4790-a508-e4d38ef0773e", "node_type": "1", "metadata": {}, "hash": "c29a4b2ec034d20e267fe6c9c604ca9297232f6b9d756f3bd50892d078e3b712", "class_name": "RelatedNodeInfo"}}, "text": "The \u201ctop\u201d proposal is determined by the amount of stake bonded behind it. If the given queue whose turn it is to create a referendum that has no proposals (is empty), and proposals are waiting in the other queue, the top proposal in the other queue will become a referendum.\n\nMultiple referenda cannot be voted upon in the same period, excluding emergency referenda. An emergency referendum occurring at the same time as a regular referendum (either public- or council-proposed) is the only time that multiple referenda will be able to be voted on at once.\n\n### **Voting on a referendum**\n\nTo vote, a voter generally must lock their PHA up for at least the enactment delay period beyond the end of the referendum. This is to ensure that some minimal economic buy-in to the result is needed and to dissuade vote selling.\n\nIt is possible to vote without locking at all, but your vote is worth a small fraction of a normal vote, given your stake. At the same time, holding only a small amount of tokens does not mean that the holder cannot influence the referendum result, thanks to time-locking. You can read more about this at Voluntary Locking.\n\n```\nExample:\n\nPeter: Votes `No` with 10 PHA for a 32 week lock period  => 10 * 6 = 60 Votes\n\nLogan: Votes `Yes` with 20 PHA for a 2 week lock period => 20 * 2 = 40 Votes\n\nKevin: Votes `Yes` with 15 PHA for a 8 week lock period => 15 * 4 = 60 Votes\n```\n\nEven though combined both Logan and Kevin vote with more PHA than Peter, the lock period for both of them is less than Peter, leading to their voting power counting as less.\n\n### **Tallying**\n\nDepending on which entity proposed the proposal and whether all council members voted yes, there are three different scenarios. We can use the following table for reference.", "mimetype": "text/plain", "start_char_idx": 4653, "end_char_idx": 6418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6a9a312-9ec5-4790-a508-e4d38ef0773e": {"__data__": {"id_": "d6a9a312-9ec5-4790-a508-e4d38ef0773e", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "885e7028-37a3-4139-abb0-1428a68a2e01", "node_type": "1", "metadata": {}, "hash": "4a3690b44c9c7a410f3ce163bc4ae35a8a2b88823b8c00a42148eab58e614db1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d1288fb-8ce2-4257-85cb-c69bb2e757fe", "node_type": "1", "metadata": {}, "hash": "be22a2187da7f5ef5a9bf566efa03668830dadc984d97e9454347015ab1a2160", "class_name": "RelatedNodeInfo"}}, "text": "|          **Entity**          |                   **Metric**                   |\n| :--------------------------: | :--------------------------------------------: |\n|            Public            | Positive Turnout Bias (Super-Majority Approve) |\n| Council (Complete agreement) | Negative Turnout Bias (Super-Majority Against) |\n| Council (Majority agreement) |                 Simple Majority                |\n\nAlso, we need the following information and apply one of the formulas listed below to calculate the voting result. For example, let\u2019s use the public proposal as an example, so the `Super-Majority Approve` formula will be applied. There is no strict quorum, but the super-majority required increases with lower turnout.\n\n```\napprove - the number of aye votes\n\nagainst - the number of nay votes\n\nturnout - the total number of voting tokens (does not include conviction)\n\nelectorate - the total number of PHA tokens issued in the network\n```\n\n### **Super-Majority Approve**\n\nA `positive turnout bias`, whereby a heavy super-majority of aye votes is required to carry at low turnouts, but as turnout increases towards 100%, it becomes a simple majority-carries as below.\n\n$$\n\\frac{against}{\\sqrt{turnout}} < \\frac{approve}{\\sqrt{electorate}}\n$$\n\n### **Super-Majority Against**\n\nA `negative turnout bias`, whereby a heavy super-majority of nay votes is required to reject at low turnouts, but as turnout increases towards 100%, it becomes a simple majority-carries as below.\n\n$$\n\\frac{against}{\\sqrt{electorate}} < \\frac{approve}{\\sqrt{turnout}}\n$$\n\n### **Simple-Majority**\n\nMajority-carries, a simple comparison of votes; if there are more aye votes than nay, then the proposal is carried, no matter how much stake votes on the proposal.\n\n$$\napprove > against\n$$\n\n```\nExample:\n\nAssume:\n- We only have 1,500 PHA tokens in total.\n- Public proposal\n\nJohn  - 500 PHA\nPeter - 100 PHA\nLilly - 150 PHA\nJJ    - 150 PHA\nKen   - 600 PHA", "mimetype": "text/plain", "start_char_idx": 6420, "end_char_idx": 8353, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d1288fb-8ce2-4257-85cb-c69bb2e757fe": {"__data__": {"id_": "0d1288fb-8ce2-4257-85cb-c69bb2e757fe", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6a9a312-9ec5-4790-a508-e4d38ef0773e", "node_type": "1", "metadata": {}, "hash": "c29a4b2ec034d20e267fe6c9c604ca9297232f6b9d756f3bd50892d078e3b712", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33d30f6b-d935-4180-94d8-c55acfb99914", "node_type": "1", "metadata": {}, "hash": "3e15c92ac3466b8f123434da3e4a2a12b07b5c772cd62ab040058daea0e6a72f", "class_name": "RelatedNodeInfo"}}, "text": "John: Votes `Yes` for a 1 week lock period  => 500 * 1 = 500 Votes\n\nPeter: Votes `Yes` for a 1 week lock period => 100 * 1 = 100 Votes\n\nJJ: Votes `No` for a 4 week lock period => 150 * 3 = 450 Votes\n\napprove = 600\nagainst = 450\nturnout = 750\nelectorate = 1500\n```\n\n$$\n\\frac{450}{\\sqrt{750}} < \\frac{600}{\\sqrt{1500}}\n$$\n\n$$\n16.432 < 15.492\n$$\n\nSince the above example is a public referendum, `Super-Majority Approve` would be used to calculate the result. `Super-Majority Approve` requires more `aye` votes to pass the referendum when turnout is low, therefore, based on the above result, the referendum will be rejected. In addition, only the winning voter\u2019s tokens are locked. If the voters on the losing side of the referendum believe that the outcome will have negative effects, their tokens are transferable so they will not be locked into the decision. Moreover, winning proposals are autonomously enacted only after some enactment period.\n\n### **Voluntary Locking**\n\nPhala follows Polkadot\u2019s idea called `Voluntary Locking` which allows token holders to increase their voting power by declaring how long they are willing to lock up their tokens, hence, the number of votes for each token holder will be calculated by the following formula:\n\n```\nvotes = tokens * conviction_multiplier\n```\n\nThe conviction multiplier increases the vote multiplier by one every time the number of lock periods doubles.\n\n| Lock Periods | Vote Multiplier |\n| :----------: | :-------------: |\n|       0      |       0.1       |\n|       1      |        1        |\n|       2      |        2        |\n|       4      |        3        |\n|       8      |        4        |\n|      16      |        5        |\n|      32      |        6        |\n\nThe maximum number of \u201cdoublings\u201d of the lock period is set to 6 (and thus 32 lock periods in total), and one lock period equals 7 days on Phala.", "mimetype": "text/plain", "start_char_idx": 8356, "end_char_idx": 10224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33d30f6b-d935-4180-94d8-c55acfb99914": {"__data__": {"id_": "33d30f6b-d935-4180-94d8-c55acfb99914", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d1288fb-8ce2-4257-85cb-c69bb2e757fe", "node_type": "1", "metadata": {}, "hash": "be22a2187da7f5ef5a9bf566efa03668830dadc984d97e9454347015ab1a2160", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "445a4d5e-c59e-4b7a-93d8-0ca1c6c771ef", "node_type": "1", "metadata": {}, "hash": "2071c6079c664aae89444d989fdaf232da63242282a097c766b6cec0ac339367", "class_name": "RelatedNodeInfo"}}, "text": "Only doublings are allowed; you cannot lock for, say, 24 periods and increase your conviction by 5.5, for instance.\n\nWhile a token is locked, you can still use it for voting and staking; you are only prohibited from transferring these tokens to another account.\n\nVotes are still \u201ccounted\u201d at the same time (at the end of the voting period), no matter how long the tokens are locked.\n\n### **Adaptive Quorum Biasing**\n\nPhala follows the concept, \u201cAdaptive Quorum Biasing\u201d, which functions as a lever that the council can use to alter the effective super-majority required to make it easier or more difficult for a proposal to pass in the case that there is no clear majority of voting power backing it or against it.\n\n![img](https://wiki.polkadot.network/assets/images/adaptive-quorum-biasing-18c2e70b6b9d2c3abf563219b11974dc.png)\n\nLet\u2019s use the above image as an example.\n\nIf a publicly submitted referendum only has a 25% turnout, the tally of \u201caye\u201d votes has to reach 66% for it to pass since we applied `Positive Turnout Bias`.\n\nIn contrast, when it has a 75% turnout, the tally of \u201caye\u201d votes has to reach 54%, which means that the super-majority required decreases as the turnout increases.\n\nWhen the council proposes a new proposal through unanimous consent, the referendum would be put to a vote using \u201cNegative Turnout Bias\u201d. In this case, it is easier to pass this proposal with a low turnout and requires a super-majority to reject. As more token holders participate in voting, the bias approaches a plain majority carries.\n\nReferring to the above image, when a referendum only has a 25% turnout, the tally of \u201caye\u201d votes has to reach 34% for it to pass.\n\nIn short, when the turnout rate is low, a super-majority is required to reject the proposal, which means a lower threshold of \u201caye\u201d votes has to be reached, but as turnout increases towards 100%, it becomes a simple majority.\n\nAll three tallying mechanisms - majority carries, super-majority approve, and super-majority against - equate to a simple majority-carries system at 100% turnout.", "mimetype": "text/plain", "start_char_idx": 10225, "end_char_idx": 12279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "445a4d5e-c59e-4b7a-93d8-0ca1c6c771ef": {"__data__": {"id_": "445a4d5e-c59e-4b7a-93d8-0ca1c6c771ef", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33d30f6b-d935-4180-94d8-c55acfb99914", "node_type": "1", "metadata": {}, "hash": "3e15c92ac3466b8f123434da3e4a2a12b07b5c772cd62ab040058daea0e6a72f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "033f3991-a266-4a65-842a-4b1cd965d89a", "node_type": "1", "metadata": {}, "hash": "404d985d7d1b1914d2cee6c4f81b045ffdbde76155515165257c9370da1498bd", "class_name": "RelatedNodeInfo"}}, "text": "## Council <a href=\"#council\" id=\"council\"></a>\n\nTo represent passive stakeholders, Phala introduces the idea of a \u201ccouncil\u201d. The council is an on-chain entity comprising several actors, each represented as an on-chain account. On Phala, the council currently consists of 5 members. This is expected to increase over the next few months to 11 seats. In general, the council will end up having a fixed number of seats.\n\nAlong with controlling the treasury, the council is called upon primarily for three tasks of governance: proposing sensible referenda, canceling uncontroversially dangerous or malicious referenda, and electing the technical committee.\n\nFor a referendum to be proposed by the council, a strict majority of members must be in favor, with no member exercising a veto. Vetoes may be exercised only once by a member for any single proposal; if, after a cool-down period, the proposal is resubmitted, they may not veto it a second time.\n\nCouncil motions that pass with a 3/5 (60%) super-majority - but without reaching unanimous support - will move to a public referendum under a neutral, majority-carries voting scheme. In the case that all members of the council vote in favor of a motion, the vote is considered unanimous and becomes a referendum with negative adaptive quorum biasing.\n\n### Canceling <a href=\"#canceling\" id=\"canceling\"></a>\n\nA proposal can be canceled if the technical committee unanimously agrees to do so, or if Root origin (e.g. sudo) triggers this functionality. A canceled proposal\u2019s deposit is burned.\n\nAdditionally, a two-thirds majority of the council can cancel a referendum. This may function as a last-resort if there is an issue found late in a referendum\u2019s proposal such as a bug in the parameter configuration of the on-chain call to be executed is incorrect.\n\nIf the cancellation is controversial enough that the council cannot get a two-thirds majority, then it will be left to the stakeholders _en masse_ to determine the fate of the proposal.\n\n### Blacklisting <a href=\"#blacklisting\" id=\"blacklisting\"></a>\n\nA proposal can be blacklisted by Root origin (e.g. sudo). A blacklisted proposal and its related referendum (if any) are immediately canceled. Additionally, a blacklisted proposal\u2019s hash cannot re-appear in the proposal queue.", "mimetype": "text/plain", "start_char_idx": 12281, "end_char_idx": 14568, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "033f3991-a266-4a65-842a-4b1cd965d89a": {"__data__": {"id_": "033f3991-a266-4a65-842a-4b1cd965d89a", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "445a4d5e-c59e-4b7a-93d8-0ca1c6c771ef", "node_type": "1", "metadata": {}, "hash": "2071c6079c664aae89444d989fdaf232da63242282a097c766b6cec0ac339367", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb82f321-7cd7-4dc9-8ae2-659cc4a7face", "node_type": "1", "metadata": {}, "hash": "faf81210f326248f4c24120eaf0f62d9fab235e6b3149a615c4337a49278400e", "class_name": "RelatedNodeInfo"}}, "text": "Blacklisting is useful when removing erroneous proposals that could be submitted with the same hash, i.e.proposal #2 in which the submitter used plain text to make a suggestion.\n\nUpon seeing their proposal removed, a submitter who is not properly introduced to the democracy system of Phala might be tempted to re-submit the same proposal. That said, this is far from a fool-proof method of preventing invalid proposals from being submitted - a single changed character in a proposal\u2019s text will also change the hash of the proposal, rendering the per-hash blacklist invalid.\n\n### How to be a council member? <a href=\"#how-to-be-a-council-member\" id=\"how-to-be-a-council-member\"></a>\n\n![](https://i.imgur.com/A3iCGJ0.png)\n\nAll stakeholders are free to signal their approval of any of the registered candidates.\n\nCouncil elections are handled by the same Phragm\u00e9n election process that selects validators from the available pool based on nominations. However, token holders' votes for councillors are isolated from any of the nominations they may have on validators. Council terms last for one week on Phala.\n\nAt the end of each term, Phragm\u00e9n election algorithm runs and the result will choose the new councillors based on the vote configurations of all voters. The election also chooses a set number of runners up (currently 10 on Phala) that will remain in the queue with their votes intact.\n\nAs opposed to a \u201cfirst-past-the-post\u201d electoral system, where voters can only vote for a single candidate from a list, a Phragm\u00e9n election is a more expressive way to include each voter\u2019s views. Token holders can treat it as a way to support as many candidates as they want. The election algorithm will find a fair subset of the candidates that most closely match the expressed indications of the electorate as a whole.\n\nLet\u2019s take a look at the example below.", "mimetype": "text/plain", "start_char_idx": 14569, "end_char_idx": 16424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb82f321-7cd7-4dc9-8ae2-659cc4a7face": {"__data__": {"id_": "cb82f321-7cd7-4dc9-8ae2-659cc4a7face", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "033f3991-a266-4a65-842a-4b1cd965d89a", "node_type": "1", "metadata": {}, "hash": "404d985d7d1b1914d2cee6c4f81b045ffdbde76155515165257c9370da1498bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4ceffc4-b563-4a6f-8e09-ff40511f222a", "node_type": "1", "metadata": {}, "hash": "ef2beec581d414135cb38b9cee1184083c3933038ddc0005670e2a8a13c09f35", "class_name": "RelatedNodeInfo"}}, "text": "| Round 1           |   |                |   |   |   |\n| ----------------- | - | -------------- | - | - | - |\n| **Token Holders** |   | **Candidates** |   |   |   |\n|                   | A | B              | C | D | E |\n| Peter             | X |                | X | X | X |\n| Alice             |   | X              |   |   |   |\n| Bob               |   |                | X | X | X |\n| Kelvin            | X |                | X |   |   |\n| **Total**         | 2 | 1              | 3 | 2 | 2 |\n\nThe above example shows that candidate C wins the election in round 1, while candidates A, B, D & E keep remaining on the candidates' list for the next round.\n\n| Round 2           |   |                |   |   |\n| ----------------- | - | -------------- | - | - |\n| **Token Holders** |   | **Candidates** |   |   |\n|                   | A | B              | D | E |\n| Peter             | X | X              |   |   |\n| Alice             | X | X              |   |   |\n| Bob               | X | X              | X | X |\n| Kelvin            | X | X              |   |   |\n| **Total**         | 4 | 4              | 1 | 1 |\n\nFor the top-N (say 4 in this example) runners-up, they can remain and their votes persist until the next election. After round 2, even though candidates A & B get the same number of votes in this round, candidate A gets elected because after adding the older unused approvals, it is higher than B.\n\nThis is a temporary governance configuration for the initial phase of Phala. If any security vulnerabilities are found after a third-party audit, it will be changed. Further changes can be made through on-chain governance.\n\n### Prime Members <a href=\"#prime-members\" id=\"prime-members\"></a>\n\nThe council, being an instantiation of Substrate\u2019s Collective pallet, implements what\u2019s called a _prime member_ whose vote acts as the default for other members that fail to vote before the timeout.\n\nThe prime member is chosen based on a Borda count.", "mimetype": "text/plain", "start_char_idx": 16426, "end_char_idx": 18383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4ceffc4-b563-4a6f-8e09-ff40511f222a": {"__data__": {"id_": "d4ceffc4-b563-4a6f-8e09-ff40511f222a", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb82f321-7cd7-4dc9-8ae2-659cc4a7face", "node_type": "1", "metadata": {}, "hash": "faf81210f326248f4c24120eaf0f62d9fab235e6b3149a615c4337a49278400e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f796eb2-baf3-4e29-98c2-b6ce544a6498", "node_type": "1", "metadata": {}, "hash": "ba39c56754c10faed30163160509555e27fc9231a83aeb60d58ce95b79aa583f", "class_name": "RelatedNodeInfo"}}, "text": "The purpose of having a prime member of the council is to ensure a quorum, even when several members abstain from a vote. Council members might be tempted to vote a \u201csoft rejection\u201d or a \u201csoft approval\u201d by not voting and letting the others vote. With the existence of a prime member, it forces Councillors to be explicit in their votes or have their vote counted for whatever is voted on by the prime.\n\n## Technical Committee <a href=\"#technical-committee\" id=\"technical-committee\"></a>\n\nThe Technical Committee was introduced in the Phala rollout and governance post as one of the three chambers of Phala governance (along with the Council and the Referendum chamber). The Technical Committee is composed of the teams that have successfully implemented or specified either a Phala parachain or Phala Host. Teams are added or removed from the Technical Committee via a simple majority vote of the Council.\n\nThe Technical Committee can, along with the Council, produce emergency referenda, which are fast-tracked for voting and implementation. These are used for emergency bug fixes or rapid implementation of new but battle-tested features into the Phala parachain.\n\nFast-tracked referenda are the only type of referenda that can be active alongside another active referendum. Thus, with fast-tracked referenda, it is possible to have two active referendums at the same time. Voting on one does not prevent a user from voting on the other.\n\n## Frequently Asked Questions <a href=\"#frequently-asked-questions\" id=\"frequently-asked-questions\"></a>\n\n### How can I appeal to the council to enact a change on my behalf? <a href=\"#how-can-i-appeal-to-the-council-to-enact-a-change-on-my-behalf\" id=\"how-can-i-appeal-to-the-council-to-enact-a-change-on-my-behalf\"></a>\n\nIn some circumstances, you may want to appeal to the on-chain council to enact a change on your behalf. One example of this circumstance is the case of lost or locked funds when the funds were lost due to a human interface error (such as inputting an address for another network). When these circumstances can be proven beyond a reasonable doubt to be an error, the council _may_ consider a governance motion to correct it.\n\nThe first step to appeal to the council is to get in contact with the councillors.", "mimetype": "text/plain", "start_char_idx": 18385, "end_char_idx": 20655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f796eb2-baf3-4e29-98c2-b6ce544a6498": {"__data__": {"id_": "7f796eb2-baf3-4e29-98c2-b6ce544a6498", "embedding": null, "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa", "node_type": "4", "metadata": {}, "hash": "acf16d0aa5ee0c6b91dd336a31f4c2ce541ecdc201e5998ab44e783075f22df9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4ceffc4-b563-4a6f-8e09-ff40511f222a", "node_type": "1", "metadata": {}, "hash": "ef2beec581d414135cb38b9cee1184083c3933038ddc0005670e2a8a13c09f35", "class_name": "RelatedNodeInfo"}}, "text": "There is no singular place where you are guaranteed to grab every councillor\u2019s ear with your message. However, there are a handful of good places to start where you can get the attention of some of them. The Phala Forum is one such place. After creating an account and joining this room, you can post a well-thought-through message here that lays down your case and provides justification for why you think the council should consider enacting a change to the protocol on your behalf.\n\nAt some points you will likely need a place for a longer-form discussion. For this, making a [post](https://khala.polkassembly.network/onchain) on [Khala\u2019s Polkassembly](https://khala.polkassembly.network/onchain) is the recommended place to do so. When you write a post on Polkassembly make sure you present all the evidence for your circumstances and state clearly what kind of change you would suggest to the councillors to enact. Remember - the councillors do not need to make the change, it is your responsibility to make a strong case for why the change should be made.", "mimetype": "text/plain", "start_char_idx": 20656, "end_char_idx": 21717, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe2cae98-694d-43dd-ac92-27e3bd43196f": {"__data__": {"id_": "fe2cae98-694d-43dd-ac92-27e3bd43196f", "embedding": null, "metadata": {"file_path": "./phala_dist/how-mirrored-price-feeds-work.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ab0459de-7b89-433f-a2c9-b87d0a7b52a0", "node_type": "4", "metadata": {}, "hash": "e6016b74597ee879e834ce53c6f6dcb1056912c5e7f18903a9f98fefff60b4fe", "class_name": "RelatedNodeInfo"}}, "text": "# How Mirrored Price Feeds Work\n\n<figure><img src=\"../../../.gitbook/assets/image (1) (1) (1).png\" alt=\"\"><figcaption></figcaption></figure>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 140, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fbe4a0d-db61-4e13-8d01-7ad16c687495": {"__data__": {"id_": "9fbe4a0d-db61-4e13-8d01-7ad16c687495", "embedding": null, "metadata": {"file_path": "./phala_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af397169-5eeb-459d-a8e9-71d63650bace", "node_type": "1", "metadata": {}, "hash": "3e148a67afcff516188a47496c86ccadc9ae6a48dfeae4e9b9c0bef2768218e7", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Database\nsidebar_position: 5\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nNethermind uses the [RocksDB](https://rocksdb.org) database to store the state. By default, the database is located in the\nsame directory where the Nethermind executable is. You can change the database location using the [`-d, --baseDbPath`](configuration.md#basic-options) command line option.\n\n## Database directory structure\n\n| Directory         | Description |\n| -                 | - |\n| blockInfos        | Information about blocks at each level of the block tree (canonical chain and branches) |\n| blocks            | Block bodies (block transactions and uncles) |\n| bloom             | Bloom indices for fast log searches |\n| canonicalHashTrie | LES protocol related data |\n| code              | Contract bytecodes |\n| discoveryNodes    | Peers discovered via discovery protocol - used for quick peering after restarts (you can copy this DB between nodes to speed up peering) |\n| headers           | Block headers only |\n| pendingTx         | The second level cache of pending transactions/mempool (the first level is in memory). Wiped out on each restart. |\n| peers             | Additional sync peers information (like peer reputation) - you can copy this DB between nodes to speed up peering on fresh sync |\n| receipts          | Transaction receipts |\n| state             | Blockchain state including accounts and contract storage (Patricia trie nodes) |\n\nYou can use `rsync` between your nodes to clone the database (One of our users copied the entire 4.5TB archive state this\nway while the node was running and only stopped the node for the very last stage of `rsync` ). You can also copy\nthe database between Linux, Windows, and macOS.\n\n## Database size\n\nBelow is a comprehensive list of the supported chains, along with a detailed breakdown of their respective database directories. For reference, the database sizes listed have been determined using the standard configurations provided.\n\n<!--[start autogen]-->\n\n<Tabs>\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\n- `state`: 158 GB\n- `receipts`: 209 GB\n- `blocks`: 595 GB\n- `bloom`: 6.4 GB\n- `headers`: 8.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af397169-5eeb-459d-a8e9-71d63650bace": {"__data__": {"id_": "af397169-5eeb-459d-a8e9-71d63650bace", "embedding": null, "metadata": {"file_path": "./phala_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9fbe4a0d-db61-4e13-8d01-7ad16c687495", "node_type": "1", "metadata": {}, "hash": "00547f8dfeed46bbf7d9fe73c6ae61e8d58328a003d723bc0978734391b6dfe4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50da90de-aef8-4183-b12c-97a41c77c56f", "node_type": "1", "metadata": {}, "hash": "d6b73d81eaf9b3f5be2b905c4425aad5de59234e7a6b7e66e28a39518c926111", "class_name": "RelatedNodeInfo"}}, "text": "9 GB\n- `code`: 4.7 GB\n- `blobTransactions`: 1.7 GB\n- .\n- **Total: 985 GB**\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\n- `state`: 42 GB\n- `receipts`: 39 GB\n- `blocks`: 293 GB\n- `bloom`: 2.1 GB\n- `headers`: 2.3 GB\n- `code`: 6.5 GB\n- `blobTransactions`: 1.3 GB\n- .\n- **Total: 386 GB**\n\n</TabItem>\n<TabItem value=\"holesky\" label=\"Holesky\">\n\n- `state`: 18 GB\n- `receipts`: 14 GB\n- `blocks`: 55 GB\n- `bloom`: 738 MB\n- `headers`: 967 MB\n- `code`: 506 MB\n- `blobTransactions`: 737 MB\n- .\n- **Total: 90 GB**\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\n- `state`: 66 GB\n- `receipts`: 216 GB\n- `blocks`: 199 GB\n- `bloom`: 9.2 GB\n- `headers`: 11 GB\n- `code`: 668 MB\n- `blobTransactions`: 75 MB\n- .\n- **Total: 503 GB**\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\n- `state`: 2.6 GB\n- `receipts`: 1.4 GB\n- `blocks`: 9.0 GB\n- `bloom`: 3.1 GB\n- `headers`: 2.3 GB\n- `code`: 67 MB\n- `blobTransactions`: 656 MB\n- .\n- **Total: 20 GB**\n\n</TabItem>\n<TabItem value=\"energyweb\" label=\"Energyweb\">\n\n- `state`: 27 GB\n- `receipts`: 4.5 GB\n- `blocks`: 25 GB\n- `bloom`: 9.8 GB\n- `headers`: 7.0 GB\n- `code`: 14 MB\n- `blobTransactions`: \n- .", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50da90de-aef8-4183-b12c-97a41c77c56f": {"__data__": {"id_": "50da90de-aef8-4183-b12c-97a41c77c56f", "embedding": null, "metadata": {"file_path": "./phala_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af397169-5eeb-459d-a8e9-71d63650bace", "node_type": "1", "metadata": {}, "hash": "3e148a67afcff516188a47496c86ccadc9ae6a48dfeae4e9b9c0bef2768218e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be5732bc-746e-4a95-9797-dc80c0b2d78a", "node_type": "1", "metadata": {}, "hash": "3d8afa19ae57a2c0893ead5e7d014ad238bf34f0c94dee59a49a8287f9f6f034", "class_name": "RelatedNodeInfo"}}, "text": "- **Total: 75 GB**\n\n</TabItem>\n<TabItem value=\"volta\" label=\"Volta\">\n\n- `state`: 34 GB\n- `receipts`: 8.3 GB\n- `blocks`: 33 GB\n- `bloom`: 9.0 GB\n- `headers`: 6.9 GB\n- `code`: 95 MB\n- `blobTransactions`: \n- .\n- **Total: 93 GB**\n\n</TabItem>\n</Tabs>\n\n<!--[end autogen]-->\n\n## Reducing database size\n\nThe Nethermind database can experience substantial growth over time, starting from an initial size of approximately 650\nGB. As a result, many node setups are configured to run on 1 TB disks. However, even with settings\ndesigned to slow the growth rate, these disks may eventually run out of free space.\n\nThe current options to reduce the database size are as follows:\n\n- [Resyncing database from scratch](sync.md#resync-a-node-from-scratch)\n- [Pruning](pruning.md)\n\nThe table below presents a short comparison of these methods including possible fine-tuning of each method. Data was\nfetched from a node running on a machine with the below specifications:\n\n- **Node.js**: v1.18.0\n- **Consensus client**: Lighthouse\n- **CPU**: AMD EPYC 7713 (16 cores allocated for the VM)\n- **RAM**: 64 GB\n- **Disk size**: 1.2 TB\n- **Disk IOPS**: 70,000 to 80,000\n\n| Metric | Resync | Pruning | Pruning and memory budget (4 GB) |\n| - | - | - | - |\n| **Execution time** | ~4h | ~24h | ~12h |\n| **Minimum free disk space** | N/A. You can execute resync even if there is 0 free space (avoid such a case). | 250 GB | 250 GB |\n| **Attestation rate drop** | 100%. No attestation rewards during that time or highly reduced. | 5\u201310% during that time | N/A |\n| **Average block processing time of new blocks during the process** | N/A. New blocks are processed after state but are significantly slower until old bodies/receipts are downloaded.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be5732bc-746e-4a95-9797-dc80c0b2d78a": {"__data__": {"id_": "be5732bc-746e-4a95-9797-dc80c0b2d78a", "embedding": null, "metadata": {"file_path": "./phala_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50da90de-aef8-4183-b12c-97a41c77c56f", "node_type": "1", "metadata": {}, "hash": "d6b73d81eaf9b3f5be2b905c4425aad5de59234e7a6b7e66e28a39518c926111", "class_name": "RelatedNodeInfo"}}, "text": "Afterward, average about 0.35s. | 0.7s | 1.0s |\n| **Is the node online during the process?** | No, unless the state is synced. | Yes. The node follows the chain, and all modules are still enabled. | Yes. The node follows chain and all modules are still enabled. |\n\nThe command used for testing disk IOPS was as follows:\n\n```bash\nfio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --filename=test --bs=4k --iodepth=64 --size=4G --readwrite=randrw\n```", "mimetype": "text/plain", "start_char_idx": 5053, "end_char_idx": 5527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c325e3bf-b323-4719-89d6-4a69384a5b5a": {"__data__": {"id_": "c325e3bf-b323-4719-89d6-4a69384a5b5a", "embedding": null, "metadata": {"file_path": "./phala_dist/phala-agent-gateway.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "be7fe169-5433-4cef-b642-ace6510db393", "node_type": "4", "metadata": {}, "hash": "80513acbb0edcb98487870fbbb6c9266143ae3d9cf67bb8b393b3ab6f302c944", "class_name": "RelatedNodeInfo"}}, "text": "# Phala Agent Gateway\n\nThe Phala Agent Gateway is a solution that converts typical HTTP request into AI Agent Contract requests to execute in a decentralized TEE node on Phala Network.\n\n|                 | SideVM QuickJS                           | WapoJS (Latest)                                |\n| --------------- | ---------------------------------------- | ---------------------------------------------- |\n| **Gateway URL** | https://agents.phala.network/ipfs/\\<CID> | https://wapo-testnet.phala.network/ipfs/\\<CID> |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "797863b2-c049-453a-9e2e-3af09f089fbc": {"__data__": {"id_": "797863b2-c049-453a-9e2e-3af09f089fbc", "embedding": null, "metadata": {"file_path": "./phala_dist/get-pha-and-transfer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0ed3677-f3f9-4bea-ac51-39ff6f2bce01", "node_type": "4", "metadata": {}, "hash": "7b3cb528e43bf51432e0c0223438a6997270f9ee308dd83a18f50c090e4a1d29", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff19f9a0-ccfd-45df-b8b9-b902a061bb90", "node_type": "1", "metadata": {}, "hash": "93cbe9f0d7e0253e7ba11bb2dcc6c4800143777473099877b01ee99d841e4231", "class_name": "RelatedNodeInfo"}}, "text": "# Acquiring PHA\n\nPHA token is the native token of Phala Network. Its uses include paying gas fees on the blockchain, performing governance, and staking. To learn more about PHA's uses and utility, head to the [PHA Token](../../overview/pha-token/) section of the docs.\n\n## Get your Phala Tokens (PHA) <a href=\"#get-your-phala-tokens-pha\" id=\"get-your-phala-tokens-pha\"></a>\n\nIf you do not hold any PHA, you can purchase PHA from any of the following exchanges:\n\n* <img src=\"../../.gitbook/assets/1-Binance.png\" alt=\"\" data-size=\"line\"> [Binance](https://www.binance.com/en)\n* <img src=\"../../.gitbook/assets/kraken.jpeg\" alt=\"\" data-size=\"line\"> [Kraken](https://www.kraken.com/prices/pha-phala-price-chart/eur-euro?interval=1m)\n* <img src=\"../../.gitbook/assets/3-OKEx.png\" alt=\"\" data-size=\"line\"> [OKEX](https://www.okex.com/trade-spot/pha-usdt)\n* <img src=\"../../.gitbook/assets/2-Huobi.png\" alt=\"\" data-size=\"line\"> [Huobi](https://www.huobi.com/en-us/exchange/pha\\_usdt)\n* <img src=\"../../.gitbook/assets/4-KuCoin.png\" alt=\"\" data-size=\"line\"> [Kucoin](https://trade.kucoin.com/PHA-USDT)\n* <img src=\"../../.gitbook/assets/7-Gate.png\" alt=\"\" data-size=\"line\"> [Gate.io](https://www.gate.io/trade/PHA\\_USDT)\n\n> Not all brokers may be available in your jurisdiction. Note that some brokers require you to have an account with them for a certain period before you can transfer your funds to another wallet, such as the [Khala Wallet](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkhala-api.phala.network%2Fws#/accounts).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff19f9a0-ccfd-45df-b8b9-b902a061bb90": {"__data__": {"id_": "ff19f9a0-ccfd-45df-b8b9-b902a061bb90", "embedding": null, "metadata": {"file_path": "./phala_dist/get-pha-and-transfer.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0ed3677-f3f9-4bea-ac51-39ff6f2bce01", "node_type": "4", "metadata": {}, "hash": "7b3cb528e43bf51432e0c0223438a6997270f9ee308dd83a18f50c090e4a1d29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "797863b2-c049-453a-9e2e-3af09f089fbc", "node_type": "1", "metadata": {}, "hash": "79b7d565ee583eaf41e46d89ed7b6a75f0678d549e044b156e9253247f57a204", "class_name": "RelatedNodeInfo"}}, "text": "## Transfer PHA to and from Other Chains <a href=\"#transfer-pha-fromto-other-chains\" id=\"transfer-pha-fromto-other-chains\"></a>\n\nFor now, you can transfer your PHA between Ethereum, Khala, and Phala, as well as several other Parachains with [SubBridge](../subbridge/). Refer to the introduction and our tutorial for more details.", "mimetype": "text/plain", "start_char_idx": 1524, "end_char_idx": 1853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2acb024c-4cad-48c1-8747-24b521c66a62": {"__data__": {"id_": "2acb024c-4cad-48c1-8747-24b521c66a62", "embedding": null, "metadata": {"file_path": "./phala_dist/use-pink-extension.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f167efb6-c80a-460a-8550-1b104e5a08ef", "node_type": "4", "metadata": {}, "hash": "7361ceb73be4b6929d937766cf5e0ce04553af4c93f10d5bb3efb27930c75c28", "class_name": "RelatedNodeInfo"}}, "text": "# Use Pink Extension\n\n### Introduction <a href=\"#introduction\" id=\"introduction\"></a>\n\nAll the unique capabilities of Phat Contract are implemented in [pink-extension](https://github.com/Phala-Network/phala-blockchain/tree/master/crates/pink). Informally speaking:\n\n$$\nPhat\\ Contract = ink! + Pink\\ Extension\n$$\n\nIt is worth noting that the Phat Contract is not a trivial extension of ink! contract since all these extra functions only work under the off-chain computation.\n\n### Pink Extension Functions <a href=\"#pink-extension-functions\" id=\"pink-extension-functions\"></a>\n\n| Functionality   | Function Name            | Query Support | Transaction Support |\n| --------------- | ------------------------ | ------------- | ------------------- |\n| Internet Access | http\\_request            | \u2705             | \u274c                   |\n| Crypto          | getrandom                | \u2705             | \u274c                   |\n|                 | ecdsa\\_sign\\_prehashed   | \u2705             | \u2705                   |\n|                 | ecdsa\\_verify\\_prehashed | \u2705             | \u2705                   |\n|                 | sign (ecdsa/ed25519)     | \u2705             | \u2705                   |\n|                 | sign (sr25519)           | \u2705             | \u274c                   |\n|                 | verify                   | \u2705             | \u2705                   |\n|                 | derive\\_sr25519\\_key     | \u2705             | \u2705                   |\n|                 | get\\_public\\_key         | \u2705             | \u2705                   |\n| Volatile Cache  | cache\\_set               | \u2705             | \u2705                   |\n|                 | cache\\_set\\_expire       | \u2705             | \u2705                   |\n|                 | cache\\_get               | \u2705             | \u274c                   |\n|                 | cache\\_remove            | \u2705             | \u2705                   |\n| Misc            | log                      | \u2705             | \u2705                   |\n|                 | is\\_running\\_in\\_command | \u2705             | \u2705                   |\n\nRefer to our [Phat Hello World](https://github.com/Phala-Network/phat-hello/blob/master/lib.rs) contract to see how you can import these functions to your contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b50c0166-c9dd-46ce-aed6-d4d2a241551d": {"__data__": {"id_": "b50c0166-c9dd-46ce-aed6-d4d2a241551d", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc499656-68a1-445a-841d-4cb884ebf933", "node_type": "1", "metadata": {}, "hash": "1f7601f29ea0b3bdddd1f4bbebffb41edbe7071f57af2b77db056abbee1ed1dc", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Installing Nethermind\nsidebar_position: 2\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nNethermind can be installed in several ways:\n\n- [Via a package manager](#package-managers)\n- [As a standalone download](#standalone-downloads)\n- [As a Docker container](#docker-container)\n- [By building from source code](../developers/building-from-source.md)\n\n## Prerequisites\n\n:::info\nDoes not apply to Docker distributions.\n:::\n\nBefore installing Nethermind, your specific platform might need the following prerequisites.\n\n<Tabs groupId=\"os\">\n<TabItem value=\"linux\" label=\"Linux\">None</TabItem>\n<TabItem value=\"windows\" label=\"Windows\">\n\nAlthough the modern versions of Windows are bundled with a recent version of [Microsoft Visual C++ Redistributable](https://aka.ms/vcredist), in some cases, it may need an update:\n\n```powershell\nwinget install Microsoft.VCRedist.2015+.x64\n```\n\n</TabItem>\n<TabItem value=\"macos\" label=\"macOS\">None</TabItem>\n</Tabs>\n\n## Package managers\n\nPackage managers are the easiest and fastest way of installing Nethermind.\n\n:::tip\nIf you're using a package manager, it's highly recommended to set the `-dd, --datadir` flag to specify the data directory. Otherwise, Nethermind will use the default data directory where the package is installed, which may not be preserved on further updates or uninstall.\n:::\n\n<Tabs groupId=\"os\">\n<TabItem value=\"linux\" label=\"Linux\">\n\nOn Ubuntu and other Linux distros supporting PPA, Nethermind can be installed via Launchpad PPA.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc499656-68a1-445a-841d-4cb884ebf933": {"__data__": {"id_": "dc499656-68a1-445a-841d-4cb884ebf933", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b50c0166-c9dd-46ce-aed6-d4d2a241551d", "node_type": "1", "metadata": {}, "hash": "32e4569f7506f1c3b0611f4e8783ec29c0e443354786947f6827d4ddd89a3e9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4b38f36-3594-4ca8-b0a9-b81291158f20", "node_type": "1", "metadata": {}, "hash": "9b3d5fe27bd10918f4dba2efef74cfa76c3368f9af94ee3c35e0424ddfb7355c", "class_name": "RelatedNodeInfo"}}, "text": "First, add the Nethermind repository:\n\n```bash\nsudo add-apt-repository ppa:nethermindeth/nethermind\n```\n\n:::note\nIf the command is not found, run:\n\n```bash\nsudo apt-get install software-properties-common\n```\n\n:::\n\nThen, install Nethermind as follows:\n\n```bash\nsudo apt-get update\nsudo apt-get install nethermind\n```\n\n</TabItem>\n<TabItem value=\"windows\" label=\"Windows\">\n\nOn Windows, Nethermind can be installed via Windows Package Manager as follows:\n\n```powershell\nwinget install nethermind\n```\n\n</TabItem>\n<TabItem value=\"macos\" label=\"macOS\">\n\nOn macOS, Nethermind can be installed via Homebrew.\n\nFirst, add the Nethermind repository:\n\n```sh\nbrew tap nethermindeth/nethermind\n```\n\nThen, install Nethermind as follows:\n\n```sh\nbrew install nethermind\n```\n\n</TabItem>\n</Tabs>\n\nFor further instructions, see [Running Nethermind](#running).\n\n## Standalone downloads\n\nStandalone downloads give users more flexibility by allowing them to install a specific version of Nethermind, choose the installation location, and prevent automatic updates.\n\nStandalone downloads are available on [GitHub Releases](https://github.com/NethermindEth/nethermind/releases) and at [downloads.nethermind.io](https://downloads.nethermind.io) as ZIP archives for x64 and AArch64 (ARM64) CPU architectures for Linux, Windows, and macOS.\n\n### Configuring as a Linux service\n\nTo install Nethermind as a Linux service, see the [nethermind.service](https://github.com/NethermindEth/nethermind/blob/master/scripts/nethermind.service) unit file as an example.\nAs it's configured to run Nethermind as the specific user and group and looks for the executable in a predefined location, the following steps need to be fulfilled:\n\n:::note\nAny of these steps can be omitted by replacing them with corresponding changes in the unit file.\nFor instance, if you want to run Nethermind as a different user, change the `User` and `Group` options in the unit file.\n:::\n\n1.", "mimetype": "text/plain", "start_char_idx": 1525, "end_char_idx": 3452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4b38f36-3594-4ca8-b0a9-b81291158f20": {"__data__": {"id_": "d4b38f36-3594-4ca8-b0a9-b81291158f20", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc499656-68a1-445a-841d-4cb884ebf933", "node_type": "1", "metadata": {}, "hash": "1f7601f29ea0b3bdddd1f4bbebffb41edbe7071f57af2b77db056abbee1ed1dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "28728dd6-bebe-4095-8ca6-3fe03c944f7a", "node_type": "1", "metadata": {}, "hash": "e0931f9719cd81068ad30ffcda2e304db43facbe6d5cad45d7f1f796d0643c84", "class_name": "RelatedNodeInfo"}}, "text": "Create a new user and group:\n\n   ```bash\n     # Create a new user and group\n     sudo useradd -m -s /bin/bash nethermind\n\n     # Increase the maximum number of open files\n     sudo bash -c 'echo \"nethermind soft nofile 100000\" > /etc/security/limits.d/nethermind.conf'\n     sudo bash -c 'echo \"nethermind hard nofile 100000\" >> /etc/security/limits.d/nethermind.conf'\n\n     # Switch to the nethermind user\n     sudo su -l nethermind\n\n     # Create required directories\n     # Note that the home directory (~) is now /home/nethermind\n     mkdir ~/build\n     mkdir ~/data\n   ```\n\n2. [Download Nethermind](#standalone-downloads) and extract the package contents to the `~/build` directory.\n3. Configure options in the `~/.env` file:\n\n   ```bash title=\"~/.env\"\n   # Required\n   NETHERMIND_CONFIG=\"mainnet\"\n\n   # Optional\n   NETHERMIND_HEALTHCHECKSCONFIG_ENABLED=\"true\"\n   ```\n\nNow, let's set up the Linux service:\n\n```bash\n# Download the unit file\ncurl -L https://raw.githubusercontent.com/NethermindEth/nethermind/master/scripts/nethermind.service -o nethermind.service\n\n# Move the unit file to the systemd directory\nsudo mv nethermind.service /etc/systemd/system\n\n# Reload the systemd daemon\nsudo systemctl daemon-reload\n\n# Start the service\nsudo systemctl start nethermind\n\n# Optionally, enable the service to start on boot\nsudo systemctl enable nethermind\n```\n\nTo ensure the service is up and running, check its status as follows:\n\n```bash\nsudo systemctl status nethermind\n```\n\nTo monitor the Nethermind output, run:\n\n```bash\njournalctl -u nethermind -f\n```\n\nFor further instructions, see [Running Nethermind](#running).\n\n## Docker container\n\nThe Docker images of Nethermind are available on [Docker Hub](https://hub.docker.com/r/nethermind/nethermind).", "mimetype": "text/plain", "start_char_idx": 3453, "end_char_idx": 5206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28728dd6-bebe-4095-8ca6-3fe03c944f7a": {"__data__": {"id_": "28728dd6-bebe-4095-8ca6-3fe03c944f7a", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4b38f36-3594-4ca8-b0a9-b81291158f20", "node_type": "1", "metadata": {}, "hash": "9b3d5fe27bd10918f4dba2efef74cfa76c3368f9af94ee3c35e0424ddfb7355c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aff21859-24c1-4e65-8c3b-70d57f0edf19", "node_type": "1", "metadata": {}, "hash": "fd5cdb4ff54ab59c1634b8e31ab98380d67e7b66369d9f4d013d650ad93b0d7b", "class_name": "RelatedNodeInfo"}}, "text": "This registry provides production versions of Nethermind with 3 types of tags:\n\n- `nethermind/nethermind:latest` is the latest version of Nethermind (the default tag)\n- `nethermind/nethermind:<version>` is the specific version of Nethermind where `<version>` is the actual version of Nethermind.\n- `nethermind/nethermind:<version>-chiseled` is a _rootless_ and [chiseled](https://ubuntu.com/engage/chiselled-ubuntu-images-for-containers) image with the specific version of Nethermind where `<version>` is either `latest` or the actual version of Nethermind.\\\n  For security reasons, this image contains only the absolutely necessary components and is intended to run as a non-root `app` user with UID/GID of `64198`.\n\nTo download the image from the registry, run:\n\n```bash\ndocker pull nethermind/nethermind\n```\n\nStarting a node is achieved by:\n\n```bash\ndocker run -it nethermind/nethermind\n```\n\nThe following ports are exposed by default:\n\n- `8545`: TCP, for the JSON-RPC interface\n- `8551`: TCP, for the consensus client JSON-RPC interface\n- `30303`: TCP and UDP, for P2P networking\n\n:::tip\nIt's highly recommended to mount data volumes as the Nethermind's data directories to ensure the synced data is preserved between the container restarts.", "mimetype": "text/plain", "start_char_idx": 5208, "end_char_idx": 6453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aff21859-24c1-4e65-8c3b-70d57f0edf19": {"__data__": {"id_": "aff21859-24c1-4e65-8c3b-70d57f0edf19", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "28728dd6-bebe-4095-8ca6-3fe03c944f7a", "node_type": "1", "metadata": {}, "hash": "e0931f9719cd81068ad30ffcda2e304db43facbe6d5cad45d7f1f796d0643c84", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bcd7ca2e-539b-4416-8ddc-e2e165cd77e6", "node_type": "1", "metadata": {}, "hash": "9f2f23e06b456905bb888107d1edf8aa21f2aec52a64cc46fa12abe11f2eca97", "class_name": "RelatedNodeInfo"}}, "text": ":::\n\nThe following volume mount points are available by default:\n\n- `/nethermind/nethermind_db`: used to store the database\n- `/nethermind/logs`: used to store the logs\n- `/nethermind/keystore`: used to store the keys\n\nTo mount separate volumes for each directory listed above, run:\n\n```bash\ndocker run -it \\\n  --mount type=bind,source=path/to/db,target=/nethermind/nethermind_db \\\n  --mount type=bind,source=path/to/logs,target=/nethermind/logs \\\n  --mount type=bind,source=path/to/keystore,target=/nethermind/keystore \\\n  nethermind/nethermind\n```\n\nAlternatively, a single volume can be specified as the Nethermind data directory as follows:\n\n```bash\ndocker run -it \\\n  --mount type=bind,source=path/to/data_dir,target=/nethermind/data_dir \\\n  nethermind/nethermind -dd /nethermind/data_dir\n```\n\nNote that any Nethermind-specific configuration option can be specified at the end. For instance, the `-dd` option in this case. For further instructions, see [Running Nethermind](#running).\n\nTo build the Docker image yourself, see [Building Docker image](../developers/building-from-source.md#bulding-docker-image).\n\n## Running Nethermind {#running}\n\n:::warning Important\n\n- A [consensus client](consensus-clients.md) of your choice must be running before you start Nethermind.\n- Please check out the [security considerations](../fundamentals/security.md) before using Nethermind for critical operations.\n  :::\n\nNethermind is mainly controlled by command line options (aka arguments or flags).\n\nThe full list of options can be displayed by running:\n\n```bash\nnethermind -h\n```\n\nFor instance, to launch the client with the default configuration for the Mainnet and custom data directory, run:\n\n```bash\nnethermind -c mainnet -dd path/to/data/dir\n```\n\nFor detailed info about the available configuration options, see [Configuration](../fundamentals/configuration.md).\n\n### Supported networks\n\nTo run Nethermind on a specific network, use the [`-c, --config`](../fundamentals/configuration.md#basic-options) command line option.", "mimetype": "text/plain", "start_char_idx": 6454, "end_char_idx": 8476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcd7ca2e-539b-4416-8ddc-e2e165cd77e6": {"__data__": {"id_": "bcd7ca2e-539b-4416-8ddc-e2e165cd77e6", "embedding": null, "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aff21859-24c1-4e65-8c3b-70d57f0edf19", "node_type": "1", "metadata": {}, "hash": "fd5cdb4ff54ab59c1634b8e31ab98380d67e7b66369d9f4d013d650ad93b0d7b", "class_name": "RelatedNodeInfo"}}, "text": "Currently, the following networks are supported out of the box:\n\n- **Ethereum**\n  - [Mainnet](https://ethereum.org/en/developers/docs/networks/#ethereum-mainnet)\n  - [Holesky](https://github.com/eth-clients/holesky) (testnet)\n  - [Sepolia](https://ethereum.org/en/developers/docs/networks/#sepolia) (testnet)\n- **Base**\n  - [Base Mainnet](https://docs.base.org/network-information/#base-mainnet)\n  - [Base Sepolia](https://docs.base.org/network-information/#base-testnet-sepolia) (testnet)\n- **Energy Web Chain**\n  - [Energy Web](https://energy-web-foundation.gitbook.io/energy-web/ew-dos-technology-components-2023/trust-layer-energy-web-chain)\n  - [Volta](https://energy-web-foundation.gitbook.io/energy-web/ew-dos-technology-components-2023/trust-layer-energy-web-chain/ewc-guides-and-tutorials/testnet-and-mainnet#developing-on-volta-test-network) (testnet)\n- **Gnosis Chain**\n  - [Gnosis](https://docs.gnosischain.com/about/networks/mainnet)\n  - [Chiado](https://docs.gnosischain.com/about/networks/chiado) (testnet)\n- **Optimism**\n  - [OP Mainnet](https://docs.optimism.io/chain/networks#op-mainnet)\n  - [OP Sepolia](https://docs.optimism.io/chain/networks#op-sepolia) (testnet)", "mimetype": "text/plain", "start_char_idx": 8477, "end_char_idx": 9661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd41fe07-378b-4969-96e4-a122c41aa9b4": {"__data__": {"id_": "dd41fe07-378b-4969-96e4-a122c41aa9b4", "embedding": null, "metadata": {"file_path": "./phala_dist/update-your-workers-node.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b9bfa6af-f3fe-4c78-b3c5-4cf8d0ca4d63", "node_type": "4", "metadata": {}, "hash": "00726ec9face0bde828881098d0e3dc81b0e5230f7e025cbb4831df08837a78c", "class_name": "RelatedNodeInfo"}}, "text": "# Update your Worker's Node\n\nTo upgrade your worker requires it to stop first.\n\n```\nsudo phala stop\n```\n\nThe worker node can be updated in a clean way which removes all the saved data\n\n```\nsudo phala update clean\n```\n\nor with the data preserved\n\n```\nsudo phala update\n```\n\nFinally, restart your worker with:\n\n```\nsudo phala start\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a8ad005-20f1-4c77-a940-be030694cdf6": {"__data__": {"id_": "4a8ad005-20f1-4c77-a940-be030694cdf6", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-share.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "291b61a9-70b7-4770-bd18-cf66d3f52508", "node_type": "4", "metadata": {}, "hash": "48b33ae9f8f7bfa3261f9fb8618e03611fdfcc5f832a47dbe6b15b376f8a3e7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8600772c-ce20-4308-87f8-33b00ba0d920", "node_type": "1", "metadata": {}, "hash": "d2163fa1c01e1a0464a5e55fb95154b162f5de377d5fc4e15870850d4c842077", "class_name": "RelatedNodeInfo"}}, "text": "# What is Share\n\nHere is a universal concept in the Stakepool and Vault: **Share**\n\nA user\u2019s \u2018Share\u2019 is a conversion unit that records the ratio of their contribution to a given pool. When delegator rewards are distributed, the rewards are evenly distributed to each Share to realize the distribution of rewards to each delegation in the Stakepool.\n\n## Share has a Price\n\nPrice means \u201cHow much PHA is worth for each Share\u201d, A \u2018unit price\u2019 refers to the total value of your share of PHA in a pool.\n\nPrice = Total Value / Total Share\n\n* Total Value: How many PHAs (delegation) are there in the pool:\n* Total Share: How many Shares are there in the pool:\n\nTwo values above of the pool ( either Stakepool or Vault) will be stored on chain. Therefore, Share in different pools have different price.\n\nPrice will not be impacted by withdrawals or the actions of delegates. Fluctuations will only occur due to slashing and the allocation of rewards in the pool. Please note slashing is not currently active.\n\nWhen rewards are allocated, the total delegation of the pool will increase, but the shares will not change, thus the price of each Share will rise. Likewise, slash will cause the share price to decrease.\n\n## How Share Changes\n\nOnly two factors can affect shares, delegations and withdrawals.\n\nThe change of Share will only happen when the user delegates or withdraws from the pool, and when different delegators delegate to the pool respectively, it will change the proportion of delegations owned by delegators in the pool by continuously issuing shares. When the delegators want to withdraw the delegation, it will withdraw the corresponding PHA from the pool to the delegators through the real-time share price.\n\nDespite one exception, Vault shares will be issued when Vault owners receive their rewards, at which point the shares will also increase.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1854, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8600772c-ce20-4308-87f8-33b00ba0d920": {"__data__": {"id_": "8600772c-ce20-4308-87f8-33b00ba0d920", "embedding": null, "metadata": {"file_path": "./phala_dist/whats-share.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "291b61a9-70b7-4770-bd18-cf66d3f52508", "node_type": "4", "metadata": {}, "hash": "48b33ae9f8f7bfa3261f9fb8618e03611fdfcc5f832a47dbe6b15b376f8a3e7b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a8ad005-20f1-4c77-a940-be030694cdf6", "node_type": "1", "metadata": {}, "hash": "3e3a96221345cf8034d29f295fc2b1ca1e518dd28ec71a1d164858a33a5321c6", "class_name": "RelatedNodeInfo"}}, "text": "[Learn more about Vault](whats-vault.md)\n\nHere is an example:\n\n| Action                           | Delegation in Vault | Total Share | Share price | remarks                                             |\n| -------------------------------- | ------------------- | ----------- | ----------- | --------------------------------------------------- |\n| Tom Create the Vault #001        | 0                   | 0           | 1           | The initial price is 1                              |\n| Bob delegates 10000 $PHA in #001 | 10000               | 10000       | 1           | Bob has 1000 Shares                                 |\n| #001 earned 50 $PHA rewards      | 10050               | 10000       | 1.005       | Bob still has 1000 Shares                           |\n| Jack delegates 3000 $PHA in #001 | 13050               | 12985.07    | 1.005       | Jack has 2,985.07 shares because the price is 1.005 |\n| Tom execute the commission(5%)   | 13050               | 12988.3     | 1.00475     | Tom got 3.23 Shares as the Vault owner reward       |", "mimetype": "text/plain", "start_char_idx": 1855, "end_char_idx": 2904, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "435a881f-1221-4151-a1b6-dcf8d31e409b": {"__data__": {"id_": "435a881f-1221-4151-a1b6-dcf8d31e409b", "embedding": null, "metadata": {"file_path": "./phala_dist/supported-chains.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9867c265-0338-4b6b-8f01-daf3431d1045", "node_type": "4", "metadata": {}, "hash": "ab084365bc6d3f34471aed9bef4ae57e703e8f5b71f4da67fb3f9336d2102968", "class_name": "RelatedNodeInfo"}}, "text": "# \u26d3\ufe0f Supported Chains\n\nAI Agent Contract can technically connect to any blockchain for reading and writing operations, as it can effortlessly read from arbitrary blockchain nodes and trigger signed transactions via RPC calls. However, in practice, supporting a specific blockchain requires the corresponding AI Agent Contract RPC client, serialization library, and signing library to facilitate read and write operations. Presently, EVM and Substrate blockchains have more extensive library support.\n\n## EVM Blockchains\n\nAt the Native AI Agent Contract level, it is possible to interact with any EVM-compatible blockchains through their RPC nodes, including:\n\n* Ethereum\n* Polygon\n* Arbitrum\n* BSC\n* Optimism\n* Base\n* any other EVM-compatible blockchains\n\nLearn more in the advanced topic section.\n\n## Substrate Blockchains\n\nNative AI Agent Contract fully supports Substrate-based blockchains, including:\n\n* Polkadot\n* Kusama\n* Phala Network\n* Astar\n* any other Substrate-based blockchains\n\nYou can learn more about AI Agent Contract's cross-chain capabilities and how to implement them in the advanced topics section:\n\n[cross-chain-solutions.md](../references/advanced-topics/cross-chain-solutions.md \"mention\")\n\n## Expanding Support to Additional Blockchains\n\nSupporting additional blockchains does not necessitate any changes to Phala Network's infrastructure. Developers can independently implement their RPC client, serialization, and signing libraries in Native AI Agent Contract and share them with the community.\n\nThe following blockchains are expected to receive support soon:\n\n* Cosmos-based blockchains\n* Solana\n* Move-based blockchains\n\nLet us know which blockchain you would like to see supported in the `#ai-agent-contract` channel on our [Discord server](https://discord.gg/phala-network).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2fb192e-e045-45b1-9d6c-a1a026b57e3e": {"__data__": {"id_": "b2fb192e-e045-45b1-9d6c-a1a026b57e3e", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "966a0a73-de05-49b7-9d2f-3856f6b27860", "node_type": "1", "metadata": {}, "hash": "c80ea0a95652a8a6a00c211573617fcb35cfe71295644e5203e02f2d088dbeb7", "class_name": "RelatedNodeInfo"}}, "text": "# Gemini Tokenomics (Worker Rewards)\n\nThis document contains the _Supply-end Tokenomics_ for Phala Network, which defines how workers get their rewards by sharing the computing power.\n\nTo read about how Demand-end users can stake PHA to use the network, see [Stake to Compute](staking-mechanism.md).\n\n> After the approval of the \u201cGemini Tokenomics upgrade\" democratic referendum on the block height #1,467,069, we have updated the content of the Supply-end Tokenomics as follows:\n\n## Design Targets <a href=\"#design-targets\" id=\"design-targets\"></a>\n\nThe overall economic design is built to address these points:\n\n1. Support Phala Network\u2019s trustless cloud computing architecture\n   * Consensus-Computation Separation\n   * Linearly-scalable computing workers (100k order of magnitude number of workers)\n2. Incentivize workers to join the network\n   * Ensure payment for power supplied irrespective of demand, especially at network bootstrap\n   * Subsidize mining pool with 70% of the initial supply over time\n   * Bitcoin-like budget halving schedule\n   * Power the Phala and Khala at the same time\n3. Application pricing\n4. On-chain performance\n\nThe following details some key elements of the economic model.\n\n## Overall Design <a href=\"#overall-design\" id=\"overall-design\"></a>\n\n### Related Workers\n\nPhala Supply-end Tokenomics applies to any workers running on Phala or Khala.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "966a0a73-de05-49b7-9d2f-3856f6b27860": {"__data__": {"id_": "966a0a73-de05-49b7-9d2f-3856f6b27860", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2fb192e-e045-45b1-9d6c-a1a026b57e3e", "node_type": "1", "metadata": {}, "hash": "524d26d8fcc943d2ce558801ef292c0d5b5e26c29899895c86c343e5179fcd6b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c42509bd-dfec-486a-bfe9-45356b96822e", "node_type": "1", "metadata": {}, "hash": "7f801c1ac94e65d8883affcda8b39c713516487f468431f5708fd26cfb5dbb41", "class_name": "RelatedNodeInfo"}}, "text": "### Value Promise $$(V)$$ <a href=\"#value-promise-v\" id=\"value-promise-v\"></a>\n\n* A virtual score for an individual worker representing value earned which is payable in the future, to motivate workers to behave honestly and reliably\n* Equal to the expected value of the revenues earned by the worker for providing power for the platform\n* Changes dynamically based on the worker\u2019s behaviors and the repayment of Rewards\n  * Mining honestly: $$V$$ grows gradually over time\n  * Harmful conduct: punished by reduction of $$V$$\n\n### Initial $$V$$ <a href=\"#initial-v\" id=\"initial-v\"></a>\n\nA Worker will run a _**Performance Test**_ and stake some tokens to get the initial $$V$$:\n\n$$\nV^e = f(R^e, \\text{ConfidenceScore}) \\times (S + C)\n$$\n\n* $$R^e > 1$$ is a _**Stake Multiplier**_ set by the network (Khala or Phala).\n* $$S$$ is the worker stake; a _**Minimum Stake**_ is required to start mining. The stake can\u2019t be increased or decreased while mining, but can be set higher than the Minimum.\n* $$C$$ is the estimated cost of the worker rigs, inferred from the _**Performance Test**_.\n* $$\\text{ConfidenceScore}$$ is based on the worker\u2019s Intel\u00a9 SGX capabilities.\n* $$f(R^e, \\text{ConfidenceScore}) = 1 + (\\text{ConfidenceScore} \\cdot (R^e - 1))$$\n* $$V$$ is always less than or equals to $$V_{max}$$.", "mimetype": "text/plain", "start_char_idx": 1381, "end_char_idx": 2681, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c42509bd-dfec-486a-bfe9-45356b96822e": {"__data__": {"id_": "c42509bd-dfec-486a-bfe9-45356b96822e", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "966a0a73-de05-49b7-9d2f-3856f6b27860", "node_type": "1", "metadata": {}, "hash": "c80ea0a95652a8a6a00c211573617fcb35cfe71295644e5203e02f2d088dbeb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef82c5f4-908f-4a2d-bac1-ac482202154a", "node_type": "1", "metadata": {}, "hash": "c591123cff47f5b6d819940ee03b3f87e04bcc2d580e4a627ae65a28393220ab", "class_name": "RelatedNodeInfo"}}, "text": "Params used in simulation:\n\n* $$R^e_{\\text{Phala}} =R^e_{\\text{Khala}} = 1.5$$\n* $$\\text{ConfidenceScore}$$ for different Confidence Levels\n  * $$\\text{ConfidenceScore}_{1,2,3} = 1$$\n  * $$\\text{ConfidenceScore}_{4} = 0.8$$\n  * $$\\text{ConfidenceScore}_{5} = 0.7$$\n* $$V_{max} = 30000$$\n\n### Performance Test <a href=\"#performance-test\" id=\"performance-test\"></a>\n\nA performance test measures how much computation can be done in a unit of time:\n\n$$\nP = \\frac{\\text{Iterations}}{\\Delta t}\n$$\n\nFor reference,\n\n| Platform               | Cores | Score | Approximate Price |\n| ---------------------- | ----- | ----- | ----------------- |\n| Low-End Celeron        | 4     | 450   | $150              |\n| Intel Xeon E Processor | 6     | 1900  | $500              |\n| Mid-End i5 10-Gen      | 8     | 2000  | $500              |\n| High-End i9 9-Gen      | 10    | 2800  | $790              |\n\n> The table is based on the version while writing of this documentation and is subject to changes.\n\nThe performance test will be performed:\n\n1. **Before mining** to determine the _**Minimum Stake**_\n2.", "mimetype": "text/plain", "start_char_idx": 2683, "end_char_idx": 3771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef82c5f4-908f-4a2d-bac1-ac482202154a": {"__data__": {"id_": "ef82c5f4-908f-4a2d-bac1-ac482202154a", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c42509bd-dfec-486a-bfe9-45356b96822e", "node_type": "1", "metadata": {}, "hash": "7f801c1ac94e65d8883affcda8b39c713516487f468431f5708fd26cfb5dbb41", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f2037b8-cdd9-44d6-bc72-5d448f766637", "node_type": "1", "metadata": {}, "hash": "6dca44f3be4af235cb5ba6062c8dd58131c7e735043e8a15e4ede77f6bca65bc", "class_name": "RelatedNodeInfo"}}, "text": "**During mining** to measure the current performance, and to adjust the $V$ increment dynamically\n\n### Minimum Stake <a href=\"#minimum-stake\" id=\"minimum-stake\"></a>\n\n$$\nS_{min}=k \\sqrt{P}\n$$\n\n* $$P$$ - _**Performance Test**_ score\n* $$k$$ - adjustable multiplier factor\n\nProposed parameter:\n\n* $$k_{\\text{Phala}} =k_{\\text{Khala}} = 50$$\n\n> Locked state $PHA token can also be used for mining staking, e.g., Khala Crowdloan reward\n\n### Cost <a href=\"#cost\" id=\"cost\"></a>\n\n$$\nC = \\frac{0.3 P}{\\phi}\n$$\n\n* $$\\phi$$ is the current PHA/USD quote, dynamically updated on-chain via Oracles\n* $$P$$ is the initial _**Performance Test**_ score.\n* In the early stages, we are compensating the equipment cost $$C$$ with a higher Value Promise.\n* In the future, we plan to compensate for higher amortization costs (adding equipment amortization cost to the running costs $$c^i$$ and $$c^a$$), thus increasing the speed of growth of the Worker\u2019s $$V$$.\n\n### General mining process <a href=\"#general-mining-process\" id=\"general-mining-process\"></a>\n\n![](https://i.imgur.com/IpEnlGR.png)\n\n![](https://i.imgur.com/zKWAI1S.png)\n\nEach individual\u2019s $$V$$ is updated at every block:\n\n* Increased by $$\\Delta V_t$$ if the worker keeps mining\n* Decreased by $$w(V_t)$$ if the worker got a payout\n* Decreased according to the _**Slash Rules**_ if the worker misbehaves\n\nWhen a worker gets a payout $$w(V_t)$$, they will receive the amount immediately in their Phala wallet. The payout follows _**Payout Schedule**_ and cannot exceed the _**Subsidy Budget**_.\n\nFinally, once the worker decides to stop mining, they will wait for a Cooling Down period $\\delta$. They will receive an one-time final payout after the cooldown.", "mimetype": "text/plain", "start_char_idx": 3772, "end_char_idx": 5474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f2037b8-cdd9-44d6-bc72-5d448f766637": {"__data__": {"id_": "9f2037b8-cdd9-44d6-bc72-5d448f766637", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef82c5f4-908f-4a2d-bac1-ac482202154a", "node_type": "1", "metadata": {}, "hash": "c591123cff47f5b6d819940ee03b3f87e04bcc2d580e4a627ae65a28393220ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1a8b4a6-a9a4-4fcf-b1fd-41a8eabd8f39", "node_type": "1", "metadata": {}, "hash": "c632d8d2d675a7d2c8917b7a54b78273d7a194594625f259fd40f59935c1331d", "class_name": "RelatedNodeInfo"}}, "text": "| Block number  | $t$          | $t+1$         | $\\dots$ | $T$          | $\\dots$                         | $T+\\delta$               |\n| ------------- | ------------ | ------------- | ------- | ------------ | ------------------------------- | ------------------------ |\n| Value Promise | $V\\_t$       | $V\\_{t+1}$    | $\\dots$ | $V\\_T$       | $\\dots$                         | $\\dots$                  |\n| Payment       | $w(V\\_t)$    | $w(V\\_{t+1})$ | $\\dots$ | $w(V\\_T)$    | $0$                             | $\\kappa \\min(V\\_T, V^e)$ |\n|               | Block reward | \u2026             | \u2026       | Block reward | Cooling off for $\\delta$ blocks | Final payout             |\n\nProposed parameter:\n\n* $$\\delta = \\text{blocks equivalent to 7 days}$$\n\n### Update of $$V$$ <a href=\"#update-of-v\" id=\"update-of-v\"></a>\n\nWhen there\u2019s no payout or slash event:\n\n$$\n\\Delta V_t = k_p \\cdot \\big((\\rho^m - 1) V_t + c(s_t) + \\gamma(V_t)h(V_t)\\big)\n$$\n\n* $$ho^m$$ is the unconditional $$V$$ increment factor for worker\n* $$c(s_t)$$ is the operational cost to run the worker\n* $$\\gamma(V_t)h(V_t)$$ represents a factor to compensate for accidental/unintentional slashing (ignored in simulated charts)\n* $$k_p = \\min(\\frac{P_t}{P}, 120\\%)$$, where $$P_t$$ is the instant performance score, and $P$ is the initial score\n* If $$V > V_{max}$$ after the update, it will be capped to $$V_{max}$$\n\nProposed parameters:\n\n* $$ho^m_{\\text{Phala}} =\\rho^m_{\\text{Khala}} = 1.00020$$ (hourly)\n\n### Payout Event <a href=\"#payout-event\" id=\"payout-event\"></a>\n\nIn order to stay within the subsidy budget,", "mimetype": "text/plain", "start_char_idx": 5476, "end_char_idx": 7052, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1a8b4a6-a9a4-4fcf-b1fd-41a8eabd8f39": {"__data__": {"id_": "c1a8b4a6-a9a4-4fcf-b1fd-41a8eabd8f39", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f2037b8-cdd9-44d6-bc72-5d448f766637", "node_type": "1", "metadata": {}, "hash": "6dca44f3be4af235cb5ba6062c8dd58131c7e735043e8a15e4ede77f6bca65bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ed4e0dd-766e-4e0e-9674-64e03aa7d045", "node_type": "1", "metadata": {}, "hash": "af7ee7267756d0183e1b25a3f083cf8edd0657d65b844a7ae62990db33562afa", "class_name": "RelatedNodeInfo"}}, "text": "at every block the budget is distributed proportionally based on the current _**Worker Shares**_:\n\n$$\nw(V_t) = B \\frac{\\text{share}}{\\Sigma \\text{share}}\n$$\n\nwhere $$B$$ is the current network subsidy budget for the given payout period.\n\nWhenever $$w(V_t)$$ is paid to a worker, his $$V$$ will be updated accordingly:\n\n$$\n\\Delta V = -min(w(V_t),V_t-V_\\text{last}).\n$$\n\n$$V_\\text{last}$$ is the value promised at the last payout event, or $$V^e$$ if this is the first payout.\n\n> The update of V is limited to ensure the payout doesn\u2019t cause $$V$$ to drop lower than it was in the last payout event. The limit is necessary to make sure workers are well incentives to always accumulate credits in the network. Otherwise, workers are incentivized to constantly reset their mining session if V decreases over time.\n\nShare represents how much the worker is paid out from $$V$$. We expect it will approximate the share baseline, but with minor adjustments to reflect the property of the worker:\n\n$$\n\\text{share}_{\\text{Baseline}} = V_t.\n$$\n\n$$\\Sigma \\text{share}$$ contains the share of workers which are running on Phala or Khala with the same subsidy ratio.", "mimetype": "text/plain", "start_char_idx": 7053, "end_char_idx": 8205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ed4e0dd-766e-4e0e-9674-64e03aa7d045": {"__data__": {"id_": "6ed4e0dd-766e-4e0e-9674-64e03aa7d045", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1a8b4a6-a9a4-4fcf-b1fd-41a8eabd8f39", "node_type": "1", "metadata": {}, "hash": "c632d8d2d675a7d2c8917b7a54b78273d7a194594625f259fd40f59935c1331d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05278d8f-8207-45f0-9e94-2977eb8914e3", "node_type": "1", "metadata": {}, "hash": "ad7b7ab34cdef67c88641d1a5e99b6803a1c2d7f3600c895bf4293575c124596", "class_name": "RelatedNodeInfo"}}, "text": "Proposed algorithm:\n\n* $$\\text{share}_{\\text{Khala}} = \\sqrt{V_t^2 + (2 P_t \\cdot \\text{ConfidenceScore})^2}$$\n* $$\\text{share}_{\\text{Phala}} = \\sqrt{V_t^2 + (2 P_t \\cdot \\text{ConfidenceScore})^2}$$\n* $$P_t$$ is the instant performance score\n\n### Subsidy Budget <a href=\"#subsidy-budget\" id=\"subsidy-budget\"></a>\n\n|                    | Phala / Khala    |\n| ------------------ | ---------------- |\n| Relaychain         | Polkadot/ Kusama |\n| Budget for Mining  | 700 mln          |\n| Halving Period     | 180 days         |\n| Halving Discount   | 25%              |\n| Treasure Share     | 20%              |\n| First Month Reward | 21.6 mln         |\n\n### Heartbeat & Payout Schedule <a href=\"#heartbeat--payout-schedule\" id=\"heartbeat--payout-schedule\"></a>\n\nIn any block $$t$$, if the Worker\u2019s VRF is smaller than their current Heartbeat Threshold $$\\gamma(V_t)$$, they must send the Heartbeat transaction to the chain, which will update the on-chain record of their Value Promise and send a Mining Reward $$w(V_t)$$ to their reward wallet:\n\n$$\n\\Delta V_t = - w(V_t).\n$$\n\nIf they fail to send the Heartbeat transaction to the chain within the challenge window, the update of their value promise will be\n\n$$\n\\Delta V_t = - h(V_t).\n$$\n\nand their status is changed to _unresponsive_, and they will get repeatedly punished until they send a heartbeat, or stop mining. The slash amount $$h$$ is defined in the _**Slash**_ section.\n\nThe target is to process around 20 heartbeat challenges per block. The heartbeat challenge probability $$\\gamma(V_t)$$ will be adjusted to target this number of challenges.\n\nPotential parameters:\n\n* $$\\text{ChallengeWindow} = 10$$ (blocks)\n\n### Slash rules <a href=\"#slash-rules\" id=\"slash-rules\"></a>\n\nThe slash rules for workers are defined below. No slash rules have been implemented at the moment but will start in the near future.", "mimetype": "text/plain", "start_char_idx": 8207, "end_char_idx": 10072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05278d8f-8207-45f0-9e94-2977eb8914e3": {"__data__": {"id_": "05278d8f-8207-45f0-9e94-2977eb8914e3", "embedding": null, "metadata": {"file_path": "./phala_dist/worker-rewards.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9", "node_type": "4", "metadata": {}, "hash": "7d077d9a6befec03a5bbbc286c29c6fa9d802987bed5169424bd6450abc102ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ed4e0dd-766e-4e0e-9674-64e03aa7d045", "node_type": "1", "metadata": {}, "hash": "af7ee7267756d0183e1b25a3f083cf8edd0657d65b844a7ae62990db33562afa", "class_name": "RelatedNodeInfo"}}, "text": "| Severity | Fault                               | Punishment                                |\n| -------- | ----------------------------------- | ----------------------------------------- |\n| Level1   | Worker offline                      | 0.1% V per hour (deducted block by block) |\n| Level2   | Good faith with bad result          | 1% from V                                 |\n| Level3   | Malicious intent or mass error      | 10% from V                                |\n| Level4   | Serious security risk to the system | 100% from V                               |\n\n### Final payout <a href=\"#final-payout\" id=\"final-payout\"></a>\n\nWhen a worker chooses to disconnect from the platform, they send an Exit Transaction and receive their Severance Pay after $$\\delta$$ blocks.\n\nAfter the cooling down period, the worker gets their final payout, representing the return of the initial stake. However, if $$V_T$$ goes lower than the initial $$V^e$$, the worker will get less stake returned as a punishment:\n\n$$\nw(T + \\sigma) = \\min(\\frac{V_T}{V^e}, 100\\%) \\cdot S\n$$\n\nwhere $$S$$ is the initial stake.", "mimetype": "text/plain", "start_char_idx": 10074, "end_char_idx": 11174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a2ac467-dcba-4d09-819c-3898d180a74b": {"__data__": {"id_": "7a2ac467-dcba-4d09-819c-3898d180a74b", "embedding": null, "metadata": {"file_path": "./phala_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "21203c61-c7da-41b2-8f73-0810b135078b", "node_type": "1", "metadata": {}, "hash": "ac4b4b907d8d610f0cb00b07f39858820a2e8054f1641bcf8f2dda2ac16bd081", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Consensus clients\nsidebar_position: 3\n---\n\nEthereum's long-awaited shift from proof-of-work (PoW) to proof-of-stake (PoS) known as The Merge happened on September 15, 2022, and came with fundamental changes to the network. The most notable change is the addition of the consensus layer (aka Beacon Chain) which replaced the PoW mining. It is coordinating and pseudorandomly selecting block producers from the pool of stakers/validators in a way that makes it extremely difficult for validators to coordinate attacks on the network.\nThe Merge changed how operators run nodes on the Ethereum blockchain. A node now needs two clients that work together as a pair. In addition to the [execution client](https://ethereum.org/en/glossary/#execution-client) (e.g., Nethermind), you need a [consensus client](https://ethereum.org/en/glossary/#consensus-client) that connects to the consensus layer and runs the PoS algorithm. This guide shows how to run an Ethereum node with Nethermind and a consensus client of your choice.\n\n:::tip\nAn easy way to run both consensus and execution clients is with [Sedge](https://docs.sedge.nethermind.io). Sedge is a setup tool for PoS validators and nodes that runs on Linux and macOS.\n:::\n\n## Choosing a consensus client\n\nOn the consensus layer, there are 5 client implementations to choose from. Though all consensus clients are great, check them out yourself to find the one best suited to your needs.\n\n- [Grandine][grandine]\n- [Lighthouse][lighthouse]\n- [Lodestar][lodestar]\n- [Nimbus][nimbus]\n- [Prysm][prysm]\n- [Teku][teku]\n\n:::warning Important\nWe urge you to take [client diversity](https://ethereum.org/en/developers/docs/nodes-and-clients/client-diversity) into consideration when choosing your consensus client and avoid the majority clients.\n:::\n\n## Configuring JSON-RPC interface\n\nExecution and consensus clients communicate via an authenticated endpoint specified in Engine JSON-RPC API. In order to connect to a consensus client, the execution client must generate a [JWT](https://jwt.io) secret at a known path.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21203c61-c7da-41b2-8f73-0810b135078b": {"__data__": {"id_": "21203c61-c7da-41b2-8f73-0810b135078b", "embedding": null, "metadata": {"file_path": "./phala_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a2ac467-dcba-4d09-819c-3898d180a74b", "node_type": "1", "metadata": {}, "hash": "86e2156c32e5870264a110ceddf37e0f7816d0ee1937fd4eaf82bb121e8a4038", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5bc2dbbb-119d-4685-ba81-9b9da65b8bb1", "node_type": "1", "metadata": {}, "hash": "b69bf87cd044abb80f5fff488e31150c743b37ef0bf9dec396f5cf4434edde2c", "class_name": "RelatedNodeInfo"}}, "text": "Although the secret is generated automatically by Nethermind on startup at `keystore/jwt-secret` path in its root directory, in some cases, you might need to do it yourself. You can generate one using [OpenSSL](https://www.openssl.org):\n\n```bash\nopenssl rand -hex 32 > path/to/jwt.hex\n```\n:::note\nSince the JWT secret is simply a 64-character hex value, there are many other ways of generating it, including online resources. However, for security reasons, we recommend using OpenSSL.\n:::\n\nThe generated JWT secret can be specified with the `--JsonRpc.JwtSecretFile path/to/jwt.hex` command line option. For more configuration options, see [Engine API](../interacting/json-rpc-server.md#engine-api).\n\n## Running the consensus client\n\nThis step assumes that you have already [installed](../get-started/installing-nethermind.md) Nethermind, the [consensus client](#choosing-a-consensus-client) of your choice, and, optionally, created the [JWT secret](#configuring-json-rpc-interface).\n\n:::info\nAs syncing from the scratch can take a very long time on some networks (up to several days), the commands below optionally use [checkpoint sync](https://ethereum.org/en/developers/docs/nodes-and-clients/#checkpoint-sync) to speed up the process.\n:::\n\n### Grandine\n\n```bash\ngrandine \\\n  --network mainnet \\\n  --eth1-rpc-urls http://localhost:8551 \\\n  --jwt-secret path/to/jwt.hex \\\n  --checkpoint-sync-url https://beaconstate.ethstaker.cc\n```\n\nThe command above runs Grandine on Mainnet. For other networks, set the `--network` and `--checkpoint-sync-url` options accordingly. See the [Grandine documentation][grandine] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Lighthouse\n\n```bash\nlighthouse bn \\\n  --network mainnet \\\n  --execution-endpoint http://localhost:8551 \\\n  --execution-jwt path/to/jwt.hex \\\n  --checkpoint-sync-url https://mainnet.checkpoint.sigp.io \\\n  --http\n```\n\nThe command above runs Lighthouse on Mainnet. For other networks, set the `--network` and `--checkpoint-sync-url` options accordingly.", "mimetype": "text/plain", "start_char_idx": 2067, "end_char_idx": 4101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bc2dbbb-119d-4685-ba81-9b9da65b8bb1": {"__data__": {"id_": "5bc2dbbb-119d-4685-ba81-9b9da65b8bb1", "embedding": null, "metadata": {"file_path": "./phala_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "21203c61-c7da-41b2-8f73-0810b135078b", "node_type": "1", "metadata": {}, "hash": "ac4b4b907d8d610f0cb00b07f39858820a2e8054f1641bcf8f2dda2ac16bd081", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ead1f6e-ad84-41de-b72c-661c77fe39bf", "node_type": "1", "metadata": {}, "hash": "962451a72edea4f98bb44ea894cda45ca10fa98b2f35d19c8db204118227b4fe", "class_name": "RelatedNodeInfo"}}, "text": "See the [Lighthouse documentation][lighthouse] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Lodestar\n\n```bash\nlodestar beacon \\\n  --network mainnet \\\n  --jwt-secret path/to/jwt.hex \\\n  --checkpointSyncUrl https://beaconstate-mainnet.chainsafe.io\n```\n\nThe command above runs Lodestar on Mainnet. For other networks, set the `--network` and `--checkpointSyncUrl` options accordingly. See the [Lodestar documentation][lodestar] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Nimbus\n\n```bash\n./run-mainnet-beacon-node.sh \\\n  --web3-url=http://127.0.0.1:8551 \\\n  --jwt-secret=path/to/jwt.hex\n```\n\nThe command above runs Numbus on Mainnet without checkpoint sync. For checkpoint sync, see [Sync from a trusted node](https://nimbus.guide/trusted-node-sync.html). For other networks, see the [Nimbus documentation][nimbus].\n\n### Prysm\n\n```bash\n./prysm.sh beacon-chain \\\n  --mainnet \\\n  --execution-endpoint=http://localhost:8551 \\\n  --jwt-secret=path/to/jwt.hex \\\n  --checkpoint-sync-url=https://beaconstate.ethstaker.cc \\\n  --genesis-beacon-api-url=https://beaconstate.ethstaker.cc\n```\n\nThe command above runs Prysm on Mainnet. For other networks, replace the `--mainnet` and set `--checkpoint-sync-url` and `--genesis-beacon-api-url` options accordingly. See the [Prysm documentation][prysm] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Teku\n\n```bash\nteku \\\n  --network=mainnet \\\n  --ee-endpoint=http://localhost:8551 \\\n  --ee-jwt-secret-file=path/to/jwt.hex \\\n  --metrics-enabled=true \\\n  --rest-api-enabled=true \\\n  --initial-state=https://beaconstate.ethstaker.cc\n```\n\nThe command above runs Teku on Mainnet. For other networks, set the `--network` and `--initial-state` options accordingly. See the [Teku documentation][teku] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].", "mimetype": "text/plain", "start_char_idx": 4102, "end_char_idx": 5971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ead1f6e-ad84-41de-b72c-661c77fe39bf": {"__data__": {"id_": "7ead1f6e-ad84-41de-b72c-661c77fe39bf", "embedding": null, "metadata": {"file_path": "./phala_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5bc2dbbb-119d-4685-ba81-9b9da65b8bb1", "node_type": "1", "metadata": {}, "hash": "b69bf87cd044abb80f5fff488e31150c743b37ef0bf9dec396f5cf4434edde2c", "class_name": "RelatedNodeInfo"}}, "text": "## Running Nethermind\n\n:::warning Important\nThe consensus client must be running before you start Nethermind.\n:::\n\n```bash\nnethermind \\\n  -c mainnet \\\n  --JsonRpc.JwtSecretFile path/to/jwt.hex\n```\n\nThe command above runs Nethermind on Mainnet. For other networks, set the `-c` option accordingly. For more info, see [Running Nethermind](../get-started/installing-nethermind.md#running).\n\n[checkpoint-sync-endpoints]: https://eth-clients.github.io/checkpoint-sync-endpoints\n[grandine]: https://docs.grandine.io\n[lighthouse]: https://lighthouse-book.sigmaprime.io\n[lodestar]: https://chainsafe.github.io/lodestar\n[nimbus]: https://nimbus.guide\n[prysm]: https://docs.prylabs.network\n[teku]: https://docs.teku.consensys.net", "mimetype": "text/plain", "start_char_idx": 5973, "end_char_idx": 6692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "410a567e-6d07-439c-bdbf-d307965e07ea": {"__data__": {"id_": "410a567e-6d07-439c-bdbf-d307965e07ea", "embedding": null, "metadata": {"file_path": "./phala_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65162b19-7509-40b7-b080-cb74e3dfc0ba", "node_type": "1", "metadata": {}, "hash": "05ada783c5ccbb9e02c138af864a1c6c8f27a21c8ca9858a35e7e68e147661ee", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Pruning\nsidebar_position: 6\n---\n\n## Overview\n\nPruning pertains to eliminating or cleaning obsolete historical data to optimize disk space. Clients are responsible for maintaining the world state, which comprises a database that portrays the current Ethereum network status. The world state encompasses accounts, contracts, and other information.\n\nPruning aims to reduce disk requirements by storing only the current world state and removing historical data. This differs from archive nodes that retain complete transaction and state history. Pruning is helpful for users who don't require historical data and prefer to interact solely with the current state of the network. However, pruning may limit the client's ability to fulfill requests that depend on historical information. Nethermind provides two kinds of pruning \u2013 _full pruning_ and _in-memory pruning_; both are enabled by default, also called _hybrid pruning_.\n\n## How it works\n\nDuring synchronization using the snap sync method, Nethermind produces a local copy of the Ethereum network state. Although this size increases by around 30 GB each week, specific historical data is retained that is not necessary for node operation or to maintain the current Ethereum state. For a detailed description of the disk usage usage, check out the [database size](./database.md#database-size).\n\nWhen full pruning is activated and initiated, a thorough examination of the entire state tree is conducted to determine which data is no longer required and can be treated as historical. It then determines which information corresponds to the current state and duplicates it alongside the existing version. During verification of each node in the state, the new pruned state replaces the previous one. Once the verifier confirms everything is functioning correctly, the old state database is eliminated, resulting in significant savings in disk space. As a result, the size of the database will be close to its initial size again.\n\nIn-memory pruning is a continuous process that occurs under regular operation. Instead of saving a new state on each block, Nethermind will keep it in memory until a certain threshold is reached. At that point, Nethermind will only store data required by the newer state and discard unnecessary ones. This significantly reduces the total amount of data written while improving block processing performance. In-memory pruning is independent of full pruning.\n\n## Preparation for full pruning\n\nBecause full pruning is executed while the node is connected to the network, it can affect the node's performance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65162b19-7509-40b7-b080-cb74e3dfc0ba": {"__data__": {"id_": "65162b19-7509-40b7-b080-cb74e3dfc0ba", "embedding": null, "metadata": {"file_path": "./phala_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "410a567e-6d07-439c-bdbf-d307965e07ea", "node_type": "1", "metadata": {}, "hash": "af24121be50fcaf33f2dd7a49e39dd4df9479d5593ec1fc34d4198cdb8ee2afc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "443285f6-6082-4858-9fc8-8f0c0a19c562", "node_type": "1", "metadata": {}, "hash": "856d623a3d9d5579b6b65dc8b59b290b4dc06ca33057f2bcf23d4053570e6938", "class_name": "RelatedNodeInfo"}}, "text": "The process can consume significant memory, CPU, and disk resources, impacting block processing time.\nThis, in turn, can lead to reduced rewards for validator setups, particularly for proof-of-stake chains.\n\nCurrently, full pruning takes between 20 to 30 hours to complete, although the duration may vary based on the hardware configuration. At least 200 GB of storage is required to ensure pruning runs smoothly. Nevertheless, it's recommended to have 300 GB or more.\n\n:::warning Important\nDo not turn on full pruning on an archive node, as these are two opposing features. Archive nodes are designed to store\ncomplete historical data, whereas full pruning eliminates it. Use the option `--Pruning.Mode None` to ensure that pruning is turned off completely.\n:::\n\n## Configuring full pruning\n\nAs a very first point, check out the [pruning configuration options](./configuration.md#pruning).\\\nTo activate full pruning, use either the `--Pruning.Mode Hybrid` or `--Pruning.Mode Full` command line options.\n\n:::info\nSetting `--Pruning.Mode Hybrid` enables both `InMemory` and `Full` modes. The `InMemory` mode helps the node storage grow slower than the `Full` mode. Because of this, full pruning is executed less frequently, promoting\nhealthier disk operation. Since full pruning is hardware-intensive, this configuration also benefits attestation results.\n:::\n\nThe next step is to determine the trigger conditions for full pruning. Currently, there are 3 options available:\n\n- [Manual](#manual)\n- [State database size threshold](#state-db-threshold)\n- [Remaining storage space threshold](#storage-left-threshold)\n\n### Manual\n\nManual mode triggers full pruning only upon request, providing complete control. To configure this mode, use the following options: `--Pruning.Mode Hybrid --Pruning.FullPruningTrigger Manual`.\n\nPruning can also be triggered using the [`admin_prune`](../interacting/json-rpc-ns/admin.md#admin_prune) JSON-RPC method. Here's how to configure it:\n\n- Add the `admin` namespace to `--JsonRpc.EnabledModules`.", "mimetype": "text/plain", "start_char_idx": 2595, "end_char_idx": 4623, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "443285f6-6082-4858-9fc8-8f0c0a19c562": {"__data__": {"id_": "443285f6-6082-4858-9fc8-8f0c0a19c562", "embedding": null, "metadata": {"file_path": "./phala_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65162b19-7509-40b7-b080-cb74e3dfc0ba", "node_type": "1", "metadata": {}, "hash": "05ada783c5ccbb9e02c138af864a1c6c8f27a21c8ca9858a35e7e68e147661ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4527295f-9551-4dbf-9e79-b78b948dd324", "node_type": "1", "metadata": {}, "hash": "608546e8a5264cb184acf7cf9e5d0e72b6940f1008d9643b4193558c81a81e1e", "class_name": "RelatedNodeInfo"}}, "text": "For instance,\\\n  `--JsonRpc.EnabledModules [eth,net,...,admin]`\n- Create a separate port for `admin` namespace only:\\\n  `--JsonRpc.AdditionalRpcUrls http://localhost:8555|http|admin`\n\nRestart the client, and if everything is configured correctly, you should be able to call the `admin_prune` method, and full pruning should start.\n\n:::info\nOne potential disadvantage of the manual mode is that if full pruning is not triggered on time, it cannot be performed later because of insufficient disk space. In such cases, the only option to free up the disk space is to resync the node from scratch.\n:::\n\n### State database size threshold {#state-db-threshold}\n\nThis mode triggers full pruning automatically when the state database reaches the specified size.\nTo enable this mode, use the following options: `--Pruning.Mode Hybrid --Pruning.FullPruningTrigger StateDbSize --Pruning.FullPruningThresholdMb 256000`, where the value of `Pruning.FullPruningThresholdMb` should be set based on your requirements.\n\nThe above configuration triggers full pruning automatically whenever the state database size exceeds 256,000\nMB (250 GB). Assuming the state database has initially around 160 GB, pruning will be triggered when the database size grows by more than 90 GB.\n\n:::tip\nTo avoid unexpected behavior and ensure that full pruning can be completed in full, it's recommended to set the threshold value to trigger pruning before the free disk space drops below 250 GB as a minimum. This ensures that sufficient free disk space is available for the pruning process.\n:::\n\n### Remaining storage space threshold {#storage-left-threshold}\n\n:::note\nThis is the recommended approach as it ensures that pruning is executed on time.\n:::\n\nThis mode triggers full pruning when the storage space reaches the specified minimum. To enable this mode, use the following options: `--Pruning.Mode Hybrid --Pruning.FullPruningTrigger VolumeFreeSpace --Pruning.FullPruningThresholdMb 256000`, where the value of `Pruning.FullPruningThresholdMb` should be set based on your requirements. However, it should not be set below the default value of `256000`.\n\nThe above configuration triggers full pruning whenever free disk space drops to 256,000 MB (250 GB) or below.", "mimetype": "text/plain", "start_char_idx": 4624, "end_char_idx": 6858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4527295f-9551-4dbf-9e79-b78b948dd324": {"__data__": {"id_": "4527295f-9551-4dbf-9e79-b78b948dd324", "embedding": null, "metadata": {"file_path": "./phala_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "443285f6-6082-4858-9fc8-8f0c0a19c562", "node_type": "1", "metadata": {}, "hash": "856d623a3d9d5579b6b65dc8b59b290b4dc06ca33057f2bcf23d4053570e6938", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7eb7adf-8ffe-4def-bb3f-0c5c03a486c6", "node_type": "1", "metadata": {}, "hash": "1f8005e2f53da80a2fc803893a426b0fb3e4fb1f7a67d4a7598290ff9ab32c78", "class_name": "RelatedNodeInfo"}}, "text": "This ensures that pruning is invoked as infrequently as possible while also ensuring that sufficient free storage is always available to trigger it.\n\n:::warning\nIt's recommended not to set the value below 250 GB for stability reasons. In reality, full pruning should require approximately the same amount of storage as a fresh state database (around 160 GB). Still, it also needs a threshold for processing and other operations since it creates a copy of the existing state database. Therefore, it's essential to maintain a minimum amount of storage to ensure a robust pruning performance.\n:::\n\n## Monitoring progress\n\nWhen full pruning is triggered correctly, the corresponding messages appear in the Nethermind logs.\n\nThe very first ones should be:\n\n```\nFull Pruning Ready to start: pruning garbage before state <block number> with root <hash>.\nWARN: Full Pruning Started on root hash <hash>: do not close the node until finished or progress will be lost.\n```\n\nFrom that moment, ensure that no restarts will be performed on Nethermind to ensure that full pruning runs correctly.\nAfter a few minutes first logs with progress would start to appear. For instance:\n\n```\nFull Pruning In Progress: 00:00:57.0603307 1.00 mln nodes mirrored.\nFull Pruning In Progress: 00:01:40.3677103 2.00 mln nodes mirrored.\nFull Pruning In Progress: 00:02:25.6437030 3.00 mln nodes mirrored.\n```\n\nPruning may take even _more than 30 hours_, depending on hardware configuration.\n\nWhen pruning is completed, there is a log message similar the following:\n\n```\nFull Pruning Finished: 15:25:59.1620756 1,560.29 mln nodes mirrored.\n```\n\nAs you may notice, it took around 15 hours in this example.\n\n:::info\nSince the amount of mirrored nodes is not a static value, providing a simple progress indicator in percentage is impossible. Therefore, the approximate value given should be used to determine when full pruning is expected to be completed.\n:::\n\n## Additional settings\n\n### Memory budget\n\nThe `Pruning.FullPruningMemoryBudgetMb` configuration option controls the memory budget allocated for the trie visit during\nthe full pruning process. During pruning, pending nodes are queued to a pool of nodes whose size is determined by this value.", "mimetype": "text/plain", "start_char_idx": 6859, "end_char_idx": 9075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7eb7adf-8ffe-4def-bb3f-0c5c03a486c6": {"__data__": {"id_": "e7eb7adf-8ffe-4def-bb3f-0c5c03a486c6", "embedding": null, "metadata": {"file_path": "./phala_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4527295f-9551-4dbf-9e79-b78b948dd324", "node_type": "1", "metadata": {}, "hash": "608546e8a5264cb184acf7cf9e5d0e72b6940f1008d9643b4193558c81a81e1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75618a35-55e3-4121-8300-0cf9f9e2851f", "node_type": "1", "metadata": {}, "hash": "ea142ed274e00e8a16543db8bf8de4813983d535f9c065cd4bfa81368f1c191f", "class_name": "RelatedNodeInfo"}}, "text": "This allows multiple nodes to share a single I/O. By increasing this value, the required read IOP per second can be significantly reduced, resulting in a faster full pruning operation. However, this improvement comes at the expense of increased memory usage.\n\nAssuming your system has 64GB of RAM, with Nethermind, the consensus client, and system expenses consuming 20GB,\nyou need to determine the maximum value for `Pruning.FullPruningMemoryBudgetMb` while ensuring the system remains stable and respects the given limit. In this case, you have 44 GB (64 GB - 20 GB) of available memory for increasing the `Pruning.FullPruningMemoryBudgetMb` value. To calculate the maximum value in MB, multiply the available memory by 1024: `44 GB * 1024 = 45,056 MB`\n\n:::info\nBecause of the workload on Ethereum Mainnet, setting the value of `Pruning.FullPruningMemoryBudgetMb` higher than 16 GB may not provide any additional performance benefits.\n:::\n\nPlease note that this example assumes the remaining 44 GB of memory is sufficient for the full pruning memory budget.\nDepending on the specific use case and system requirements, it may be necessary to adjust the value further to optimize performance and resource usage.\n\n### Pruning completion behavior\n\nThe `Pruning.FullPruningCompletionBehavior` configuration option determines Nethermind's behavior after full pruning is completed. By default, Nethermind will continue to progress as usual. However, if a user wishes to shut down the node after pruning, there are three options available:\n\n- `None`: No action taken\n- `ShutdownOnSuccess`: Nethermind shuts down if pruning succeeds\n- `AlwaysShutdown`: Nethermind shuts down once pruning completes, regardless of whether it succeeds or fails\n\n### Number of pruning concurrent tasks\n\nThe `Pruning.FullPruningMaxDegreeOfParallelism` configuration option determines the number of parallel tasks/threads that can be used by pruning:\n\n- `-1`: uses the number of logical processors\n- `0`: uses 25% of logical processors\n- `1`: runs on a single thread\n\nThe recommended value depends on the type of node being used. If the node needs to be responsive (e.g., RPC or validator), using a value below the number of logical processors is recommended.", "mimetype": "text/plain", "start_char_idx": 9076, "end_char_idx": 11306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75618a35-55e3-4121-8300-0cf9f9e2851f": {"__data__": {"id_": "75618a35-55e3-4121-8300-0cf9f9e2851f", "embedding": null, "metadata": {"file_path": "./phala_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7eb7adf-8ffe-4def-bb3f-0c5c03a486c6", "node_type": "1", "metadata": {}, "hash": "1f8005e2f53da80a2fc803893a426b0fb3e4fb1f7a67d4a7598290ff9ab32c78", "class_name": "RelatedNodeInfo"}}, "text": "The default value is recommended if the node doesn't have many other responsibilities but needs to follow the chain without delays and produce live logs reliably. If the node doesn't need to be responsive, has very fast I/O (such as NVMe), and the shortest pruning time\nis desired, this can be set to 2\u20133 times the number of logical processors.\n\n### In-memory cache size\n\nThe `Pruning.CacheMb` configuration option determines the size, in MB, of the memory pool of nodes used for in-memory pruning. The default value is 1024. Increasing this value can help reduce the rate at which the state database grows.\n\n## Side notes\n\nFor pruning, keep in mind the following:\n\n- Full pruning is a cumbersome task, but it's performed in the background, so the node continues progressing and following the chain.\n- The process' heaviness may affect the effectiveness of the validator rewards. Still, since it's executed only once every few months, it shouldn't have a significant impact on overall results (we've xperienced approximately 5\u201310% loss of rewards during full pruning).\n- Ensure that your storage has at least 250 GB of free space after syncing the node. Otherwise, full pruning will never complete successfully.\n- Several things can be done to reduce the size of the database after syncing: setting `Sync.AncientBodiesBarrier` and `Sync.AncientReceiptsBarrier` to a proper value higher than 0, using a consensus client that requires less storage, and setting logs to the lowest level to avoid log spamming.", "mimetype": "text/plain", "start_char_idx": 11307, "end_char_idx": 12813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "303b15da-e483-4cd9-928a-738ddd27f190": {"__data__": {"id_": "303b15da-e483-4cd9-928a-738ddd27f190", "embedding": null, "metadata": {"file_path": "./phala_dist/apply-for-project-funding.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ac0b7c7-522b-4138-a761-9e88bfd1f6ad", "node_type": "4", "metadata": {}, "hash": "f4d482db5ae76ad96312870f0aacd8dd40772a0c03f3185857fb1e77b9bee798", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5bc43f19-eaf9-4347-8afd-cb05a2704f45", "node_type": "1", "metadata": {}, "hash": "fc43be3bcaa86a5546ba5568488c67a7fffbe960bd60015619e978a6e1d517a8", "class_name": "RelatedNodeInfo"}}, "text": "# Apply for Project Funding\n\n<figure><img src=\"../../../.gitbook/assets/spending-proposal.png\" alt=\"\"><figcaption></figcaption></figure>\n\nThe Khala Treasury is a pot of funds collected through transaction fees, slashing, that can be spent by submitting a spending proposal that, if approved by the Council, will enter a waiting period before distribution.\n\nProposals may consist of (but not limited to):\n\n* Infrastructure deployment and continued operation;\n* Network security operations (monitoring services, continuous auditing);\n* Ecosystem provisions (collaborations with friendly chains);\n* Marketing activities (advertising, paid features, collaborations);\n* Community events and outreach (meetups, hackerspaces);\n* Projects focusing on the relationship between technology and art;\n* Software development (wallets and wallet integration, clients and client upgrades);\n* Ecosystem growth (Research program, Community plans).\n\nThe treasury is ultimately controlled by the Council, and how funds are spent is up to their judgment. But it is open to use for everyone willing to answer the question: **How can my project contribute to Khala\u2019s vision?** The Council attempts to spend as many proposals in the queue as it can without running out of funds.\n\nMake sure to be active on all channels and talk to your Council members to discuss your idea. Ultimately, the success of your proposal depends on the idea behind it but we suggest following these steps to cover the process:\n\n1. Join our communication channels to talk to Council members directly. To access the channels please create a [Discord](https://discord.com/) account if you do not have one yet.\\\n   [Khala Direction](https://discord.gg/GCuCrr3N): discusses Governance and initiatives of the Khala network, including any submissions to the treasury.\n2. Council members have agreed on a list of elements to be included to better-assess the quality of a submission. This is only a recommendation; however, this type of structure increases the chances of an informed discussion. A proposal template can be found here for you to use as a guide.\\\n   **Note: Your proposal should address a problem, a goal and an instrument to achieve this goal.** Think about your project in the mid and long-term and make sure to include notes about any type of funding required after development to maintain the project.\n3.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bc43f19-eaf9-4347-8afd-cb05a2704f45": {"__data__": {"id_": "5bc43f19-eaf9-4347-8afd-cb05a2704f45", "embedding": null, "metadata": {"file_path": "./phala_dist/apply-for-project-funding.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ac0b7c7-522b-4138-a761-9e88bfd1f6ad", "node_type": "4", "metadata": {}, "hash": "f4d482db5ae76ad96312870f0aacd8dd40772a0c03f3185857fb1e77b9bee798", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "303b15da-e483-4cd9-928a-738ddd27f190", "node_type": "1", "metadata": {}, "hash": "4184508bebfe754797280fab2fed5a1e8450ea6ed174169ad84d1c1b4538c06a", "class_name": "RelatedNodeInfo"}}, "text": "In order to keep an organized record of the feedback related to a proposal, the Council advises to make sure all information is included on one of the available forums. One option is to open a new post on the [discussions tab](https://khala.subsquare.io/discussions) in **Subsquare** or open a post in [Phala Forum](https://forum.phala.network/c/51-category/59-category/59). Once the post is published, share it along with your initial message on the Direction channel to open the discussion.\n   * Make sure you include an accessible link to your proposal document in your message for the Council.\n   * Be ready to answer questions on the forums and on the channels.\n\n**The process of applying for a technical bounty:** [https://github.com/Phala-Network/phala-bounty-tracker](https://github.com/Phala-Network/phala-bounty-tracker)", "mimetype": "text/plain", "start_char_idx": 2368, "end_char_idx": 3198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0b86f80-8d10-48f0-8cd5-9875a067ff77": {"__data__": {"id_": "d0b86f80-8d10-48f0-8cd5-9875a067ff77", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62481a09-6006-4f5f-a32b-4f05319d99c1", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: eth namespace\nsidebar_label: eth\nsidebar_position: 3\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### eth_blobBaseFee\n\nReturns the base fee per blob gas in wei\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_blobBaseFee\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_blockNumber\n\nReturns current block number\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_blockNumber\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_call\n\nExecutes a tx call (does not create a transaction)\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62481a09-6006-4f5f-a32b-4f05319d99c1": {"__data__": {"id_": "62481a09-6006-4f5f-a32b-4f05319d99c1", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d0b86f80-8d10-48f0-8cd5-9875a067ff77", "node_type": "1", "metadata": {}, "hash": "928d1a0264c42a407b374771eab4dc616fd21c46f3a4a6dbc6856a1549be7251", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7858ad84-edd5-459d-bb97-cdb630a2e103", "node_type": "1", "metadata": {}, "hash": "7ccc242a3f3e35d573f2a94ba92aaf9ce5fd5bf7491487a5728046f6b63d4154", "class_name": "RelatedNodeInfo"}}, "text": "`transactionCall`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 1243, "end_char_idx": 2482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7858ad84-edd5-459d-bb97-cdb630a2e103": {"__data__": {"id_": "7858ad84-edd5-459d-bb97-cdb630a2e103", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62481a09-6006-4f5f-a32b-4f05319d99c1", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "937b36f6-2f12-4b46-bd0f-f7b408f5de2e", "node_type": "1", "metadata": {}, "hash": "8fd505f472186f726f42ef11eba62485fc66296c60ea30aebed6f109b40e73ee", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_call\",\n      \"params\": [transactionCall, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### eth_chainId\n\nReturns ChainID\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_chainId\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_createAccessList\n\nCreates an [EIP2930](https://eips.ethereum.org/EIPS/eip-2930) type AccessList for the given transaction\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 2485, "end_char_idx": 3582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "937b36f6-2f12-4b46-bd0f-f7b408f5de2e": {"__data__": {"id_": "937b36f6-2f12-4b46-bd0f-f7b408f5de2e", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7858ad84-edd5-459d-bb97-cdb630a2e103", "node_type": "1", "metadata": {}, "hash": "7ccc242a3f3e35d573f2a94ba92aaf9ce5fd5bf7491487a5728046f6b63d4154", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7578fec1-fa50-45f2-93c3-da46cde1e882", "node_type": "1", "metadata": {}, "hash": "46b935423ec8c4c250ec25a402d5034d95b0016cda1ea021ae0ef79988bc0225", "class_name": "RelatedNodeInfo"}}, "text": "`transactionCall`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n3. `optimize`: *boolean*", "mimetype": "text/plain", "start_char_idx": 3583, "end_char_idx": 4848, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7578fec1-fa50-45f2-93c3-da46cde1e882": {"__data__": {"id_": "7578fec1-fa50-45f2-93c3-da46cde1e882", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "937b36f6-2f12-4b46-bd0f-f7b408f5de2e", "node_type": "1", "metadata": {}, "hash": "8fd505f472186f726f42ef11eba62485fc66296c60ea30aebed6f109b40e73ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db9c7723-bde7-48ac-b63c-56870df54181", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_createAccessList\",\n      \"params\": [transactionCall, blockParameter, optimize]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_estimateGas\n\nExecutes a tx call and returns gas used (does not create a transaction)\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 4851, "end_char_idx": 5632, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db9c7723-bde7-48ac-b63c-56870df54181": {"__data__": {"id_": "db9c7723-bde7-48ac-b63c-56870df54181", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7578fec1-fa50-45f2-93c3-da46cde1e882", "node_type": "1", "metadata": {}, "hash": "46b935423ec8c4c250ec25a402d5034d95b0016cda1ea021ae0ef79988bc0225", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a02451a-9e4a-4319-879b-4ad9021e0cd4", "node_type": "1", "metadata": {}, "hash": "d01023e40717d5b75f68e49e124080254ad423839217007ebed426a7d2c8cf23", "class_name": "RelatedNodeInfo"}}, "text": "`transactionCall`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 1243, "end_char_idx": 2482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a02451a-9e4a-4319-879b-4ad9021e0cd4": {"__data__": {"id_": "4a02451a-9e4a-4319-879b-4ad9021e0cd4", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db9c7723-bde7-48ac-b63c-56870df54181", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9c7644b8-0df3-4a2e-841b-ef5b8122aad3", "node_type": "1", "metadata": {}, "hash": "aa98c7e3d761413d239b40521c60a7ddf3d76ad41cc47f44ab25a5792ad5bd7c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_estimateGas\",\n      \"params\": [transactionCall, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_feeHistory\n\nReturns block fee history.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockCount`: *string* (hex integer)\n\n2. `newestBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n3. `rewardPercentiles`: array of *object*", "mimetype": "text/plain", "start_char_idx": 6875, "end_char_idx": 7646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c7644b8-0df3-4a2e-841b-ef5b8122aad3": {"__data__": {"id_": "9c7644b8-0df3-4a2e-841b-ef5b8122aad3", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a02451a-9e4a-4319-879b-4ad9021e0cd4", "node_type": "1", "metadata": {}, "hash": "d01023e40717d5b75f68e49e124080254ad423839217007ebed426a7d2c8cf23", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a8461ce1-f1ce-4290-a363-82823d8b2c53", "node_type": "1", "metadata": {}, "hash": "3e36dda00c00d90dbe09429f5038ee1644cd75d61766d0818324ac360c26be44", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_feeHistory\",\n      \"params\": [blockCount, newestBlock, rewardPercentiles]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `baseFeePerBlobGas`: array of *string* (hex integer)\n  - `baseFeePerGas`: array of *string* (hex integer)\n  - `blobGasUsedRatio`: array of *object*\n  - `gasUsedRatio`: array of *object*\n  - `oldestBlock`: *string* (hex integer)\n  - `reward`: array of array of *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_gasPrice\n\nReturns miner's gas price\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_gasPrice\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getAccount\n\nRetrieves Accounts via Address and Blocknumber\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `accountAddress`: *string* (address)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 7649, "end_char_idx": 9159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8461ce1-f1ce-4290-a363-82823d8b2c53": {"__data__": {"id_": "a8461ce1-f1ce-4290-a363-82823d8b2c53", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c7644b8-0df3-4a2e-841b-ef5b8122aad3", "node_type": "1", "metadata": {}, "hash": "aa98c7e3d761413d239b40521c60a7ddf3d76ad41cc47f44ab25a5792ad5bd7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7863a509-e199-49e5-b401-c6d4f84318c2", "node_type": "1", "metadata": {}, "hash": "62a22aa2e2ebe703dab888affabfc640dbdd95684b28a4df18ab99cb185c9783", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getAccount\",\n      \"params\": [accountAddress, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `balance`: *string* (hex integer)\n  - `codeHash`: *object*\n    - `bytes`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n    - `bytesAsSpan`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `storageRoot`: *object*\n    - `bytes`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n    - `bytesAsSpan`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getBalance\n\nReturns account balance\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 9162, "end_char_idx": 10482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7863a509-e199-49e5-b401-c6d4f84318c2": {"__data__": {"id_": "7863a509-e199-49e5-b401-c6d4f84318c2", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a8461ce1-f1ce-4290-a363-82823d8b2c53", "node_type": "1", "metadata": {}, "hash": "3e36dda00c00d90dbe09429f5038ee1644cd75d61766d0818324ac360c26be44", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "16b14f97-fd6e-4725-95a8-ce29a0c7cef7", "node_type": "1", "metadata": {}, "hash": "577ba717387c85e86d98be4b429cf4a4b72a155238ae326f67244ed491b7e5b1", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBalance\",\n      \"params\": [address, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockByHash\n\nRetrieves a block by hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `returnFullTransactionObjects`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockByHash\",\n      \"params\": [blockHash, returnFullTransactionObjects]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 10485, "end_char_idx": 11527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16b14f97-fd6e-4725-95a8-ce29a0c7cef7": {"__data__": {"id_": "16b14f97-fd6e-4725-95a8-ce29a0c7cef7", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7863a509-e199-49e5-b401-c6d4f84318c2", "node_type": "1", "metadata": {}, "hash": "62a22aa2e2ebe703dab888affabfc640dbdd95684b28a4df18ab99cb185c9783", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe7af23d-6b49-4d86-b82e-cd4cb262bb09", "node_type": "1", "metadata": {}, "hash": "cd5c34eb1cb603fea08b1608b6ae67ca9a6aaaf1e93cebd67994d3c04c189213", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockByNumber\n\nRetrieves a block by number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 11530, "end_char_idx": 12997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe7af23d-6b49-4d86-b82e-cd4cb262bb09": {"__data__": {"id_": "fe7af23d-6b49-4d86-b82e-cd4cb262bb09", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "16b14f97-fd6e-4725-95a8-ce29a0c7cef7", "node_type": "1", "metadata": {}, "hash": "577ba717387c85e86d98be4b429cf4a4b72a155238ae326f67244ed491b7e5b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d422c0dc-73f9-47f1-8fdb-4a355941df5a", "node_type": "1", "metadata": {}, "hash": "443fb7daa0165242acb2b0eb2731e734d94b304adfa4051f2fd6bf0debccad81", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `returnFullTransactionObjects`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockByNumber\",\n      \"params\": [blockParameter, returnFullTransactionObjects]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 12998, "end_char_idx": 13571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d422c0dc-73f9-47f1-8fdb-4a355941df5a": {"__data__": {"id_": "d422c0dc-73f9-47f1-8fdb-4a355941df5a", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe7af23d-6b49-4d86-b82e-cd4cb262bb09", "node_type": "1", "metadata": {}, "hash": "cd5c34eb1cb603fea08b1608b6ae67ca9a6aaaf1e93cebd67994d3c04c189213", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f30d9352-28be-4ef5-a016-6ed9e64d61a7", "node_type": "1", "metadata": {}, "hash": "ac8bd583ef176b22e23455893493fb9e746802f4f6b26c7dc41dd1c4d54792e4", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockReceipts\n\nGet receipts from all transactions from particular block, more efficient than fetching the receipts one-by-one.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 13574, "end_char_idx": 15125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f30d9352-28be-4ef5-a016-6ed9e64d61a7": {"__data__": {"id_": "f30d9352-28be-4ef5-a016-6ed9e64d61a7", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d422c0dc-73f9-47f1-8fdb-4a355941df5a", "node_type": "1", "metadata": {}, "hash": "443fb7daa0165242acb2b0eb2731e734d94b304adfa4051f2fd6bf0debccad81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e5c83ac-9998-456f-8b9a-40eebf54a84d", "node_type": "1", "metadata": {}, "hash": "ae4078b9bf74e6183c4169be677385ef880d259ec4e9d4466b24aa5114856b56", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockReceipts\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 15126, "end_char_idx": 15623, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e5c83ac-9998-456f-8b9a-40eebf54a84d": {"__data__": {"id_": "4e5c83ac-9998-456f-8b9a-40eebf54a84d", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f30d9352-28be-4ef5-a016-6ed9e64d61a7", "node_type": "1", "metadata": {}, "hash": "ac8bd583ef176b22e23455893493fb9e746802f4f6b26c7dc41dd1c4d54792e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63ac37d0-a8df-407f-b016-45cacb1d390b", "node_type": "1", "metadata": {}, "hash": "13cbb35a780eb9a238fb0be80cdfcff26ff7d2fff956287a4e4d1f8880693585", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockTransactionCountByHash\n\nReturns number of transactions in the block block hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 15626, "end_char_idx": 16884, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63ac37d0-a8df-407f-b016-45cacb1d390b": {"__data__": {"id_": "63ac37d0-a8df-407f-b016-45cacb1d390b", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e5c83ac-9998-456f-8b9a-40eebf54a84d", "node_type": "1", "metadata": {}, "hash": "ae4078b9bf74e6183c4169be677385ef880d259ec4e9d4466b24aa5114856b56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ad73e8d-b23c-426a-9576-db75441df13a", "node_type": "1", "metadata": {}, "hash": "fd9daea40a4149285e9cccb603181f188f3f2ca73af11ff172bbe68bddec948a", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockTransactionCountByHash\",\n      \"params\": [blockHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockTransactionCountByNumber\n\nReturns number of transactions in the block by block number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockTransactionCountByNumber\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getCode\n\nReturns account code at given address and block\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 16887, "end_char_idx": 18378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ad73e8d-b23c-426a-9576-db75441df13a": {"__data__": {"id_": "9ad73e8d-b23c-426a-9576-db75441df13a", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63ac37d0-a8df-407f-b016-45cacb1d390b", "node_type": "1", "metadata": {}, "hash": "13cbb35a780eb9a238fb0be80cdfcff26ff7d2fff956287a4e4d1f8880693585", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5ab60a7-e170-4ad2-aa5f-2f07c470274c", "node_type": "1", "metadata": {}, "hash": "89005ba5bca6a942c040388fb2b4f42c42ee966e2a32c0d408e2eebf056ebfab", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getCode\",\n      \"params\": [address, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### eth_getFilterChanges\n\nReads filter changes\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filterId`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getFilterChanges\",\n      \"params\": [filterId]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n\n</TabItem>\n</Tabs>\n\n### eth_getFilterLogs\n\nReads filter changes\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filterId`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 18381, "end_char_idx": 19555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5ab60a7-e170-4ad2-aa5f-2f07c470274c": {"__data__": {"id_": "c5ab60a7-e170-4ad2-aa5f-2f07c470274c", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9ad73e8d-b23c-426a-9576-db75441df13a", "node_type": "1", "metadata": {}, "hash": "fd9daea40a4149285e9cccb603181f188f3f2ca73af11ff172bbe68bddec948a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f47b2a6-0e05-45bd-912e-d7dc281a1826", "node_type": "1", "metadata": {}, "hash": "1303ff6a546f333b2789eb9323cbbe3cd764fb5ed4cee4457425ffbaf519ba96", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getFilterLogs\",\n      \"params\": [filterId]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getLogs\n\nReads logs\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filter`: *object*\n    - `address`: *object*\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *object*", "mimetype": "text/plain", "start_char_idx": 19558, "end_char_idx": 20781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f47b2a6-0e05-45bd-912e-d7dc281a1826": {"__data__": {"id_": "8f47b2a6-0e05-45bd-912e-d7dc281a1826", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5ab60a7-e170-4ad2-aa5f-2f07c470274c", "node_type": "1", "metadata": {}, "hash": "89005ba5bca6a942c040388fb2b4f42c42ee966e2a32c0d408e2eebf056ebfab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ae7c2b9-a533-4a4a-b1f6-fd72cf297d07", "node_type": "1", "metadata": {}, "hash": "26ee901f4017f7ae8b57482d8ff9cd4a915feb655428346cc10503174f847389", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getLogs\",\n      \"params\": [filter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getProof\n\nhttps://github.com/ethereum/EIPs/issues/1186\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `accountAddress`: *string* (address)\n\n2. `hashRate`: array of *string* (hex integer)\n\n3. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 20784, "end_char_idx": 21925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ae7c2b9-a533-4a4a-b1f6-fd72cf297d07": {"__data__": {"id_": "7ae7c2b9-a533-4a4a-b1f6-fd72cf297d07", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f47b2a6-0e05-45bd-912e-d7dc281a1826", "node_type": "1", "metadata": {}, "hash": "1303ff6a546f333b2789eb9323cbbe3cd764fb5ed4cee4457425ffbaf519ba96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e790f24-bf62-4aca-ba3b-9ecfbcd35780", "node_type": "1", "metadata": {}, "hash": "977f5451bb83b46da92c77b0598d1d43becbd1cb1e7957020336efe2519cff87", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getProof\",\n      \"params\": [accountAddress, hashRate, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `address`: *string* (address)\n  - `balance`: *string* (hex integer)\n  - `codeHash`: *string* (hash)\n  - `nonce`: *string* (hex integer)\n  - `proof`: array of *string* (hex data)\n  - `storageProofs`: array of *object*\n    - `key`: *string* (hex data)\n    - `proof`: array of *string* (hex data)\n    - `value`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `isEmpty`: *boolean*\n        - `length`: *string* (hex integer)\n        - `span`: *object*\n          - `isEmpty`: *boolean*\n          - `item`: *object*\n          - `length`: *string* (hex integer)\n  - `storageRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getStorageAt\n\nReturns storage data at address. storage_index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `positionIndex`: *string* (hex integer)\n\n3. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 21928, "end_char_idx": 23331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e790f24-bf62-4aca-ba3b-9ecfbcd35780": {"__data__": {"id_": "3e790f24-bf62-4aca-ba3b-9ecfbcd35780", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ae7c2b9-a533-4a4a-b1f6-fd72cf297d07", "node_type": "1", "metadata": {}, "hash": "26ee901f4017f7ae8b57482d8ff9cd4a915feb655428346cc10503174f847389", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9be6b89a-d899-4748-93e2-4341f9f43b86", "node_type": "1", "metadata": {}, "hash": "9a706e735c69c4650e8b2180827643d76ff6acd7d795aca41aef5ab6d5de468c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getStorageAt\",\n      \"params\": [address, positionIndex, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionByBlockHashAndIndex\n\nRetrieves a transaction by block hash and index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `positionIndex`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n      \"params\": [blockHash, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 23334, "end_char_idx": 24433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9be6b89a-d899-4748-93e2-4341f9f43b86": {"__data__": {"id_": "9be6b89a-d899-4748-93e2-4341f9f43b86", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e790f24-bf62-4aca-ba3b-9ecfbcd35780", "node_type": "1", "metadata": {}, "hash": "977f5451bb83b46da92c77b0598d1d43becbd1cb1e7957020336efe2519cff87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fb7ac0af-06d5-4677-a357-901923cb402c", "node_type": "1", "metadata": {}, "hash": "273aeff0ce5ea1ee94e0ab8629491d2da5f3cbc8ef428a8341c114bbfa1fd6b3", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionByBlockNumberAndIndex\n\nRetrieves a transaction by block number and index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `positionIndex`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 24436, "end_char_idx": 25846, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb7ac0af-06d5-4677-a357-901923cb402c": {"__data__": {"id_": "fb7ac0af-06d5-4677-a357-901923cb402c", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9be6b89a-d899-4748-93e2-4341f9f43b86", "node_type": "1", "metadata": {}, "hash": "9a706e735c69c4650e8b2180827643d76ff6acd7d795aca41aef5ab6d5de468c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52208510-42a9-4f37-8d45-d72c8a2e69a8", "node_type": "1", "metadata": {}, "hash": "7360105f5f2426ae3caeec5d77743e1851f0dd4f77d15cde2699ca43f32cedce", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n      \"params\": [blockParameter, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 25849, "end_char_idx": 26259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52208510-42a9-4f37-8d45-d72c8a2e69a8": {"__data__": {"id_": "52208510-42a9-4f37-8d45-d72c8a2e69a8", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb7ac0af-06d5-4677-a357-901923cb402c", "node_type": "1", "metadata": {}, "hash": "273aeff0ce5ea1ee94e0ab8629491d2da5f3cbc8ef428a8341c114bbfa1fd6b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8134054-a55e-472b-8369-6f8480eb1b00", "node_type": "1", "metadata": {}, "hash": "6f780524585cc74d773b1ba7301b07a9ce6f93306a94f8b541c82472db929182", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionByHash\n\nRetrieves a transaction by hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transactionHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionByHash\",", "mimetype": "text/plain", "start_char_idx": 26262, "end_char_idx": 27752, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8134054-a55e-472b-8369-6f8480eb1b00": {"__data__": {"id_": "f8134054-a55e-472b-8369-6f8480eb1b00", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52208510-42a9-4f37-8d45-d72c8a2e69a8", "node_type": "1", "metadata": {}, "hash": "7360105f5f2426ae3caeec5d77743e1851f0dd4f77d15cde2699ca43f32cedce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "928e4914-d1af-4fff-9d16-d57defd7b1d1", "node_type": "1", "metadata": {}, "hash": "6fd27eafa0b9cb611bc94572c545aeb08652a3f2a07e883b9a5b936f46c6bc3f", "class_name": "RelatedNodeInfo"}}, "text": "\"params\": [transactionHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionCount\n\nReturns account nonce (number of trnsactions from the account since genesis) at the given block number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2.", "mimetype": "text/plain", "start_char_idx": 27759, "end_char_idx": 29216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "928e4914-d1af-4fff-9d16-d57defd7b1d1": {"__data__": {"id_": "928e4914-d1af-4fff-9d16-d57defd7b1d1", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8134054-a55e-472b-8369-6f8480eb1b00", "node_type": "1", "metadata": {}, "hash": "6f780524585cc74d773b1ba7301b07a9ce6f93306a94f8b541c82472db929182", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "42fe31f0-949c-438c-b84e-2f1a3c384136", "node_type": "1", "metadata": {}, "hash": "3bd4e90bf2b7e5b19ae67cd8c9729934d4ab543f8b757e5df0db81ea084cea26", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionCount\",\n      \"params\": [address, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionReceipt\n\nRetrieves a transaction receipt by tx hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHashData`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionReceipt\",\n      \"params\": [txHashData]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 29217, "end_char_idx": 30346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42fe31f0-949c-438c-b84e-2f1a3c384136": {"__data__": {"id_": "42fe31f0-949c-438c-b84e-2f1a3c384136", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "928e4914-d1af-4fff-9d16-d57defd7b1d1", "node_type": "1", "metadata": {}, "hash": "6fd27eafa0b9cb611bc94572c545aeb08652a3f2a07e883b9a5b936f46c6bc3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e31e263b-a914-431f-83da-76fe86dbc73e", "node_type": "1", "metadata": {}, "hash": "ba55f7aade3a4347d66353e255beac604f77f779d991ec568661483008888d7b", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleByBlockHashAndIndex\n\nRetrieves an uncle block header by block hash and uncle index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHashData`: *string* (hash)\n\n2. `positionIndex`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleByBlockHashAndIndex\",", "mimetype": "text/plain", "start_char_idx": 30349, "end_char_idx": 31898, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e31e263b-a914-431f-83da-76fe86dbc73e": {"__data__": {"id_": "e31e263b-a914-431f-83da-76fe86dbc73e", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42fe31f0-949c-438c-b84e-2f1a3c384136", "node_type": "1", "metadata": {}, "hash": "3bd4e90bf2b7e5b19ae67cd8c9729934d4ab543f8b757e5df0db81ea084cea26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94bc794f-9f06-43f1-bb79-3bbc6b640135", "node_type": "1", "metadata": {}, "hash": "f9c8a50d8854acb03882b3b5eb84d487408b4da63229eaa5e3a201ac60e08c37", "class_name": "RelatedNodeInfo"}}, "text": "\"params\": [blockHashData, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 31905, "end_char_idx": 32054, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94bc794f-9f06-43f1-bb79-3bbc6b640135": {"__data__": {"id_": "94bc794f-9f06-43f1-bb79-3bbc6b640135", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e31e263b-a914-431f-83da-76fe86dbc73e", "node_type": "1", "metadata": {}, "hash": "ba55f7aade3a4347d66353e255beac604f77f779d991ec568661483008888d7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "914da60f-a79d-4172-8e9d-76967fc239d6", "node_type": "1", "metadata": {}, "hash": "2b5431e29472e3d42168cd2351375b0d17f62f36042fdbd1578ae9aa2a9be2fa", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleByBlockNumberAndIndex\n\nRetrieves an uncle block header by block number and uncle index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 32057, "end_char_idx": 33573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "914da60f-a79d-4172-8e9d-76967fc239d6": {"__data__": {"id_": "914da60f-a79d-4172-8e9d-76967fc239d6", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94bc794f-9f06-43f1-bb79-3bbc6b640135", "node_type": "1", "metadata": {}, "hash": "f9c8a50d8854acb03882b3b5eb84d487408b4da63229eaa5e3a201ac60e08c37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fda6d800-577f-4b1c-a987-ee603ddc794c", "node_type": "1", "metadata": {}, "hash": "88ebd4cf7116840ef099359f4ebf40b7d7f5eb09048aa6082fba188eb2332a2c", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `positionIndex`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleByBlockNumberAndIndex\",\n      \"params\": [blockParameter, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 33574, "end_char_idx": 34143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fda6d800-577f-4b1c-a987-ee603ddc794c": {"__data__": {"id_": "fda6d800-577f-4b1c-a987-ee603ddc794c", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "914da60f-a79d-4172-8e9d-76967fc239d6", "node_type": "1", "metadata": {}, "hash": "2b5431e29472e3d42168cd2351375b0d17f62f36042fdbd1578ae9aa2a9be2fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "684f5536-7b7f-411c-ba3b-8e855548a345", "node_type": "1", "metadata": {}, "hash": "0e62fec459cfd3f712e7e87084674b02c18235992e95196ca507daa9a23fe58f", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleCountByBlockHash\n\nReturns number of uncles in the block by block hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 34146, "end_char_idx": 35645, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "684f5536-7b7f-411c-ba3b-8e855548a345": {"__data__": {"id_": "684f5536-7b7f-411c-ba3b-8e855548a345", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fda6d800-577f-4b1c-a987-ee603ddc794c", "node_type": "1", "metadata": {}, "hash": "88ebd4cf7116840ef099359f4ebf40b7d7f5eb09048aa6082fba188eb2332a2c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "474ff184-1c29-47ea-848f-4de79f8b6679", "node_type": "1", "metadata": {}, "hash": "0795585e37d4cb96e009ca443aeeeef7623f3fe21d00668150aef67b8cd88c56", "class_name": "RelatedNodeInfo"}}, "text": "`blockHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleCountByBlockHash\",\n      \"params\": [blockHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleCountByBlockNumber\n\nReturns number of uncles in the block by block number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 35646, "end_char_idx": 36401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "474ff184-1c29-47ea-848f-4de79f8b6679": {"__data__": {"id_": "474ff184-1c29-47ea-848f-4de79f8b6679", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "684f5536-7b7f-411c-ba3b-8e855548a345", "node_type": "1", "metadata": {}, "hash": "0e62fec459cfd3f712e7e87084674b02c18235992e95196ca507daa9a23fe58f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca3d4503-5a74-47f8-8417-551dd6ba482f", "node_type": "1", "metadata": {}, "hash": "214ed834516ac15bb5a12fbbdd49baa89591516bc4eb8d86eaafb98722166686", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleCountByBlockNumber\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_newBlockFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_newBlockFilter\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_newFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filter`: *object*\n    - `address`: *object*\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *object*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 36404, "end_char_idx": 37971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca3d4503-5a74-47f8-8417-551dd6ba482f": {"__data__": {"id_": "ca3d4503-5a74-47f8-8417-551dd6ba482f", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "474ff184-1c29-47ea-848f-4de79f8b6679", "node_type": "1", "metadata": {}, "hash": "0795585e37d4cb96e009ca443aeeeef7623f3fe21d00668150aef67b8cd88c56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7eceeff0-a6c6-4cc0-a13a-ffde0fd18233", "node_type": "1", "metadata": {}, "hash": "4491cd74f79dd316e0b721abaf1c4a16d06c9218dc240f8a04b4c9164f2d0228", "class_name": "RelatedNodeInfo"}}, "text": "\"method\": \"eth_newFilter\",\n      \"params\": [filter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_newPendingTransactionFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_newPendingTransactionFilter\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_pendingTransactions\n\nReturns the pending transactions list\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_pendingTransactions\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 37978, "end_char_idx": 39161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7eceeff0-a6c6-4cc0-a13a-ffde0fd18233": {"__data__": {"id_": "7eceeff0-a6c6-4cc0-a13a-ffde0fd18233", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca3d4503-5a74-47f8-8417-551dd6ba482f", "node_type": "1", "metadata": {}, "hash": "214ed834516ac15bb5a12fbbdd49baa89591516bc4eb8d86eaafb98722166686", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9cd8cbce-a32a-4c75-9028-d0fa94fe4c72", "node_type": "1", "metadata": {}, "hash": "2b451685cf200a94f5e05ffe4d2054d78c16d132692be61cd0569b5cc6d5adae", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_protocolVersion\n\nReturns ETH protocol version\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_protocolVersion\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",", "mimetype": "text/plain", "start_char_idx": 39164, "end_char_idx": 40671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cd8cbce-a32a-4c75-9028-d0fa94fe4c72": {"__data__": {"id_": "9cd8cbce-a32a-4c75-9028-d0fa94fe4c72", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7eceeff0-a6c6-4cc0-a13a-ffde0fd18233", "node_type": "1", "metadata": {}, "hash": "4491cd74f79dd316e0b721abaf1c4a16d06c9218dc240f8a04b4c9164f2d0228", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a7d782b-6b19-478b-81a6-0b5fa766d2ab", "node_type": "1", "metadata": {}, "hash": "1331d8897cb0735ea1683ecbabc2f62f2529110bd9e9f4b2b46634288795fa7b", "class_name": "RelatedNodeInfo"}}, "text": "\"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### eth_sendRawTransaction\n\nSend a raw transaction to the tx pool and broadcasting\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transaction`: *string* (hex data)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_sendRawTransaction\",\n      \"params\": [transaction]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_sendTransaction\n\nSend a transaction to the tx pool and broadcasting\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 40674, "end_char_idx": 41505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a7d782b-6b19-478b-81a6-0b5fa766d2ab": {"__data__": {"id_": "6a7d782b-6b19-478b-81a6-0b5fa766d2ab", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9cd8cbce-a32a-4c75-9028-d0fa94fe4c72", "node_type": "1", "metadata": {}, "hash": "2b451685cf200a94f5e05ffe4d2054d78c16d132692be61cd0569b5cc6d5adae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d65189d8-631d-47b7-b97d-0d94b1af1c81", "node_type": "1", "metadata": {}, "hash": "26faed2455dbf4731f937f54011ca71b565c15f7fb4b86462cd252f5ae438971", "class_name": "RelatedNodeInfo"}}, "text": "`rpcTx`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 41506, "end_char_idx": 42612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d65189d8-631d-47b7-b97d-0d94b1af1c81": {"__data__": {"id_": "d65189d8-631d-47b7-b97d-0d94b1af1c81", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a7d782b-6b19-478b-81a6-0b5fa766d2ab", "node_type": "1", "metadata": {}, "hash": "1331d8897cb0735ea1683ecbabc2f62f2529110bd9e9f4b2b46634288795fa7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "489345d8-d839-4463-a26b-ae611f1de5c9", "node_type": "1", "metadata": {}, "hash": "a565fabdcab6afbd515dac7a0caf161516b3497c38871f292b06a8fe6d296211", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_sendTransaction\",\n      \"params\": [rpcTx]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_simulateV1\n\nExecutes a simulation across multiple blocks (does not create a transaction or block)\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `payload`: *object*\n    - `blockStateCalls`: array of *object*\n      - `blockOverrides`: *object*\n        - `baseFeePerGas`: *string* (hex integer)\n        - `blobBaseFee`: *string* (hex integer)\n        - `feeRecipient`: *string* (address)\n        - `gasLimit`: *string* (hex integer)\n        - `number`: *string* (hex integer)\n        - `prevRandao`: *string* (hash)\n        - `time`: *string* (hex integer)\n      - `calls`: array of *object*\n        - `accessList`: array of *object*\n          - `address`: *string* (address)\n          - `storageKeys`: array of *string* (hex integer)\n        - `blobVersionedHashes`: array of *string* (hex data)\n        - `blockHash`: *string* (hash)\n        - `blockNumber`: *string* (hex integer)\n        - `chainId`:", "mimetype": "text/plain", "start_char_idx": 42615, "end_char_idx": 43974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "489345d8-d839-4463-a26b-ae611f1de5c9": {"__data__": {"id_": "489345d8-d839-4463-a26b-ae611f1de5c9", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d65189d8-631d-47b7-b97d-0d94b1af1c81", "node_type": "1", "metadata": {}, "hash": "26faed2455dbf4731f937f54011ca71b565c15f7fb4b86462cd252f5ae438971", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f4e457b-0fa8-455b-b15f-a2711e04b789", "node_type": "1", "metadata": {}, "hash": "5d16f099d8f355c724347707c976aac7ecda0d119ca1b34457d95924fc393136", "class_name": "RelatedNodeInfo"}}, "text": "*string* (hex integer)\n        - `data`: *string* (hex data)\n        - `from`: *string* (address)\n        - `gas`: *string* (hex integer)\n        - `gasPrice`: *string* (hex integer)\n        - `hash`: *string* (hash)\n        - `input`: *string* (hex data)\n        - `isSystemTx`: *boolean*\n        - `maxFeePerBlobGas`: *string* (hex integer)\n        - `maxFeePerGas`: *string* (hex integer)\n        - `maxPriorityFeePerGas`: *string* (hex integer)\n        - `mint`: *string* (hex integer)\n        - `nonce`: *string* (hex integer)\n        - `r`: *string* (hex integer)\n        - `s`: *string* (hex integer)\n        - `sourceHash`: *string* (hash)\n        - `to`: *string* (address)\n        - `transactionIndex`: *string* (hex integer)\n        - `type`: *integer*\n        - `v`: *string* (hex integer)\n        - `value`: *string* (hex integer)\n        - `yParity`: *string* (hex integer)\n      - `stateOverrides`: map of *object*\n        - `balance`: *string* (hex integer)\n        - `code`: *string* (hex data)\n        - `movePrecompileToAddress`: *string* (address)\n        - `nonce`: *string* (hex integer)\n        - `state`: map of *string* (hash)", "mimetype": "text/plain", "start_char_idx": 43975, "end_char_idx": 45126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f4e457b-0fa8-455b-b15f-a2711e04b789": {"__data__": {"id_": "6f4e457b-0fa8-455b-b15f-a2711e04b789", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "489345d8-d839-4463-a26b-ae611f1de5c9", "node_type": "1", "metadata": {}, "hash": "a565fabdcab6afbd515dac7a0caf161516b3497c38871f292b06a8fe6d296211", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34aa32b0-a53f-4486-9de0-dc5a4c430bb3", "node_type": "1", "metadata": {}, "hash": "8581ca5ee40c9fa38d40756d13a051fb15503ff878a2ddd5d700e487a810d943", "class_name": "RelatedNodeInfo"}}, "text": "- `stateDiff`: map of *string* (hash)\n    - `returnFullTransactionObjects`: *boolean*\n    - `traceTransfers`: *boolean*\n    - `validation`: *boolean*\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_simulateV1\",\n      \"params\": [payload, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `calls`: array of *object*\n    - `error`: *object*\n      - `code`: *string* (hex integer)\n      - `data`: *string*\n      - `message`: *string*\n    - `gasUsed`: *string* (hex integer)\n    - `logs`: array of *object*\n      - `address`: *string* (address)\n      - `blockHash`: *string* (hash)\n      - `blockNumber`: *string* (hex integer)\n      - `data`: *string* (hex data)\n      - `logIndex`: *string* (hex integer)\n      - `removed`: *boolean*\n      - `topics`: array of *string* (hash)\n      - `transactionHash`: *string* (hash)\n      - `transactionIndex`: *string* (hex integer)\n    - `returnData`: *string* (hex data)\n    - `status`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_subscribe\n\nStarts a subscription to a particular event over WebSockets. A JSON-RPC notification with event payload and subscription id is sent to a client for every event matching the subscription topic.", "mimetype": "text/plain", "start_char_idx": 45135, "end_char_idx": 46740, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34aa32b0-a53f-4486-9de0-dc5a4c430bb3": {"__data__": {"id_": "34aa32b0-a53f-4486-9de0-dc5a4c430bb3", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f4e457b-0fa8-455b-b15f-a2711e04b789", "node_type": "1", "metadata": {}, "hash": "5d16f099d8f355c724347707c976aac7ecda0d119ca1b34457d95924fc393136", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3b000468-1dc8-4459-a20c-e268447e2dac", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}}, "text": ":::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionName`: *string*\n\n2. `filter`: *object*\n    - `address`: *string* (address)\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *string* (hex data)\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_subscribe\",\n  \"params\": [subscriptionName, args]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": \"0x...\" // subscription id\n}\n```\n\n`result`: *string*\n\n</TabItem>\n<TabItem value=\"notif\" label=\"Notification\">\n\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_subscription\",\n  \"params\": {\n    \"subscription\": \"0x...\", // subscription id\n    \"result\": payload\n  }\n}\n```\n\nSee specific subcription topic below for `payload` details.\n\n</TabItem>\n</Tabs>\n\n#### Subscription topics\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newHeads\n\n</summary>\n<p>\n\nSubscribes to incoming block headers. Fires a notification each time a new header is appended to the chain, including chain reorganizations.", "mimetype": "text/plain", "start_char_idx": 46742, "end_char_idx": 48232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b000468-1dc8-4459-a20c-e268447e2dac": {"__data__": {"id_": "3b000468-1dc8-4459-a20c-e268447e2dac", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34aa32b0-a53f-4486-9de0-dc5a4c430bb3", "node_type": "1", "metadata": {}, "hash": "8581ca5ee40c9fa38d40756d13a051fb15503ff878a2ddd5d700e487a810d943", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e945fbd-25aa-4d6e-bec5-f3031601c9fc", "node_type": "1", "metadata": {}, "hash": "ad0a92f04d15f0e6d6396f11000d66dcfc0332e484c0a175e8e4ab07fb37dcde", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amount`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### logs\n\n</summary>\n<p>\n\nSubscribes to incoming logs filtered by the given options. In case of a chain reorganization, previously sent logs on the old chain will be re-sent with the `removed` field set to `true`.", "mimetype": "text/plain", "start_char_idx": 48234, "end_char_idx": 49796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e945fbd-25aa-4d6e-bec5-f3031601c9fc": {"__data__": {"id_": "3e945fbd-25aa-4d6e-bec5-f3031601c9fc", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3b000468-1dc8-4459-a20c-e268447e2dac", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e876354-93f5-4209-a8f9-9776b513d5dc", "node_type": "1", "metadata": {}, "hash": "ec0b2ccec90eb8441f76ce6e50875c280fd863351f46a912e7ab5e5e78440675", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to incoming pending transactions. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### droppedPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to transactions evicted from the transaction pool. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### syncing\n\n</summary>\n<p>\n\nSubscribes to syncing events. Returns `false` (once) if the node is synced or an object with statistics (once) when the node starts syncing.", "mimetype": "text/plain", "start_char_idx": 49798, "end_char_idx": 50937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e876354-93f5-4209-a8f9-9776b513d5dc": {"__data__": {"id_": "3e876354-93f5-4209-a8f9-9776b513d5dc", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e945fbd-25aa-4d6e-bec5-f3031601c9fc", "node_type": "1", "metadata": {}, "hash": "ad0a92f04d15f0e6d6396f11000d66dcfc0332e484c0a175e8e4ab07fb37dcde", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8c08b8cd-33c8-40de-a87b-744f4c2e0234", "node_type": "1", "metadata": {}, "hash": "912efa2d2872ce536d40e526c0137b773766c2a52df2cf4e68c32777de07b28d", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`:\n\n  - if synced: *boolean*\n  - if syncing: *object*\n      - `currentBlock`: *string* (hex integer)\n      - `highestBlock`: *string* (hex integer)\n      - `isSyncing`: *boolean*\n      - `startingBlock`: *string* (hex integer)\n\n</p>\n</details>\n### eth_syncing\n\nReturns syncing status\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_syncing\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `currentBlock`: *string* (hex integer)\n  - `highestBlock`: *string* (hex integer)\n  - `isSyncing`: *boolean*\n  - `startingBlock`: *string* (hex integer)\n  - `syncMode`: *integer*\n\n</TabItem>\n</Tabs>\n\n### eth_uninstallFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filterId`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 50939, "end_char_idx": 51984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c08b8cd-33c8-40de-a87b-744f4c2e0234": {"__data__": {"id_": "8c08b8cd-33c8-40de-a87b-744f4c2e0234", "embedding": null, "metadata": {"file_path": "./phala_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cae417db-3352-4bec-b7e9-ee694afdf24b", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e876354-93f5-4209-a8f9-9776b513d5dc", "node_type": "1", "metadata": {}, "hash": "ec0b2ccec90eb8441f76ce6e50875c280fd863351f46a912e7ab5e5e78440675", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_uninstallFilter\",\n      \"params\": [filterId]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### eth_unsubscribe\n\nUnsubscribes from a subscription.\n\n:::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionId`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_unsubscribe\",\n  \"params\": [subscriptionId]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean* (`true` if unsubscribed successfully; otherwise, `false`)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 51987, "end_char_idx": 53132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"893ed0c0-81d8-4f90-a0f6-64ae34e0aa97": {"doc_hash": "24c6528245f586ed25b70fb54402e148211208aecc27a12cdedf1b046e484cad", "ref_doc_id": "f8c8c21b-67b4-403b-b861-de6698485ebe"}, "36d8033b-386d-460e-97e4-0d44e4f52787": {"doc_hash": "5a2fc43d95c592fdab5e1d34b6e5022036e34665c6c21c48c1e5e8c694d3706d", "ref_doc_id": "f8c8c21b-67b4-403b-b861-de6698485ebe"}, "1a16743e-c051-431c-a88d-0f783c48f162": {"doc_hash": "04e893b43b53d9bb742f21aa9315876f92e60e7810ab1ad43b30c23ae66887f5", "ref_doc_id": "f8c8c21b-67b4-403b-b861-de6698485ebe"}, "29c3aa76-5383-4b6f-8b68-28f258b3e263": {"doc_hash": "025528c9fe9aa7c99ab0786b466b1df70e1d80294ea54bb07277bf116cbbb552", "ref_doc_id": "f8c8c21b-67b4-403b-b861-de6698485ebe"}, "7b58f683-808c-42cb-ab79-39ca541ef037": {"doc_hash": "2bf6fdcdbfbbf2fb96b75de59527110e48c9504e4e4fd37df03258f77dbab0c3", "ref_doc_id": "e02e52f9-ab71-4a26-99c8-9e02e39503ed"}, "a47bcb05-694d-4600-93da-c86eec2b665f": {"doc_hash": "78ba81395de1785af815f52b0766e7ce3308d0cd3400f22ac685be6368d88bac", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "0463d662-84b9-47e0-8743-040510c90e22": {"doc_hash": "72a0f874e223ee05f38ec3828a974f258a95692060716ca588764fa5339d16af", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "0af2f63a-ae6a-45cf-9fde-4591df0163c4": {"doc_hash": "9b877e1a8faa039952a8c30dbb0169ad04cf480d77c70d0ea3eb8c299b80a038", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "1a13206e-7e36-40eb-a63a-82f113eab2ad": {"doc_hash": "df006d50776a7beab28c34ba357e3b13a5d34faf7b5d245aeb7137294ed7542c", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "fa20c5b7-e610-4350-9a62-b03df0b1a8f2": {"doc_hash": "ccb65365fecb02aa7b667c6977ba2803d4256770fff6c10dcbb86476a5d020e4", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "4715e030-6dcd-4d01-8326-a05c503e3f62": {"doc_hash": "441e4d2f0189161160ed81e74df669d7e70359f002d8a48f9d1585ff7bb4370c", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "8947423b-7948-4459-968e-e37255e95663": {"doc_hash": "86a46f84f4129ba8074626087ff681363bed36c244992a5a75bc2c88880cfce9", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "73d18509-6ef5-4cc3-b172-59e367b259fb": {"doc_hash": "807f6e749c63a41eec8b378a0882a3c3ca9b024533e00f5435df702dfd5e00cd", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "9a122f02-9666-43cd-bb53-376ce93ec368": {"doc_hash": "0b95882b9b6f856b4554fcb4d1b71dd47e839dee0c3e7e1dc9364e45fd0751f9", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "ca6e2e7c-9b30-4697-9b19-5bfe3ce2b873": {"doc_hash": "c3462a3b3b64feb7e8e6488c523ebbc0e7f6b4f7cd2c821f9f19a582e79531af", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "533917b7-01b1-4881-ae3b-4308b30b373b": {"doc_hash": "e4f67d39c8e4f009c81a6a65d3889df2a5b449f6836b98d45d95297356f80b18", "ref_doc_id": "b89f56d6-adf5-4c8b-bb82-f394234153c0"}, "dfa4f3c9-9f15-4f9e-bb8f-a1bdeaa9bc1c": {"doc_hash": "4242a22cc6d4c7281bf3b84f87d266b7012018b6c44a4c06808dbb5843580df5", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "4c032550-6865-43d7-8f99-6bab1107f91b": {"doc_hash": "47c48dd11088349fddd0e4bec089d13fc6eae0daa86f1ca221c438567906020e", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "4d03af3e-b8b7-4f66-9ba3-839b533ce6b5": {"doc_hash": "77995c05354223f223217af9faa4e3068e40ce5fc2d5396df12b407d4551229b", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "8dc5f4cf-13a9-458c-bea7-7f4fa3cf0b7b": {"doc_hash": "be9014f3c9bf617e6f627d751b7e0e7011695714bd2e59466130e729f68006aa", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "c80ea34c-a713-4610-8406-889c286620b0": {"doc_hash": "b466ede6c4851c5a09b8369c1ef568753626e9546ae75decd3b2f09de27998f1", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "559813a7-f308-41d9-8ca0-18e29d402c81": {"doc_hash": "d66ed9e4332b04334c7a0201a00ef6e4aa311495d5f3790c4156c7927707b15d", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "0f658315-c824-4fcd-a262-fdb098da927a": {"doc_hash": "bcc555b5b76fe25052efcac293e5331ac9b74d88ba0b5ca453e0aea88b74cdd2", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "1fb1d92c-0c8a-4cef-8fd5-4ccaede9710f": {"doc_hash": "4ce7bf58b1f1de482156f0e1d760413691b9ff489c074c5019ee1fdef9da914c", "ref_doc_id": "72333733-10e6-4826-9ba7-37df010fba32"}, "21be5926-3c4d-445d-a662-f906f978035e": {"doc_hash": "c2720e15d16e247cc0cb5f826902852f13cebd4fbfc4eda6a4d1b35595791b19", "ref_doc_id": "1251e17a-ee79-491c-8b46-66667122846a"}, "cf349c04-b462-488e-bab4-0df5914b9e05": {"doc_hash": "0875cd52bd727164a3819a2f9fd0aedf664558957f5b46ea0859f8cdf56d4eac", "ref_doc_id": "1251e17a-ee79-491c-8b46-66667122846a"}, "edc4dad8-987d-4aae-872f-d6a98ac595af": {"doc_hash": "91d655712020922ca04a37b99954d203827b9cc24db5343c774af96fd0fc6470", "ref_doc_id": "1251e17a-ee79-491c-8b46-66667122846a"}, "49f07218-100a-4922-80bd-6df23a64deda": {"doc_hash": "d6959290bac10cf78a6e16e38a8fa569ee942a9aa6c6166a0389cb9fce2e50fc", "ref_doc_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c"}, "37992834-34f6-4889-bc26-db1c09d3cefd": {"doc_hash": "ea4b5732d7e67eaf0ecb4314c75c638d561da7c8d81ed3065c459885346e9988", "ref_doc_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c"}, "0666907a-f322-4a35-a656-655343ffd5e6": {"doc_hash": "0e17da244db350fdf4069a64b04e0fdd37c9e98f22115cdd80c70360b28b80fc", "ref_doc_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c"}, "4fae536d-699b-47d8-8074-b20afc5c3489": {"doc_hash": "e2d0a8b61cfa8871d2fdba53d0c5c71d5f545fe7c54c84e62b863419fec24a37", "ref_doc_id": "d6b91c1c-1141-40c7-b39e-ee3f7933677c"}, "664ad5fb-9b50-4fff-8a8e-8782c5d5efb2": {"doc_hash": "195b02706136e7474d0e6072f807ed9082d8472abfba060cc6b8e93aecdf898c", "ref_doc_id": "ed0cccf9-62e2-4526-838b-5dedb4812023"}, "b0f8948c-58f2-4eac-b0aa-8f79e866ef9c": {"doc_hash": "84e4a4dc80b4a64c20734d0656690e20cc71bb41abf9cd982f3281bda52eccf5", "ref_doc_id": "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae"}, "6e2f8c72-3587-4821-9c44-5402b516c567": {"doc_hash": "509771c1072383b0e38167916f2b33b3b7bb2b7ccd789652fe5da5768603a3ac", "ref_doc_id": "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae"}, "055268e6-61c4-4a0e-8573-a157a0d97933": {"doc_hash": "e785d6ceb1af0dd9add8adc1a35b0659bea966b725facc9dcc33afbb2ad88965", "ref_doc_id": "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae"}, "b9792748-0a5d-41e0-af3f-1e019b10337f": {"doc_hash": "41eb28ba3fd779ea5d1c34b43238933d4cc8716d83ab31f79f0c5394e3362773", "ref_doc_id": "b8be7beb-10b2-4c85-8bec-cedad02e83bc"}, "ddd310aa-7bfd-456f-98ed-515b151a6068": {"doc_hash": "b0f6666b6f38b682a367d90256e07c5d4be96e442827d7bf2624afa0fe4acb30", "ref_doc_id": "b8be7beb-10b2-4c85-8bec-cedad02e83bc"}, "f4ab5bd9-e79f-4c09-8e20-e49cad117dbe": {"doc_hash": "f7873e2eab92ad143c2e49d9ee56826a96cccf51bbcb3722546d7233f7e15e9a", "ref_doc_id": "b8be7beb-10b2-4c85-8bec-cedad02e83bc"}, "b6d6b831-d4fb-4845-93d9-55c97929a2c7": {"doc_hash": "38b740919b119c411a5f41e175e3d48a6c3f2a304546a385c4d3cc6a470f2509", "ref_doc_id": "b51f9662-e742-4254-832d-41751aa23c13"}, "e6ff3d1f-03ee-463e-a0ac-c20282bb41e5": {"doc_hash": "dcd1ff0a08e080d5460ea71fac6bb49ab82b276d2702d5ae5d2aef27f2865caa", "ref_doc_id": "08addcb7-e6d0-4cb6-a187-8c8f786900f1"}, "4ba82da7-3dd7-4968-acf5-8cd88860303b": {"doc_hash": "8facf64dd0957ab8e5b9e9a5935f0be8a67e213e33c0c688348c7c28018e0009", "ref_doc_id": "83b2c658-b9fa-44a5-8d97-5d4037664b07"}, "a7a41f68-36fd-440e-bd05-e7c58cd73a84": {"doc_hash": "05ab926133114a191dad74af9adb9037532ee78374bd0366ceaa582a497b5a33", "ref_doc_id": "52a2f66a-2856-454b-933c-5bfe2d27d01b"}, "6bd41f40-cfd2-4d90-8693-d534e8dbb813": {"doc_hash": "d5eddc26a3ba49eac93c9d9d3c617f3092cd9e8a083cf7254bcfdb234e5983d6", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "2060798e-f8cf-45f7-b22d-ea0825b58f34": {"doc_hash": "a6bca6941cdd897d57bfcab0c8e64f8cf0bd1531cc910d3c66358609eaa14fb6", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "b0d33937-bc48-46b2-b3f9-407be000a569": {"doc_hash": "941a038ba25b60a0e601a12f8b8e15096551a93701ab1a42f8e76b3f3c560331", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "9b293825-037c-48d3-9702-7a6efbe1da06": {"doc_hash": "ad18cc37a1c55036f254f0ed3f9e8c03c19fa2bcd7206fff29b59aeb5e7e1117", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "54fb7cd1-fa55-4538-9dcd-cd6d4d6c5437": {"doc_hash": "38eac3619e9195a7a714b02cc3d1ad466b0422452434e6dccc63ec778183aaed", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "ae2d9f9a-c238-4718-836c-c652c5ae3c1f": {"doc_hash": "73cb3c3faa948f11cdca5e178c1da1d7e58f8d381a7b78f8fc3aadc6c19093e7", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "1b55ade4-a215-41ff-943c-a4847c6d7ea6": {"doc_hash": "a6f6136e085e0fa9082437f477e0a2dda7e6ca4c4a0e6e2925bc85889b6b322e", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "c98a4519-124f-47be-8b6a-27d69dc6727a": {"doc_hash": "c98345111cde3c4604280125b72dd69ad2ec3ba1ecd97edb8795c84ae89cb760", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "1d44f10a-f474-4a88-a015-aec4d09ab01e": {"doc_hash": "12001f5cf7f3a000fd66b95446a15a6c5b1e62b5a24d49ac056a19dbca6a8402", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "f2635700-cef9-454f-a880-320e2c423ae4": {"doc_hash": "7bbc056fa5548504c16fe21f7a5d6430dfae881d0d0f6de23a7a14aaa607e3e1", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "7720c015-debd-445a-9738-4af054eed1c4": {"doc_hash": "f8b6a3ffd6a3953b40d46ad47b6c66d2a04eee2a8d40053d15df79cfce2dc3a9", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "c0f1d697-8ca2-42ce-90d4-6905e79cc222": {"doc_hash": "25cdb47c4b283de23caabd752227bbd80b9391c7befabf5e5a7c45b04fd81c8b", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "6e890c19-979a-460c-857a-bb3cd869b420": {"doc_hash": "2e5b71344c18c8fc1589f785458e10477f0c8b4ea70472efc01fb6646901cf02", "ref_doc_id": "08263571-8343-43f8-ab10-64dd57d29090"}, "a613378e-8747-4895-b2db-b90917f69acb": {"doc_hash": "1e7471cca5b362dbdeff797622752b3f12aef37cae2a475684c704592f6c8acb", "ref_doc_id": "c3ac87e7-b330-49d6-a4e7-bf5db38fdaf7"}, "baa24c40-7677-44d8-9441-2c9b76ab3521": {"doc_hash": "c0b39fa5218045baf7bfc335ac24a30a838540a327280285934709f33c3eb9c9", "ref_doc_id": "49d2ffb5-c4d9-4e40-b4c6-c08cc6eabfc2"}, "c8d691f8-bd2e-4597-96ab-d6b3de9f4bdb": {"doc_hash": "16c0a14de200a7f8e6ac6533f547803b8667c7a5f6a74eb8d8f807b8f41b07e0", "ref_doc_id": "4c4e40f7-6e25-44c9-88ed-325a49c566ff"}, "1ef3b2bb-4c9b-42b4-9bd9-c1856ee6e8a7": {"doc_hash": "261d8ffad59ff6ee304f30d60ff4313da23359ec46172a060f7eb904f0879964", "ref_doc_id": "5ea482d0-6d5a-4b30-93db-415b26393ed1"}, "795181e0-7f31-4cd1-a1f7-a5887b076089": {"doc_hash": "75ced81be3121d5c4feab41763d9613b30fc74fe33f547dafba195e6ad79fdb4", "ref_doc_id": "4cce7351-309e-4371-8c50-ba3dd083633c"}, "5cdaedf3-1037-4e81-b8b7-45eb35bdf46c": {"doc_hash": "fa12f4465aee70b4f5cb7687af170fddadc45a982e71d815cc2657975bb2a418", "ref_doc_id": "14ad8e8c-e556-4f3b-8036-2a60b8ff5a51"}, "374e56e4-7604-4e76-a34f-75c2257995f7": {"doc_hash": "90ca5d26b0224abeca15645a7eb8167688ab7673735fbd2453986f23f8d06999", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "c733f33c-8a44-4d29-8281-4e8ba8d82426": {"doc_hash": "3bc3e67478af703e774c9748178a6a26d3abde79c83c29a5d1c31270f67ea3c6", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "1852d46f-9f24-4cd1-8348-b7f754c60b5e": {"doc_hash": "561930b3b3caae8e12bc4e479740a4a2fd0f897d556422d5b3b145a0e7142dba", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "791fb0e5-9948-4ee6-803a-9c649213c783": {"doc_hash": "2b91c457515e104fe090771e9c428a9abd7c8a22fdaa0e65024894e77b41d7a3", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "8f4ac44c-da55-4ee1-bfbe-d1509d52ea85": {"doc_hash": "847f49cc5373bef5f0db6a4271bc26e505db256d0b36af90e466e81b669b845f", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "2b821262-35be-4666-a2c8-2658645fca69": {"doc_hash": "0fa6d097d8818ac1b7ee0485c6c5bc167b6608f7058dc9e87947539682241f58", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "0ac79924-920f-47cd-bb62-26de020e0967": {"doc_hash": "3f9bce97f33b1a69ad2e755ddc411d64af479e909efe1af86d64cd2f3bf2b95d", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "15430652-0a2c-46d9-9f5b-93631a80a1d2": {"doc_hash": "0e0cabbe0c184d9d6b57d96de6ec62dfddbfeb371ba7de070ebc604a46563b7d", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "c0c1e5f3-0845-4e7e-9600-d1e9516688ad": {"doc_hash": "05f61eb29651ccd86028bd3f9aafcf287355ecbca29cd1a883e2a4e7781d11b5", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "980202b5-c7ac-4800-bda1-51b41aaceca6": {"doc_hash": "7addddd7bd587d6ecb40aaa254487fc9f2065a98a78ead02bca075ba92c6ecef", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "4b917a82-257b-4330-bac9-83ff019f22be": {"doc_hash": "43c86cd634cee8eab46e5ce75ca9def3b5cdb121b7d7ac8ee8717544bfaf13b6", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "2d56d333-f715-498d-a951-0a0080bb359f": {"doc_hash": "b6b1b13c9f0476c123049b47de50d663bb77e7f78aec7c8fb48dc0abec9c6ddf", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "d6fbd027-a509-498c-8703-4e087bd0b28c": {"doc_hash": "3c72fbedef7ce3a7bdbf107c7cb43d3b5d40c82b57f6088db100f2e00f42561a", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "a09d59a6-7242-4e7c-bc03-b49b641b98e9": {"doc_hash": "d4af47831256d503ff3f1b0c53760bd245e5ec6009347e0665c7f43e229e1783", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "a802ac02-1f8e-467e-b618-760ee7b481ba": {"doc_hash": "8dbfa2c303ecd547c23a13f449a514b247a1c521b2c37d5d4ee756fd0d4ec708", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "3f3e317c-b01b-4b63-9263-add1ec9c7e5b": {"doc_hash": "2c0d59b5f8ccbe4dd0d5d20053b74f38c8afe9d1050ec031242076a54f490f87", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "7ac1adc5-1121-4f8f-b274-a6d161444397": {"doc_hash": "4d9660c3fe8cd25ac33ce40ea7b1ca5847d6c387cf0ccd05ade81151ad0a8343", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "40276550-520b-4587-a38e-70745a12cac8": {"doc_hash": "b9132b471f277c30ec8e6fd88498db7fe8c2cdfb12e4c49502f29d328ca994c1", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "68916ba3-b73e-47b0-82d1-5ebaff33f757": {"doc_hash": "b120d1d58db0a7e1cbb9048484d079a28b4bda8f75df9c8aea3d14bb483b8c55", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "fc3e1af5-1d9c-48f9-9bb2-021ad5163f87": {"doc_hash": "563cfd89bfd7b4cb8941d3a92bbf3c92a20c611ee93a2a846d161712f0df57e4", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "33038452-541c-4e3c-97aa-93bb9ef15fd1": {"doc_hash": "1c615aca07e0139b5f7ccecce8121569af0dd931da1f78a54a0ff766543a44e5", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "b18d6ae0-074b-4a1b-922f-5598a15387e7": {"doc_hash": "792c4bf00ebf694146c6a1ee6bf0515cac6086f903d073136d2c09812b4f1205", "ref_doc_id": "0e093953-c3c6-4611-8db8-4eb87589b13a"}, "a9455b3b-d171-4f84-9b5e-7f62d87ffeca": {"doc_hash": "8c773b7ca3e5fdbd413a2da915b6125e9d502141ea2b2421cc6d0ff135191aee", "ref_doc_id": "561832ae-d4d2-4ce4-ae25-6855cecf61cb"}, "61039350-570e-46be-be8c-7bc175c22f64": {"doc_hash": "faeb67c141010ac21c5d1016e9d12d3d32b9dc34a4ed158626db9c0ad38b3051", "ref_doc_id": "561832ae-d4d2-4ce4-ae25-6855cecf61cb"}, "1ebc92ae-e257-4239-97a2-8a3029cc493e": {"doc_hash": "3d9ea65f5519fc5afe305f315c217865ab50fa3a78c0eca596a7cadde9957523", "ref_doc_id": "561832ae-d4d2-4ce4-ae25-6855cecf61cb"}, "517bcaba-5832-41f9-a5f2-eb19df21fe39": {"doc_hash": "d97cceb196eeeb38afa3f58ae9927355692970a243443cf092003711be5400cc", "ref_doc_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14"}, "9730b0cd-5372-424c-ae19-ad7fb7831e60": {"doc_hash": "54d792291f1220aff1c518321c6d28c7d04a64a57e2cad4521ef9148a9774b3b", "ref_doc_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14"}, "b2a908c2-b8a4-4658-955b-a6903a242447": {"doc_hash": "dcf7523c5a0945f96a79b306da05f7174fe5fb195298bc7818b3f5e807cac32a", "ref_doc_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14"}, "77263ce9-afe1-42c4-a995-5b97aeb64bac": {"doc_hash": "e3fb408f4fb17ff8f78da810f078fb7b3a6b4e7e25de67cd51748b22a0ecda9b", "ref_doc_id": "2fe71b8a-aac4-43bb-b06f-40a31555bb14"}, "48c41f9e-6dce-4c1f-889a-5bace055e076": {"doc_hash": "853822a586c3db7ae9c1ac1a03a7f6fce879d24d6e2fc1d484506d21e30e6a3b", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "3178f980-8295-4d7c-9d12-5a3a4f8e973a": {"doc_hash": "b112b98603e69c9a9138af677b42439dddffd0c98668eb475a5b521125940977", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "56c97ccb-3003-468b-9d58-cde938eedc68": {"doc_hash": "6b0a50bc11414f4ebee570a0580731f17bc9bb74b3e026efd5d2908dbfed1849", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "b857b8c5-3aa7-463b-978c-aed50b12f5a5": {"doc_hash": "b6d00e051ad0aec6d5f660bf153b0904fcf36f28226ead587d44ea4ae4636436", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "4885420c-1849-4d6c-99ca-a1653e629038": {"doc_hash": "49fcb6d77afef8c76d49680f506a035dab937768b07c2da8dd747f8e6f03a05c", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "d597bc20-606c-4ea8-bb8d-9cb2a09d3cce": {"doc_hash": "f886b2f9d2c4d2940651163f10e8c7f21ed5e0dc5ccb4b9e578b530b30d2dc74", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "e56129b8-df68-4dfd-84fc-cbb5ac383005": {"doc_hash": "2a6f0defc3ecb6af9e28d7fbfc55190898b9408e0093be8dd271762bcc964963", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "1e7b4c42-bf45-4a26-b050-e0a97b24808a": {"doc_hash": "db8ae5963b6fef324257f0daf353a2cd1cb2bbc6230ba77a494d7707870c25f3", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "3d5e0f53-bbc6-4598-9fc4-9a7935f20377": {"doc_hash": "acac81d94368e95195863ec8ceec93c856a1c4da9e5d8bdc72b9f6219222c382", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "98ace2ab-39c8-47a1-9988-f1b1971087e8": {"doc_hash": "9bf33cd9262a5edaf31588efddfe04265e05aef86ea22e5e7904f55b08f06d38", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "f7781cf6-d446-4679-85d6-5d96e339e67b": {"doc_hash": "5cfdc428dc6e8158ee9580402cc049c2e9677fdabb01df4f3db039cf5ddc8b9f", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "25be69cc-8e76-4003-91bb-f8b78150f185": {"doc_hash": "048261a7db7dd9307baf07a157929b0b51e80c6351eb50799f0814b37b623176", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "59fcfc65-d1ec-4bbd-bdc8-5bee5d08f533": {"doc_hash": "10ad21e24dffdce14fbf48de4c45cc76695e79e2dce34e51864620ca9e7d33a5", "ref_doc_id": "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18"}, "c62149c6-a068-4eaa-8cfa-994e8a9edb11": {"doc_hash": "9c6d45cef3b8dd675d41500ab87a6a0dc575983c61d740a55781ced54f389da0", "ref_doc_id": "52c2b12b-c485-4809-935c-3cdf76eee8b6"}, "f6b9b4d9-3abe-4502-b666-0ef87a597c5e": {"doc_hash": "0dee8b3886f4942a1652660633868fbb87ca89f5f2d03dbcda74a4e1dfa9fc27", "ref_doc_id": "52c2b12b-c485-4809-935c-3cdf76eee8b6"}, "bb871a80-a3cb-431e-b69e-f7b6880468e7": {"doc_hash": "c1943584babcd8c687cac3c3129d7f05bd71e3a84127c32d64dd67e87abba4dc", "ref_doc_id": "52c2b12b-c485-4809-935c-3cdf76eee8b6"}, "6c7e979d-c18e-4dbf-a765-f2448316c568": {"doc_hash": "96bcc08efed226a8de462cdd34d31c464a8e1d9df26220037c986f79b8a08978", "ref_doc_id": "7069e0a4-5100-489e-99d9-734e6676d073"}, "2ec35689-ba17-48fa-838b-16129a312835": {"doc_hash": "0ca2fec7dd571c050f5eae3444efa3d055b6fe26febb93e552ebac50b6bf3ca8", "ref_doc_id": "7069e0a4-5100-489e-99d9-734e6676d073"}, "56bc8c4d-195a-4c05-ac02-22845dad01f3": {"doc_hash": "c2b464bb9c5bb652e6441d7c9464c42678897761d4407887bb5229c4e6374253", "ref_doc_id": "b74c9b4c-f739-4533-9d74-995598f9b010"}, "c1318c2b-0447-4585-b557-b185225ccae3": {"doc_hash": "91a7f664f9103b2e314084372972aa97b99be8253bfb994539469985e94e4196", "ref_doc_id": "b74c9b4c-f739-4533-9d74-995598f9b010"}, "643001ac-5597-41cd-bd6c-d1f72616fdd6": {"doc_hash": "c0140af36cb3e76d5d46aa08793de0002bf0bc270a0f77cd1d6953a728582c18", "ref_doc_id": "f8bbf633-92e3-4c5a-b753-72e118ef84d4"}, "a2bfd338-a534-4ed0-a751-ca6bc1476eca": {"doc_hash": "6caef1904ee68c71da8f11a1d7a4d4468c53d8153013795455e9df88bcb05d3f", "ref_doc_id": "d4e92ab7-cf76-43fe-9f62-ab3a168436b5"}, "76627e54-d864-4660-9d5c-ed5a45af9ee4": {"doc_hash": "d96f8343fb65a07d4c7a71126a87720b30de08a497e2b86491006260f2f3b286", "ref_doc_id": "528927f1-f5e5-483f-810e-2f546f8a34b9"}, "f5c46448-81db-4c80-a244-a727bc67be49": {"doc_hash": "0125a9e85a8035ab78195265b20f74b73fd155adf3041555dd67a87ae5165f5c", "ref_doc_id": "528927f1-f5e5-483f-810e-2f546f8a34b9"}, "ff799263-a4a9-4427-a14e-ca8d0c81db81": {"doc_hash": "7c504c6a8e8782a75865b0089a5b0b08120e3655ffd1227ab1c1c643ffc3c6e5", "ref_doc_id": "528927f1-f5e5-483f-810e-2f546f8a34b9"}, "f17d46a1-408c-426f-a4e2-33d04659ea9e": {"doc_hash": "7ff5a1721d2011f58213c965404752a8abf9db420952418de753dc2130a85ffa", "ref_doc_id": "3333230a-7c90-481a-80af-5fdc291a4b10"}, "acb33a25-a7eb-4a2f-8648-2cf94eae1f99": {"doc_hash": "6c732ed5d4766bd284b5a168ec67c3ca8e3d6255866239ec55988c8249440477", "ref_doc_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3"}, "3ad52f08-d716-4d11-a762-5cf213ffb1c6": {"doc_hash": "c7a6e21e1272370dd1ba9d034ff7cb83cfb9f56a7d915de57dca7128707cedaa", "ref_doc_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3"}, "5d9cd128-3248-40da-989d-6fb1051932bc": {"doc_hash": "5e164ff0fd488b0b7a38bdb80352db7df8a088a9a3cc61d4637c8b90a9b1fd8b", "ref_doc_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3"}, "9f599f68-c32c-4401-ac4c-2ef97b3671b5": {"doc_hash": "4dacb6c66e86ab49bfa110838e58df89e8b900d8fae3af892807703d39aac245", "ref_doc_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3"}, "ffb9c3a4-8f67-4563-945f-50d58eb20148": {"doc_hash": "e51cee62394e8b32ab562c6a718b39a5cf25b2200c963bd0d70ec6670c84fcd3", "ref_doc_id": "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3"}, "67654169-7c28-45df-8b2e-4246db7c5c8b": {"doc_hash": "60664572ef124e98a664c1df7a3ed4f232a5797f44cfa8992845a79fc30f2eb7", "ref_doc_id": "23248598-1f64-4606-acad-4f12f3292bd7"}, "90e0de38-4d40-4967-a078-e37286135c64": {"doc_hash": "af43271777412c047db5db35ac1eeb55c8964346b14fccad3873b33a876d8adb", "ref_doc_id": "23248598-1f64-4606-acad-4f12f3292bd7"}, "bb97e39e-4169-4d3b-89e7-6344f86838f3": {"doc_hash": "8d245d7b6419a14ce997b8872b62b0534744e385ef274774b7e892f647425463", "ref_doc_id": "23248598-1f64-4606-acad-4f12f3292bd7"}, "63969f29-c80e-45ef-961d-c9b9c7d99e29": {"doc_hash": "8777d90ce20452799927f364404245bbc606d3dfbed143cfd60b9ee41ad7cb45", "ref_doc_id": "23248598-1f64-4606-acad-4f12f3292bd7"}, "e2fe9d81-6198-400e-b18d-884e4016f08c": {"doc_hash": "251eff04d57e8576141cb19cc6166174ba1ce6027bf2c3be7494657b009a8c6d", "ref_doc_id": "23248598-1f64-4606-acad-4f12f3292bd7"}, "aa1301a1-b075-4946-951c-166131cc07bd": {"doc_hash": "985683fe6600d34facb94b8203687d8d6d04cdcaf5c70ad997850d738219fb41", "ref_doc_id": "23248598-1f64-4606-acad-4f12f3292bd7"}, "183ce4ae-c356-442f-81d5-894e8623e65a": {"doc_hash": "394b28694da742fa5cc4fb3dd5560ec0ccf10951b0d8d0c8e4a501617f57d5c6", "ref_doc_id": "87d20c0b-58ef-42b2-bec0-0da742842205"}, "2038ba2c-0ebd-4682-88a8-c7f449c015f0": {"doc_hash": "4015e2308a1a0bbdec836c8686b5f41a6384b8546dd50aa0f2260d5d8ccf6712", "ref_doc_id": "87d20c0b-58ef-42b2-bec0-0da742842205"}, "9922ce08-4046-4f61-a5a7-75cee612526b": {"doc_hash": "16ef863a2d1ada400439f0c4a415c269b1d59f60f4e52f46e0d1c46599776430", "ref_doc_id": "87d20c0b-58ef-42b2-bec0-0da742842205"}, "dd5f54fb-574c-4503-938a-59cc80795926": {"doc_hash": "72c2d35c2ab7d0407c537c762e6b69f7c824629841bd7979f161a7380f4eedf9", "ref_doc_id": "87d20c0b-58ef-42b2-bec0-0da742842205"}, "9f26aed6-c979-41ca-b645-20db0e195a8a": {"doc_hash": "203c0fa1c00558f2a01fb41dd360a66f35f2667691b68ea0f51c1aab26667808", "ref_doc_id": "6e3ff113-83b6-4a31-bdd9-59d03d16173f"}, "ad830459-302f-4657-9b3e-c8016fc48a5d": {"doc_hash": "bd1aebbda380b1ccafb37e5c0675ec4d979709c23094af3057b8813d226f108c", "ref_doc_id": "6e3ff113-83b6-4a31-bdd9-59d03d16173f"}, "3a379bc5-7155-433b-a89f-657a1ab7be99": {"doc_hash": "883c3d62b1628130b2b19a2b9da8d2b04eded287b1529ba766a9cbf5b5095c93", "ref_doc_id": "6e3ff113-83b6-4a31-bdd9-59d03d16173f"}, "cbd30467-5882-4862-a8b0-36ab7eeccf55": {"doc_hash": "91f94585640b6735cc81e094aa9498ae608ceb99425bff31a724aefed3df7f66", "ref_doc_id": "0fbed986-bf29-4b04-8543-5ca58d3d04b5"}, "990daf0b-d4d2-4f00-8881-73fb20a9995a": {"doc_hash": "d2df8614559059a0a1b94d09f8f8fa02a0e68246f56b7dd14cd8b3530ef1744c", "ref_doc_id": "b07af591-c7e7-4fe1-be1e-412a3f0f771f"}, "c416a65f-1a6f-474b-989a-dc58770369ee": {"doc_hash": "c754050923ecad7b304df2d16ac53264a58e46b62d611ce5715591b12857cd45", "ref_doc_id": "b07af591-c7e7-4fe1-be1e-412a3f0f771f"}, "09e388c7-85ad-45a6-93f4-6afabf340408": {"doc_hash": "b9323b0b87a95e6c71700c9cafa0bba4c5960faf2301132e1db607ec7af26764", "ref_doc_id": "2ff8bd96-c422-45aa-9218-7f937d9e8ff9"}, "0c2d7c33-9767-41a2-9dbb-329652eff45b": {"doc_hash": "f9765267d4827358be2e73bb2592b55ae5292bbc3e6e393b045a93fd3d40e144", "ref_doc_id": "19a6aed5-3788-43a5-be73-bbbbaf3d662c"}, "e45175cf-c4c8-4cd5-8740-ac47e0b7d211": {"doc_hash": "5e443858b7703dc1877ffcc69980fe277273e6b1955db9da2f0d0f030325f055", "ref_doc_id": "19a6aed5-3788-43a5-be73-bbbbaf3d662c"}, "73306b89-439a-4047-b368-8904a92e99f5": {"doc_hash": "63b3c1f66cd5ccaba2a42212a1f0e942f782cc26ea7f6ca4c849eb23f9c01b56", "ref_doc_id": "caf19641-7fe6-4031-8bbf-bc87555a701a"}, "569e19fe-cf89-40f4-a3f3-5cf07f8140ae": {"doc_hash": "54b9b87e7c21e16a1848b8f6bbd56ccbfb478c3fbdff6458ed654291cb4bc570", "ref_doc_id": "006475ef-45e2-4cda-b485-fe2832bd2238"}, "6b7902a3-4b7d-4c21-be75-bd4ce01db672": {"doc_hash": "d6b1c643d034594b987c24dfbc0d8f000514a5d8459a8cbdab1383a1cc4636d2", "ref_doc_id": "5708147f-5289-4abd-bd9d-1d337477fd74"}, "db556c5f-cfde-488e-a5bf-033527feb496": {"doc_hash": "68fe632e42875923dc50a665ae23b7974de2e89c98e91fed5d8e474e688d9fed", "ref_doc_id": "5708147f-5289-4abd-bd9d-1d337477fd74"}, "b22016aa-1241-4208-9a77-2c22b5d3e7e8": {"doc_hash": "70f323ea119cbfda1386e447b9ca468d2ba4f930924a09c60b571fb4d7ab0ae3", "ref_doc_id": "5708147f-5289-4abd-bd9d-1d337477fd74"}, "a9675e07-1441-4adc-96af-5d6bebb4dc09": {"doc_hash": "e8db466a487b488acb85ce1766eba529ce95071f8fd68e8324091053c686d8d3", "ref_doc_id": "5708147f-5289-4abd-bd9d-1d337477fd74"}, "ed212976-475d-4bb7-ba3b-fd10721a6ec3": {"doc_hash": "9960b9d1851ee2790e21d4f6eb11f42739e750ccb250b1844ebe4e04cb6cc25b", "ref_doc_id": "5708147f-5289-4abd-bd9d-1d337477fd74"}, "111b56e4-37ba-424c-b284-270b66f4db71": {"doc_hash": "f33692e295bfa9d82b283990fa41d766369ecd4e1eabf23d16569cce173c70d8", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "fc80424a-cbdf-4c37-b40b-9a392ff75c1e": {"doc_hash": "00ec9dff1df32071bfc4f32de7a586fd269b0a0fa83b7a5a95a5f3543d3032b2", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "6c4c3e53-ccdd-4fff-b630-05ffafdae788": {"doc_hash": "d8884b5528b0374dc9fd763b43e7726a0e23a47276b85cf1ce194b96f468d731", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "ed8a72da-a1cf-4777-8820-cfeb42bbe45a": {"doc_hash": "197dd613a3cd2e4067de02502ac1ae52dc5f3d2bee1175488a1c4da0862a3146", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "8a8b05fa-e000-4c1c-b51b-8d14e8e64ff7": {"doc_hash": "87c64860f9d42aa13546be6fb5d6f3f5f0d9ae2a91914fe0ca87c743d10ea0a3", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "35bebf62-ade5-4d98-8e7e-1af1f7bdd086": {"doc_hash": "07502dc68954a27254885011542aedc660d94ab81014f37cb91e75ded81e267e", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "d876eee2-96f4-46f3-9de1-e2610e95bdce": {"doc_hash": "05429efd09d52d03ae0ea6faa80541535c1fb3cfbd990f31d47d8393fed8eceb", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "d83ea38d-06d0-4b58-af2d-211a7768db22": {"doc_hash": "64dfbd16cf96c80c3c63b25cf2fee62893ee8da4d2c25205c9a722c2cd320d81", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "607b9b7b-eed0-445a-a31e-3d4a45b9f106": {"doc_hash": "41e51f6342c0315316206ed1822470f158369ef6dbc795bfbfede2972a3a2f73", "ref_doc_id": "0e7aa240-6763-4c31-a92f-0930394eaf74"}, "f45c4245-4397-4ce1-88dd-ee6e4a31e2f5": {"doc_hash": "a83e360140d7aeb0c7c14a11b00c2fbbc39046b95e039569800bb0d254682792", "ref_doc_id": "16aed209-ae14-4ebd-acfa-6db87d421a60"}, "81307a0f-32a7-4539-b33c-b78503379e52": {"doc_hash": "89a97d7d64b957467d02a9659d41fd457510592d30cef3d973bb6e08e13584a7", "ref_doc_id": "16aed209-ae14-4ebd-acfa-6db87d421a60"}, "fb19153c-e7f9-470a-85f9-844a58ac3f06": {"doc_hash": "5528f916ae84ce283df931127ea0f0d2e110b15d41a33f9e9ed6e8b253c6ee81", "ref_doc_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4"}, "67605b52-aa9f-4923-be93-c89a41b9033c": {"doc_hash": "363bdb7e6e20aad253edf66c4fbe65327f1289bd2481c893fdfb71bbf7729e32", "ref_doc_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4"}, "e6c303be-52bd-4f4d-98e2-af6539830b32": {"doc_hash": "741d5e290ef111bd835a0bad528980672ccabbb11fe0f991682f7749fababd6d", "ref_doc_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4"}, "5f33421c-5f70-4998-aba0-49ea01702e7f": {"doc_hash": "2ffddda4651e3126113a2c59ac1704954dce1d3c72c46f376edf2a0e12fbcbc4", "ref_doc_id": "0298d7f6-8a82-465e-8d71-67a7856e52a4"}, "ec472a0e-55c9-4e63-bc5e-fced94decaf1": {"doc_hash": "bd3d8acd080f14e872121dac58e8a70abd9e6b476448194743835b0537681368", "ref_doc_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84"}, "fa3a23f5-9238-4c4b-b752-79c6e0ca58a7": {"doc_hash": "4541be0da3c649b787cb0d9969598806aeabff63eb746183105803c790e468a9", "ref_doc_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84"}, "fe6117fd-00dd-4c97-8d83-32f3a352d108": {"doc_hash": "a27745304f63d976c31a6349396f3c9b01512f1a54ad06ecfa333c627266407b", "ref_doc_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84"}, "ec00f952-98ec-4524-90e5-78ed5f277fae": {"doc_hash": "e4a44853116f6396504c0d47899156fab37f322a80a0566fe6a241d1d6f2ce56", "ref_doc_id": "eec95dcd-8d2d-49a0-b7db-d84599855d84"}, "6a408983-2f71-4271-b19b-d6af44a83666": {"doc_hash": "c49119cefcf3ccb00ac500d51f4fcf8e0e52eb15ebef1b19585a7750569335fc", "ref_doc_id": "27ae54aa-ccef-4038-b7f3-8e2fc06af1aa"}, "d49133dc-d7a8-43b0-bb7d-b593d238304a": {"doc_hash": "976ebc09341cf783f1818cba8f96a8bd417c413774e64389badaf923988a8c8c", "ref_doc_id": "d47e6453-a474-46e5-a63f-0f7eb777221e"}, "9d53184b-8a44-4b35-8183-478e529b1c6e": {"doc_hash": "d36b836dfd89f6fd1e818be706b381ee541b1690566bc9853a482c1be7c37595", "ref_doc_id": "71600ebf-0b95-4bca-85b0-3a80708bc817"}, "d715c2b7-6596-4de4-bb6e-59d5c26f3bed": {"doc_hash": "64c6dcd7030c9ed6a44e8a34abaf1477d22820d584e111af42ad21bd7cf0d6d3", "ref_doc_id": "ff6f1298-0577-4eee-b3d4-da4cac731036"}, "f222f363-65f4-4090-8425-13d2c1eb91bb": {"doc_hash": "8f540b6d61626b079d27bc61c7bce85b92f6d7c294b66b79c3892361037869a2", "ref_doc_id": "f924bc4d-7935-4c7d-8d7c-6d68528540e3"}, "a4f473d1-6f3c-4d16-a18c-bdd802111e69": {"doc_hash": "8c81c65ab8b0e74403b9249be6a8bd511e0c40dfd4d2f6189865144ac32c89ba", "ref_doc_id": "f924bc4d-7935-4c7d-8d7c-6d68528540e3"}, "d87a0cdf-6892-4488-8ae5-e7edacfd8391": {"doc_hash": "531eca637088568f20979d2abd7b2342d478fb778803cad0f763b084979e32ba", "ref_doc_id": "864465e1-26e6-487e-bb9a-28c3c7faeaaf"}, "77f86f2a-f846-4494-b4cb-d235b754b182": {"doc_hash": "9006371bdf17d601bfc558c34e58554f1b1d1d85e217d0f3c523598d9c45e4b7", "ref_doc_id": "864465e1-26e6-487e-bb9a-28c3c7faeaaf"}, "5fa8520c-6322-4668-a5cf-e00631a15d25": {"doc_hash": "f3e457c554b5a0b30ba0769b2bff4ff2e4d9a2da504e620dfb412e5f9c097c83", "ref_doc_id": "864465e1-26e6-487e-bb9a-28c3c7faeaaf"}, "7e457cf0-02c8-4e7c-9ffc-d455591969fc": {"doc_hash": "c9bd16acfc04fa232a0b77b7f6859cf28038db54f920f31e15156d07db3a67d7", "ref_doc_id": "57b167ae-5dd1-4260-b054-6b44b4c7c3d9"}, "06f1aebc-8da3-4389-aaf4-309e1a776dd0": {"doc_hash": "327807b78c18930636d1a1885f10c7d8e9f5d52f2edb24dd68df48912ede8932", "ref_doc_id": "b643caca-fdbe-4063-8357-9e6824b2a37a"}, "21b0c76c-2e28-4f3b-9215-8565792c181e": {"doc_hash": "54ee681de15c91d73ce505debb2c811f9139dee28554c5f61379695d916ba6ee", "ref_doc_id": "111651e9-6874-4d8f-92b1-5250950751ab"}, "54e115d5-f3a7-43fd-8444-f8867e3dfbec": {"doc_hash": "9e9fdb96f0a504bff001c51d158a524b111afa6ec4c420b128c941aa5c96c506", "ref_doc_id": "2e8c3fb4-14f2-4740-bc7c-f0458b883506"}, "73f1ac90-6092-4e31-8a60-74c78e62d30e": {"doc_hash": "f6cb056565a16092250d79a77a5f79322730521a0c03c4733ee5078051608970", "ref_doc_id": "2e8c3fb4-14f2-4740-bc7c-f0458b883506"}, "3e469d44-b7c0-4ee3-b937-f88c3116af66": {"doc_hash": "31fa4dc581e2d889d82284c61d8ffee97127f53f3138ae71a46f28f3897f7efa", "ref_doc_id": "c48226af-dcdc-4d0f-9b61-de4c62f0de7b"}, "8a7aac36-7281-412a-9391-3095faa19a5c": {"doc_hash": "94246eed2a5f5df67b54ea317065c0992dfc4aca3f6bc5cca247e4ba8773c6f5", "ref_doc_id": "3f075429-058c-48a2-9a6d-b39f9249eab9"}, "8ea3c5b6-7866-4ced-95d2-5154e251438e": {"doc_hash": "ed357f33e2b00f88003047bcf30bd150e88e4aa269ad93acbe308105cd92af0f", "ref_doc_id": "3f075429-058c-48a2-9a6d-b39f9249eab9"}, "6b606388-b52e-40f1-923d-231f9b979f4a": {"doc_hash": "834c41f18fa90e1032cc3b1db0bc16871a9cdbd60be9769966a1c5b8a2a129ea", "ref_doc_id": "3620abf0-5332-4971-9fd3-639407477dcc"}, "f7c94996-62bc-498f-9d11-68eb2086d299": {"doc_hash": "d55d1085ebc2eb440e3127880c2956340f0e4fd4c30300a4bfccdd0594ce5d82", "ref_doc_id": "68b89cd8-9859-4e0b-bec8-37ad1d583769"}, "ba4ca35b-813d-4c0a-8c0d-3337eac19746": {"doc_hash": "4784aa18b83a6d96bd9687d3fd95c0d63a455a1ac12d206144e1015629644a07", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "06429055-282a-4fc3-8f22-dd5ea159ecbc": {"doc_hash": "8b57d2fb26b2f32807db94180b9703bb4f07325ebfc89a0c73b83745f4a7f71f", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "2c688479-c764-4fac-94c4-2c82a9492eb6": {"doc_hash": "bf991227c6ec12777430e16d3929bea3991355fc04a1b7cf006104b6f5191dc9", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "82383155-362a-49cf-bd3b-ec61d6173156": {"doc_hash": "caa9598352ad6274b9f0ea32ac05b578810f03cc41a55b6cc922d6073f623bf6", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "85e9fc25-0192-486d-8278-9dcd0a2224a0": {"doc_hash": "ddd59caf5e521a14352789441cf40a039ceb54768c7e5d3d44b0cb1dbd658a30", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "e6ea4865-f774-458d-9a60-333bb57aec72": {"doc_hash": "4ce0d4c612026104c84ae2868a7af70e40e24ac8a3f7344974483d4c0daa00bd", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "877975f5-2811-4799-ad58-735577b08241": {"doc_hash": "55427197f828e58e7604f0d635a3cca5f5fe702cc943a8d980039272c1267c83", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "de7c8698-b13a-4685-a1b5-9844cd17b1d5": {"doc_hash": "d6eb6d790785bf05e3cebc1e3e85ef7154872a5aca8bde43ac9177e5a2d2c732", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "cb658af4-f1eb-4a5a-9f73-4a29ca58b1f4": {"doc_hash": "ebdaff193259ca6b8d292052a3a026d82d2e352020584fc2ae2a0d7167e63e75", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "c2ba37a7-3153-4b29-a3a7-2cee59d371ce": {"doc_hash": "5547ae16b4ea83e8c685e088c67ac2f9a4ffb779abc1ff0efb41239d399b2b10", "ref_doc_id": "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8"}, "1c6c1cbb-77ae-46a9-b56e-7b8832752d59": {"doc_hash": "87c633b7acf78d45bf51d1c00dbee23e28eaad42e4bb4e4fa85ed42d67412bb3", "ref_doc_id": "fa6b931e-cccf-43d6-8b65-03d217b4718b"}, "1304be64-8ffe-418e-b9af-70cea86a20df": {"doc_hash": "3bb77c39a7a2b92c951509b6a4f7d3b0987a313e47ab87eafdaa23826e9ffe38", "ref_doc_id": "fa6b931e-cccf-43d6-8b65-03d217b4718b"}, "e389bc02-48b9-41ec-af0d-b20301b9f38d": {"doc_hash": "4bfb364140c4e3bdb3bc3e1f6f9da02fc16194ada24df8c191a92e4fe3a739ad", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "b669dc99-a25d-489e-8848-373a2fe7524c": {"doc_hash": "7887b79ebc416807d6a2807073dc8d731ec824214bbbb761980202660a3b23ce", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "ba25020f-f755-4f5a-a7a2-89aa57c5b0c3": {"doc_hash": "6317f20a3714cad596ac575f6cda04fc4ed158ec08f42a106e57c0e5365e59b7", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "ae7b5d5b-a51e-4de8-a4eb-dfd5dd264775": {"doc_hash": "5be21f3c244b2db263c6237bbf9dd51f09293b416ec691e273f13d43cceeed39", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "f9f813d3-1c3c-45b7-a6f6-465403bd2073": {"doc_hash": "00975de0f6cac3bc27fc7ff650f76661c8e74ce87a55e5867389cd39be3fade4", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "2df48700-1f3b-4f60-b2d7-cefe472d34e0": {"doc_hash": "d9646289af95e938932872d1c09309317c2894b37d63941d3d0e70a12cc849d9", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "f14d20ce-85e3-4d4e-aeac-d4d0498c5dbd": {"doc_hash": "1d953961e93dd7e56c97e64fa3409cbba5a8a6c22e1ecdec7bee80798d0f4f81", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "80925a49-7ccd-46db-92ec-99fb1f63e186": {"doc_hash": "aa63dffecba0e8a3895622a31b6928e4fa40af98eb3794f7d28be04c8ea797e7", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "9444f85e-475f-4633-a00b-e81f5e306631": {"doc_hash": "7b45b72143a3c86b5a40fde4e6ced681b747d06e936654de1da5ec25d2570511", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "53df2bfd-efcf-4143-a20a-a59c29a9edd3": {"doc_hash": "3db0b1601b679beca239a4e6c8e55068760c0cd6eb99a9423944c40c04940328", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "2a47ebed-a137-4835-8aec-e6caaf77879c": {"doc_hash": "e6555235d5d5e171d218a66dd2a058fd4898804d812750209ff0d9a9511177e6", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "aee7dbac-c318-4bf6-91fb-c70af7e177a6": {"doc_hash": "daa19351bec173b5c35862aee722ab1eff66c47538b1a413528ce73fc98179d1", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "cf04292d-5984-4a73-9096-895fec76acff": {"doc_hash": "f7bb3c833cc6be4fb0be31cec75bca4856d6c3a324bbf7b9ba8f692b7c046415", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "f15ad6fa-d5e1-4b78-abd3-f742e2cd9f67": {"doc_hash": "d1f1e6398c7cbfb5d068e2a8899a0656a98b997892f22ec9505fdc119b2eafaa", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "629d5f8b-2e61-482f-8c4c-b1692b3bcd72": {"doc_hash": "408e34b8d2f8da517c04e1e3b0334e7e27fda684e8ce3f70ae76061095819383", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "c5c8b62f-d255-4f17-8309-ab9582b6f278": {"doc_hash": "9ee2fc6cedd2a8f8aa33e2f99e78f61319264babc3ae83d6c876b389cf8d42ed", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "4a010dc9-9852-4fa2-91f2-9153240144e1": {"doc_hash": "4c9737e1492f354330557699c7a91571b691cd4d11e14dc87204effca2ba37e8", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "3cbb3b51-bcbb-4c7b-b14d-a9008fcacca8": {"doc_hash": "51d39e12035cd2f98b8310f256ebd24629c73f6668272b3f66bc3420deb0d21d", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "c01d4ba8-a4fb-4cbf-a880-45e001694da1": {"doc_hash": "e29c4f0b2916ee747777e61c89cfd7bc56f7774347bdf142d4a37c7150131c27", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "bd948bc3-3f98-4cc1-a09a-7493c56d911f": {"doc_hash": "d5d284a57cf4b69d96cfda34ce7e3449cbdf2fe6b4b44510a8b83cdf910d77bd", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "8e6d64c8-a6d1-47a6-a7c9-17ef1b91ef1e": {"doc_hash": "337045ea3366af8c2534211cf9b2d8435f6a728a8458cc016cf23e9417848b78", "ref_doc_id": "1523a57c-6f89-45b9-95bf-f9d4d02729e2"}, "5e0f9652-2491-4a46-948e-fb3db2c95d13": {"doc_hash": "3633104e01c91ffcc9a087b57245a19e1bdf35e374b097c56e8a44e8aea6829e", "ref_doc_id": "c64dbd33-f9b7-452d-9aed-c5edff6e0a2d"}, "2462aa1d-bd4b-441d-ad44-cbb36d5b6e44": {"doc_hash": "8028cdadb2912b27d804db98f39cf57cb1e304fa4b3e342205069a08e47188a4", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "cc8753a0-9772-45b6-90c6-bac4e5d07ccf": {"doc_hash": "36ae532f3faba81f84fe34bdf5f3c6c846b6869f04772e17e614d646bcc994e3", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "08e6b0de-e5f7-4526-865c-03b5698035ba": {"doc_hash": "792d9ffd3de7d63216bb91a6508f4c8f29c26fab00b2af225b4c8cd2ad0bbb37", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "8bbd6027-5936-40cf-a6ae-a5ccecaecf8c": {"doc_hash": "a3d848b2f54e2c2cfe58286dc35df33b4c1de9e2c5ebdc1d464c6c52d9b3677d", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "ebe996ac-9a84-4fc6-8f58-33d9878650c7": {"doc_hash": "a38dbecbac57139cfdeef6abea6f747aa0872794535e288110637551a1782cb6", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "4f74b5d2-17a7-4529-8bad-2458dd7a4a74": {"doc_hash": "b6990e06384bf818b0796107b3a21899fbfb1515832ad57c537f0f1d0894d3ed", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "02b58da2-b890-4edf-99ac-93a55d44991f": {"doc_hash": "3a648b8ae8ea6f94d5929fa21871916562c44537c96b06ad725864ef51613236", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "29b38c37-07b4-423f-9af5-9576f598892d": {"doc_hash": "d94c32889740664bc9c873a53b2ff25deb9c216aeb1105659a6c600431bc1430", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "4943be20-08f8-4a48-9afd-42f5f438e673": {"doc_hash": "2a71ff320dd4e356b62419e0303f332c11c1632376ec8ec76a7ad38b9f15438e", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "9810b5ff-be65-41f3-9397-257992f29012": {"doc_hash": "5e3ff6a7daabfca7df46c60de65233c078c3014b0e2ed658830fe9bdea78aed8", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "02dec6c3-c9d6-4736-8c8e-191e40f6eab4": {"doc_hash": "5d78e4a8588951b857e5b2388c728b7bed4e00c1202d75fa441109100e23705f", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "78d97621-b7e9-4172-a46c-c3d1b25db945": {"doc_hash": "16364e68ab3c3cf01f92fe90eb5e01c946968488bb91057ed8f42bb2864a58d4", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "b31d31cc-bf1a-4572-9d7c-63cb16809562": {"doc_hash": "14eede57707f764bede49227628f7c1012afe261e6e8e68937ab017e7a61fbe2", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "8939f96e-243a-45cd-926f-49292d5f84be": {"doc_hash": "c21ab285bca5373b8643e780bec4dec2584a8ebbe94138cc59f3fd082dc6236e", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "8fff030c-c820-4452-9706-6b7b1a28891a": {"doc_hash": "badbd8674c678ecca402fb2dc1a06af7792102badcda45dac8f3bc06200beda4", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "4518d9fc-ea68-406f-98e1-cc722f800c64": {"doc_hash": "80eb5f4cfb2eafb51a5202ce3e576876f4e99675f5679abd0cbfc243387fcd51", "ref_doc_id": "2367bfd0-268b-48cc-8249-885d81853ac9"}, "e387ffa8-1e44-4dd9-84d9-33405cd46a6c": {"doc_hash": "74e4cdce746ca3638cf553f2b8f89f123a45e400767c6d13d807e0cc196f494f", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "3413355b-e06a-499f-8da4-592c50298cb9": {"doc_hash": "59678a9fb08c628c5f5136bbdb0c0fb3f2be3a670eb30e5f0f5562fee65d3ae8", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "b5c64857-c8cc-466b-aee8-2e99bf60f226": {"doc_hash": "bcc049273b237862e6cad223039f990dc120f364aaedfdcac077ac630de7a48e", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "20ba33bf-0bd3-41d8-90dc-3dfcd9a4ccbf": {"doc_hash": "bf52f56b9f398a250c2b91397b343d986002f5c19e1945b5af3c12b8114eb9e6", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "cba583e9-7ba8-4324-abf9-7e5d0e9f5748": {"doc_hash": "f61fc8f191f374a06d5d1f380cd709a145138b57c6772b456dc138e484b995de", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "166c813e-e77d-4a9e-8f9e-7cc128137f29": {"doc_hash": "b7ea73dae661934df51e85ebcab0f428b4d06314d033d26aa4e809b1ed326eeb", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "f2468832-f9bf-44c7-b4b6-a5b4e65649ec": {"doc_hash": "41fbc33be385ba7697fbe11f6ef476418901d09189eceec8275411139b02230b", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "95984a1f-27f1-4cd7-886e-6751f75db55c": {"doc_hash": "a10d2ff7e476aa6f716990870faacde31d75f51c223739c0f1c5e18ddf4bac21", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "004d7e06-c33b-407b-8ec3-c29560099fa6": {"doc_hash": "d1af1997e4de5c8de7a81fc4d95de2e422226af78621ea900421c9f52eabbaf2", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "526c1ae7-ed10-48aa-95dd-a805eb088692": {"doc_hash": "ffb40bbe259f13a9f2558bb076d9852d1c5a883368ebe3b139a5e9ee4cc3716f", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "1f3df5c1-27f0-4f04-998e-139a15fb5d1c": {"doc_hash": "faf65aac9847e56ac8bd303ef59e02a73b50d929d7b2288cda8c58fe8f45817c", "ref_doc_id": "5fa64e4c-2352-49b4-8f8f-2ba20adf8552"}, "b12f715e-f978-4f6e-8401-daf4f10e573b": {"doc_hash": "3cdf870a8bda08607503006e4783ef904f540704d10fcc56f510878488f0e343", "ref_doc_id": "4ade6753-36ad-4681-afe7-50d0d0cd83d6"}, "e45eea7b-c238-4e63-bcee-2b5b4e35a4f2": {"doc_hash": "e165d451881c9680e92170255325a61350d52f555e6dd9fa8297a12bd7772f0f", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "2da7b23d-04d9-4ee6-a9ea-d87bd1a23ff9": {"doc_hash": "55596a86ff2f7d434dcb7f26bca347675902c05147569b65b1c70262e5350c64", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "ad199b2a-9225-4d37-b856-87c52ea04047": {"doc_hash": "ece7f046cfae7effca0b0485c0a692611705c6c454538488e1f16a4fb1e6b281", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "e8e243cc-0f4a-462c-9397-2791a6e1ef40": {"doc_hash": "7be823a5a0716274c28ba1ea1208d527c773fc31ac13b3ccbe56751c9ca4bf9f", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "9f4db508-2c99-40d8-95f0-210dd43a493a": {"doc_hash": "0629fc57ddf61ff7b93b69d9589a1d3c2ea180a74840a865e50db6c66368daf9", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "7ef02331-3a8c-4baa-9ca0-a0c8dd967624": {"doc_hash": "48892b590fb72bd6483cd3c04c5087a2a5df438ece1a05f72db72516386fb62b", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "169e5105-438b-4745-b485-5a4bff6d0bbc": {"doc_hash": "f85a1ef7e0b98325f678b6b2bb3deb9e308f6d3c2c1ab8ae03cd4c746a85ed53", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "8d2632da-4099-4aa6-abc4-c17c34b9bf21": {"doc_hash": "ed96ad6039a37a33c3124faf0daac4d9c15ad8110c9ab62168eee574b99a8e53", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "c968b7ab-66f9-4afa-b6fc-b170c435256a": {"doc_hash": "477d705a55a591f03752d698eff255d51b6960933c5d04ed77cd29cc127943d2", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "27e03cb3-9428-4187-a163-df6682ecd5a8": {"doc_hash": "451598eb57325e179c134a514071c44a34090d6c1b854d83c6fad4e38c43cc9b", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "30ad034d-003c-4537-a118-17090247f30b": {"doc_hash": "014ef72e8e47703e664d928197a636969fcde208bb5a06bca2d1348a2e9a50d0", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "a8284dbc-d673-47d7-97bc-1139a476d419": {"doc_hash": "867bb1ddb60efa8b82d1796deaad53cef2cf754c2c33e288d64111a5be63ff34", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "f858c656-6e60-4c9b-9baf-a6d54f2c85a3": {"doc_hash": "6054507e17da77d5904e8e5caed080e6f500c40bf69be612e802c383f72e79d0", "ref_doc_id": "a9519784-6638-42d2-8517-e98a18661f7d"}, "c810d9b5-85d2-4d2c-bfeb-b9cdfa127f9f": {"doc_hash": "9f0a7a46e31f2e9858abc232da4c61c633e48aae34ecde4582e3938ccfa6f4ac", "ref_doc_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828"}, "f3ee601c-3810-4328-a334-5ffe388051d3": {"doc_hash": "df52075f2f9d7db3d39438f8850bdaf933b1269c1c7fcbb51dc8152dc4ff9a2c", "ref_doc_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828"}, "58ad1d4f-1148-4a58-b3c2-408b26c63b6a": {"doc_hash": "7dac50d935105b0035d73bb24991149962ea580e805d36732e8ff270fa7b6417", "ref_doc_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828"}, "4c653e31-9d01-48d5-864d-f7be2c5a39da": {"doc_hash": "cc0239f0d7928ba27dc066e4084bb9b7b6b2b11b215f993fd6204667087a7da5", "ref_doc_id": "2ad2ba69-c444-4c87-a6e3-ed5645f5b828"}, "b39eec91-9f4b-4d08-a4cb-1ac25b0b4873": {"doc_hash": "0a3e285f7e04913e2612ed5e9911debeb7d0db307aff35e902604356ba9775e6", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "91b5207f-f577-488f-b0c0-84e530cd61c6": {"doc_hash": "60867c2fee48164127f7fdb8506010f4dfb74b2191df88c7817d9801320afa4b", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "4e58e425-2005-4f91-8d1a-548bad9bbe1e": {"doc_hash": "eade9dc2057306bd1ed73f45ecef3346495af99f5532da5b796997f55a102617", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "667f28b0-8709-4d45-b9a0-f4d268e06aad": {"doc_hash": "6e001d1f742dff9a4f5f34f3f3aacadf49bd41ed323e09c68fbb1e46920704ac", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "0ea4b160-a8c3-45bb-ac35-3afcf0088e96": {"doc_hash": "3c346167301ddb308242becd666c9f0078f469ef4dea03ef8355f5406bb59e0b", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "d1cda67e-2bbf-4be8-b603-18b47416b32f": {"doc_hash": "31e0e798dbf2303483b0cc439e5c180a2f8bdea4907c4dff85ee298612bdd1aa", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "e322d306-0c5a-4eac-94f8-99fc6756baae": {"doc_hash": "0fd9fe502f86635fd328f6a4c520f9b365962ce1969f3044392c6df043438323", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "26fae753-87e9-4f78-92ac-41094f425fa9": {"doc_hash": "d117ffe9af389e75b2b8b2a2973a47a216a2ef90e72903eb1410013fa5fe98d1", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "0500d3c7-37ef-478c-bed5-dde897bc7306": {"doc_hash": "5853463ecb4f4acefa04b309d825ee701e9011a1214f2eb164fa8393d2f7f318", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "a31201a6-3e53-4933-aef0-528d4721ccf6": {"doc_hash": "186afb269be25421c85401e779c53a83ec48e4dcc76525074a883de21ca42076", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "fc0ec8ae-3217-4f67-a4bb-cd0db1017d9f": {"doc_hash": "e404572dc77559ed1a6d17386d7a3ef548d44606d8c0e9be80f8ddcf498515bb", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "6bc229c3-d06d-4cad-9b6d-99a871e314d7": {"doc_hash": "214ae3b20ba1e673380d48ccacfaa3e7ddc80b59af928e9530efeb4e8c5c4f9a", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "6b9fdfa1-a7b3-4c8d-873d-6244d3c47be8": {"doc_hash": "0134290fd410e1f00f6baab922ee1f63e856231bfb12bb1a681f0e4d4a1ccf0f", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "3e5fbb81-8df6-4a8e-9fbf-7bbabca07016": {"doc_hash": "7038fbb21f72569746513d81246b58e91ab60f1d5f6d947fca136539255df90d", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "8b4055ac-6938-4d48-ae2c-988234af3a8d": {"doc_hash": "c01dea87c4590df21b0ae62f688bbed4df423e0b6b30a0e68419613b357ae1ad", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "b2d2c014-e9a4-45ff-afc6-24c2dfe66aed": {"doc_hash": "a039c25c19a243ad604ca4e89f4e39a3d72bcc380b73f754a6cf01f6e2881863", "ref_doc_id": "427dd787-4557-44c4-90ec-902538208d2e"}, "ce1987b2-4be4-45e3-8fac-b345a4d07a15": {"doc_hash": "e940a81e8eaa2a241f477d28dfc79997c281e24b91e9792e2dacc0f6e09d80fe", "ref_doc_id": "82057350-0cbf-47a2-a169-81130a050b99"}, "1d9b146a-a9a6-4dcb-b6d3-319b32a50fc9": {"doc_hash": "8212536656a437cbc162ade63c04acefc0208f0034ed5571942e595d449f49d6", "ref_doc_id": "82057350-0cbf-47a2-a169-81130a050b99"}, "e2201727-ecd0-419c-91a7-1952ead0a83e": {"doc_hash": "36289fdadd55b7cd5c7f830e83bf01a96ff6a99a07ce73af68189bb4d2d6efaa", "ref_doc_id": "be28c864-d1b8-419b-a228-08d728cd351f"}, "7a6ded14-5d21-4e15-bd4b-690b3a4ca487": {"doc_hash": "135d04f65462da7d013c25082ed0703e4f91d24bec0ac58d157845ce611b45f1", "ref_doc_id": "be28c864-d1b8-419b-a228-08d728cd351f"}, "9af1ee05-600f-41f6-884c-1393052dabd1": {"doc_hash": "d1d456ca810b3a7365b1f770e9c35ebcb39733b5f02d9e1493e100f938545cee", "ref_doc_id": "be28c864-d1b8-419b-a228-08d728cd351f"}, "334bf31f-e63d-4aa8-a5b0-f3777d7008ca": {"doc_hash": "913c25a367249d3e00fae2dbd3d80f612196fd45c7489ae92fb19e3b7f3327ae", "ref_doc_id": "be28c864-d1b8-419b-a228-08d728cd351f"}, "30611024-e523-4e0e-a17f-e12190daf970": {"doc_hash": "032cf7d0d3db79e8e480c1db39ec14dd6caaeed3c0387d053b81022f7b12ec0e", "ref_doc_id": "be28c864-d1b8-419b-a228-08d728cd351f"}, "730cf4c3-d563-412f-9718-c043a26d8ace": {"doc_hash": "332b1818a9be8e79f551525280a0a25b0a82b3630034284d40f3c1fa7135f839", "ref_doc_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda"}, "6fc6f7e5-0fea-4b95-8df4-5e0756822aca": {"doc_hash": "fabd646ad77533f81641b0900960a1ec5038bd2c096be2a523f029deefd734ad", "ref_doc_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda"}, "58b6f8ae-f5a4-4809-bb28-a7644500bed3": {"doc_hash": "ab0806061f811768a246ac7cb68a7eb4b14c204113347dc8aaacf131b5c16bf0", "ref_doc_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda"}, "df13d2c2-8a61-4c64-b997-cb6425328768": {"doc_hash": "f9cde02f70b42768d6dcdd88a60bed9c171677f91903fa5ce59094bbb04c5307", "ref_doc_id": "c26354d2-c47e-47f7-a74e-3d735cc3acda"}, "1c45b95a-c888-4caf-b266-0695ecacc0f7": {"doc_hash": "ae68d7afd4a8723f5e7c583904c83aabd02006fd5928289c74b5c1142aad4552", "ref_doc_id": "582e5a6c-4ef2-43d0-94dd-630714f526d6"}, "2020a06f-69dc-4fc2-b667-397f08488885": {"doc_hash": "2c7014db129a3b844ceb18e21a6ef86617e657b0a659416d23d996eb08ccc127", "ref_doc_id": "bdd9faf9-7db4-40eb-8b2a-f85372f19cdc"}, "db04bb37-1470-4a6a-874a-fecfb0268ba7": {"doc_hash": "6eb07e4edfd45ae359afdbbfcfa8e764d1e16473129caec50da8ee4d9e22bb32", "ref_doc_id": "0218bb64-3611-47b5-98ee-f6bf33b0135e"}, "308a5f19-7cc7-4e36-868b-9b830f7e63f8": {"doc_hash": "1c60b5bd8f3249cbd33b71c63f5edd68ad2f17848b5326fe92457ae1ce251d53", "ref_doc_id": "0218bb64-3611-47b5-98ee-f6bf33b0135e"}, "9eb2cc30-341b-4e58-a402-6645f6067665": {"doc_hash": "0712ab25a59b75b54fe23351ec3d7f4cef68587461a2cbb83af43ce863761a8c", "ref_doc_id": "75508e74-aee4-4807-88b9-03469ba21647"}, "72705740-5e56-4f77-8a2a-6c30350f1497": {"doc_hash": "4dad577daffa4fa03abde93bd69c55ee537c5e7429f1e0e06d90820bdbe2c2f5", "ref_doc_id": "75508e74-aee4-4807-88b9-03469ba21647"}, "58bb1819-586b-4667-837c-5aa84abadd0c": {"doc_hash": "e9db13dd6eea5dab16a8904ec6666bff149224366ef6adaee4bd29fefd324bfc", "ref_doc_id": "75508e74-aee4-4807-88b9-03469ba21647"}, "6daf5864-91b7-40b7-873f-c22b7274e4a7": {"doc_hash": "1da03142e269738eeb1edff024dfd493f1c90ce68fb160e398af1f4e9fef5c6f", "ref_doc_id": "d835b739-6f52-48eb-9c41-097866b233f4"}, "b6840d38-51b7-45a4-8353-31be12bbe4a8": {"doc_hash": "9770ceca3104e0ac75057b43ba9bf9dece0880147cd30b42c5c9624a3701d08d", "ref_doc_id": "11f1acdc-d52c-4a0b-9ce6-e5d664a02513"}, "a35aacf5-035c-4746-81ad-02ea14ba97ed": {"doc_hash": "fae5bd16f34bdc23b444e904ebb7c7b843b85424356c9117916d88665af06108", "ref_doc_id": "11f1acdc-d52c-4a0b-9ce6-e5d664a02513"}, "9c64dff8-96d4-4832-aefc-0536d5b68171": {"doc_hash": "ee6ea7644bb05b31757a57947d88613428f5b94f1c05b8b077dc96075c8f1c71", "ref_doc_id": "403e304b-82df-475d-ba84-c6933d35c0e8"}, "30fb66e3-640d-4b19-879b-292386c2091d": {"doc_hash": "931314d97297a48d318fd5cbb4ce37127fc78bf32de8c0b62838ecd94281cc7d", "ref_doc_id": "403e304b-82df-475d-ba84-c6933d35c0e8"}, "2d4ccd08-00c2-4624-a75f-bb7caf17675f": {"doc_hash": "cb8a1581b51364202d1d8ff0225844aa91e96567a59e6bbd897753a3495e53f0", "ref_doc_id": "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2"}, "ac968540-e184-4bfa-9337-c9670bb5f157": {"doc_hash": "3220f7a03ff20b554a253b2e65e56afcfd47c93db5fee942a3833993a991f433", "ref_doc_id": "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2"}, "3764414c-d26a-4d16-92e4-6733803fede6": {"doc_hash": "ab958da74a24f38485f7eceebfc05d7f39049a8591c1092765a1ea43ffbb722d", "ref_doc_id": "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2"}, "d9c150dd-24fd-4992-870b-1fdb02a42065": {"doc_hash": "59f274f5107c197f5076f03b5eeff23b35e0f253f2e2555e474a96529fde5d4e", "ref_doc_id": "c47512f5-3bda-4496-b52b-24afa736b57f"}, "1c9a7b38-af38-4057-9b7a-321547c0dced": {"doc_hash": "b503cc54ae1529c478f92138379e103e2a440ac9bccd4bc49accf7d3eb6561a4", "ref_doc_id": "c47512f5-3bda-4496-b52b-24afa736b57f"}, "d92d4ba7-6423-4077-9e4a-3dddd96dfac5": {"doc_hash": "38c7afe0da61a6ff9ad199bb6727451f895198472acd13f36908c437acbf168c", "ref_doc_id": "c47512f5-3bda-4496-b52b-24afa736b57f"}, "23f1eb7a-4ab0-4079-8721-92e284cb47c7": {"doc_hash": "8907df8ddcadb4a8ed48e5314239b6e3a4eb3a8177d451cbbb2b7f824778e220", "ref_doc_id": "c47512f5-3bda-4496-b52b-24afa736b57f"}, "533002f2-6608-4555-ab9d-d03d63eec165": {"doc_hash": "46fc016e4bf8c79d4d56ab91bd913e8977da37b26179fb527dd042131be7046a", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "2e9ba9f1-b4b7-4977-9a63-ee31586bfc7a": {"doc_hash": "11d52b19fd47474d22528ec4d802b40608e3b76687f3ed6274252136896e35be", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "f4b75af1-6554-4fb7-810b-fb313a631205": {"doc_hash": "c43fa0c7439adcf30717b46f71212b40b535ddc4e3cd941528e7e9805251ce37", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "6d9a5131-a1af-4b8e-8c17-f663b0dac841": {"doc_hash": "f96c81dd67018d8196d3ef0d6e04e4652c77ff3a87887765feb5faf14374c1d0", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "0d66296c-1e55-459e-b0d2-942520113426": {"doc_hash": "6af2ed62e4183fab7d4d147966f686b169e477ac30acfec6d0a0a52efb007af2", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "4d030cc2-1b57-4d30-a96a-e3f9721371be": {"doc_hash": "2c7c1f5420907848135f2eee64f74c656c71d91c924e7e29a24ece80848d8967", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "cda7bff8-7492-4b79-bf89-3d714910f23c": {"doc_hash": "0a7dfaac53cf9d2d39805ac34da98328063ca2511115698a77fffcdc32ca2bb6", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "36af5a0d-2390-4057-9e7f-a963bf9c3ec4": {"doc_hash": "2e9846de820754ea5cec4b6f691b68880a7d664e01ebd7e05e9444292e21d863", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "ef0635a4-bf05-45a2-93b2-8cc3e505b99a": {"doc_hash": "f20b79e21b8f8c30340ff6fa998d557889ede91c6788d9ecbda4cca1b00c342b", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "96df0748-aefb-41b3-8c7d-d1a11163616f": {"doc_hash": "3b14d30f36cc77cbb241f39302b7ce95209a83af284326835b4d45c9c6b68690", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "9f81e683-5a6b-43b2-b53b-b0ef87a0eb1f": {"doc_hash": "7e085a0d852e719ffe0b44e9e02a1e796e9ac6158d1d4252a8b9027fb9438f67", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "ddede5ce-acdc-4ad3-9dca-9b35133ee1c8": {"doc_hash": "049e2ebbe0b22ad283110597af661418891c63cefde78e7e67079068b3832e4b", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "04b13076-5a3c-4b51-8e27-326b1db964fc": {"doc_hash": "b06952b7a5bd4cfddd03fc24784f35aa3674a1fbef62e6ad9c1ffacbd27ee0d4", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "bfdba06a-b29b-4744-946a-8b1846977489": {"doc_hash": "1fa109766183bf24134f13f46b08666d3a80d8cf7b12ccb61c9c03a4bd01d9c9", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "cac1345c-f66d-45ae-9d6b-1472fa77b94c": {"doc_hash": "dfc80048af6d3596b868477866501df5b7dd0c6642e832489ed7c84c1c0f1f42", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "d4740525-790d-4f00-82b0-33225c23b954": {"doc_hash": "277ee0145dea442b3c044591e83edf24cbeef3d78684bf56ecddb5897a78da33", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "465610d5-5e11-43a5-8cac-067a437a1c94": {"doc_hash": "01fdc4b48aa3919cec6ee0a23ff4f72f895f2d1255083bf8278235e31f0424a0", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "d1f3181d-157d-4b18-b550-cc24298dc7ff": {"doc_hash": "2298672148c10981678a04ecfdfac78fbc6a8c492f7dd4f19437a8cd6d74cbf0", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "df58f73e-9323-4aab-a1c2-7c255e7f7a3b": {"doc_hash": "61430def8531b2dc4b4e1485015ce0fe347092dd8ff55841a7c36f48caa53bc3", "ref_doc_id": "dfab378e-9c63-49a3-9708-9fd70417a2be"}, "6251c57e-8ad8-46bc-a268-4fb444589db6": {"doc_hash": "d8cb8853a861b02548f0293cb50f7d38f48b41d0d83d36ea26306ffa752484fa", "ref_doc_id": "4c9706df-10fb-4f32-af79-a8688f48dcd2"}, "2d0dec51-8429-4035-9621-e7da9c29d44b": {"doc_hash": "e3b87a292dfb3b494a398450796091c8f8b450619419410fdc77f63a7a235753", "ref_doc_id": "4c9706df-10fb-4f32-af79-a8688f48dcd2"}, "04129585-50ba-4680-910f-2805dabd896f": {"doc_hash": "9ab3d96d9c87507ce3716ea8c1457c71dbd4dda76d2b4a67c43f174e6fcfb2ea", "ref_doc_id": "3280c948-561a-412c-b0cb-09deafe1632d"}, "39f69bae-f236-4dc6-a658-6defebf81e2c": {"doc_hash": "8c6f927c9e698bafd1f7ae40ab46ca2ccc65eec7ae0e6ffafa2447c6bb7e8016", "ref_doc_id": "c40b878f-42c6-4f26-9c15-6a0bb09159cc"}, "3b051df0-8919-4c76-a453-634c7b833d57": {"doc_hash": "e7398a470816618b5a3258d04f0d69845fe62c245375cacc038b89b5661813f8", "ref_doc_id": "71398931-7410-4ca7-ae52-0ae56fd56545"}, "796d5f95-8c31-41ff-906c-92cb044ef771": {"doc_hash": "bc008e59d58df941b8df195305ab488376650aa4b5a5b07e99f818e262ceed77", "ref_doc_id": "71398931-7410-4ca7-ae52-0ae56fd56545"}, "d8dd47e2-2205-4248-a9f2-c436dd678d69": {"doc_hash": "2544d5e25c3fe9d565a6479bcdabc54b4167b5a04b7f1b9e4766a51b548c8d8a", "ref_doc_id": "71398931-7410-4ca7-ae52-0ae56fd56545"}, "9df315af-4fcc-4b0f-9823-6c9718fef672": {"doc_hash": "98402eb380a3124cf9a822dcef70b2b540162ad9ff2427f3095c67f6e1446b43", "ref_doc_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2"}, "69b9a58f-709a-4415-9b0f-4a453d43dfd4": {"doc_hash": "cea35bfe3931eb18b956c4d13711b5d7ef2a59e425d2c6654493570949275ef9", "ref_doc_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2"}, "79c68ee6-a4d8-4345-9657-b3bfa06b100c": {"doc_hash": "4685a474347627967727280dcb5293902d11ccfec0e03da5e16526e822e6e2ae", "ref_doc_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2"}, "c27c4b4b-3d90-482c-a735-c23265a597b1": {"doc_hash": "8afec43326b854e37928f9025bd1d2648c871f5d4a4c05468257f680a6e2cc7f", "ref_doc_id": "4598b96f-9b46-4f39-8520-83ebe49fcad2"}, "9de51b0e-2b4b-41a0-a590-fcfc2eed9ee7": {"doc_hash": "4492508563cc1f262c7232273bf4444db77b3e3cbe3e54bcf8474d5b4923d19b", "ref_doc_id": "f2cf57d2-dc27-4f54-92ab-b82692befbd0"}, "c4568811-c3f2-4ce1-aafb-c45e83f874a7": {"doc_hash": "30fff8d573ce177718ff1ff7dcaef444f47cc2f68b4c940d7440f1ab6b588ae7", "ref_doc_id": "f2cf57d2-dc27-4f54-92ab-b82692befbd0"}, "f27f7ca4-a396-4330-aea7-a7617c579e2c": {"doc_hash": "cd53ae6aeed728a67cc02c5badc7ab4b3e4dc2141bbd90df26e85c7a5b5b0ebd", "ref_doc_id": "f2cf57d2-dc27-4f54-92ab-b82692befbd0"}, "5e7cb53d-f8c3-4d61-8a73-f0882ade9373": {"doc_hash": "a050b5aac0a7108b6e2362a4557cc9902e90431e2df1644fc8f58c8f26758379", "ref_doc_id": "6173ac81-8653-40d3-8410-9c0f1264378b"}, "60011d1a-4c21-4b2f-a856-adc4c1097727": {"doc_hash": "670a163423ce591570ea8542fafd9de8fe593d0804659dab081c8046f165d2ef", "ref_doc_id": "6173ac81-8653-40d3-8410-9c0f1264378b"}, "586bf52e-95cd-4c1b-9ac3-09a5ce742031": {"doc_hash": "232be9e7efa4b07c6fd82a2ea9dc0ccd337a225ba2beb3cbc0b7c0df725baad8", "ref_doc_id": "6173ac81-8653-40d3-8410-9c0f1264378b"}, "e995efe2-854f-4b9e-8660-515b059c1d50": {"doc_hash": "8ef98e0425aeb6bef6b6144f4b561da096298804b566f4d3fb6572560037330f", "ref_doc_id": "6173ac81-8653-40d3-8410-9c0f1264378b"}, "1fe8ad53-052b-463d-a543-644d7680e11a": {"doc_hash": "c756fcbdded85f22530fe510a1abe03d0bf43c388e63a03bd4b941071f3c18a4", "ref_doc_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4"}, "c4b51ccb-dd4b-4b9a-8df6-3c337888349e": {"doc_hash": "4d2cc1c384f0fdcdd33c2fad727985ff9ed2fe8f83282ba9a264999beaed01dc", "ref_doc_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4"}, "b431e031-548f-497a-9ea5-9093cdbff35a": {"doc_hash": "f64eb24042588475cc7229891e4c8b6d4f3335096b1eae4b8a28c14f61ee188e", "ref_doc_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4"}, "daebb235-ec0a-452e-bd3d-c706fee59a57": {"doc_hash": "2eef3297dd8cb37218aac1abb26a8bd65554b6f818def64528d0ec8c8ce89a7d", "ref_doc_id": "d5679d6d-d89b-409a-ae4a-964ab5aaaef4"}, "c1ecbc54-9701-4a6a-8880-4982726e4279": {"doc_hash": "4a4c1e7a3094a987ff400550ff25ccb9fa9281b3b060800a2f0f43761017d6ec", "ref_doc_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58"}, "5c1c9944-4b46-4e99-aabc-11c468dbb02c": {"doc_hash": "7eb8defbc670d85915f42941f767cb5fc0c509e3bde16782d9eeac2b75f0917f", "ref_doc_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58"}, "c38f3b4a-f968-4e56-96f1-d971f815db1b": {"doc_hash": "c704a4f598e05ac6dd6d85596f8e7f3d6c6562df8e0791012197e7601b188ca4", "ref_doc_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58"}, "22af4029-d9b2-42c0-bb39-033689d57475": {"doc_hash": "c1aeb0dd2145a165272dd986afd5dd2d161e732981ded5645666542dc787f6d2", "ref_doc_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58"}, "7e0a5d5f-6756-47d9-ab1c-f50a6ca512fd": {"doc_hash": "5cbe1ccbc195edca2cf529715daa2254418547f911c12d270d34d47eeaf1db05", "ref_doc_id": "2eb6aa12-daf8-4e54-808e-1d56286bec58"}, "1825fa1e-229a-4332-930b-b8094cbda62b": {"doc_hash": "a25ec584137e727ddcf522aec2ca3527350e80dc2724882b546baaeb678d6737", "ref_doc_id": "f9db8f74-cd21-418d-b81e-081969a4414a"}, "522a07c2-0cab-4cee-9e74-fe9f152d206a": {"doc_hash": "0f0ebb306f375f4efd87b17e95539000b44c21c6dfb4657675732d7434957f35", "ref_doc_id": "2e5da387-c064-489e-bd8d-0586880c61e7"}, "0708f3b9-f68b-48af-a452-77e30f3d85e4": {"doc_hash": "8d18da18f6fe78bb44cdeb7e4f5b4a53c6d816f22dd27184bf9628ca0a656f87", "ref_doc_id": "2e5da387-c064-489e-bd8d-0586880c61e7"}, "e745af5f-64ae-4c4c-a804-81d1eb2f0e69": {"doc_hash": "e3ec0cb8b5ba8fb384c9660aa9cbc4a0dea3cbf29bb96340cb63bf10f66db194", "ref_doc_id": "2e5da387-c064-489e-bd8d-0586880c61e7"}, "2d29d632-abe0-4561-b85e-32080528baf9": {"doc_hash": "c5ab326ceaaae638c8b73f0a8a6b5ba4b2e5399fe54c9c39b91ba6c2425b71c0", "ref_doc_id": "2e5da387-c064-489e-bd8d-0586880c61e7"}, "6512e6b7-0aad-4e28-857a-b596008c992a": {"doc_hash": "0ed38ac39a9ce52c5f270599225b5a6bb4b3ca94e39219dfc6a76d0475d365db", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "2a51de68-7a7e-49a9-9313-46bea4c8d5b6": {"doc_hash": "549604409c02b9357aeb18834381acc6be12b5bc65f525e6ac13881a8e2cc555", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "4853efb6-0251-40dc-824e-ba455f7d1b00": {"doc_hash": "0ae2b9fcc74109aee1a894ef3aac7d8963acf34f94aadac6aadb09bd15a3bc8c", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "87edc919-7263-477f-a00b-c1d87220e308": {"doc_hash": "a8bd6f91cd1e425472c7d5de86d8e6fa6fd3a0611f3a7e8dc25f4c165869e036", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "96e13a52-a0a1-4114-aa91-7bd302a1e75f": {"doc_hash": "91d6a415f7170aeebb3ca1e08d7479ee16673f2c49564efe124ed53f07355ad9", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "287ce246-5231-475f-8a21-cb7984ff7601": {"doc_hash": "9183f320c9bbf47831dd6376f2560b192e3b10018f6d50534d376be485680527", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "5c8d8155-2642-4e63-a2c2-3022e13d918e": {"doc_hash": "778d26ac05d9bb809d770b0c75ea3cb9cefba25be46075b3cf6b46675d5d6391", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "07a6e5ba-ee81-4c4e-a7f6-0862db34d739": {"doc_hash": "82fd3f676f07c6437a6dcd2d761432d97e7611a28626215ce376e82f59d5521e", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "c8915f84-f9f8-4cde-9923-4d5142f4f3aa": {"doc_hash": "542bf4abf9daa419103c07d0806e9a618ee4fb6ddfdf561f90a77ba48686cc31", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "9f3d21ff-903b-4efa-a331-d849e696cf89": {"doc_hash": "ab032a392717c27bdef71ecc402043fca882cc79b9b5ae28d46f08cff464266d", "ref_doc_id": "646c529c-5eac-4593-8ab3-e6a3e0db5227"}, "06b62680-0c5e-47aa-8cda-2c740704b118": {"doc_hash": "11323ebdb1e71fee21916f035499a6016feb5ef9f0cefb16165e91bdf48b1007", "ref_doc_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4"}, "bce26b7d-d5ff-463c-b3dd-7c8837a0af50": {"doc_hash": "9cdecc422a1f07cf11cae372e51fd5e604124532f7ea0e59edb4209b9a6c7a47", "ref_doc_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4"}, "82df2bc5-b0de-4a76-a7ad-270dabaf0b03": {"doc_hash": "4fd134efcfdf670edee81217ba912ab9e43bb621a3b4ed63c737aac0c24cd34d", "ref_doc_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4"}, "f43d993f-3939-4026-9979-62daaaea2bf4": {"doc_hash": "75e0b47244a388128886a5f13bd88e941e050df44113bc3add2cc3c2178d1241", "ref_doc_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4"}, "173fa5ce-2ceb-4c9a-a3c9-30b4a52c2033": {"doc_hash": "f932a0514c8f6b3b9efee64ee68211ced38c4d7817a395f003a0a197d767d04c", "ref_doc_id": "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4"}, "b560efb5-e638-45c5-a73f-525c28cc10f9": {"doc_hash": "baedf445e7a0d6a4d2919e4d855412bb881cbaa0cf3522b1ff37c68d1d0e5bfa", "ref_doc_id": "9adc84c1-89d0-49f4-a776-02a43a3f7d4a"}, "4acbccb5-9c1b-4895-bbab-85f3e2afcec5": {"doc_hash": "452566c4bc19157c92fa6a2318514806d82cdd88bf6de42a6b7a4ad748678ed4", "ref_doc_id": "9adc84c1-89d0-49f4-a776-02a43a3f7d4a"}, "7d07fd75-09d4-4e28-bd7d-d51ffc414a17": {"doc_hash": "262efc59bae6ca882bcbb9f28f9f151c16c8ba8b037997022d622c632e8627c0", "ref_doc_id": "c3b6f9b4-002c-4fe8-9f40-ce51b12ee455"}, "4f90eae5-cb40-4d88-801b-99dd82de503f": {"doc_hash": "ed1725bcd7b2171b00393e5705bb1fb6fdb9e3de6b1070c420c912250cb42c7f", "ref_doc_id": "c3b6f9b4-002c-4fe8-9f40-ce51b12ee455"}, "922b1d35-48e7-4a9b-b077-a75ab4131f22": {"doc_hash": "edf5e4828480b421b91c62097f8efd0641f49d465a6ee8b7a81d4dd5cce54c62", "ref_doc_id": "4ab1ab79-3d32-4130-9099-129f182c981a"}, "465927f4-2dc8-4340-ad19-0b41b7cbd1e5": {"doc_hash": "0b76c335b6937bace0e5ecb7c15faff4b0279a7a81a31c04feebc7c45c9bc421", "ref_doc_id": "4ab1ab79-3d32-4130-9099-129f182c981a"}, "a1fde0c5-6332-43e8-a8ce-f51daa09ed7a": {"doc_hash": "29acb1106a2e144144548a0a5e16a05065abd0a5511b56736cf4a77b6725ef6a", "ref_doc_id": "4ab1ab79-3d32-4130-9099-129f182c981a"}, "7a1c1cf4-1799-4303-a0ca-186b8a78be84": {"doc_hash": "12f36f3a403f23e0722d8390f6bf0d227f8855ab61b7516cc126192f0b83fa82", "ref_doc_id": "4ab1ab79-3d32-4130-9099-129f182c981a"}, "13881e6e-636b-4368-9141-4668657a3b26": {"doc_hash": "50dccb57c799cc8418ea6fc46a1212ec0bc3c78d2fdccd3a3f341704e86e012d", "ref_doc_id": "4ab1ab79-3d32-4130-9099-129f182c981a"}, "56ad6fb5-2b2f-49d2-bb03-7a6df078d110": {"doc_hash": "2ccfee81d9fb93cccafe784d12edb6fe1fc75e8d8510caa18f06f711cae1bde1", "ref_doc_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745"}, "47ea36cf-b05c-44f9-b687-392550d322f2": {"doc_hash": "1aa533b40cea79612bab14cf1d6588deec3362dab77268fdf111bf730f540139", "ref_doc_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745"}, "d162be4c-5bdf-43eb-af8c-f0df9870f3cf": {"doc_hash": "4881e28586ba76305f9b060b8f1cf89c4300dfc490bb142233be9853912389f2", "ref_doc_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745"}, "0cbf9190-c37c-4ee8-bafe-711bd7910657": {"doc_hash": "9708d008baa6c1bdf393d5322f9b94b4a0e2fdeb6ce3b0f06d89c22c3182b652", "ref_doc_id": "f12b7c63-cce2-4fa8-acc5-820e721c1745"}, "b245ba86-5360-4875-9996-786b86addab2": {"doc_hash": "9df1e86a6ef8a591e37e9fcf8251b61ea5598462ee31d345667e70528a89896b", "ref_doc_id": "66a18a84-1b5f-4b0f-b720-748bcb8b0196"}, "b622b9dc-bdf1-4f55-a76b-1c8cf5ce6669": {"doc_hash": "c34e39b3ae62c0ef94ac37c51af2ea8a7ad20a2f0192549d062592301de85875", "ref_doc_id": "66a18a84-1b5f-4b0f-b720-748bcb8b0196"}, "06ab23c3-f2ce-44d3-9c6e-570ea347db4e": {"doc_hash": "d343577534a03c64b81548bf479da7e3e80a4c578dfc419958cda392c623bf6f", "ref_doc_id": "0feb1205-97ee-4a1c-85c9-f11e6a22d309"}, "81439625-6cf2-4a40-9b0c-65dded988b19": {"doc_hash": "da2fba5726f38b29f141765df592df062cad240bdf23a3cf13cddd9a00a82785", "ref_doc_id": "d11984d8-79db-42ea-92cb-481dd022db42"}, "d4d9fb7f-a1f4-4acf-ad27-98fd2e5f6882": {"doc_hash": "9d4bea7f73b1d5464b24d28ec03290ccf30fa3fa5d064f9aec9f95dc14dd508f", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "4a33c265-3f09-43ef-b129-98af9e30d6e9": {"doc_hash": "5e11dd7bbdc0d776c3fed2f72d126e588b43847a3da609cd279c1525bf858f94", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "449239ce-1925-4a57-bc4c-921c01d4ed2f": {"doc_hash": "5724d42483b7a85ffa1b6b08103d4fdfca0e9217e45e1633be1441348b970f51", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "af15de8a-7849-4c60-9830-2461c50b9e00": {"doc_hash": "7c68bd440ac7c352169498eea9aa169940a3244c99bdb970c28d7553c049b628", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "25f3f60e-7ebe-426b-a445-129d9979cb3e": {"doc_hash": "abef340a373aa88765244b973bf77f1c71f90815999e3f92a8bf09a274bba577", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "1740027e-0ac9-4607-a8f9-6d557ecd1cdd": {"doc_hash": "5bcebd37b1c5573eccf1be6ee890637fe8fdb4b74ce54a61b1046ea541421d79", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "2b315cbc-c591-49e3-9582-27ffcaa5211b": {"doc_hash": "12061acccdc9fabeb1a71f6a650c03a109c066bd46aa6edacab4d8610900f525", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "9809b8ce-0da9-42d4-9551-77dceb4e10f0": {"doc_hash": "3853479e735c1fa75d5bd6534ccc6deece039f58495025cf7485314a2a0be9c8", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "41d52090-9c9d-4298-a03f-54777dd3853a": {"doc_hash": "a472f415e3729da418c89591bc06dd85fe532ec695a7f608598fa22f4705a5fb", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "084fc924-2203-4713-abed-2aae5193282d": {"doc_hash": "7a50f87a239ef1d11c98ba7033ed328397270a54707d1738118c725f5316cc7b", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "feea7abe-0f51-4030-beb2-f0515176e9fa": {"doc_hash": "86914cd797f619f7b85fc230a85b9cf74588b43bd2a9c043aab3dc4956011e02", "ref_doc_id": "6cfa1bed-cfcd-45c5-901a-79a33af2cc23"}, "577dcc23-e65c-4fef-8e58-2b4ae76158a6": {"doc_hash": "5f109c1e1208386119a118d66134a7d5534323d3eeecf0a4025ae735cabef040", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "8dfd4f2b-be2a-4dc7-bfe3-7f952952329e": {"doc_hash": "acd154cbd960470eb6d1e787d59ae1a214db503df271130c5416f4dcdece5476", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "62b1ea51-0c0e-481d-9fc3-0eed0ae2d38d": {"doc_hash": "b25e65bd5bfdf9f5e85ae571f309316637e839396ca3137230ce7f8c1740f2d1", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "f1825b8b-64e8-4865-8646-7a4e3c2747b6": {"doc_hash": "a4322a92d222dde4d68867f70dc74ad784a4d2100c28b4677244aae3e28883ff", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "b756a234-d78e-4683-9a55-be98c7846c36": {"doc_hash": "5bed0d7b93ad5c4a4d8c3cf10cd44a3672995bd4ef2cf942c4202cdcaf1ce8e4", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "45cb09bb-0d71-4167-b1c8-32d50aefdab6": {"doc_hash": "55c00b5d06d68799623bd0c99a88eef9c7d15f78bff54516e1613ce2319f772f", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "0eea05be-f081-4868-a8fb-1373a13ca448": {"doc_hash": "c5c51878e3f3ea6e63e7ff20ea1c4248bb9d6dcc4fa0d47e0d5672301e660dbd", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "c93ff33d-bbfd-4f03-8885-7d06df0e69ff": {"doc_hash": "bd68c25db6d7f448c0ed214be947563db52dea94e67a72b3a6d0444cd292c921", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "5c28639a-e1bc-4fac-a5a0-012e65f83fdb": {"doc_hash": "33f82e1984e13b3e9b258bcfb537ca52418ed06a573f6c27afb6791923f847a3", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "cc9342a1-efe6-4374-a2b1-c3c408d14d28": {"doc_hash": "2bd7c9c5f03c44d5599427e04b810a9bd14e733e336ccf8aac0f6389582b99fd", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "30507958-673a-4c4f-93e1-383905de3135": {"doc_hash": "b6406c8ff3428b082e123efd2cfe8dbdc347b3ceb79faffa58819576a5c240d6", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "94eb13e4-417c-42c9-be30-077af01718b5": {"doc_hash": "01e4b69091aeb4844a94e465cef54cb4cc5811c7ce82c858c49fb83e671f9249", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "3b8fcf6e-4b18-4201-9d16-b6b477e8f38c": {"doc_hash": "6c305c0421557160161707de1aa9df59850246f56671da8761a3f617423e9c0d", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "ae038958-0785-44dd-8509-915a7290b53c": {"doc_hash": "fcc97b30a10b7ef0b2cae7a76e6a396f28bb0696608b93c81867f00d298791a9", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "203ee156-addc-466e-9a82-6295eeab53d2": {"doc_hash": "398baf49d25da382c4db3edbd539df8c60e081794a1c1b63d580d0995217ad5c", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "d6f20b95-3bc5-4508-b994-b2da2569f7eb": {"doc_hash": "7237ae73428d7393ea4aca65318020a3ed9d9c47dc30a6e0c63b4855d7bc15a0", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "59be979f-a131-402d-a55d-9354f00e71e4": {"doc_hash": "b24345503009c4282fdeb4ebbea2f8f8416c2afd9acb917f5092bff4155758ea", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "fbddd89a-f16d-4b94-a6c5-b71d5ead481f": {"doc_hash": "303cd52a26b87d9d5735eace3c64474b65206498cbe78914dc9a5568d5390baf", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "2d938ef1-1a45-4773-ad0c-dc68c54e55f9": {"doc_hash": "b8b9fe8fd383f2bee0af498483f0f516280c5496f67e2773eef1ac09a29de8a2", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "9c971b77-0c0e-4997-9996-fd251db69051": {"doc_hash": "fc62b148384af88298beb28fd89a54ee96695313f8103c04694dc3b876ab5d71", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "c50c6157-26da-4998-92cf-454271a10814": {"doc_hash": "cc2565a8886ffc8abc3b2cafed1881779ad6a80e940f76398f5102491803c885", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "7afc1dac-44a3-4d9d-b4e7-6250a3b636bc": {"doc_hash": "b26bb8a35973318a8b6469c20fe0ba18f8068d77e4a2d43b83527e0cb2382f72", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "2fb56eb7-2ab7-4410-a432-ffacfcf2ab30": {"doc_hash": "4b976ce24a41a549e57fc1ec535079810da5568868df7ba4b0911660a659fd84", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "873289c3-952b-4d85-9f33-ae675e4bd3ef": {"doc_hash": "d71ff6ce915c81a94fa4867fb5e86d8f67157d7718da2f06af1e9916001d5331", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "bf95b203-ca55-4d2c-9bfd-2eff59ea344a": {"doc_hash": "cae0f25bd97e2e65c8c0be5c3d103d50df7417164084a92068e4e563a672dc19", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "9426be4c-3ed0-47c4-8caa-b5bdc59416ef": {"doc_hash": "81e5e69215727b90925100afa02d332a342507ea2f485185033ace76e62da3fa", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "1c83d32c-2c38-4f72-af15-23c9853517c0": {"doc_hash": "43be155d97333404c35a9b90224c377d72c23b2704d23b3bf5d367c2319bc490", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "363011cc-de73-4ff5-bac7-1f2975667205": {"doc_hash": "e1bc18181a60bc08304f357ca926721ff27931aaa194583b8d90396254f16e61", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "34f4b0e5-bcd6-4e71-ad4b-91e0de40b19d": {"doc_hash": "18f6c740f36236679dbe03e6dd89ac9951f8cc77c19812f9909d9072ae2369d4", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "8144be0b-86b5-4d14-9968-3e545cd0b5c9": {"doc_hash": "3f0c77ab8635d2d09b949ed88bad458e174d8b56215320c2088b3b6d3c03184b", "ref_doc_id": "28090739-2427-4b56-9a60-6616ef46c192"}, "1cfcf20e-7834-4a66-894d-8c6eefd5eca1": {"doc_hash": "3eff4e8cdac8835dbf16255d625d3b51400f7f03aed880317252a823f4572c83", "ref_doc_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d"}, "ab2a2a2b-d3e0-4feb-8314-4e147cece9a8": {"doc_hash": "467fcaa82d8f67170ca00efda64184aadb23cb4c5adb6a4653e00292fb772e74", "ref_doc_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d"}, "73eb400d-534c-45df-84d0-b5d0ec7a2154": {"doc_hash": "7f01cfd1e62d5d4ebb18e2a269b1f5069d64717917b3d14980aeb57711fb5537", "ref_doc_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d"}, "ccc5f0fd-6fd4-4376-b755-eb9966aaaa40": {"doc_hash": "791bcb806e34abeb4398c8f80d977fca34206b0f3ad64a0a72e665423edbfc97", "ref_doc_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d"}, "3abdbdb9-ab6b-48b3-b65e-52a2df1ec7e0": {"doc_hash": "41fe511850a73a716fa8eeb93559310c143e323bba7a5457a5bb469565d3f108", "ref_doc_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d"}, "459ee5dd-7679-4107-b969-75296213ed5b": {"doc_hash": "f94a62b435ca283d223c1528d3eb3a10f9b04de9b9d5db2c2cc422666be7a499", "ref_doc_id": "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d"}, "4f7ef0dd-ce74-41a8-969e-d13cee2cc871": {"doc_hash": "187f98e3f7165a0d9576a48d7e7d5b851cb631893c43490b119160efb5559c43", "ref_doc_id": "3dffd8d9-c254-4202-93d8-6d8a15315eed"}, "60c56d7e-3d90-4cea-9f03-b14673c3fc75": {"doc_hash": "0235f715cd98ea8994ec255bea9eceac36f4759f650bedb15cf45e44a1c96724", "ref_doc_id": "3d5548bc-aea6-4b6f-a9f6-90e5e46c814b"}, "d6896920-5143-4518-bcf3-cf5bf45263f5": {"doc_hash": "c73fb6139cf0d8f8b92d102d54c587b539c0d1616d6868f1618e38b7f9e9c557", "ref_doc_id": "3d5548bc-aea6-4b6f-a9f6-90e5e46c814b"}, "eed03cf3-5729-4485-8e0e-243f8091f10d": {"doc_hash": "0eca9ac72c8f7258384ea70bbb50671ac808c99dad7feeb4df5315e68001f216", "ref_doc_id": "13f3d575-3199-444a-8d2e-3f33dcd14628"}, "fd974512-6393-4cb5-8443-54bcd4364157": {"doc_hash": "7cf01ac8ce936c6898fd52b1b03f2c3e9f95f720b62371e9ec76b7c570218b0f", "ref_doc_id": "13f3d575-3199-444a-8d2e-3f33dcd14628"}, "7030e486-24d6-46ed-9ddc-577228af23a5": {"doc_hash": "d834a9aa280ad349e0c930c92a4ab0f853aa3225e5f05e9e1344a544d8df7bcb", "ref_doc_id": "8de3a32d-ac87-4158-8cca-f61e29c7633d"}, "5099202d-a2c1-40b5-aa8c-b528b2445c3a": {"doc_hash": "a0a970d6859155953d3472c85a17d9b00126581ebccf17e1c55f97c7c88d308b", "ref_doc_id": "377d8596-39bd-487c-9c9e-c4d1e341b8f6"}, "8a7778ed-14e8-42a3-970c-d1d19377cbb7": {"doc_hash": "2d2d1e949a1f48804df1c02ecf944263b6f5cbe877bb373c5a5b6a1bebdd8128", "ref_doc_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62"}, "98045c60-eea5-449c-ac4b-bb056d3c221a": {"doc_hash": "21697ff4593697bbab04df66ebf725e818a0295b52288cd4aefb5ffaaa178970", "ref_doc_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62"}, "b61bef4a-5bec-4586-85e3-fdd3f5459dcf": {"doc_hash": "b2fee98f20d110824f4b2557a3309d0a877fdfbdde434e1ebe8212fc0b5a7bd6", "ref_doc_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62"}, "0cd549f5-201a-42cf-b994-19d54a0b3d88": {"doc_hash": "32fabc348f5012e5a43902d394644cdcb0c66feed6ebcf4cc14df2ad0c92810a", "ref_doc_id": "be3da1f2-624d-4206-8c2f-55fefbae5a62"}, "f9a98226-1717-407f-a224-10e0de4d7784": {"doc_hash": "e717c471cc75e74f7fe2fe7daf0d8c3ba6b41ffc07796bb8089c1b9f606a646d", "ref_doc_id": "68794f90-f54a-455a-b5d8-94e557a74110"}, "fa1016f5-61cd-4269-b439-98b026672b9e": {"doc_hash": "5270860d07bcc66a105c2d90c3ce7a46a584c0aa66412d870248d91c20bd6e56", "ref_doc_id": "68794f90-f54a-455a-b5d8-94e557a74110"}, "ed7b2abb-cc32-4de4-a147-956c2c5d773b": {"doc_hash": "97617d3993eb71548e8c47f70713dcc7d3eb72817ca8d814b5ecba4acb757cb1", "ref_doc_id": "68794f90-f54a-455a-b5d8-94e557a74110"}, "80d89e07-6556-4fa4-9730-a71419e853a5": {"doc_hash": "1ec523602b8f367eab3defb392eb7a90fe65d0d0a23f3026e628398ee4f8c5ff", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "175285a9-de52-4592-9b97-de2644d4a15f": {"doc_hash": "9c480585f66847501b6724c7ab49fdf7708ad577bf76045273b940ab3434963c", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "f176334e-4b25-4725-ac7b-82c3147af7d4": {"doc_hash": "3db16feb1344b66851785b63d97d2aa1b3d618804c900a375a655ff413424c0c", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "6739e8cb-7a98-4f0d-8f04-61feff45ae42": {"doc_hash": "89cff27060250852bd75bf748b32ef1d3c2b04ceef7f67fd0130b4772fcc00c8", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "19cb1b3a-4eeb-45f0-a8ff-86be8ea90f1d": {"doc_hash": "a34e86c696d17c5f36ce0f1c6a2fa744fba1d77ebd4a7ca36498210d3f7fe0d2", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "2c9cb172-e429-424a-b1f7-5f7c9c8df211": {"doc_hash": "435559593e6d0e13e63c471c281ecf79b81bdaf9c59618ab533fc9e521fde958", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "2ba7debe-ee95-40c5-a3dc-8c05ae58d3be": {"doc_hash": "50cc95124dfc1183e5ae5eda8779b5b31bd3b264cf69347f621284501d744142", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "93a620d8-5dc8-41fd-b21e-697cf255fc29": {"doc_hash": "f0a6c9dc73e25e4d2f6568434b98cb3e07e29cf841be3f4f546d9c13f91f8b99", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "1557d791-9ab4-4930-b57b-ff43cd4ac898": {"doc_hash": "42360fc34334bb67430270a385357b9b8319006021873dada5638078e565888f", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "f2a3c137-29c4-4184-9ce1-493ee7b1193d": {"doc_hash": "ecdb1c4d20df1b9fe35773732999c693a0a188c0a6a0b0468831b537b916b1d6", "ref_doc_id": "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f"}, "804db8f2-3463-4896-addd-57b97b4e14cc": {"doc_hash": "e6b2944234bad27b6b8832d5ea4e8f48e6b8981e908ba08b9189dafa2d479cb8", "ref_doc_id": "e1de6054-2290-4ecd-981a-50af4fd03408"}, "55687d3b-ef93-46e8-8af3-69229d5473f3": {"doc_hash": "fa36f044026cc6be3f22b84f29c195c2c5a3befbeeb15697af44a1b2fabead6a", "ref_doc_id": "e1de6054-2290-4ecd-981a-50af4fd03408"}, "f3289cdc-61df-4f6b-95d0-4cfe50d7d507": {"doc_hash": "7c1318df8c197437732117962bfc69ebee1695fb86e90c222cc7366f8ee27666", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "18a1820b-d588-4bf0-8b77-37ebb0ebaa1e": {"doc_hash": "6c985de052a429aec09096feef6aff441f3fab99fe995fc970f51c0e9dc7425b", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "c61933c5-eb47-4fd9-a249-05917378e4b8": {"doc_hash": "391a941ef0364080d990a48b7e0820a49c6c9dfdf6833f714b2fa0742cbd7d1e", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "b3f7b948-2e93-4062-a1f7-60ad7d62b66f": {"doc_hash": "ef35fd1dc18f81b86aec974b952581dca90ae422d704e5f13d499aece1ce3584", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "c76ef009-9604-4fef-a8a6-114a9af7d9df": {"doc_hash": "73282b00c3bda5a776f58b74f23c950e9578d121c32a7cf15e36314b5ab5cc4f", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "70a6743c-c74d-4ae7-9447-c98b0d3eebb8": {"doc_hash": "26b721e366d4805bd89ee2c9ca563d798a692a28fdcd6b1433140048856aef8d", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "8f974204-b92d-4e3e-9726-2091db650536": {"doc_hash": "2d8833c7af53b6b4b558134f09d062ba82ba5082e36146fc08be20f5995b76d2", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "30d9d382-e9c7-4c73-90a5-12579be36b7b": {"doc_hash": "f7cffb02e218302f2f95d44a8514e662bc08513a1d8affefb6afa1bf797b4794", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "488ab62d-6c57-45e7-ab5b-e65828c55eba": {"doc_hash": "54c8b01b88fa61b2465b2a594275374a3ed519023f834e7720a1dfa1d82ee203", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "f537f8d6-df5f-451c-9bd4-922c777408c1": {"doc_hash": "7e24ffec4f9868f1eee1e5a15a6d64da87352428529f41b8f66df9a30233bbf6", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "d628e5b0-1d07-4711-a442-bd4df21bd7e3": {"doc_hash": "85e55d77b2b0db15747fd23e5e18b55d3aa73fedee1ef09bcb6d73f0466cfe1f", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "668c063e-08c4-40fe-9b88-05d2ea53b31d": {"doc_hash": "095571aa3c52bcc5e6b7f0ddb448519e2be81623ea75468ca035836c8ee71509", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "075c2f2f-cd02-45d3-bddc-2b7528ee1dc0": {"doc_hash": "a88f671c68db757649d18e462a366ce0dc11d1a9b4d03588752e07c49cfdc70c", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "a6f01655-671a-4a26-89a3-ccb3a9f309f9": {"doc_hash": "0082255d06911c2dac98537dcdae58097a50b2855b08d8f45bf0a2d12d3ffa4c", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "c165fe77-32fe-4348-997b-f8d26c5fb85e": {"doc_hash": "5f69f22d37805098c848ef1a4f2b8cd7970d68a06dd1dcac4d33ed2456b109a5", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "297cfa46-1274-458d-96cb-7a01466f5384": {"doc_hash": "7d9080378c4239594101a988e8f54b7dc1a605c9c2ba74fdb9873d09625d15aa", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "a59c565c-75d4-4565-9a6c-eca94f4a1ef4": {"doc_hash": "887dd18fab65f656e79ae80fbb062d356a657525df6dac4de16eee5112424dee", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "e75f661b-291f-4207-8f1c-62012753daa6": {"doc_hash": "401e73dae2bbb761716f68e2ba46a5031af2c46c8b8b172235c24b286d0bc3a1", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "4d4fef69-7c98-4b59-9c37-5489e7a07ec1": {"doc_hash": "6c35459dde9080568231092a6a85aacf259d59d84a28f410ff9994622e1db216", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "d3c79ed0-4b32-4b92-81f6-92d636b9fd63": {"doc_hash": "99841a6cc264eca77e19eca815df626702462e32886ab5debc0703e43b061f7b", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "952764b7-9c16-4abc-a3b6-f58c28f29b53": {"doc_hash": "41278e18e8b65ea1d290115684c8085f4ee85356e318a8cd2ee80e3a48122744", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "66276237-524a-4634-a48c-50f09ee31041": {"doc_hash": "2f1a6a0ce8bcc64e967fad281933b70e9034311895443710ccd9090aeb969141", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "8f5c2071-f004-4e29-b9c2-cca92c8850a6": {"doc_hash": "34105561e08f296d6ee18db7ed2256e3d82831b1bba666ea51275ef85230c22e", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "5d038ab1-0fba-428d-a66d-49ed4b2fac1a": {"doc_hash": "0eb4a368fbecf180c0da2ec5bdd58798c395bf7a4e11ff859f9301ad7c6e3aae", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "51c2448d-d286-4820-8039-250879f9479d": {"doc_hash": "83ec037fde918040c3d8a28d9674c84e441cc59210f2eeae16e9e0df2989d7a8", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "1bf3a3e7-922b-429f-b0dd-3a230abdd1be": {"doc_hash": "909b958e4e3a8784529a676be52398ec870258fedddb53ae6877e00047e67908", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "b3bfd614-7aeb-44fa-9342-c11e23a625f7": {"doc_hash": "4d6e8a3fcdf3b4e67db2fc3312c98aefae012a2157efb624b7bbcad6578aa77b", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "d24909d0-4704-4eda-b5d3-e08c858bb0ba": {"doc_hash": "930f1f9db86ef90d0994fd343212278f728d81d81b73aa5262e77ba9277a51d2", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "529eaaef-e418-4554-ae79-52a90ed75fb4": {"doc_hash": "9361d7cf085a34ab6ff679fb28aefdb409bf8cd0e04c0bae486ed543cb27fe4d", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "c1be3f47-7608-4ff0-b2a5-77b315662d81": {"doc_hash": "74b178fe9a6a0370ac9383bb40b3d0608fbd39957df4b598d9ab60577134229f", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "2392ce17-a3dd-4425-a227-7b40ee715e81": {"doc_hash": "53b48373231538d77cdd2cb17e42401db1090d683447d44ee17ebeda40ecf44a", "ref_doc_id": "e7ef8eb9-f483-4dba-8038-bde6f290f683"}, "bfd43115-efc9-477e-8351-e721c87def44": {"doc_hash": "affd51bd8807579d4cdf6197c2703bd23b690e19ff1099b6e0c5978a27598afe", "ref_doc_id": "8419550b-d802-4b90-a9f6-ac74f39a1460"}, "87f60c2f-bede-4e8b-a932-ac7207212707": {"doc_hash": "3821349456610e427810d0a19316d6f994917a613fe80acd83bed67ce1ad96f5", "ref_doc_id": "65ef409a-7e9a-4327-9842-f0fadeb6895c"}, "497fc107-cfda-4d3c-a47f-471ca0bc02e2": {"doc_hash": "ee901b68fba77764822ce9d043d062992d240c3fe50baee6b0c6e59669bd0188", "ref_doc_id": "65ef409a-7e9a-4327-9842-f0fadeb6895c"}, "d2080242-ff9f-4072-aa83-8df23b665f89": {"doc_hash": "89b05b945796098c70821ec444ad2c7eb1e3688d945764eb6a3fb22cfed51f92", "ref_doc_id": "65ef409a-7e9a-4327-9842-f0fadeb6895c"}, "3debbf55-8482-4189-b6c1-f130b07e97db": {"doc_hash": "7ebf4c30d3dc7d60ac252c8763c1af21ddd6a5d9f4eb4bfec1c8c4e1618003b2", "ref_doc_id": "274ba15c-2ffd-4679-ad16-102b014c331a"}, "106447d9-c988-4d4a-8500-a98a53f0ec07": {"doc_hash": "2874329e2f701237d552901d5cd49f5613441cc74c7974ad67801a5ad2ff48d8", "ref_doc_id": "881b999f-9e85-4028-acb3-920253a808e6"}, "9f56930d-8589-46f9-a45a-e937eab91f6a": {"doc_hash": "9a136536d91a305e4ab0b2b3101b9a427336d5c5fb609400f407391028e2ce07", "ref_doc_id": "881b999f-9e85-4028-acb3-920253a808e6"}, "c2b03933-ba11-4192-bdca-f072c0a9650c": {"doc_hash": "bbd9b06f9931c0e7a4f62172539d48e9629db572beaa3e3601190fb7168721ef", "ref_doc_id": "0fceb180-972f-4e38-a708-33f163e1c9ef"}, "02c7ad8e-f3c8-4a61-9aa4-bd158dce6384": {"doc_hash": "977a7461dc1780a7a838cd4c6004938019a6ab6568cc0647fe345c3142e76b41", "ref_doc_id": "3f721843-d375-4b20-bba2-5d671055b742"}, "639de158-fed8-4748-8471-f6f09b4c2240": {"doc_hash": "b0b11eaea86a1fbdfe95b686e81edd00bf6e8db5284ce85840128dae3ace1098", "ref_doc_id": "3f721843-d375-4b20-bba2-5d671055b742"}, "61adcb7b-e8f3-4dfa-84f6-10f88e667412": {"doc_hash": "ee0545ef9e69a83659a73cfb6723c4327b48d956b51829036380d9170627f246", "ref_doc_id": "3f721843-d375-4b20-bba2-5d671055b742"}, "3a282f38-7e1a-446e-8687-8fb084ace087": {"doc_hash": "17eb0959966313589a92123aca83c0bd32a36c9cc7e5e47ded5a0f21c47ff35c", "ref_doc_id": "3f721843-d375-4b20-bba2-5d671055b742"}, "58334e85-0bdd-45a2-9976-7900859d6214": {"doc_hash": "0b9d41860280e3d53ba48df0aec25d7167856c397b40207826c3dac430621a14", "ref_doc_id": "3f721843-d375-4b20-bba2-5d671055b742"}, "34351c56-db17-4894-807e-ec2417106415": {"doc_hash": "5576c33b557f4046272e8c6e1a6aa64432fd682606d3936bd200a8728ffdf27b", "ref_doc_id": "3f721843-d375-4b20-bba2-5d671055b742"}, "36436cc2-c6aa-46b6-9009-e325839be497": {"doc_hash": "ce4957ff9fccbe2dad461ad3804fb0aa31d1dc0b6661774c4bcd78475944e1ea", "ref_doc_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9"}, "e86de20c-243d-428f-9c61-412a0e992803": {"doc_hash": "614a46e92fd3273179603094112501b2634664f5bd03815e02ddd2bffaee79d0", "ref_doc_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9"}, "55d44f59-4d05-4786-bcd5-ee52220ab38b": {"doc_hash": "08591e85273c8b81acff4883fdf389473f1c8207dc21770bc632fa834b2ec49a", "ref_doc_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9"}, "cfa255a5-c902-4a8a-b24c-5a83a494699b": {"doc_hash": "7da74800f321dd6958b7d36411d236b7d841dfa3f53ce568e00c0092d57d0d25", "ref_doc_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9"}, "4cfb3040-db9d-4583-8ef7-eaef5e7f5646": {"doc_hash": "af9c82b0206a253a17b45a2cf7772f73c4885080e1061f61bb68c7dc13e2d68e", "ref_doc_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9"}, "cab72824-aa7d-432b-9e7e-8bd6903dc431": {"doc_hash": "8af1417baf2a0e60f19c883a7e7b23fba90012ee1b6a7f37e8d8040f153ffbb2", "ref_doc_id": "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9"}, "3fc97833-ef7e-4677-b94b-17177aa51d1d": {"doc_hash": "c2e9de30c70b069f7508bcea4aa8b9c3deb7b4c94ce378a9c8bad14088608a3e", "ref_doc_id": "a4219a8e-8c45-402f-889d-7ee7b94a9ade"}, "e2a8803c-3f0e-4e95-b30f-43c18af9aafc": {"doc_hash": "c0f3629a6ab455540b4aa62fa1471a0af5c14223c7e47294d87f47f8198ee9cf", "ref_doc_id": "86564f1f-14b7-49a8-a8f4-9cbf1a8a3432"}, "903696fc-3106-460b-9306-905f4ad07fb5": {"doc_hash": "82020d67e6db504654dfdc50a0d809f2c72095788ac792d9fb3685263db3fa08", "ref_doc_id": "86564f1f-14b7-49a8-a8f4-9cbf1a8a3432"}, "6422506d-78d1-428a-897d-f1fef7b5f054": {"doc_hash": "4aa7b0e2301ac3b95f7944af1fb5c012cfe7da94647cff653f7e3c1f1819a291", "ref_doc_id": "07d5e3f6-7f2a-4564-8ffe-1f805a5acbdf"}, "0e8c9865-fede-4c00-940d-829fc53b894a": {"doc_hash": "92d91c086293eaebab1c5b976bfc5ee584f3ad3acaa2094c07b4a0e171d66561", "ref_doc_id": "f390dc4d-8290-4846-a172-3a6ff8f640f2"}, "f7f87100-9dd8-4c1c-9db8-e4f0de49df2b": {"doc_hash": "01de6b3675e0702f266ee7396cd1dfa5c042006499baaca0f1e9f1eaa3122da5", "ref_doc_id": "f390dc4d-8290-4846-a172-3a6ff8f640f2"}, "366df3c8-e70a-4b53-afd6-f21ce07e312b": {"doc_hash": "0d23e53661d765ebcab32e654084929fd4a2648b723a5935ccb9a2a8703ec619", "ref_doc_id": "f390dc4d-8290-4846-a172-3a6ff8f640f2"}, "4f3a45c1-c3a9-4dd8-8ed6-4145e8c1393e": {"doc_hash": "444f110a99470e8bb44fcb3eb5563d89d126015b4b968caa045e01e8453f6ffd", "ref_doc_id": "e0fc43dd-da56-44ee-9b12-882b23506d9f"}, "ef8e75fd-0b02-41c8-ad61-cf5897d060af": {"doc_hash": "89c96523b60288056eaa1e572b2191769f95c2931dc86683e217eb6f94e2b2b3", "ref_doc_id": "e0fc43dd-da56-44ee-9b12-882b23506d9f"}, "e5dcc3fa-8382-4355-a28f-87b7b84e24fe": {"doc_hash": "8ae6b298c054dc7137c96979dc6a020e4c08f4b58061949fe89d175f07917e7b", "ref_doc_id": "e0fc43dd-da56-44ee-9b12-882b23506d9f"}, "c7d9c043-ba4c-4c1a-9d27-4d9efea99fd8": {"doc_hash": "233420b411aba98d16cc6124e16f0a0cf384fd26ce6204e472568f80605c4c9d", "ref_doc_id": "478e42b0-199a-43e8-b0c6-92be0354730f"}, "9108a664-bdbc-44ba-b55d-f3793ee8db41": {"doc_hash": "ad41c99b24c80bbf241751ba4438f4ff285a09d03486e753b7b57fbeb6fc2f10", "ref_doc_id": "b78b7c0b-1e1d-4690-a1fd-cfd60e3921ed"}, "003cf2a7-66a6-43ac-8724-fa3613095ab7": {"doc_hash": "52bcd6d5a6db7d4701949a0f1b0208a1db60cbc874e66d393e42e0d055144ca4", "ref_doc_id": "b78b7c0b-1e1d-4690-a1fd-cfd60e3921ed"}, "a3499371-3068-43fc-8f8e-4b0993673eed": {"doc_hash": "5419124d078c42ac0abc386ba8c33651132d0572e24f684d656bcff8db416e2e", "ref_doc_id": "ddce7c2f-8e20-41ac-a33e-681b93f44808"}, "9b908496-e683-4d3b-8bb0-0ad996a67496": {"doc_hash": "0ea2a98821127b741a2b0718480eb700f91a9384b903dea3f9507632c623a415", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "dd2e8181-040b-4fa1-abef-ebdd10f12529": {"doc_hash": "b28ee53cd6df63b5afa8bf123a2a12af90eac4283b8be7d7e9510b70112a7eac", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "2eba023d-a30c-47cd-a835-1366de5b8eb7": {"doc_hash": "2661d3c5589c43bbb2b70f763bc5a5835e45976658bacd42f2457188318ec9e9", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "ecf2a68d-0115-416e-b040-b470d054c6d4": {"doc_hash": "8b54e5de00171e5df64e3700035028da87e6b6f9516debabc2f90c599ce3e633", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "7a5b7d2a-0fe6-4773-a4dd-d35699ba31fe": {"doc_hash": "69badaac85224a9f49825b6c7842a0cd88ec8a8b9f423fee385f608922959500", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "74906a56-147b-442e-a6a4-af801344e1e2": {"doc_hash": "a3722d3b3ef6fc99f5958e8d51c8936271c206cfd1497111fcc7b87f95ee94ad", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "d92d0eae-ea83-46d8-94f2-2ebd6064194e": {"doc_hash": "c1199d45a6dcaeb8f8e3619f715fc2717d18b7bee5c14fd90b1f8c79e543eee2", "ref_doc_id": "0d2343b0-b10b-4146-9bce-761f8666a5fd"}, "be9b8a15-ffab-4aae-9314-475b6626728c": {"doc_hash": "fd6a42042862b5495fa3a126717a406c1b5b82f4e37c0eaf1054e9e9c27987fc", "ref_doc_id": "849e98cc-dd38-4186-9d0c-dd860dca8a7e"}, "a4fbd0ce-8ddb-46b6-b703-a856617d3f8d": {"doc_hash": "d7e54482546105f39371894bfb8e6e9a17c65088ba8fe90c15c72e24ffcba4c9", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "3e7b0c66-22c3-4fba-a290-868185443897": {"doc_hash": "b84db89cedd9b7286ddc2ea346940c23362342af5ad5842fb3da83b4670e237d", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "e0f85750-886e-4ed5-b9f1-0424913b2c7f": {"doc_hash": "3cd6371d96598da28de86658019c3399b2bf4139cfa3567c0d2a619696455e52", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "8eaddc2c-fd04-40b4-bb9e-9c2d100e6370": {"doc_hash": "eadb48c579c127503e4379c3745661b8210490e0ca33aa9f6f9bcaeda159646d", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "025c3930-8363-4bb8-8766-3b2a7a348aac": {"doc_hash": "2f1dd1903db97f12be2d29363f1d7b606cd681d8cf2011b91898067d7d27cfd3", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "db017b93-73ac-4245-855a-ed6c84c126ee": {"doc_hash": "6fe5f4219b8d6f17c9fc358343bac8aa4e11494aa88669f88edd923c7377a182", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "b664864c-8c4b-4fa2-8880-551b912563cf": {"doc_hash": "98c977805a8812115bb11511a5a34c34d3f24ebc9e2158ed5f7051ad3ceff3d2", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "45adcf4d-fcb3-4848-b067-9564255eadba": {"doc_hash": "afad1b9c35fce79106f1b831e230f2e668c9642eacf7dd9d2e5ee9050bb19666", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "814ffbc4-916c-4e66-9f3d-37981f429eb4": {"doc_hash": "43c085500f6f853dc193dc4ba93e1e0d7677db80b67775452a3323667fd5569c", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "be28ca22-b02f-4b2b-8256-093005520bde": {"doc_hash": "8eee89efce450b275c7e902c42d893f7e0c8a7a05cee524ebf1c97a3be2abbd6", "ref_doc_id": "67e859c5-32a4-4a72-8bbe-280fa32c935a"}, "ae85f9ca-00a6-4a07-8eb6-98e5efc400e3": {"doc_hash": "af9bbf33394edc6b623c7bbb1841c32649decf3a0d31625341a953de0be82ed3", "ref_doc_id": "c8d09dd7-f99f-435d-9636-c1df8da02652"}, "d556e803-7bec-484a-9597-ef0a51e050f3": {"doc_hash": "9aa344a5e3a0133326063c767ccfde980b35436ea18c309cfa403ce8bcf01e86", "ref_doc_id": "90405cb0-1262-41e3-8921-3f8a0b9d5505"}, "d067ccd0-8ac3-47e9-a5f4-e59d08ce6adb": {"doc_hash": "336c4aff3680084d33e96d6b13b61ac6f43bd166df2799e0a26368019a4a9c56", "ref_doc_id": "90405cb0-1262-41e3-8921-3f8a0b9d5505"}, "dd19c5e1-75c0-49cb-97c4-db84acc9c156": {"doc_hash": "9723b3f1e3e7735a928272ba632a4574bf09191db4c67998ceb22d20986ec81c", "ref_doc_id": "0c6e83de-e66b-40c5-b04c-d60be3581d2f"}, "f4cb2197-0143-4261-a827-48d3e09c2133": {"doc_hash": "646f69c486571a47bef84c2088722fdae55b5eae04494aaf325f80df73593638", "ref_doc_id": "ab46cba2-bc85-406d-8e23-7a6da2ac297d"}, "b875f125-909e-4d48-be62-36da329151e3": {"doc_hash": "910b2a1004a71934bfb2467d98d4faa8f6ecb889a29fd2385f4c40422dd9012e", "ref_doc_id": "ab46cba2-bc85-406d-8e23-7a6da2ac297d"}, "635ff0fe-763c-4162-b089-1f9b8845b7da": {"doc_hash": "5f006c59cbfa1ede0c9e47e0a69fdb418963ce7851f3420b10e63579f4d4ce32", "ref_doc_id": "ab46cba2-bc85-406d-8e23-7a6da2ac297d"}, "7f4eac06-cb23-4246-b937-4b9f50b0033a": {"doc_hash": "04ad9a81a4e4488bee1776b4921952bd87db17ab192fd8f933967574d5e41f44", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "da7c0fe2-04ec-4f98-b1b3-54d12accb17b": {"doc_hash": "8403310565a0686505f701b2582092fec8ceb4b0d9d3c9c9d73f06146136f984", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "b805bc90-4f05-4ce2-965f-c48bea322d5b": {"doc_hash": "5e76566eb952de00771ce08b69567dcf89b6fea790a27c4a3920df0a808650b3", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "a626cf5f-7200-451f-85d6-2e035e195c66": {"doc_hash": "7a62ea57b339e9288f6ae1710763f4734dfde6c33c1e9903d5cb18b34f534518", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "6c9f4583-59f2-4f07-8056-5842859f5e0c": {"doc_hash": "37c991cbc551635894bd86bb2f772e38cca532b46d206e9bf453004cd77cc873", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "d19f6812-970f-4409-a5d3-855c015459bc": {"doc_hash": "41d3290bc45647f385ca8821aa96b416c4ebbce1bc33eb7c65db8d03cc4d07d9", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "b53203f4-b10b-45c7-8555-f7c2e02e99b4": {"doc_hash": "92db3e3857dafc9a4cb7a708ccb2fc2a4c5c79a5959ac6f2c5b89d48322e5a8b", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "5a944135-62ab-41bb-99b5-35170cdf5ac0": {"doc_hash": "e06b9e807282e75af9c17ab025523e328c0d2dc4f9a8ca2f70d6ff95164843a8", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "a181c346-fab3-4b5e-a9be-3c9265f3bf35": {"doc_hash": "47302fe2a19ba2af8574dc8ad4f23daf2a35c94a5d79d5cb4bf46a18e2ad69bb", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "7c0a3fbc-e32d-43c3-9ea4-eec887b0bbf2": {"doc_hash": "b6e81cd986fdbde6ed76e036efe1d0655817bba2f9689a64b0a72e36ee5135ee", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "6b63f131-24fe-4293-a0f5-a7ed64bc9dc6": {"doc_hash": "0bbd7694e9e9470881c26006d37344a8b2d0618a80ee095719fcd3d3a4de0eec", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "5f529d0b-e0ca-4dc7-9ead-6077e62dbe72": {"doc_hash": "951517eeb4cc200ff9790acc4d4e436def454031d224120a2100b64bbfd1c21f", "ref_doc_id": "3251df80-611e-4f20-a69e-005deec74e0b"}, "41aaee03-f43f-41b9-a7fd-f2f07056735c": {"doc_hash": "9798ba15e84bdbad5ebee8f2e47b19e97a63f5e73d534008aa16f4540637dfca", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "7433d21c-b438-4985-8dcc-aab444cb8f7d": {"doc_hash": "8e7ee61ddbbed5c3f8bedaedc143142324b335968b5ac18a3f120986ec5c30f0", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "e6d8fc3c-d2f9-4ff7-b497-69657ee09b1c": {"doc_hash": "43ea90af24cf006a807e2ff442cda053df7d6a016e061e0262518e33276a9028", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "770eb057-c0f7-4d8d-abb3-011d562cc376": {"doc_hash": "21c6da354f5cc833706287c27883c61eba309601eb77b5649c4b07f6593a6034", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "efc0b5a8-b073-427a-819e-4bfa3acb028f": {"doc_hash": "9eb5fe737362809068adf65a45174500b5322a0ef1ff9e6d834d41d748f7df09", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "6d81bc35-b8dc-46da-a959-1ddd656d6021": {"doc_hash": "9c0f2f1f806fe362b7845a3de70134949ea139223a12e6f68d25be0dbb522fe7", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "1ab3d3b6-89cb-47eb-b812-eef1042cc2d8": {"doc_hash": "88370c3cd235d1f0ec2d8c88cc7248407bcec0079ed0bacf0a304b0e726eee88", "ref_doc_id": "9b7db6b9-b27e-43a1-8c9d-602fec7afae1"}, "e3ba0457-eabf-4515-bb3b-bb57403e086e": {"doc_hash": "907ce7146692683c207437b5af3c84f93add0ffdb2a45f5c48c017d4adfb7156", "ref_doc_id": "0cd02182-e002-4546-a045-ac87d8f909bd"}, "0b0e1f18-afe5-48e2-95fe-e29f31b8bfcf": {"doc_hash": "b6854eee7422c7787cdb4794995cccda4a89d414e0007bc58951015846ad15b1", "ref_doc_id": "4c7da0b3-398f-458b-a513-2fde9ad061bf"}, "8f13369a-5622-4bef-93e1-9c6a70acc52d": {"doc_hash": "f2a5e89e5c4fc21ba063167dfa4f8e8480e26c074b0c3120bdaa0651ec89039f", "ref_doc_id": "5e7f57c7-b6a0-4239-8e92-f62b9a2a0c4f"}, "11838006-0814-4214-902e-f2f4e56cfb6c": {"doc_hash": "8e3c1b0df0ce60aa8d15fe3a0b24f4ee4e704561502984913697375edda55da7", "ref_doc_id": "5e7f57c7-b6a0-4239-8e92-f62b9a2a0c4f"}, "0813a86e-5bc8-48d7-a213-13ee3f553c88": {"doc_hash": "76393e80fdee1033fb136a66820dd36741f3d3cc0dd8d17b804518b558ae77b4", "ref_doc_id": "ca44f813-d1fe-4d7d-9dca-f574de8c3ddd"}, "c29c70f2-5b9a-421a-bcca-a97b8cbb75d8": {"doc_hash": "94ad655aecbd67db7d5f8b36156e3275e4003dc5f7d558262f96b3b7ab77ac07", "ref_doc_id": "ca44f813-d1fe-4d7d-9dca-f574de8c3ddd"}, "35214b57-3e88-4e2c-b2a7-f7345b995b4c": {"doc_hash": "fc24ae2772620fc102fda079ba84ba7385ba115104b3e87833f3622d56f77834", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "59a8533a-77b7-48eb-9627-19418ab4761e": {"doc_hash": "5e3af1478a2c6a805453b8f8d1b7755066c32c0ba914af79aa7acb1db336f8aa", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "48b635cd-c863-40cf-a2b9-bd1fa1c5c5db": {"doc_hash": "7aea664ac6142f379b8ce6116fa95e75fbb9c77b41332c7a21841c6dbdf94c47", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "da9dc258-4911-46ab-b2f7-97114d8022e4": {"doc_hash": "441a60b9d4392d1d7df67890ac25baa7c29faceef2df452224d96b4ce48d0562", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "fdae48e4-0ba8-43d9-b164-f7db9f884f7d": {"doc_hash": "f1aa0feb6125af23641d49741b006cf984af52c1fdf2121389d3fe58056db0d4", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "b1df9970-2a8f-455c-ae29-52b85692227e": {"doc_hash": "3c09fb0a513e5b61e17bb3dc0fc43d33f7045d641a935e97b4ff7db252099c58", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "18a64f86-c099-4b2c-9064-dffbaaf03ca4": {"doc_hash": "ca4d0d99e73c9fff96d49a4ab60e6ee432ef8d48d569a9ff661b0b227d2ce3e2", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "f8b442c6-50e6-4301-849e-15e43ac323ee": {"doc_hash": "2e98871f5356d28e36573c98dde84c2e5c7ac94e82ac33b00d7327f65f7eabb4", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "a340a6ce-db64-44e6-b4e2-83a744e1c9c5": {"doc_hash": "b79e07f17e9062a38cfc61a3e2654e3a74ecbb1f46d521e58b7586786b6170a5", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "b5577030-cab5-4527-965b-4b879c24049c": {"doc_hash": "a01178d3d8afa6da8611f13e0793258a4aa5a6f09cf0ef8fb9c093c339d06bca", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "dcfda2cd-9e75-486e-b6cb-be1ffbf9a94c": {"doc_hash": "dbc94bd9e3b914d0f7e0c145f5b31acc49683c43fe586caa2d1b79313890e3e1", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "7f2b306a-501c-404c-a818-8e8b18154436": {"doc_hash": "1dd2a76216bc54f339e553944f4c5c1aec5991723f9b2fa635e5401c3ea7be03", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "70968419-04ec-48d5-8de9-b53ce45f7e5e": {"doc_hash": "c9cbd425df234f24cb2cb0b64bfce0f6a7047f75be162e3397c1dd04a74ee2ba", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "2f3694e2-4a5b-49a7-a4ff-2073eae508fb": {"doc_hash": "730e8108ab4b784f92625ced647c9bc084266ac90d5d63d49d385ed4d7360f33", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "b1ae6e68-80be-4dba-8be2-b8c4792eb92c": {"doc_hash": "df7546b8e75a479d6e2fd19df89c4dd49be0dff2c2b584f01e760b17b3b91c53", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "5ccb5fe5-5620-4651-bf69-45e2d5868b04": {"doc_hash": "e5bebf4ca92a256c1fd47ee1095a0145b624b95eb6b89cb8d187d3e54bfea45a", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "d6bd7703-29fb-4cae-af77-c7288b49e5f1": {"doc_hash": "23b2400ef055f06a1e4b2e5f5442de13c37ab56b9d3ee9f9b82e80afa4694e60", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "df393344-8401-44c6-9328-7396c7b77d79": {"doc_hash": "08157435d25576ad8ac2fcca8e52bcef42d0be431fe135320173a8363001f6f8", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "c5654f98-d63c-406d-b066-4efd01fab2c6": {"doc_hash": "d7d2931aa0fe58ceb07fec373630e2718472deda41733c53e2e78b705aa69ad8", "ref_doc_id": "7bc5f364-2d9b-4873-bcf8-dd73223379ce"}, "135147d6-ce8d-48e6-9f4e-18c09710608a": {"doc_hash": "f54c99063da535e04c0525ff64d682c6763472679310775d09bf638524e08f33", "ref_doc_id": "cec680df-a496-4129-b16a-c293c82d4e19"}, "3267ee0d-cb81-4032-8da5-dffb6bed731f": {"doc_hash": "08d2a83ef29569ebed6471832c1dd039426d707baa977566ba7e4c069bce8513", "ref_doc_id": "3ce7b196-10ce-4de3-ac11-d3573b59bad7"}, "b8b8f094-b252-4968-95c1-468a4a8f4b48": {"doc_hash": "3c3d6dda0cbf619ce4ab827e4d0026b4c73399cedb5135327b977cb160574b06", "ref_doc_id": "3ce7b196-10ce-4de3-ac11-d3573b59bad7"}, "eb3c75c8-4631-43be-b19d-4344f31b7f8d": {"doc_hash": "3b1dffeecac89ad2a2e5bf23e8c136c8794a104f034690fe6701572d151eaacb", "ref_doc_id": "5ebddc10-3409-4e20-beb5-47e530dbd813"}, "4bc73f01-97d3-469a-b145-dba543e6bab1": {"doc_hash": "dfe99dae70d00ec9246c80a5b7d041396edbfae6794a2d139b34326096dce56a", "ref_doc_id": "915c1c22-3978-49af-b5af-f4d55e5d46e3"}, "c52261dc-67a5-449a-a006-8b0bf857ade5": {"doc_hash": "099916aefbc7eb1143c21ad35016c6f834c44d43899dc02f2ff001e820f9a805", "ref_doc_id": "f7bc81cd-e68b-425b-b6b6-e25c18a53d8b"}, "221acc83-ba32-496e-a38a-14310e2f5083": {"doc_hash": "2a658864c23cec6ed235c86fa3d2698ddf4e2ea2cafc4941810c567da3a016ce", "ref_doc_id": "f7bc81cd-e68b-425b-b6b6-e25c18a53d8b"}, "c5bb7a7d-a00a-4aa6-8782-0ab2b9b8ca6a": {"doc_hash": "ec74f64d54efa0fe2de4094a461c35b9ecabe33b484bb21287117f73cd65520f", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "f8d0ab61-ae51-4692-a9ab-a2c1ca0589cc": {"doc_hash": "47581aff34cad35390e6a49782f6b81726f8a799e18bbe5ea032ffbb3de12059", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "731775c6-8145-420a-876d-bb9fda44afae": {"doc_hash": "178c04d5ce5c7de73c0241538844e57e09b9458b22841c2d4ed10958801ad1c7", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "87947ab9-2c4a-4418-9241-2ff7f35708f8": {"doc_hash": "9425a9956c8b3d844b1d22426339107c3d3b3c1b589cc6d9d60814754c35f77f", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "6f23876b-6b33-4dce-95ba-bd4e346a0a56": {"doc_hash": "8b76ddbf26201e160064ea4f02e94d3106aa3998769f201c2ec553a564d1cc65", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "8a623195-250f-4b5c-a9a9-49db2fc1ba33": {"doc_hash": "d776c433f75423433a826540360c7cd63179e7e269070822a9da2bf42831ced5", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "cd11839d-647d-4e17-8fbe-9ff089f57168": {"doc_hash": "2316238c3de156c92cc069a94d9f1f21d6a46010c9e1ab7da28b1fe1fa986a3f", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "e55b472a-0430-42ca-97d4-7b390be2ddea": {"doc_hash": "832ec82aebdb4b9bdf98ded091d07020cf64a58daf78a43b1c5b2fe5bc0e6bea", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "535b7d48-018f-4f15-b6aa-e0c113f509a8": {"doc_hash": "b6764fe7a9cf4642caeba731fcda8c89e45460b77201a6f4db43b52c82740664", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "d27b14bf-ec02-402b-a4d2-f702a6a2e6b3": {"doc_hash": "30bceea6fb96b371d35c03ce58d85e8894cc6de31e800734eb44aeff1a5b3a86", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "5e4937e2-30a6-4d8a-98ff-cd27dd149cfd": {"doc_hash": "4d9e56173148ea7ab6ce8091a59f36118afbe4e60783168a995a329d4da66afb", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "cd14055f-0cfd-4f94-8406-60a011fa0214": {"doc_hash": "ec29e4d9712fab33a0e5c38896d9235eb177f71a492a89ed09abc039971233c0", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "070dabb5-69bb-49a2-882f-1c20ba99f191": {"doc_hash": "8b94cdb833102bcf9970ffe5abaf74c5ee56f6ec39004dc4939afd15d4a65ec3", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "397f51b1-40a0-4feb-929e-07eedf0aaaa8": {"doc_hash": "e250de403348e4e1adc400bec10ed46fa839d844e280d94a98b518c01ccdf9fd", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "89cbebf3-81c4-405f-af7a-26e24041cebe": {"doc_hash": "aa0c572bc27977914fa0db6b72fa408c77a771a9683793da0555ce37a10ccab2", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "5e36276b-a7c1-4768-8584-3e75e32ba130": {"doc_hash": "584e11fddd372cd3abb5b00b0fd7760240e7ba8298e307e65d6e4f4e575e00dd", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "97d967e0-0f7b-4055-be87-840dd1f72a88": {"doc_hash": "48c9c3c856265378f13cccb416d53c285788c211cbb2edcd570894d8ea2cd559", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "88c6aa60-ff0e-45ea-ae28-e17a2b15af65": {"doc_hash": "0250df3ca3cbc5c2eba2e311d2d5e635dfbbba2740d48ac6addb34467ad512a8", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "3fa10454-a1f4-40a0-9efa-152d01c2fcdb": {"doc_hash": "e9e488dd947aa84f97f011c0bfcad3f4432ae5e40d5b2874959d595c3a5f3853", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "8e39bbfd-b6da-4323-a35c-a20a3017f57d": {"doc_hash": "f78dd566a72a426640d9033d07bc808bb76a842c71ed2931c3f42a4af90c2c35", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "d6970594-0d2e-4b2d-b957-9fa4e7260f57": {"doc_hash": "7e21df81ddc8088ff727b616b642168e637e88d5bc39e36220bcd45633b78afc", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "66654028-1bf8-4d17-8904-ab61f69a0012": {"doc_hash": "a4840f88bd3d400c9f7ed9587a077c587abd5685ab5bfd93fde29f0acbba9ea7", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "3df44ab9-101b-405e-a9a2-bee3cd7e2d1b": {"doc_hash": "f075eb77afa481f1c1219c92629b6cd42ee1408002834f629e0e5e0ecf3e7402", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "2b59b021-8d47-486f-9f83-9d2aa779e8ab": {"doc_hash": "8006af63fa8c6a97294cc89af105cc2db56553495cc388a9c4c50a89f3896b89", "ref_doc_id": "b386f2bf-8350-4270-b238-8d43c4c4365f"}, "7a886c0b-4e8c-4862-b5cc-495a49577de7": {"doc_hash": "16f274ed9babdb3fd7bc6ce0fc76d172e5d295972d9f91fb34ec11823b431c7d", "ref_doc_id": "ad6bbd65-c12b-4895-a95f-b6631f056e32"}, "7f93da22-810b-42d2-887e-95e30cb5cc02": {"doc_hash": "7168f4b3affdb44127a7ed8a9bbc1b268c744c6bd0c57c616c88c90e4c7b88c9", "ref_doc_id": "ad6bbd65-c12b-4895-a95f-b6631f056e32"}, "213914c3-0585-4574-83c7-b7f61e853931": {"doc_hash": "1de18ed35f2bdaa70e6d6e86866150a6150f375762283a421e45d4314b98a7ae", "ref_doc_id": "ad6bbd65-c12b-4895-a95f-b6631f056e32"}, "9e5415e3-d744-402b-9cac-25aa34edb6d0": {"doc_hash": "86160114e8f30ead51615142fbcc2b6900b51ecafd7e461220e897e02a5853f2", "ref_doc_id": "a1a6977d-4d98-4755-ba6f-36437522168a"}, "5e515a89-c878-4eae-910e-e23ee1d72f5c": {"doc_hash": "fab2e2427007b3d1c17510f9fdabaeb0b4c9c1235b4c22f8ddc54509e084b959", "ref_doc_id": "a1a6977d-4d98-4755-ba6f-36437522168a"}, "24aac1c5-6c18-4728-b4c2-cf0e62d43663": {"doc_hash": "8251a6bb885c8c59035e8784aff33503e515761a2346ebe0cb698ec9dcc30041", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "74787427-8216-43e2-bda6-8e6a0b28101e": {"doc_hash": "77812cbf2a9529cc7ec3a3ddb449a12804d730f44d6533a48a8f8b43dce333d4", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "871347ad-00df-42a7-afaa-b46edbcedd62": {"doc_hash": "8f9ec86f1bdcbd0a7b139a8e0f50d47c8cf4a04a41e8d5f9a1eba5da6ea7dc78", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "2956b2c2-64f5-4dbf-b95a-91a080e8763b": {"doc_hash": "a260046883704a69c07409508004f0698334f2c7c6a31c214931c9549b23cb5e", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "c532c073-4591-4bad-a790-8d916925aee1": {"doc_hash": "16458879b5618bee66442944c04e85e55e7f3a6e985510edb99dfbcf7ca4eb9e", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "c2ea066e-c0be-4add-a1fb-aae03f2b9258": {"doc_hash": "13e08877b5a3806e2ebc7f8652b41e71b4fcfb67dfb842dc9a233fde312097ea", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "79ebc8ce-31d7-4277-bc65-242a39a5430a": {"doc_hash": "00a28e67d309273c0ea25453c908c4936ec777c9e25f08f7806b3f8cf4fcec82", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "9a7b1819-0e40-4221-aa6c-1de0c8cebc73": {"doc_hash": "9287b1442b4da37daca6c97ef2900597dca7a836e2cc7e8798d7634a48df95f1", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "74415c35-5f6e-4575-9fa9-78f3343c9205": {"doc_hash": "d4236e774bfa65590bcffbcfd3814c2e71d5d129e024cbff077b916defbe0313", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "09f6487e-4040-4435-a61e-907e9c182406": {"doc_hash": "d31a69f69f088e4a2eda534692bbb7981dfcdc78b374a84a226e8f61ce88296a", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "0bd2d75e-f6fe-4cb3-b96f-0bf0482cb904": {"doc_hash": "852c9e8ad8b9eee5d833824f47e4fd76a971c306a526ea8b57b187dae3724630", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "4aee9564-034e-4955-8cf0-a96754d1b73c": {"doc_hash": "4e252c2c01fd1d3e5e7797627ea4c66cf5588a81bc829cd319fb0c2e8c0de2d9", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "5b68d7d7-30bc-4f99-8fd5-37fe891601b1": {"doc_hash": "09eb6a573ab290d7582e4b5715472881ec08bef3d156ba6905654ba97b137cd0", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "ad367bdc-0dc7-4790-84f0-0bd389e1bf7c": {"doc_hash": "1f85ae4ed771af7944161d39d1add83e3c81522bed463296eb792ea155464dc8", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "27153ee6-43e7-4c53-b771-41bdca6acc05": {"doc_hash": "98a8ebb58f5f141455199f62bac3c9f8774021d08713820b56d0a68b3644cf10", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "0d6aa7ba-b641-4bc9-b557-8ded67f3cc38": {"doc_hash": "07d2f2c9a437a7dfb4ee97188e7ac80dd9469b401bba501978c0dca5892c957c", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "000c8bd9-e962-4991-b073-c7d581c2eac9": {"doc_hash": "daf9d53e9417838f58251ea708997b1339037e4ebb7bdee42fd5cc41add28bda", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "53702a7b-19e7-4da6-835a-3bc9aff9a2b9": {"doc_hash": "373e68a0e594a1cee5db3e1bb0177a11f8b98503bb19fdeaab06903328940953", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "fc9253db-122d-44b3-8329-88a687879d74": {"doc_hash": "f2d3dbc4cbbd322f46d6c2ddffc5c34267166ddc8d32aee27141e138c0f926d5", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "0a77825a-fc2c-4167-b1b0-8bf73c8bcb38": {"doc_hash": "7398b9455c16c2e252b004b5811d84dc857eed44192809ad88dfb014f62b591a", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "90b1a3ca-6da7-44c7-b3c9-cac59dcd3651": {"doc_hash": "40552c54784034527c5e57e6bcba72429f36b6a368cb6ba0ed2b31e11a1d7a81", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "94e4880b-90af-45a1-a624-6ec52e7a35a3": {"doc_hash": "5a5cb3942c3163d9d087e9ce7e6c532ab058c8dbf4e066063554a88dd137a310", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "b7a747b9-2222-4e2e-926a-f328286da410": {"doc_hash": "16e9ae6be25fe91c487e661abc9b1df81ff08b56e478975f8023921616079893", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "db550ca6-d1ca-49bf-a4cf-5dc25287c4ec": {"doc_hash": "054c6c26772ace239e91e222512fcfc85b72d0444fa66a2965d4bbb475957ff9", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "bba88364-9d11-4f61-aef3-007fb15cad7d": {"doc_hash": "2d9a72865995fa1efb0d85b9fa73db5a342deb2da1921e23313be617ccaa9f16", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "d20b43cf-15fe-4d98-af09-af53eb8c80f5": {"doc_hash": "79f4ecbf2b0fcd7f5e21037c1ef33ccd7630a8a762a8028b292b741096bff529", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "ef9c58a7-ee4a-464c-9207-0c6f6d06ab26": {"doc_hash": "2774ecead17fdd7d235899bf90638e69ac9f03e37f730988348bcdfd330e9748", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "ca835b75-5996-45af-a32c-71cff752b846": {"doc_hash": "02ef30798ff899f700fbd1f23044a14584bec595474a7b555cd4be8a77d25c7c", "ref_doc_id": "90af409f-c756-463a-bcdd-5fe821a41086"}, "62eaa8af-ceb0-4513-9710-94b8ba5682c0": {"doc_hash": "5bb01ce125b83a1db46ee88a2a8c3128891ff725e31e3b9b961827e25ee85fae", "ref_doc_id": "d1a27334-ce28-4019-bc1b-b33da3799538"}, "c5546439-8131-4832-8fc7-a494e93e6f3f": {"doc_hash": "d1f7fa4a62c27cc899d15549ab8e3666a923290d56b60fd1c3125196dae48fee", "ref_doc_id": "d1a27334-ce28-4019-bc1b-b33da3799538"}, "1f2bf05f-a882-4d2a-bda4-e059a1d73c3b": {"doc_hash": "f46d81c079d205350ae51bc346c22430d60df5d612bcd66fcf0061d92c0c7d39", "ref_doc_id": "d1a27334-ce28-4019-bc1b-b33da3799538"}, "4641231a-d154-4a46-b251-26bffaff5d7a": {"doc_hash": "f054530858e6c7f64054c8024dbbd5e7650477256dc11d7c090193a677b94ff8", "ref_doc_id": "d1a27334-ce28-4019-bc1b-b33da3799538"}, "6f66fbe2-adfc-4f6e-b385-3dd9c647e162": {"doc_hash": "6c4d1187b7a6d4eaa14de2a6ae606d6167bf3fad92c4d8ff51fca427cfc82d65", "ref_doc_id": "d1a27334-ce28-4019-bc1b-b33da3799538"}, "1311a242-bad8-4c15-91a5-dd4c8bb08eca": {"doc_hash": "6638d7cf677a60a51c5d9d8a815d41f940a04b2fa524c0e8843a7425cc08ef99", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "f8c1caf5-72e1-4c64-b27b-42ea66c81904": {"doc_hash": "3c72e379193a8884c3eda0814b9d572251f1d0f885a3c36432eb9a0736b999be", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "ba312d85-05f3-4a1d-b5fa-b8d814a33a59": {"doc_hash": "8fb1de886709132cc21140f3ec27f3f532eb66486853ed115f207a8c28b876c7", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "8fa4ce7b-08e8-42e1-8dd9-1dbcc3121686": {"doc_hash": "0b30b3da498b87ff0e2daa48577864002ddcba2933ed8feec52c6fc5c76b29a2", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "837aac04-f924-4f52-a7ff-ca4c8105b519": {"doc_hash": "6372a880579a2dddb8eb2c4c984c324ec42ead08b8e12eed863324283aca2d9c", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "4042e1e5-432a-4df3-bdf9-3649f3a34d7d": {"doc_hash": "d2f704fa7d53acc79b25331dbaaa100f9d7c8e28c7c36004af169313882bca69", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "e7b723ad-3ae2-4186-90d9-dd2ae8bd4d7c": {"doc_hash": "0bc2758bf046aebecf14c3cfc0dc47e27ba74beaadbf021d04231ac52d0b8b6b", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "f95ae7f2-4c18-4acd-be96-f9ec1430d9d4": {"doc_hash": "6176ced7df712841b56786c85b3f0041a25a43cf58bf7d723f0a46a514a690bd", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "a0d491ff-abef-48a1-b83a-3272b630685d": {"doc_hash": "76c507468b58e48ed80b7ab137065b536c7b6e9f6696710293c597c588f0eb8e", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "9eeee46a-158d-4820-a250-05e4b0a9d47d": {"doc_hash": "2b0e51dd35d3a3ec826188bdf78b85ac97c7b4722a585e6ac419e817c3b59be8", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "4acc4f74-9616-4773-97d1-c3848cddf09c": {"doc_hash": "f5e08cf113d51530f3973c94db8b2709fa638e1e4efd46d7164feaeff615639c", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "6827ab4c-a3c9-48fe-a1ec-923f7af364b0": {"doc_hash": "eb8296196e5a9e4c6d54c63dab9a092f33116701e52ff01ec859b297ff783679", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "e14c13d5-e059-47e3-95c5-91e79d8214cd": {"doc_hash": "c77000df4f04cfd3a9ffe60ef7cbb9e1839dfaa6ff3b7f86e3f61fb9fc24decf", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "2c27127b-a148-4355-9480-531e0d6f4406": {"doc_hash": "7b5c0614d9c876d787f6f186f6c16aca2f099a1e6169954c1257bb54ed0afade", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "d03e7f22-4540-41a2-9776-4461f95c3c44": {"doc_hash": "f7d3a5126ec6517d9bc0c86b49c0276cb96944710a97a4f95fc1ed7b52bee100", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "a3a35c9e-6770-487c-af13-b5f7b843bf14": {"doc_hash": "f6ff3042404acd927c1da908ee62fcba98cb3cf2534764bf03c5106b3b1315f8", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "3a3df816-cde5-421c-9676-c2f1d3bae85c": {"doc_hash": "523cb511e4860b17885b37ae16710a915791d479b74b7854389a671f116503a1", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "e27477ab-c688-49e1-9ccb-788b2aed20c5": {"doc_hash": "846ce09fc1444ca95d5594b5452a44408f946bab0a65f6b6a043194eeca5f270", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "9078663a-03fb-4e65-bc16-08ad53964b49": {"doc_hash": "ec0082173a84087aaa324f43d5d42b57b7246537623d3fe71603a479e06117ce", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "f75ca808-9c4d-4a82-8ebc-347a5eaeca09": {"doc_hash": "a73f06549c756ffb33765a12a6a7354cc6e59c706e1a920d7076cd6550a5ef74", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "67cbd19f-e2a8-4bda-b58e-b06184fa7b7e": {"doc_hash": "9384140bee7694d4f37dc1d4625da6a2ca169f43a9a4fd40643934d5a8dab291", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "7ace2373-1dd2-4288-95c8-28765c76d658": {"doc_hash": "6b50a916a679368a71e6384259b40762b7ca01b873de68e7b7f9e9f398a5ed03", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "10e716c9-4285-47b6-886a-98c9f3d6ca95": {"doc_hash": "2f45906338e41f18085d65d507c9c526f59be4ed12ab0a73d214b34b6c925b63", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "4fa255da-c6af-439f-9d40-1983372d7731": {"doc_hash": "e7040a6c66ed329d5a23fbf079638d76c92b3de2dfeffd56d35f0d2020dfba79", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "2e77c3f1-4328-4824-81de-b0dde5f8c3c7": {"doc_hash": "a8808b2de9fcd670ae0b286eed893646f39daf459dc31edbe7d1b00dd461b8d4", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "b64c24e7-2e76-4207-a72e-48b77e302d5c": {"doc_hash": "d15d090826529852befbd76596d2d38ac5b3151158b364ee9f32a1f657d2010b", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "56984496-8ee4-454d-9b90-428fe9b9eac5": {"doc_hash": "c3bd45049ed8b04ccaa9f7b897f3bfabd3b8ecd11fc35e50179f585271f2d022", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "05c322dc-485d-4797-88c6-2874f4a36407": {"doc_hash": "03a55b3ff9e145d47018710eb3c3f4494c05da3fa0e4ccdc49323de3c4fd11b5", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "c18bef5b-decc-4cbf-b851-e591eeee5b0f": {"doc_hash": "2a721852fe8078041d6e51287f789ef863737d71d15027b1d0134b6c89bbce20", "ref_doc_id": "88e868c3-e9a3-47bc-986d-ee16e8e93f2b"}, "6a9d626a-249f-46d9-9ee4-f561e5c5fcff": {"doc_hash": "ebda655eefcfa19e1a2e87d8d71b1b52992dbe6f91eb15f9843414696c7ae191", "ref_doc_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe"}, "723e9505-e44a-4945-b233-42bf0747a2c7": {"doc_hash": "ba5adc5eda89b35ad78eafad2aefb4b0275df0a3307b27a86c0648b9943d058b", "ref_doc_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe"}, "b41e8fd4-c499-49f4-8a56-45d1daeec168": {"doc_hash": "c1ad104ff6dc77d46cc3304da5dbd8381a7f6a11bfbdd26495a7d1afca274528", "ref_doc_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe"}, "ffe0a4a9-a251-4e28-9602-7e5a99db225d": {"doc_hash": "015166a5b65e926571f5397b1894cdcbee2c59f12ba529ef942c039f8209904b", "ref_doc_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe"}, "138b5e24-47a8-4b6c-afee-c9d8820939aa": {"doc_hash": "c87163a5101d2a9939db532196d849ad37b34db516a08b238c33a35b9a1711c9", "ref_doc_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe"}, "db536609-7c03-4972-8d62-372ed7260936": {"doc_hash": "b0d6c8b0e07f2ae9d1784148aaa6d50594a7eb896b203786e7bf2f7b4af88339", "ref_doc_id": "18895003-606e-4d70-a3e1-7ef72dfd1cfe"}, "97470287-fa73-4694-bc3d-2210a6816ca3": {"doc_hash": "f3939664ce080508ef40ce54887a5c89b0d8c8870f94b9b738278665ca144e1f", "ref_doc_id": "584639c9-78c1-4cdb-b0b6-cf17c165b565"}, "847fe7c9-4b5b-48c7-a76e-d808810d5492": {"doc_hash": "00242b8ebbb6e3b11ddbe7511df16b73c5f355bc5af3acc3cf13a012ba6a23c6", "ref_doc_id": "584639c9-78c1-4cdb-b0b6-cf17c165b565"}, "6062d01d-d55c-4395-873b-117ba037552a": {"doc_hash": "fd976b04280e9f530c9d122a44df608a2908cd99fc5140d3b97d1acf9aaa700a", "ref_doc_id": "584639c9-78c1-4cdb-b0b6-cf17c165b565"}, "ba693fcd-56bc-4e40-9186-bdb68ddcbb4c": {"doc_hash": "aa5a3239f8a72600685589d60936f009a94bc88567d3869e708b6d053acb085b", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "bc1f674a-93f3-4524-b3ea-b6a5a31fb717": {"doc_hash": "e6f4b07e89d3ca32884e4639be354df276506c7804f75cc5fe8b7ffb54f6a00b", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "885e7028-37a3-4139-abb0-1428a68a2e01": {"doc_hash": "a5feb43f68cb95f3059face7ac36e689e013483b70ef9e19fd6eae174f1dad95", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "d6a9a312-9ec5-4790-a508-e4d38ef0773e": {"doc_hash": "3a9a49f4f16ea4c16fb31f1cfcf87af62365f21ad7cf5b2421e170e7fa5c136d", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "0d1288fb-8ce2-4257-85cb-c69bb2e757fe": {"doc_hash": "16480dd5dc90c258edaf4c846999ab366278c4db32fee4e0f0d044cdf2e99982", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "33d30f6b-d935-4180-94d8-c55acfb99914": {"doc_hash": "478face6af61d5437bc8191a54ffc3c2fa39174d77fa53077189961dbca56911", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "445a4d5e-c59e-4b7a-93d8-0ca1c6c771ef": {"doc_hash": "d7255ab1bcbfceb4e9fd96d107975af013275a73cfc98a25da196571e045e357", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "033f3991-a266-4a65-842a-4b1cd965d89a": {"doc_hash": "4347d9dc64796a76c01dc8a3ac2ced67c916ceac94d9b6e4aa1a27ad55debc8b", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "cb82f321-7cd7-4dc9-8ae2-659cc4a7face": {"doc_hash": "03e3cb9d74aae1204f7891b3951b2aeff88b64ccfeba44ea5fb42a5727c124cf", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "d4ceffc4-b563-4a6f-8e09-ff40511f222a": {"doc_hash": "e0921ffa6d2ec4608712e2af9f049bcaec5dc17480e70bed98976f76a2180ffa", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "7f796eb2-baf3-4e29-98c2-b6ce544a6498": {"doc_hash": "94807abcf410767fb8f5f80619f02f2cfd8bee9f6f80b6fcc5c04a317e0259fb", "ref_doc_id": "b0707069-c442-45f1-bfcc-1f9f5684a1fa"}, "fe2cae98-694d-43dd-ac92-27e3bd43196f": {"doc_hash": "7bdb50b4a212acd0abb11d629fada1903f1d40dc4f3a4b0f887e9d558a1afcb9", "ref_doc_id": "ab0459de-7b89-433f-a2c9-b87d0a7b52a0"}, "9fbe4a0d-db61-4e13-8d01-7ad16c687495": {"doc_hash": "b8643d9b18d055ea8a257f65b0f100f21e055302c5a5918eacd1493b5c509226", "ref_doc_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f"}, "af397169-5eeb-459d-a8e9-71d63650bace": {"doc_hash": "eaba30ba4646382d5798a198564e5a4615080f70dbe1161116132653418e0eac", "ref_doc_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f"}, "50da90de-aef8-4183-b12c-97a41c77c56f": {"doc_hash": "6af474b5f6f9834878c42a49f74d290bce96822de046cc438e44d2803ff2aa6f", "ref_doc_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f"}, "be5732bc-746e-4a95-9797-dc80c0b2d78a": {"doc_hash": "f97d11e1ce49ee4acf975ccc24826413d437bec06e9612d99c6b24612f3419b3", "ref_doc_id": "0954c2e1-7675-49fa-8dd4-a1a94b385e2f"}, "c325e3bf-b323-4719-89d6-4a69384a5b5a": {"doc_hash": "aa98dcf5a899363626343526437faec8447de0a03163a89bac0c82c591957f17", "ref_doc_id": "be7fe169-5433-4cef-b642-ace6510db393"}, "797863b2-c049-453a-9e2e-3af09f089fbc": {"doc_hash": "deceb0c36705fac48105f533d6a39526e4b52882d02c1ede533cfef6c57306c3", "ref_doc_id": "b0ed3677-f3f9-4bea-ac51-39ff6f2bce01"}, "ff19f9a0-ccfd-45df-b8b9-b902a061bb90": {"doc_hash": "342f1028b117848c31889a99e11b910551ef95b2c90a6fdac1eb26ed9f982cf4", "ref_doc_id": "b0ed3677-f3f9-4bea-ac51-39ff6f2bce01"}, "2acb024c-4cad-48c1-8747-24b521c66a62": {"doc_hash": "96066d8577ddefd3ad0eae9424fd3627eb206289ccf6cd0ec8dc26e386a45247", "ref_doc_id": "f167efb6-c80a-460a-8550-1b104e5a08ef"}, "b50c0166-c9dd-46ce-aed6-d4d2a241551d": {"doc_hash": "08232230bcbc959d3296f0bc4e7932f6787c824fba0818fa075ffd348ea60d71", "ref_doc_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214"}, "dc499656-68a1-445a-841d-4cb884ebf933": {"doc_hash": "f93249f930f3bf92e8aeb5d0c22f9e9bde84cf1304a62ca3e32075382ee953e3", "ref_doc_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214"}, "d4b38f36-3594-4ca8-b0a9-b81291158f20": {"doc_hash": "f4137914c083731bbc367e3d40c8fe98abeb674a3cf4e4ff1a1b5082119b3d8b", "ref_doc_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214"}, "28728dd6-bebe-4095-8ca6-3fe03c944f7a": {"doc_hash": "d16bd2905c974870b9385aec3469a8c82f8f4ef3909cd7d1f9752d338de1505b", "ref_doc_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214"}, "aff21859-24c1-4e65-8c3b-70d57f0edf19": {"doc_hash": "a2f69593b901e9097592f8a098d7b242412aab1ddfc02b133c8573a4dc4b3c65", "ref_doc_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214"}, "bcd7ca2e-539b-4416-8ddc-e2e165cd77e6": {"doc_hash": "dffdfb9e9daa566dc96f7656f7effb05cb6cff7e00dd810ea92b62593a614538", "ref_doc_id": "7ac1b3e7-3741-475e-9479-b02a7f8b8214"}, "dd41fe07-378b-4969-96e4-a122c41aa9b4": {"doc_hash": "7a7028400ead404ef154b0313f99b866d62a2ea527072f3aa0131cb0a2172318", "ref_doc_id": "b9bfa6af-f3fe-4c78-b3c5-4cf8d0ca4d63"}, "4a8ad005-20f1-4c77-a940-be030694cdf6": {"doc_hash": "6e8e13806c80be00e3fda4c884a686b3628e8627fa33503e4386d2629dcb3321", "ref_doc_id": "291b61a9-70b7-4770-bd18-cf66d3f52508"}, "8600772c-ce20-4308-87f8-33b00ba0d920": {"doc_hash": "0348f03ba9a2530dff9c42b12c85aaf1ac6a9d42851a5c81747e80665dc01517", "ref_doc_id": "291b61a9-70b7-4770-bd18-cf66d3f52508"}, "435a881f-1221-4151-a1b6-dcf8d31e409b": {"doc_hash": "0cccd5b6eb9ae502d0b82176b191a91d27247eb7c077e6bc45d1736130276439", "ref_doc_id": "9867c265-0338-4b6b-8f01-daf3431d1045"}, "b2fb192e-e045-45b1-9d6c-a1a026b57e3e": {"doc_hash": "52e6b38bf98b3bf471b88611fb12982400ed3df63a7eb199ea08903b093a61b0", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "966a0a73-de05-49b7-9d2f-3856f6b27860": {"doc_hash": "1f33473ccf04ecb0cf73c85f08812187965124cdb0baa351dca53002b3014f7f", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "c42509bd-dfec-486a-bfe9-45356b96822e": {"doc_hash": "18e899ca7530182860d9f7eab3829c26808496b44de6215260a20abd1280caa6", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "ef82c5f4-908f-4a2d-bac1-ac482202154a": {"doc_hash": "c2cb0bafd60ad79c677974cdb14be86ccdc70c2619eb268a16c8083add72bb76", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "9f2037b8-cdd9-44d6-bc72-5d448f766637": {"doc_hash": "2bcae1ca30719aac2289b657a810e4e6a417b92cc6c3c447a93be02103966464", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "c1a8b4a6-a9a4-4fcf-b1fd-41a8eabd8f39": {"doc_hash": "8b1e2c030c04d4e4a099d72ed343111b46b03a76b4df8c408640ba6c78bb996d", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "6ed4e0dd-766e-4e0e-9674-64e03aa7d045": {"doc_hash": "d94c3d9cd639c4dc70a80af729557bc4265f7376ba50b400c393d11fe6940fc4", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "05278d8f-8207-45f0-9e94-2977eb8914e3": {"doc_hash": "24bd5bfb8952f5129b3b54d24c4e6a32d54e278d90688200d5ffce0ca81d2640", "ref_doc_id": "7837cee6-a90f-44bf-a0f4-db4fe99697b9"}, "7a2ac467-dcba-4d09-819c-3898d180a74b": {"doc_hash": "16907333d3c7b0052ba7eb3f00394980dbc119ada76a0a314c110ec2e993f7cb", "ref_doc_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8"}, "21203c61-c7da-41b2-8f73-0810b135078b": {"doc_hash": "3b9aa015595fe912d99fffb1462070cdcb1e1ccb07225c94486243baf39ec825", "ref_doc_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8"}, "5bc2dbbb-119d-4685-ba81-9b9da65b8bb1": {"doc_hash": "de1ecfb37d5afd638cda50b3fb9b5a9baa4ddb43b908390b0d5664dc91cfad1c", "ref_doc_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8"}, "7ead1f6e-ad84-41de-b72c-661c77fe39bf": {"doc_hash": "76a46c438c846abcac2c2fdf4be31199d484fbe8b7262282f84b6fede236892a", "ref_doc_id": "aa2ec759-c06a-4484-9aef-7fa7247d5fe8"}, "410a567e-6d07-439c-bdbf-d307965e07ea": {"doc_hash": "9123922b0430ecce233b1f0062ed8d32f2ab733da824026b1a3ccb7f44a0ff21", "ref_doc_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990"}, "65162b19-7509-40b7-b080-cb74e3dfc0ba": {"doc_hash": "e4c8b091476817bd9923658e4c40bca99ef4c2d32b552116234d3b4f6444d6ba", "ref_doc_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990"}, "443285f6-6082-4858-9fc8-8f0c0a19c562": {"doc_hash": "c2a4c43695e4fa55d309852716c71c67ef1de01914b29c8bedb8b63ddca0dc92", "ref_doc_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990"}, "4527295f-9551-4dbf-9e79-b78b948dd324": {"doc_hash": "1821fce17f7b138c3409be0861100561ddfc14dd05889d2e91c858a5943955ae", "ref_doc_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990"}, "e7eb7adf-8ffe-4def-bb3f-0c5c03a486c6": {"doc_hash": "a3d7a6273912fdaff018e7b9cc98dfe1e54241c9f12adb8f99eba7bcc784a9e5", "ref_doc_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990"}, "75618a35-55e3-4121-8300-0cf9f9e2851f": {"doc_hash": "8b05ee86170bb46e66b0fb5020106ae82bbca12e11f683bd99233af2e0a965a9", "ref_doc_id": "f31e1bb5-3223-4886-b50a-ff09d80bf990"}, "303b15da-e483-4cd9-928a-738ddd27f190": {"doc_hash": "246a29d765cc2e4e1860ce7a15759c5b1ab1d34b7c7bf8ab21742e2567ef8014", "ref_doc_id": "5ac0b7c7-522b-4138-a761-9e88bfd1f6ad"}, "5bc43f19-eaf9-4347-8afd-cb05a2704f45": {"doc_hash": "e251eeefe697401eddd31f21697cf9e93b9d900dbceb0de587de0cbceec3ffcf", "ref_doc_id": "5ac0b7c7-522b-4138-a761-9e88bfd1f6ad"}, "d0b86f80-8d10-48f0-8cd5-9875a067ff77": {"doc_hash": "8314e541ea9781ad0068fe6ccccd395d6a0d8ea71e348c2ad21a26379e02247f", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "62481a09-6006-4f5f-a32b-4f05319d99c1": {"doc_hash": "cdf0bf7f89cf19fb0e1baf824dd2cb3aa589dc32a63700d947e19c39ad3cbb18", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "7858ad84-edd5-459d-bb97-cdb630a2e103": {"doc_hash": "7a0f1478f891496dcd3d1f1df9b9ad0bf2082516c2fdcea0f714c1a23a97d85c", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "937b36f6-2f12-4b46-bd0f-f7b408f5de2e": {"doc_hash": "c9e1bd798d1f9604cb9db25feb9be3c8688e23d030fe8fd49b0985f190b6da1b", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "7578fec1-fa50-45f2-93c3-da46cde1e882": {"doc_hash": "fba862a5c17418c31656a809f00ca848547e4f07027ef90c8cc493ff2236cfa1", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "db9c7723-bde7-48ac-b63c-56870df54181": {"doc_hash": "cdf0bf7f89cf19fb0e1baf824dd2cb3aa589dc32a63700d947e19c39ad3cbb18", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "4a02451a-9e4a-4319-879b-4ad9021e0cd4": {"doc_hash": "0857e13e82de2279db6a04b1d977062d612ee2cb89052d8bb213438028f88d35", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "9c7644b8-0df3-4a2e-841b-ef5b8122aad3": {"doc_hash": "32d37c38a3348184948c2d2cc49c364c03a77d7427a107e94250e3bbd7d9a62c", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "a8461ce1-f1ce-4290-a363-82823d8b2c53": {"doc_hash": "42fb8cb6be1b5d5d0da267996a77c293a0a0345e3e97242a40ee26d28ab99f35", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "7863a509-e199-49e5-b401-c6d4f84318c2": {"doc_hash": "14e5cc6a1c00a340f9b47f5be5e9a5e33017917972523537e1903596ffc94053", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "16b14f97-fd6e-4725-95a8-ce29a0c7cef7": {"doc_hash": "af50b34e18d3d112e165aed9c70edc608544bda57a0133dbf8bcd94b0d99077e", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "fe7af23d-6b49-4d86-b82e-cd4cb262bb09": {"doc_hash": "17198d7619a52d7f638fe527c77a84896e6d88c8e933e2f4f3809de70c72ed1c", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "d422c0dc-73f9-47f1-8fdb-4a355941df5a": {"doc_hash": "6dd3ac66d49605227c876068f2a9cf3f259676d0a259084f9462e4e96df5eb57", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "f30d9352-28be-4ef5-a016-6ed9e64d61a7": {"doc_hash": "22e0b5aa24d8acf469f3e889a493f2c8fc8001ecf6440d00939c9b0d5f165d4e", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "4e5c83ac-9998-456f-8b9a-40eebf54a84d": {"doc_hash": "58d9a1909e62e71bbd6b951f85e3d04b5fdce6126325b6b27411f6ed35740c23", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "63ac37d0-a8df-407f-b016-45cacb1d390b": {"doc_hash": "328fae7014d5881868fc021d29fc61d05f8f25bfcfd49e256e296655d99ec297", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "9ad73e8d-b23c-426a-9576-db75441df13a": {"doc_hash": "2b5af19eb54fc36542119d73e5ac29c62a6ca2aa90fc79b738e37992ffa892cc", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "c5ab60a7-e170-4ad2-aa5f-2f07c470274c": {"doc_hash": "7dbd8a320b66b24cb5b1a3cd13cac64979513935cef13e8cef929768a4a87daa", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "8f47b2a6-0e05-45bd-912e-d7dc281a1826": {"doc_hash": "6492986a9fe08f00f6dc0bf4f25f31971bd9241fb3230d12bd7e75ad4184fa90", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "7ae7c2b9-a533-4a4a-b1f6-fd72cf297d07": {"doc_hash": "0580721b273f30cd0cc0118073a1d4e6b3614ee2e7faf69ac2a0c80252fa6ada", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "3e790f24-bf62-4aca-ba3b-9ecfbcd35780": {"doc_hash": "980d3cd5d93f53843e78585284c8e8c9fc27e46b5467a2daf040bfd62f7f96c0", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "9be6b89a-d899-4748-93e2-4341f9f43b86": {"doc_hash": "4a5c69a5941ebd84ca656a3ca6cd6afe7ff62942488fcdd33342176260e1ea64", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "fb7ac0af-06d5-4677-a357-901923cb402c": {"doc_hash": "fa581187dcbc0c7b86d65dcfdc1afb522d90542b982fc3986027cf2c43b94455", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "52208510-42a9-4f37-8d45-d72c8a2e69a8": {"doc_hash": "0f6b6fb39d7e827308550c305fbb591f0fd92809959a71c1899224bfde1c5bdd", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "f8134054-a55e-472b-8369-6f8480eb1b00": {"doc_hash": "83640afa2ee01f194324c44c2288011f76c87618a7178e7967a04733a7575374", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "928e4914-d1af-4fff-9d16-d57defd7b1d1": {"doc_hash": "ae23c536cbf29abb60fd13a626eb77c731900ac42d4c53c6e2d9e45d5938ff36", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "42fe31f0-949c-438c-b84e-2f1a3c384136": {"doc_hash": "74896e4b8dbd4af60a20b59fb9d98fd76c40c7897118f50ebc323262e354cc20", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "e31e263b-a914-431f-83da-76fe86dbc73e": {"doc_hash": "a301fcf9466395b64014327ae07be38180cc1569ab5b1d3a6ffc648e4e3a0032", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "94bc794f-9f06-43f1-bb79-3bbc6b640135": {"doc_hash": "16958a395f7eb898a8a9db2ea51816ec2dce6666c684dccad7f9c52fef9c81dc", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "914da60f-a79d-4172-8e9d-76967fc239d6": {"doc_hash": "502482bc269d0ced6d168630b7a45d662a5462caf180952b31995f0f87d669a9", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "fda6d800-577f-4b1c-a987-ee603ddc794c": {"doc_hash": "4afcac60a4b0288b8aa58a1bacfd8ce01edb68e30173278ac103f8e01f5880e0", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "684f5536-7b7f-411c-ba3b-8e855548a345": {"doc_hash": "02ac98d2d49f7647cb68e97ad09ca327340f7c02400cea28f0dae2304bf58d6e", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "474ff184-1c29-47ea-848f-4de79f8b6679": {"doc_hash": "33ae1c043c1c82da2f4a587e799cd2a27a27a57a19afb1bf3b10615f031d1de9", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "ca3d4503-5a74-47f8-8417-551dd6ba482f": {"doc_hash": "e1e885715d033cd001ff49ecb4bd7c6b1e89a4cb2542f1fbe20e07941760c055", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "7eceeff0-a6c6-4cc0-a13a-ffde0fd18233": {"doc_hash": "c6432d9e03451eaf58fe3f886e1c6a4cec8942dda7d190cd8cefd37a6fc0a3bc", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "9cd8cbce-a32a-4c75-9028-d0fa94fe4c72": {"doc_hash": "446953e15269f445bd39702cfa1fec0def009fbe65f37c727edcef5075e050f3", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "6a7d782b-6b19-478b-81a6-0b5fa766d2ab": {"doc_hash": "ecff0d72059e2dd935ae02374953c843c7f907319228540803543cd45a4e1ca6", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "d65189d8-631d-47b7-b97d-0d94b1af1c81": {"doc_hash": "e7f692a54c244537aaf609391598efbcb1e5cf1a92aff495c0c096bc48bf49bc", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "489345d8-d839-4463-a26b-ae611f1de5c9": {"doc_hash": "f6ce844f56b400fb5a6f76e2d745378d4fa4ad9692d367fdec0d9ace9b80f294", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "6f4e457b-0fa8-455b-b15f-a2711e04b789": {"doc_hash": "770ff0ca4247e2037030463221b8f26698c0ea9096052f01d4dfc83b68f6d362", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "34aa32b0-a53f-4486-9de0-dc5a4c430bb3": {"doc_hash": "f80a04b588b65152fbbc187b83d62a9e55826724457eeb413d38bd7ce7ede291", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "3b000468-1dc8-4459-a20c-e268447e2dac": {"doc_hash": "57ebfada000d1bfba90f5c44cf2e648bf215a44e67606c4836cd94d38b507eaa", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "3e945fbd-25aa-4d6e-bec5-f3031601c9fc": {"doc_hash": "8a24aeb829d0f603d03b368762adf8e4eb740f0faa845583f1faab8bd61adf26", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "3e876354-93f5-4209-a8f9-9776b513d5dc": {"doc_hash": "0bc52004529e8584762a48b4f77cb7d0980ae41c2f58474a40ac0d0a5c365518", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}, "8c08b8cd-33c8-40de-a87b-744f4c2e0234": {"doc_hash": "16adf7c735eca7333f51eea1f945c30174f693749b9c82b21f784838a841c694", "ref_doc_id": "cae417db-3352-4bec-b7e9-ee694afdf24b"}}, "docstore/ref_doc_info": {"f8c8c21b-67b4-403b-b861-de6698485ebe": {"node_ids": ["893ed0c0-81d8-4f90-a0f6-64ae34e0aa97", "36d8033b-386d-460e-97e4-0d44e4f52787", "1a16743e-c051-431c-a88d-0f783c48f162", "29c3aa76-5383-4b6f-8b68-28f258b3e263"], "metadata": {"file_path": "./phala_dist/trusted-execution-environments-tee-and-compute-verifiability.md"}}, "e02e52f9-ab71-4a26-99c8-9e02e39503ed": {"node_ids": ["7b58f683-808c-42cb-ab79-39ca541ef037"], "metadata": {"file_path": "./phala_dist/run-a-local-testnet-with-docker.md"}}, "b89f56d6-adf5-4c8b-bb82-f394234153c0": {"node_ids": ["a47bcb05-694d-4600-93da-c86eec2b665f", "0463d662-84b9-47e0-8743-040510c90e22", "0af2f63a-ae6a-45cf-9fde-4591df0163c4", "1a13206e-7e36-40eb-a63a-82f113eab2ad", "fa20c5b7-e610-4350-9a62-b03df0b1a8f2", "4715e030-6dcd-4d01-8326-a05c503e3f62", "8947423b-7948-4459-968e-e37255e95663", "73d18509-6ef5-4cc3-b172-59e367b259fb", "9a122f02-9666-43cd-bb53-376ce93ec368", "ca6e2e7c-9b30-4697-9b19-5bfe3ce2b873", "533917b7-01b1-4881-ae3b-4308b30b373b"], "metadata": {"file_path": "./phala_dist/asset-integration-guide.md"}}, "72333733-10e6-4826-9ba7-37df010fba32": {"node_ids": ["dfa4f3c9-9f15-4f9e-bb8f-a1bdeaa9bc1c", "4c032550-6865-43d7-8f99-6bab1107f91b", "4d03af3e-b8b7-4f66-9ba3-839b533ce6b5", "8dc5f4cf-13a9-458c-bea7-7f4fa3cf0b7b", "c80ea34c-a713-4610-8406-889c286620b0", "559813a7-f308-41d9-8ca0-18e29d402c81", "0f658315-c824-4fcd-a262-fdb098da927a", "1fb1d92c-0c8a-4cef-8fd5-4ccaede9710f"], "metadata": {"file_path": "./phala_dist/solo-worker-deployment.md"}}, "1251e17a-ee79-491c-8b46-66667122846a": {"node_ids": ["21be5926-3c4d-445d-a662-f906f978035e", "cf349c04-b462-488e-bab4-0df5914b9e05", "edc4dad8-987d-4aae-872f-d6a98ac595af"], "metadata": {"file_path": "./phala_dist/why-multi-proof-and-how-we-can-help.md"}}, "d6b91c1c-1141-40c7-b39e-ee3f7933677c": {"node_ids": ["49f07218-100a-4922-80bd-6df23a64deda", "37992834-34f6-4889-bc26-db1c09d3cefd", "0666907a-f322-4a35-a656-655343ffd5e6", "4fae536d-699b-47d8-8074-b20afc5c3489"], "metadata": {"file_path": "./phala_dist/proof.md"}}, "ed0cccf9-62e2-4526-838b-5dedb4812023": {"node_ids": ["664ad5fb-9b50-4fff-8a8e-8782c5d5efb2"], "metadata": {"file_path": "./phala_dist/access-from-ui.md"}}, "7bdc4d47-2f68-446c-bd43-4cbc7d9a00ae": {"node_ids": ["b0f8948c-58f2-4eac-b0aa-8f79e866ef9c", "6e2f8c72-3587-4821-9c44-5402b516c567", "055268e6-61c4-4a0e-8573-a157a0d97933"], "metadata": {"file_path": "./phala_dist/error-summary.md"}}, "b8be7beb-10b2-4c85-8bec-cedad02e83bc": {"node_ids": ["b9792748-0a5d-41e0-af3f-1e019b10337f", "ddd310aa-7bfd-456f-98ed-515b151a6068", "f4ab5bd9-e79f-4c09-8e20-e49cad117dbe"], "metadata": {"file_path": "./phala_dist/sidevm.md"}}, "b51f9662-e742-4254-832d-41751aa23c13": {"node_ids": ["b6d6b831-d4fb-4845-93d9-55c97929a2c7"], "metadata": {"file_path": "./phala_dist/archive-node-deployment.md"}}, "08addcb7-e6d0-4cb6-a187-8c8f786900f1": {"node_ids": ["e6ff3d1f-03ee-463e-a0ac-c20282bb41e5"], "metadata": {"file_path": "./phala_dist/test-and-benchmark.md"}}, "83b2c658-b9fa-44a5-8d97-5d4037664b07": {"node_ids": ["4ba82da7-3dd7-4968-acf5-8cd88860303b"], "metadata": {"file_path": "./phala_dist/monitor-workers-status.md"}}, "52a2f66a-2856-454b-933c-5bfe2d27d01b": {"node_ids": ["a7a41f68-36fd-440e-bd05-e7c58cd73a84"], "metadata": {"file_path": "./phala_dist/eth_unsubscribe.md"}}, "08263571-8343-43f8-ab10-64dd57d29090": {"node_ids": ["6bd41f40-cfd2-4d90-8693-d534e8dbb813", "2060798e-f8cf-45f7-b22d-ea0825b58f34", "b0d33937-bc48-46b2-b3f9-407be000a569", "9b293825-037c-48d3-9702-7a6efbe1da06", "54fb7cd1-fa55-4538-9dcd-cd6d4d6c5437", "ae2d9f9a-c238-4718-836c-c652c5ae3c1f", "1b55ade4-a215-41ff-943c-a4847c6d7ea6", "c98a4519-124f-47be-8b6a-27d69dc6727a", "1d44f10a-f474-4a88-a015-aec4d09ab01e", "f2635700-cef9-454f-a880-320e2c423ae4", "7720c015-debd-445a-9738-4af054eed1c4", "c0f1d697-8ca2-42ce-90d4-6905e79cc222", "6e890c19-979a-460c-857a-bb3cd869b420"], "metadata": {"file_path": "./phala_dist/trace.md"}}, "c3ac87e7-b330-49d6-a4e7-bf5db38fdaf7": {"node_ids": ["a613378e-8747-4895-b2db-b90917f69acb"], "metadata": {"file_path": "./phala_dist/framehub.md"}}, "49d2ffb5-c4d9-4e40-b4c6-c08cc6eabfc2": {"node_ids": ["baa24c40-7677-44d8-9441-2c9b76ab3521"], "metadata": {"file_path": "./phala_dist/switch-workers-from-solo-to-prb-mode.md"}}, "4c4e40f7-6e25-44c9-88ed-325a49c566ff": {"node_ids": ["c8d691f8-bd2e-4597-96ab-d6b3de9f4bdb"], "metadata": {"file_path": "./phala_dist/connect-from-morpheus-plugin.md"}}, "5ea482d0-6d5a-4b30-93db-415b26393ed1": {"node_ids": ["1ef3b2bb-4c9b-42b4-9bd9-c1856ee6e8a7"], "metadata": {"file_path": "./phala_dist/khala-governance.md"}}, "4cce7351-309e-4371-8c50-ba3dd083633c": {"node_ids": ["795181e0-7f31-4cd1-a1f7-a5887b076089"], "metadata": {"file_path": "./phala_dist/community-builders.md"}}, "14ad8e8c-e556-4f3b-8036-2a60b8ff5a51": {"node_ids": ["5cdaedf3-1037-4e81-b8b7-45eb35bdf46c"], "metadata": {"file_path": "./phala_dist/create-a-dashboard-profile.md"}}, "0e093953-c3c6-4611-8db8-4eb87589b13a": {"node_ids": ["374e56e4-7604-4e76-a34f-75c2257995f7", "c733f33c-8a44-4d29-8281-4e8ba8d82426", "1852d46f-9f24-4cd1-8348-b7f754c60b5e", "791fb0e5-9948-4ee6-803a-9c649213c783", "8f4ac44c-da55-4ee1-bfbe-d1509d52ea85", "2b821262-35be-4666-a2c8-2658645fca69", "0ac79924-920f-47cd-bb62-26de020e0967", "15430652-0a2c-46d9-9f5b-93631a80a1d2", "c0c1e5f3-0845-4e7e-9600-d1e9516688ad", "980202b5-c7ac-4800-bda1-51b41aaceca6", "4b917a82-257b-4330-bac9-83ff019f22be", "2d56d333-f715-498d-a951-0a0080bb359f", "d6fbd027-a509-498c-8703-4e087bd0b28c", "a09d59a6-7242-4e7c-bc03-b49b641b98e9", "a802ac02-1f8e-467e-b618-760ee7b481ba", "3f3e317c-b01b-4b63-9263-add1ec9c7e5b", "7ac1adc5-1121-4f8f-b274-a6d161444397", "40276550-520b-4587-a38e-70745a12cac8", "68916ba3-b73e-47b0-82d1-5ebaff33f757", "fc3e1af5-1d9c-48f9-9bb2-021ad5163f87", "33038452-541c-4e3c-97aa-93bb9ef15fd1", "b18d6ae0-074b-4a1b-922f-5598a15387e7"], "metadata": {"file_path": "./phala_dist/connect-airstack-phat-contract-to-evm-consumer-contract.md"}}, "561832ae-d4d2-4ce4-ae25-6855cecf61cb": {"node_ids": ["a9455b3b-d171-4f84-9b5e-7f62d87ffeca", "61039350-570e-46be-be8c-7bc175c22f64", "1ebc92ae-e257-4239-97a2-8a3029cc493e"], "metadata": {"file_path": "./phala_dist/blockchain-entities.md"}}, "2fe71b8a-aac4-43bb-b06f-40a31555bb14": {"node_ids": ["517bcaba-5832-41f9-a5f2-eb19df21fe39", "9730b0cd-5372-424c-ae19-ad7fb7831e60", "b2a908c2-b8a4-4658-955b-a6903a242447", "77263ce9-afe1-42c4-a995-5b97aeb64bac"], "metadata": {"file_path": "./phala_dist/wrappedbalances-and-w-pha.md"}}, "8d2ada3d-d922-4713-8f5a-f0bd42bd7b18": {"node_ids": ["48c41f9e-6dce-4c1f-889a-5bace055e076", "3178f980-8295-4d7c-9d12-5a3a4f8e973a", "56c97ccb-3003-468b-9d58-cde938eedc68", "b857b8c5-3aa7-463b-978c-aed50b12f5a5", "4885420c-1849-4d6c-99ca-a1653e629038", "d597bc20-606c-4ea8-bb8d-9cb2a09d3cce", "e56129b8-df68-4dfd-84fc-cbb5ac383005", "1e7b4c42-bf45-4a26-b050-e0a97b24808a", "3d5e0f53-bbc6-4598-9fc4-9a7935f20377", "98ace2ab-39c8-47a1-9988-f1b1971087e8", "f7781cf6-d446-4679-85d6-5d96e339e67b", "25be69cc-8e76-4003-91bb-f8b78150f185", "59fcfc65-d1ec-4bbd-bdc8-5bee5d08f533"], "metadata": {"file_path": "./phala_dist/sync.md"}}, "52c2b12b-c485-4809-935c-3cdf76eee8b6": {"node_ids": ["c62149c6-a068-4eaa-8cfa-994e8a9edb11", "f6b9b4d9-3abe-4502-b666-0ef87a597c5e", "bb871a80-a3cb-431e-b69e-f7b6880468e7"], "metadata": {"file_path": "./phala_dist/language-basics.md"}}, "7069e0a4-5100-489e-99d9-734e6676d073": {"node_ids": ["6c7e979d-c18e-4dbf-a765-f2448316c568", "2ec35689-ba17-48fa-838b-16129a312835"], "metadata": {"file_path": "./phala_dist/setting-up-local-metrics-infrastracture.md"}}, "b74c9b4c-f739-4533-9d74-995598f9b010": {"node_ids": ["56bc8c4d-195a-4c05-ac02-22845dad01f3", "c1318c2b-0447-4585-b557-b185225ccae3"], "metadata": {"file_path": "./phala_dist/collator.md"}}, "f8bbf633-92e3-4c5a-b753-72e118ef84d4": {"node_ids": ["643001ac-5597-41cd-bd6c-d1f72616fdd6"], "metadata": {"file_path": "./phala_dist/khala-worker-rewards.md"}}, "d4e92ab7-cf76-43fe-9f62-ab3a168436b5": {"node_ids": ["a2bfd338-a534-4ed0-a751-ca6bc1476eca"], "metadata": {"file_path": "./phala_dist/access-from-other-agents.md"}}, "528927f1-f5e5-483f-810e-2f546f8a34b9": {"node_ids": ["76627e54-d864-4660-9d5c-ed5a45af9ee4", "f5c46448-81db-4c80-a244-a727bc67be49", "ff799263-a4a9-4427-a14e-ca8d0c81db81"], "metadata": {"file_path": "./phala_dist/eth_subscribe.md"}}, "3333230a-7c90-481a-80af-5fdc291a4b10": {"node_ids": ["f17d46a1-408c-426f-a4e2-33d04659ea9e"], "metadata": {"file_path": "./phala_dist/introduction.md"}}, "33944bc4-e8ea-4b42-b7a5-a9e66fba67d3": {"node_ids": ["acb33a25-a7eb-4a2f-8648-2cf94eae1f99", "3ad52f08-d716-4d11-a762-5cf213ffb1c6", "5d9cd128-3248-40da-989d-6fb1051932bc", "9f599f68-c32c-4401-ac4c-2ef97b3671b5", "ffb9c3a4-8f67-4563-945f-50d58eb20148"], "metadata": {"file_path": "./phala_dist/quick-start.md"}}, "23248598-1f64-4606-acad-4f12f3292bd7": {"node_ids": ["67654169-7c28-45df-8b2e-4246db7c5c8b", "90e0de38-4d40-4967-a078-e37286135c64", "bb97e39e-4169-4d3b-89e7-6344f86838f3", "63969f29-c80e-45ef-961d-c9b9c7d99e29", "e2fe9d81-6198-400e-b18d-884e4016f08c", "aa1301a1-b075-4946-951c-166131cc07bd"], "metadata": {"file_path": "./phala_dist/setup-account-identity.md"}}, "87d20c0b-58ef-42b2-bec0-0da742842205": {"node_ids": ["183ce4ae-c356-442f-81d5-894e8623e65a", "2038ba2c-0ebd-4682-88a8-c7f449c015f0", "9922ce08-4046-4f61-a5a7-75cee612526b", "dd5f54fb-574c-4503-938a-59cc80795926"], "metadata": {"file_path": "./phala_dist/prbv3-deployment.md"}}, "6e3ff113-83b6-4a31-bdd9-59d03d16173f": {"node_ids": ["9f26aed6-c979-41ca-b645-20db0e195a8a", "ad830459-302f-4657-9b3e-c8016fc48a5d", "3a379bc5-7155-433b-a89f-657a1ab7be99"], "metadata": {"file_path": "./phala_dist/compatibility-matrix.md"}}, "0fbed986-bf29-4b04-8543-5ca58d3d04b5": {"node_ids": ["cbd30467-5882-4862-a8b0-36ab7eeccf55"], "metadata": {"file_path": "./phala_dist/tutorial.md"}}, "b07af591-c7e7-4fe1-be1e-412a3f0f771f": {"node_ids": ["990daf0b-d4d2-4f00-8881-73fb20a9995a", "c416a65f-1a6f-474b-989a-dc58770369ee"], "metadata": {"file_path": "./phala_dist/building-from-source.md"}}, "2ff8bd96-c422-45aa-9218-7f937d9e8ff9": {"node_ids": ["09e388c7-85ad-45a6-93f4-6afabf340408"], "metadata": {"file_path": "./phala_dist/wapojs-functions.md"}}, "19a6aed5-3788-43a5-be73-bbbbaf3d662c": {"node_ids": ["0c2d7c33-9767-41a2-9dbb-329652eff45b", "e45175cf-c4c8-4cd5-8740-ac47e0b7d211"], "metadata": {"file_path": "./phala_dist/json-rpc-server.md"}}, "caf19641-7fe6-4031-8bbf-bc87555a701a": {"node_ids": ["73306b89-439a-4047-b368-8904a92e99f5"], "metadata": {"file_path": "./phala_dist/define-your-agent.md"}}, "006475ef-45e2-4cda-b485-fe2832bd2238": {"node_ids": ["569e19fe-cf89-40f4-a3f3-5cf07f8140ae"], "metadata": {"file_path": "./phala_dist/faucet.md"}}, "5708147f-5289-4abd-bd9d-1d337477fd74": {"node_ids": ["6b7902a3-4b7d-4c21-be75-bd4ce01db672", "db556c5f-cfde-488e-a5bf-033527feb496", "b22016aa-1241-4208-9a77-2c22b5d3e7e8", "a9675e07-1441-4adc-96af-5d6bebb4dc09", "ed212976-475d-4bb7-ba3b-fd10721a6ec3"], "metadata": {"file_path": "./phala_dist/whats-vault.md"}}, "0e7aa240-6763-4c31-a92f-0930394eaf74": {"node_ids": ["111b56e4-37ba-424c-b284-270b66f4db71", "fc80424a-cbdf-4c37-b40b-9a392ff75c1e", "6c4c3e53-ccdd-4fff-b630-05ffafdae788", "ed8a72da-a1cf-4777-8820-cfeb42bbe45a", "8a8b05fa-e000-4c1c-b51b-8d14e8e64ff7", "35bebf62-ade5-4d98-8e7e-1af1f7bdd086", "d876eee2-96f4-46f3-9de1-e2610e95bdce", "d83ea38d-06d0-4b58-af2d-211a7768db22", "607b9b7b-eed0-445a-a31e-3d4a45b9f106"], "metadata": {"file_path": "./phala_dist/technical-details.md"}}, "16aed209-ae14-4ebd-acfa-6db87d421a60": {"node_ids": ["f45c4245-4397-4ce1-88dd-ee6e4a31e2f5", "81307a0f-32a7-4539-b33c-b78503379e52"], "metadata": {"file_path": "./phala_dist/estimate-your-reward.md"}}, "0298d7f6-8a82-465e-8d71-67a7856e52a4": {"node_ids": ["fb19153c-e7f9-470a-85f9-844a58ac3f06", "67605b52-aa9f-4923-be93-c89a41b9033c", "e6c303be-52bd-4f4d-98e2-af6539830b32", "5f33421c-5f70-4998-aba0-49ea01702e7f"], "metadata": {"file_path": "./phala_dist/health-check.md"}}, "eec95dcd-8d2d-49a0-b7db-d84599855d84": {"node_ids": ["ec472a0e-55c9-4e63-bc5e-fced94decaf1", "fa3a23f5-9238-4c4b-b752-79c6e0ca58a7", "fe6117fd-00dd-4c97-8d83-32f3a352d108", "ec00f952-98ec-4524-90e5-78ed5f277fae"], "metadata": {"file_path": "./phala_dist/plugins.md"}}, "27ae54aa-ccef-4038-b7f3-8e2fc06af1aa": {"node_ids": ["6a408983-2f71-4271-b19b-d6af44a83666"], "metadata": {"file_path": "./phala_dist/security.md"}}, "d47e6453-a474-46e5-a63f-0f7eb777221e": {"node_ids": ["d49133dc-d7a8-43b0-bb7d-b593d238304a"], "metadata": {"file_path": "./phala_dist/invoke-other-agents.md"}}, "71600ebf-0b95-4bca-85b0-3a80708bc817": {"node_ids": ["9d53184b-8a44-4b35-8183-478e529b1c6e"], "metadata": {"file_path": "./phala_dist/get-an-api-key-for-the-graph.md"}}, "ff6f1298-0577-4eee-b3d4-da4cac731036": {"node_ids": ["d715c2b7-6596-4de4-bb6e-59d5c26f3bed"], "metadata": {"file_path": "./phala_dist/next-step.md"}}, "f924bc4d-7935-4c7d-8d7c-6d68528540e3": {"node_ids": ["f222f363-65f4-4090-8425-13d2c1eb91bb", "a4f473d1-6f3c-4d16-a18c-bdd802111e69"], "metadata": {"file_path": "./phala_dist/configuration-migrate-from-prbv2-to-v3.md"}}, "864465e1-26e6-487e-bb9a-28c3c7faeaaf": {"node_ids": ["d87a0cdf-6892-4488-8ae5-e7edacfd8391", "77f86f2a-f846-4494-b4cb-d235b754b182", "5fa8520c-6322-4668-a5cf-e00631a15d25"], "metadata": {"file_path": "./phala_dist/custom-analytic-tools.md"}}, "57b167ae-5dd1-4260-b054-6b44b4c7c3d9": {"node_ids": ["7e457cf0-02c8-4e7c-9ffc-d455591969fc"], "metadata": {"file_path": "./phala_dist/generate-test-account.md"}}, "b643caca-fdbe-4063-8357-9e6824b2a37a": {"node_ids": ["06f1aebc-8da3-4389-aaf4-309e1a776dd0"], "metadata": {"file_path": "./phala_dist/README.md"}}, "111651e9-6874-4d8f-92b1-5250950751ab": {"node_ids": ["21b0c76c-2e28-4f3b-9215-8565792c181e"], "metadata": {"file_path": "./phala_dist/system-contract-and-drivers.md"}}, "2e8c3fb4-14f2-4740-bc7c-f0458b883506": {"node_ids": ["54e115d5-f3a7-43fd-8444-f8867e3dfbec", "73f1ac90-6092-4e31-8a60-74c78e62d30e"], "metadata": {"file_path": "./phala_dist/handling-secrets.md"}}, "c48226af-dcdc-4d0f-9b61-de4c62f0de7b": {"node_ids": ["3e469d44-b7c0-4ee3-b937-f88c3116af66"], "metadata": {"file_path": "./phala_dist/lensapi-oracle-agent.md"}}, "3f075429-058c-48a2-9a6d-b39f9249eab9": {"node_ids": ["8a7aac36-7281-412a-9391-3095faa19a5c", "8ea3c5b6-7866-4ced-95d2-5154e251438e"], "metadata": {"file_path": "./phala_dist/join-the-council.md"}}, "3620abf0-5332-4971-9fd3-639407477dcc": {"node_ids": ["6b606388-b52e-40f1-923d-231f9b979f4a"], "metadata": {"file_path": "./phala_dist/deploy-the-worker.md"}}, "68b89cd8-9859-4e0b-bec8-37ad1d583769": {"node_ids": ["f7c94996-62bc-498f-9d11-68eb2086d299"], "metadata": {"file_path": "./phala_dist/tanssi-dancebox-testnet.md"}}, "578f2d9a-ee40-4ea2-a7b1-b9a8038744a8": {"node_ids": ["ba4ca35b-813d-4c0a-8c0d-3337eac19746", "06429055-282a-4fc3-8f22-dd5ea159ecbc", "2c688479-c764-4fac-94c4-2c82a9492eb6", "82383155-362a-49cf-bd3b-ec61d6173156", "85e9fc25-0192-486d-8278-9dcd0a2224a0", "e6ea4865-f774-458d-9a60-333bb57aec72", "877975f5-2811-4799-ad58-735577b08241", "de7c8698-b13a-4685-a1b5-9844cd17b1d5", "cb658af4-f1eb-4a5a-9f73-4a29ca58b1f4", "c2ba37a7-3153-4b29-a3a7-2cee59d371ce"], "metadata": {"file_path": "./phala_dist/khala-treasury.md"}}, "fa6b931e-cccf-43d6-8b65-03d217b4718b": {"node_ids": ["1c6c1cbb-77ae-46a9-b56e-7b8832752d59", "1304be64-8ffe-418e-b9af-70cea86a20df"], "metadata": {"file_path": "./phala_dist/voting-for-councillors.md"}}, "1523a57c-6f89-45b9-95bf-f9d4d02729e2": {"node_ids": ["e389bc02-48b9-41ec-af0d-b20301b9f38d", "b669dc99-a25d-489e-8848-373a2fe7524c", "ba25020f-f755-4f5a-a7a2-89aa57c5b0c3", "ae7b5d5b-a51e-4de8-a4eb-dfd5dd264775", "f9f813d3-1c3c-45b7-a6f6-465403bd2073", "2df48700-1f3b-4f60-b2d7-cefe472d34e0", "f14d20ce-85e3-4d4e-aeac-d4d0498c5dbd", "80925a49-7ccd-46db-92ec-99fb1f63e186", "9444f85e-475f-4633-a00b-e81f5e306631", "53df2bfd-efcf-4143-a20a-a59c29a9edd3", "2a47ebed-a137-4835-8aec-e6caaf77879c", "aee7dbac-c318-4bf6-91fb-c70af7e177a6", "cf04292d-5984-4a73-9096-895fec76acff", "f15ad6fa-d5e1-4b78-abd3-f742e2cd9f67", "629d5f8b-2e61-482f-8c4c-b1692b3bcd72", "c5c8b62f-d255-4f17-8309-ab9582b6f278", "4a010dc9-9852-4fa2-91f2-9153240144e1", "3cbb3b51-bcbb-4c7b-b14d-a9008fcacca8", "c01d4ba8-a4fb-4cbf-a880-45e001694da1", "bd948bc3-3f98-4cc1-a09a-7493c56d911f", "8e6d64c8-a6d1-47a6-a7c9-17ef1b91ef1e"], "metadata": {"file_path": "./phala_dist/connect-phat-contract-to-evm-consumer-contract.md"}}, "c64dbd33-f9b7-452d-9aed-c5edff6e0a2d": {"node_ids": ["5e0f9652-2491-4a46-948e-fb3db2c95d13"], "metadata": {"file_path": "./phala_dist/installing-phala-mining-tools.md"}}, "2367bfd0-268b-48cc-8249-885d81853ac9": {"node_ids": ["2462aa1d-bd4b-441d-ad44-cbb36d5b6e44", "cc8753a0-9772-45b6-90c6-bac4e5d07ccf", "08e6b0de-e5f7-4526-865c-03b5698035ba", "8bbd6027-5936-40cf-a6ae-a5ccecaecf8c", "ebe996ac-9a84-4fc6-8f58-33d9878650c7", "4f74b5d2-17a7-4529-8bad-2458dd7a4a74", "02b58da2-b890-4edf-99ac-93a55d44991f", "29b38c37-07b4-423f-9af5-9576f598892d", "4943be20-08f8-4a48-9afd-42f5f438e673", "9810b5ff-be65-41f3-9397-257992f29012", "02dec6c3-c9d6-4736-8c8e-191e40f6eab4", "78d97621-b7e9-4172-a46c-c3d1b25db945", "b31d31cc-bf1a-4572-9d7c-63cb16809562", "8939f96e-243a-45cd-926f-49292d5f84be", "8fff030c-c820-4452-9706-6b7b1a28891a", "4518d9fc-ea68-406f-98e1-cc722f800c64"], "metadata": {"file_path": "./phala_dist/swanky-phala-cli-tool.md"}}, "5fa64e4c-2352-49b4-8f8f-2ba20adf8552": {"node_ids": ["e387ffa8-1e44-4dd9-84d9-33405cd46a6c", "3413355b-e06a-499f-8da4-592c50298cb9", "b5c64857-c8cc-466b-aee8-2e99bf60f226", "20ba33bf-0bd3-41d8-90dc-3dfcd9a4ccbf", "cba583e9-7ba8-4324-abf9-7e5d0e9f5748", "166c813e-e77d-4a9e-8f9e-7cc128137f29", "f2468832-f9bf-44c7-b4b6-a5b4e65649ec", "95984a1f-27f1-4cd7-886e-6751f75db55c", "004d7e06-c33b-407b-8ec3-c29560099fa6", "526c1ae7-ed10-48aa-95dd-a805eb088692", "1f3df5c1-27f0-4f04-998e-139a15fb5d1c"], "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-langchain.md"}}, "4ade6753-36ad-4681-afe7-50d0d0cd83d6": {"node_ids": ["b12f715e-f978-4f6e-8401-daf4f10e573b"], "metadata": {"file_path": "./phala_dist/base-sepolia-testnet.md"}}, "a9519784-6638-42d2-8517-e98a18661f7d": {"node_ids": ["e45eea7b-c238-4e63-bcee-2b5b4e35a4f2", "2da7b23d-04d9-4ee6-a9ea-d87bd1a23ff9", "ad199b2a-9225-4d37-b856-87c52ea04047", "e8e243cc-0f4a-462c-9397-2791a6e1ef40", "9f4db508-2c99-40d8-95f0-210dd43a493a", "7ef02331-3a8c-4baa-9ca0-a0c8dd967624", "169e5105-438b-4745-b485-5a4bff6d0bbc", "8d2632da-4099-4aa6-abc4-c17c34b9bf21", "c968b7ab-66f9-4afa-b6fc-b170c435256a", "27e03cb3-9428-4187-a163-df6682ecd5a8", "30ad034d-003c-4537-a118-17090247f30b", "a8284dbc-d673-47d7-97bc-1139a476d419", "f858c656-6e60-4c9b-9baf-a6d54f2c85a3"], "metadata": {"file_path": "./phala_dist/build-an-agent-to-transact-onchain.md"}}, "2ad2ba69-c444-4c87-a6e3-ed5645f5b828": {"node_ids": ["c810d9b5-85d2-4d2c-bfeb-b9cdfa127f9f", "f3ee601c-3810-4328-a334-5ffe388051d3", "58ad1d4f-1148-4a58-b3c2-408b26c63b6a", "4c653e31-9d01-48d5-864d-f7be2c5a39da"], "metadata": {"file_path": "./phala_dist/logs.md"}}, "427dd787-4557-44c4-90ec-902538208d2e": {"node_ids": ["b39eec91-9f4b-4d08-a4cb-1ac25b0b4873", "91b5207f-f577-488f-b0c0-84e530cd61c6", "4e58e425-2005-4f91-8d1a-548bad9bbe1e", "667f28b0-8709-4d45-b9a0-f4d268e06aad", "0ea4b160-a8c3-45bb-ac35-3afcf0088e96", "d1cda67e-2bbf-4be8-b603-18b47416b32f", "e322d306-0c5a-4eac-94f8-99fc6756baae", "26fae753-87e9-4f78-92ac-41094f425fa9", "0500d3c7-37ef-478c-bed5-dde897bc7306", "a31201a6-3e53-4933-aef0-528d4721ccf6", "fc0ec8ae-3217-4f67-a4bb-cd0db1017d9f", "6bc229c3-d06d-4cad-9b6d-99a871e314d7", "6b9fdfa1-a7b3-4c8d-873d-6244d3c47be8", "3e5fbb81-8df6-4a8e-9fbf-7bbabca07016", "8b4055ac-6938-4d48-ae2c-988234af3a8d", "b2d2c014-e9a4-45ff-afc6-24c2dfe66aed"], "metadata": {"file_path": "./phala_dist/run-local-testnet.md"}}, "82057350-0cbf-47a2-a169-81130a050b99": {"node_ids": ["ce1987b2-4be4-45e3-8fac-b345a4d07a15", "1d9b146a-a9a6-4dcb-b6d3-319b32a50fc9"], "metadata": {"file_path": "./phala_dist/use-rust-crates.md"}}, "be28c864-d1b8-419b-a228-08d728cd351f": {"node_ids": ["e2201727-ecd0-419c-91a7-1952ead0a83e", "7a6ded14-5d21-4e15-bd4b-690b3a4ca487", "9af1ee05-600f-41f6-884c-1393052dabd1", "334bf31f-e63d-4aa8-a5b0-f3777d7008ca", "30611024-e523-4e0e-a17f-e12190daf970"], "metadata": {"file_path": "./phala_dist/worker-confidence-level.md"}}, "c26354d2-c47e-47f7-a74e-3d735cc3acda": {"node_ids": ["730cf4c3-d563-412f-9718-c043a26d8ace", "6fc6f7e5-0fea-4b95-8df4-5e0756822aca", "58b6f8ae-f5a4-4809-bb28-a7644500bed3", "df13d2c2-8a61-4c64-b997-cb6425328768"], "metadata": {"file_path": "./phala_dist/prb-worker-deployment.md"}}, "582e5a6c-4ef2-43d0-94dd-630714f526d6": {"node_ids": ["1c45b95a-c888-4caf-b266-0695ecacc0f7"], "metadata": {"file_path": "./phala_dist/conclusion-and-future-developments.md"}}, "bdd9faf9-7db4-40eb-8b2a-f85372f19cdc": {"node_ids": ["2020a06f-69dc-4fc2-b667-397f08488885"], "metadata": {"file_path": "./phala_dist/connect-from-autonolas-plugin.md"}}, "0218bb64-3611-47b5-98ee-f6bf33b0135e": {"node_ids": ["db04bb37-1470-4a6a-874a-fecfb0268ba7", "308a5f19-7cc7-4e36-868b-9b830f7e63f8"], "metadata": {"file_path": "./phala_dist/buy-and-sell-keys.md"}}, "75508e74-aee4-4807-88b9-03469ba21647": {"node_ids": ["9eb2cc30-341b-4e58-a402-6645f6067665", "72705740-5e56-4f77-8a2a-6c30350f1497", "58bb1819-586b-4667-837c-5aa84abadd0c"], "metadata": {"file_path": "./phala_dist/txpool.md"}}, "d835b739-6f52-48eb-9c41-097866b233f4": {"node_ids": ["6daf5864-91b7-40b7-873f-c22b7274e4a7"], "metadata": {"file_path": "./phala_dist/supported-assets.md"}}, "11f1acdc-d52c-4a0b-9ce6-e5d664a02513": {"node_ids": ["b6840d38-51b7-45a4-8353-31be12bbe4a8", "a35aacf5-035c-4746-81ad-02ea14ba97ed"], "metadata": {"file_path": "./phala_dist/getting-started.md"}}, "403e304b-82df-475d-ba84-c6933d35c0e8": {"node_ids": ["9c64dff8-96d4-4832-aefc-0536d5b68171", "30fb66e3-640d-4b19-879b-292386c2091d"], "metadata": {"file_path": "./phala_dist/agent-war-tokenomics.md"}}, "9928e705-e6d1-4ae2-8a3f-90b755c9b7e2": {"node_ids": ["2d4ccd08-00c2-4624-a75f-bb7caf17675f", "ac968540-e184-4bfa-9337-c9670bb5f157", "3764414c-d26a-4d16-92e4-6733803fede6"], "metadata": {"file_path": "./phala_dist/store-contract-states.md"}}, "c47512f5-3bda-4496-b52b-24afa736b57f": {"node_ids": ["d9c150dd-24fd-4992-870b-1fdb02a42065", "1c9a7b38-af38-4057-9b7a-321547c0dced", "d92d4ba7-6423-4077-9e4a-3dddd96dfac5", "23f1eb7a-4ab0-4079-8721-92e284cb47c7"], "metadata": {"file_path": "./phala_dist/builders-program.md"}}, "dfab378e-9c63-49a3-9708-9fd70417a2be": {"node_ids": ["533002f2-6608-4555-ab9d-d03d63eec165", "2e9ba9f1-b4b7-4977-9a63-ee31586bfc7a", "f4b75af1-6554-4fb7-810b-fb313a631205", "6d9a5131-a1af-4b8e-8c17-f663b0dac841", "0d66296c-1e55-459e-b0d2-942520113426", "4d030cc2-1b57-4d30-a96a-e3f9721371be", "cda7bff8-7492-4b79-bf89-3d714910f23c", "36af5a0d-2390-4057-9e7f-a963bf9c3ec4", "ef0635a4-bf05-45a2-93b2-8cc3e505b99a", "96df0748-aefb-41b3-8c7d-d1a11163616f", "9f81e683-5a6b-43b2-b53b-b0ef87a0eb1f", "ddede5ce-acdc-4ad3-9dca-9b35133ee1c8", "04b13076-5a3c-4b51-8e27-326b1db964fc", "bfdba06a-b29b-4744-946a-8b1846977489", "cac1345c-f66d-45ae-9d6b-1472fa77b94c", "d4740525-790d-4f00-82b0-33225c23b954", "465610d5-5e11-43a5-8cac-067a437a1c94", "d1f3181d-157d-4b18-b550-cc24298dc7ff", "df58f73e-9323-4aab-a1c2-7c255e7f7a3b"], "metadata": {"file_path": "./phala_dist/integrate-with-3rd-party-api-with-http-request.md"}}, "4c9706df-10fb-4f32-af79-a8688f48dcd2": {"node_ids": ["6251c57e-8ad8-46bc-a268-4fb444589db6", "2d0dec51-8429-4035-9621-e7da9c29d44b"], "metadata": {"file_path": "./phala_dist/grafana-and-prometheus.md"}}, "3280c948-561a-412c-b0cb-09deafe1632d": {"node_ids": ["04129585-50ba-4680-910f-2805dabd896f"], "metadata": {"file_path": "./phala_dist/get-an-airstack-api-key.md"}}, "c40b878f-42c6-4f26-9c15-6a0bb09159cc": {"node_ids": ["39f69bae-f236-4dc6-a658-6defebf81e2c"], "metadata": {"file_path": "./phala_dist/the-graph-agent.md"}}, "71398931-7410-4ca7-ae52-0ae56fd56545": {"node_ids": ["3b051df0-8919-4c76-a453-634c7b833d57", "796d5f95-8c31-41ff-906c-92cb044ef771", "d8dd47e2-2205-4248-a9f2-c436dd678d69"], "metadata": {"file_path": "./phala_dist/wallet-setup-and-get-pha.md"}}, "4598b96f-9b46-4f39-8520-83ebe49fcad2": {"node_ids": ["9df315af-4fcc-4b0f-9823-6c9718fef672", "69b9a58f-709a-4415-9b0f-4a453d43dfd4", "79c68ee6-a4d8-4345-9657-b3bfa06b100c", "c27c4b4b-3d90-482c-a735-c23265a597b1"], "metadata": {"file_path": "./phala_dist/admin.md"}}, "f2cf57d2-dc27-4f54-92ab-b82692befbd0": {"node_ids": ["9de51b0e-2b4b-41a0-a590-fcfc2eed9ee7", "c4568811-c3f2-4ce1-aafb-c45e83f874a7", "f27f7ca4-a396-4330-aea7-a7617c579e2c"], "metadata": {"file_path": "./phala_dist/unit-tests.md"}}, "6173ac81-8653-40d3-8410-9c0f1264378b": {"node_ids": ["5e7cb53d-f8c3-4d61-8a73-f0882ade9373", "60011d1a-4c21-4b2f-a856-adc4c1097727", "586bf52e-95cd-4c1b-9ac3-09a5ce742031", "e995efe2-854f-4b9e-8660-515b059c1d50"], "metadata": {"file_path": "./phala_dist/performance-tuning.md"}}, "d5679d6d-d89b-409a-ae4a-964ab5aaaef4": {"node_ids": ["1fe8ad53-052b-463d-a543-644d7680e11a", "c4b51ccb-dd4b-4b9a-8df6-3c337888349e", "b431e031-548f-497a-9ea5-9093cdbff35a", "daebb235-ec0a-452e-bd3d-c706fee59a57"], "metadata": {"file_path": "./phala_dist/delegate-to-stakepool.md"}}, "2eb6aa12-daf8-4e54-808e-1d56286bec58": {"node_ids": ["c1ecbc54-9701-4a6a-8880-4982726e4279", "5c1c9944-4b46-4e99-aabc-11c468dbb02c", "c38f3b4a-f968-4e56-96f1-d971f815db1b", "22af4029-d9b2-42c0-bb39-033689d57475", "7e0a5d5f-6756-47d9-ab1c-f50a6ca512fd"], "metadata": {"file_path": "./phala_dist/confidence-level-and-sgx-function.md"}}, "f9db8f74-cd21-418d-b81e-081969a4414a": {"node_ids": ["1825fa1e-229a-4332-930b-b8094cbda62b"], "metadata": {"file_path": "./phala_dist/ai-execution-layer.md"}}, "2e5da387-c064-489e-bd8d-0586880c61e7": {"node_ids": ["522a07c2-0cab-4cee-9e74-fe9f152d206a", "0708f3b9-f68b-48af-a452-77e30f3d85e4", "e745af5f-64ae-4c4c-a804-81d1eb2f0e69", "2d29d632-abe0-4561-b85e-32080528baf9"], "metadata": {"file_path": "./phala_dist/use-phala-app-to-delegate.md"}}, "646c529c-5eac-4593-8ab3-e6a3e0db5227": {"node_ids": ["6512e6b7-0aad-4e28-857a-b596008c992a", "2a51de68-7a7e-49a9-9313-46bea4c8d5b6", "4853efb6-0251-40dc-824e-ba455f7d1b00", "87edc919-7263-477f-a00b-c1d87220e308", "96e13a52-a0a1-4114-aa91-7bd302a1e75f", "287ce246-5231-475f-8a21-cb7984ff7601", "5c8d8155-2642-4e63-a2c2-3022e13d918e", "07a6e5ba-ee81-4c4e-a7f6-0862db34d739", "c8915f84-f9f8-4cde-9923-4d5142f4f3aa", "9f3d21ff-903b-4efa-a331-d849e696cf89"], "metadata": {"file_path": "./phala_dist/SUMMARY.md"}}, "ed32c2ed-fdbf-4fc8-9498-8dad2fb8e6a4": {"node_ids": ["06b62680-0c5e-47aa-8cda-2c740704b118", "bce26b7d-d5ff-463c-b3dd-7c8837a0af50", "82df2bc5-b0de-4a76-a7ad-270dabaf0b03", "f43d993f-3939-4026-9979-62daaaea2bf4", "173fa5ce-2ceb-4c9a-a3c9-30b4a52c2033"], "metadata": {"file_path": "./phala_dist/gatekeeper.md"}}, "9adc84c1-89d0-49f4-a776-02a43a3f7d4a": {"node_ids": ["b560efb5-e638-45c5-a73f-525c28cc10f9", "4acbccb5-9c1b-4895-bbab-85f3e2afcec5"], "metadata": {"file_path": "./phala_dist/configure-the-worker.md"}}, "c3b6f9b4-002c-4fe8-9f40-ce51b12ee455": {"node_ids": ["7d07fd75-09d4-4e28-bd7d-d51ffc414a17", "4f90eae5-cb40-4d88-801b-99dd82de503f"], "metadata": {"file_path": "./phala_dist/validators.md"}}, "4ab1ab79-3d32-4130-9099-129f182c981a": {"node_ids": ["922b1d35-48e7-4a9b-b077-a75ab4131f22", "465927f4-2dc8-4340-ad19-0b41b7cbd1e5", "a1fde0c5-6332-43e8-a8ce-f51daa09ed7a", "7a1c1cf4-1799-4303-a0ca-186b8a78be84", "13881e6e-636b-4368-9141-4668657a3b26"], "metadata": {"file_path": "./phala_dist/parity.md"}}, "f12b7c63-cce2-4fa8-acc5-820e721c1745": {"node_ids": ["56ad6fb5-2b2f-49d2-bb03-7a6df078d110", "47ea36cf-b05c-44f9-b687-392550d322f2", "d162be4c-5bdf-43eb-af8c-f0df9870f3cf", "0cbf9190-c37c-4ee8-bafe-711bd7910657"], "metadata": {"file_path": "./phala_dist/how-to-build-with-multi-proof.md"}}, "66a18a84-1b5f-4b0f-b720-748bcb8b0196": {"node_ids": ["b245ba86-5360-4875-9996-786b86addab2", "b622b9dc-bdf1-4f55-a76b-1c8cf5ce6669"], "metadata": {"file_path": "./phala_dist/build-stateless-backend.md"}}, "0feb1205-97ee-4a1c-85c9-f11e6a22d309": {"node_ids": ["06ab23c3-f2ce-44d3-9c6e-570ea347db4e"], "metadata": {"file_path": "./phala_dist/add-a-data-source.md"}}, "d11984d8-79db-42ea-92cb-481dd022db42": {"node_ids": ["81439625-6cf2-4a40-9b0c-65dded988b19"], "metadata": {"file_path": "./phala_dist/how-to-switch-from-solo-mining-to-prb-mining.md"}}, "6cfa1bed-cfcd-45c5-901a-79a33af2cc23": {"node_ids": ["d4d9fb7f-a1f4-4acf-ad27-98fd2e5f6882", "4a33c265-3f09-43ef-b129-98af9e30d6e9", "449239ce-1925-4a57-bc4c-921c01d4ed2f", "af15de8a-7849-4c60-9830-2461c50b9e00", "25f3f60e-7ebe-426b-a445-129d9979cb3e", "1740027e-0ac9-4607-a8f9-6d557ecd1cdd", "2b315cbc-c591-49e3-9582-27ffcaa5211b", "9809b8ce-0da9-42d4-9551-77dceb4e10f0", "41d52090-9c9d-4298-a03f-54777dd3853a", "084fc924-2203-4713-abed-2aae5193282d", "feea7abe-0f51-4030-beb2-f0515176e9fa"], "metadata": {"file_path": "./phala_dist/build-your-first-ai-agent-contract.md"}}, "28090739-2427-4b56-9a60-6616ef46c192": {"node_ids": ["577dcc23-e65c-4fef-8e58-2b4ae76158a6", "8dfd4f2b-be2a-4dc7-bfe3-7f952952329e", "62b1ea51-0c0e-481d-9fc3-0eed0ae2d38d", "f1825b8b-64e8-4865-8646-7a4e3c2747b6", "b756a234-d78e-4683-9a55-be98c7846c36", "45cb09bb-0d71-4167-b1c8-32d50aefdab6", "0eea05be-f081-4868-a8fb-1373a13ca448", "c93ff33d-bbfd-4f03-8885-7d06df0e69ff", "5c28639a-e1bc-4fac-a5a0-012e65f83fdb", "cc9342a1-efe6-4374-a2b1-c3c408d14d28", "30507958-673a-4c4f-93e1-383905de3135", "94eb13e4-417c-42c9-be30-077af01718b5", "3b8fcf6e-4b18-4201-9d16-b6b477e8f38c", "ae038958-0785-44dd-8509-915a7290b53c", "203ee156-addc-466e-9a82-6295eeab53d2", "d6f20b95-3bc5-4508-b994-b2da2569f7eb", "59be979f-a131-402d-a55d-9354f00e71e4", "fbddd89a-f16d-4b94-a6c5-b71d5ead481f", "2d938ef1-1a45-4773-ad0c-dc68c54e55f9", "9c971b77-0c0e-4997-9996-fd251db69051", "c50c6157-26da-4998-92cf-454271a10814", "7afc1dac-44a3-4d9d-b4e7-6250a3b636bc", "2fb56eb7-2ab7-4410-a432-ffacfcf2ab30", "873289c3-952b-4d85-9f33-ae675e4bd3ef", "bf95b203-ca55-4d2c-9bfd-2eff59ea344a", "9426be4c-3ed0-47c4-8caa-b5bdc59416ef", "1c83d32c-2c38-4f72-af15-23c9853517c0", "363011cc-de73-4ff5-bac7-1f2975667205", "34f4b0e5-bcd6-4e71-ad4b-91e0de40b19d", "8144be0b-86b5-4d14-9968-3e545cd0b5c9"], "metadata": {"file_path": "./phala_dist/connect-the-graph-phat-contract-to-evm-consumer-contract.md"}}, "d7bf3543-7e80-4ef6-88a8-3d0d385a6d8d": {"node_ids": ["1cfcf20e-7834-4a66-894d-8c6eefd5eca1", "ab2a2a2b-d3e0-4feb-8314-4e147cece9a8", "73eb400d-534c-45df-84d0-b5d0ec7a2154", "ccc5f0fd-6fd4-4376-b755-eb9966aaaa40", "3abdbdb9-ab6b-48b3-b65e-52a2df1ec7e0", "459ee5dd-7679-4107-b969-75296213ed5b"], "metadata": {"file_path": "./phala_dist/clique.md"}}, "3dffd8d9-c254-4202-93d8-6d8a15315eed": {"node_ids": ["4f7ef0dd-ce74-41a8-969e-d13cee2cc871"], "metadata": {"file_path": "./phala_dist/web3.md"}}, "3d5548bc-aea6-4b6f-a9f6-90e5e46c814b": {"node_ids": ["60c56d7e-3d90-4cea-9f03-b14673c3fc75", "d6896920-5143-4518-bcf3-cf5bf45263f5"], "metadata": {"file_path": "./phala_dist/phala-network.md"}}, "13f3d575-3199-444a-8d2e-3f33dcd14628": {"node_ids": ["eed03cf3-5729-4485-8e0e-243f8091f10d", "fd974512-6393-4cb5-8443-54bcd4364157"], "metadata": {"file_path": "./phala_dist/using-prbv3-ui.md"}}, "8de3a32d-ac87-4158-8cca-f61e29c7633d": {"node_ids": ["7030e486-24d6-46ed-9ddc-577228af23a5"], "metadata": {"file_path": "./phala_dist/token-gated-access.md"}}, "377d8596-39bd-487c-9c9e-c4d1e341b8f6": {"node_ids": ["5099202d-a2c1-40b5-aa8c-b528b2445c3a"], "metadata": {"file_path": "./phala_dist/airstack-agent.md"}}, "be3da1f2-624d-4206-8c2f-55fefbae5a62": {"node_ids": ["8a7778ed-14e8-42a3-970c-d1d19377cbb7", "98045c60-eea5-449c-ac4b-bb056d3c221a", "b61bef4a-5bec-4586-85e3-fdd3f5459dcf", "0cd549f5-201a-42cf-b994-19d54a0b3d88"], "metadata": {"file_path": "./phala_dist/troubleshooting.md"}}, "68794f90-f54a-455a-b5d8-94e557a74110": {"node_ids": ["f9a98226-1717-407f-a224-10e0de4d7784", "fa1016f5-61cd-4269-b439-98b026672b9e", "ed7b2abb-cc32-4de4-a147-956c2c5d773b"], "metadata": {"file_path": "./phala_dist/aura.md"}}, "a5c7dc0d-96b3-47ca-bdaa-7c0b8c05362f": {"node_ids": ["80d89e07-6556-4fa4-9730-a71419e853a5", "175285a9-de52-4592-9b97-de2644d4a15f", "f176334e-4b25-4725-ac7b-82c3147af7d4", "6739e8cb-7a98-4f0d-8f04-61feff45ae42", "19cb1b3a-4eeb-45f0-a8ff-86be8ea90f1d", "2c9cb172-e429-424a-b1f7-5f7c9c8df211", "2ba7debe-ee95-40c5-a3dc-8c05ae58d3be", "93a620d8-5dc8-41fd-b21e-697cf255fc29", "1557d791-9ab4-4930-b57b-ff43cd4ac898", "f2a3c137-29c4-4184-9ce1-493ee7b1193d"], "metadata": {"file_path": "./phala_dist/metrics.md"}}, "e1de6054-2290-4ecd-981a-50af4fd03408": {"node_ids": ["804db8f2-3463-4896-addd-57b97b4e14cc", "55687d3b-ef93-46e8-8af3-69229d5473f3"], "metadata": {"file_path": "./phala_dist/rent-hardware.md"}}, "e7ef8eb9-f483-4dba-8038-bde6f290f683": {"node_ids": ["f3289cdc-61df-4f6b-95d0-4cfe50d7d507", "18a1820b-d588-4bf0-8b77-37ebb0ebaa1e", "c61933c5-eb47-4fd9-a249-05917378e4b8", "b3f7b948-2e93-4062-a1f7-60ad7d62b66f", "c76ef009-9604-4fef-a8a6-114a9af7d9df", "70a6743c-c74d-4ae7-9447-c98b0d3eebb8", "8f974204-b92d-4e3e-9726-2091db650536", "30d9d382-e9c7-4c73-90a5-12579be36b7b", "488ab62d-6c57-45e7-ab5b-e65828c55eba", "f537f8d6-df5f-451c-9bd4-922c777408c1", "d628e5b0-1d07-4711-a442-bd4df21bd7e3", "668c063e-08c4-40fe-9b88-05d2ea53b31d", "075c2f2f-cd02-45d3-bddc-2b7528ee1dc0", "a6f01655-671a-4a26-89a3-ccb3a9f309f9", "c165fe77-32fe-4348-997b-f8d26c5fb85e", "297cfa46-1274-458d-96cb-7a01466f5384", "a59c565c-75d4-4565-9a6c-eca94f4a1ef4", "e75f661b-291f-4207-8f1c-62012753daa6", "4d4fef69-7c98-4b59-9c37-5489e7a07ec1", "d3c79ed0-4b32-4b92-81f6-92d636b9fd63", "952764b7-9c16-4abc-a3b6-f58c28f29b53", "66276237-524a-4634-a48c-50f09ee31041", "8f5c2071-f004-4e29-b9c2-cca92c8850a6", "5d038ab1-0fba-428d-a66d-49ed4b2fac1a", "51c2448d-d286-4820-8039-250879f9479d", "1bf3a3e7-922b-429f-b0dd-3a230abdd1be", "b3bfd614-7aeb-44fa-9342-c11e23a625f7", "d24909d0-4704-4eda-b5d3-e08c858bb0ba", "529eaaef-e418-4554-ae79-52a90ed75fb4", "c1be3f47-7608-4ff0-b2a5-77b315662d81", "2392ce17-a3dd-4425-a227-7b40ee715e81"], "metadata": {"file_path": "./phala_dist/configuration.md"}}, "8419550b-d802-4b90-a9f6-ac74f39a1460": {"node_ids": ["bfd43115-efc9-477e-8351-e721c87def44"], "metadata": {"file_path": "./phala_dist/publish-agent-script.md"}}, "65ef409a-7e9a-4327-9842-f0fadeb6895c": {"node_ids": ["87f60c2f-bede-4e8b-a932-ac7207212707", "497fc107-cfda-4d3c-a47f-471ca0bc02e2", "d2080242-ff9f-4072-aa83-8df23b665f89"], "metadata": {"file_path": "./phala_dist/migrating-from-geth.md"}}, "274ba15c-2ffd-4679-ad16-102b014c331a": {"node_ids": ["3debbf55-8482-4189-b6c1-f130b07e97db"], "metadata": {"file_path": "./phala_dist/intro.md"}}, "881b999f-9e85-4028-acb3-920253a808e6": {"node_ids": ["106447d9-c988-4d4a-8500-a98a53f0ec07", "9f56930d-8589-46f9-a45a-e937eab91f6a"], "metadata": {"file_path": "./phala_dist/migration-from-prbv2-to-v3.md"}}, "0fceb180-972f-4e38-a708-33f163e1c9ef": {"node_ids": ["c2b03933-ba11-4192-bdca-f072c0a9650c"], "metadata": {"file_path": "./phala_dist/headers-cache-deployment.md"}}, "3f721843-d375-4b20-bba2-5d671055b742": {"node_ids": ["02c7ad8e-f3c8-4a61-9aa4-bd158dce6384", "639de158-fed8-4748-8471-f6f09b4c2240", "61adcb7b-e8f3-4dfa-84f6-10f88e667412", "3a282f38-7e1a-446e-8687-8fb084ace087", "58334e85-0bdd-45a2-9976-7900859d6214", "34351c56-db17-4894-807e-ec2417106415"], "metadata": {"file_path": "./phala_dist/faq.md"}}, "558bbcd4-5e7d-42f1-9e6c-527cd02b7ea9": {"node_ids": ["36436cc2-c6aa-46b6-9009-e325839be497", "e86de20c-243d-428f-9c61-412a0e992803", "55d44f59-4d05-4786-bcd5-ee52220ab38b", "cfa255a5-c902-4a8a-b24c-5a83a494699b", "4cfb3040-db9d-4583-8ef7-eaef5e7f5646", "cab72824-aa7d-432b-9e7e-8bd6903dc431"], "metadata": {"file_path": "./phala_dist/deploy-contract.md"}}, "a4219a8e-8c45-402f-889d-7ee7b94a9ade": {"node_ids": ["3fc97833-ef7e-4677-b94b-17177aa51d1d"], "metadata": {"file_path": "./phala_dist/requirements-in-phala-khala.md"}}, "86564f1f-14b7-49a8-a8f4-9cbf1a8a3432": {"node_ids": ["e2a8803c-3f0e-4e95-b30f-43c18af9aafc", "903696fc-3106-460b-9306-905f4ad07fb5"], "metadata": {"file_path": "./phala_dist/environment-setup.md"}}, "07d5e3f6-7f2a-4564-8ffe-1f805a5acbdf": {"node_ids": ["6422506d-78d1-428a-897d-f1fef7b5f054"], "metadata": {"file_path": "./phala_dist/accelerate-khala-syncing.md"}}, "f390dc4d-8290-4846-a172-3a6ff8f640f2": {"node_ids": ["0e8c9865-fede-4c00-940d-829fc53b894a", "f7f87100-9dd8-4c1c-9db8-e4f0de49df2b", "366df3c8-e70a-4b53-afd6-f21ce07e312b"], "metadata": {"file_path": "./phala_dist/personal.md"}}, "e0fc43dd-da56-44ee-9b12-882b23506d9f": {"node_ids": ["4f3a45c1-c3a9-4dd8-8ed6-4145e8c1393e", "ef8e75fd-0b02-41c8-ad61-cf5897d060af", "e5dcc3fa-8382-4355-a28f-87b7b84e24fe"], "metadata": {"file_path": "./phala_dist/transaction-costs.md"}}, "478e42b0-199a-43e8-b0c6-92be0354730f": {"node_ids": ["c7d9c043-ba4c-4c1a-9d27-4d9efea99fd8"], "metadata": {"file_path": "./phala_dist/connect-to-smart-contracts.md"}}, "b78b7c0b-1e1d-4690-a1fd-cfd60e3921ed": {"node_ids": ["9108a664-bdbc-44ba-b55d-f3793ee8db41", "003cf2a7-66a6-43ac-8724-fa3613095ab7"], "metadata": {"file_path": "./phala_dist/endpoints.md"}}, "ddce7c2f-8e20-41ac-a33e-681b93f44808": {"node_ids": ["a3499371-3068-43fc-8f8e-4b0993673eed"], "metadata": {"file_path": "./phala_dist/examples-of-delegation.md"}}, "0d2343b0-b10b-4146-9bce-761f8666a5fd": {"node_ids": ["9b908496-e683-4d3b-8bb0-0ad996a67496", "dd2e8181-040b-4fa1-abef-ebdd10f12529", "2eba023d-a30c-47cd-a835-1366de5b8eb7", "ecf2a68d-0115-416e-b040-b470d054c6d4", "7a5b7d2a-0fe6-4773-a4dd-d35699ba31fe", "74906a56-147b-442e-a6a4-af801344e1e2", "d92d0eae-ea83-46d8-94f2-2ebd6064194e"], "metadata": {"file_path": "./phala_dist/staking-mechanism.md"}}, "849e98cc-dd38-4186-9d0c-dd860dca8a7e": {"node_ids": ["be9b8a15-ffab-4aae-9314-475b6626728c"], "metadata": {"file_path": "./phala_dist/agent-wars-introduction.md"}}, "67e859c5-32a4-4a72-8bbe-280fa32c935a": {"node_ids": ["a4fbd0ce-8ddb-46b6-b703-a856617d3f8d", "3e7b0c66-22c3-4fba-a290-868185443897", "e0f85750-886e-4ed5-b9f1-0424913b2c7f", "8eaddc2c-fd04-40b4-bb9e-9c2d100e6370", "025c3930-8363-4bb8-8766-3b2a7a348aac", "db017b93-73ac-4245-855a-ed6c84c126ee", "b664864c-8c4b-4fa2-8880-551b912563cf", "45adcf4d-fcb3-4848-b067-9564255eadba", "814ffbc4-916c-4e66-9f3d-37981f429eb4", "be28ca22-b02f-4b2b-8256-093005520bde"], "metadata": {"file_path": "./phala_dist/deployment-guide-for-prbv2.md"}}, "c8d09dd7-f99f-435d-9636-c1df8da02652": {"node_ids": ["ae85f9ca-00a6-4a07-8eb6-98e5efc400e3"], "metadata": {"file_path": "./phala_dist/phala-sdk.md"}}, "90405cb0-1262-41e3-8921-3f8a0b9d5505": {"node_ids": ["d556e803-7bec-484a-9597-ef0a51e050f3", "d067ccd0-8ac3-47e9-a5f4-e59d08ce6adb"], "metadata": {"file_path": "./phala_dist/cross-chain-transfer.md"}}, "0c6e83de-e66b-40c5-b04c-d60be3581d2f": {"node_ids": ["dd19c5e1-75c0-49cb-97c4-db84acc9c156"], "metadata": {"file_path": "./phala_dist/block-explorers.md"}}, "ab46cba2-bc85-406d-8e23-7a6da2ac297d": {"node_ids": ["f4cb2197-0143-4261-a827-48d3e09c2133", "b875f125-909e-4d48-be62-36da329151e3", "635ff0fe-763c-4162-b089-1f9b8845b7da"], "metadata": {"file_path": "./phala_dist/phat-contract-console.md"}}, "3251df80-611e-4f20-a69e-005deec74e0b": {"node_ids": ["7f4eac06-cb23-4246-b937-4b9f50b0033a", "da7c0fe2-04ec-4f98-b1b3-54d12accb17b", "b805bc90-4f05-4ce2-965f-c48bea322d5b", "a626cf5f-7200-451f-85d6-2e035e195c66", "6c9f4583-59f2-4f07-8056-5842859f5e0c", "d19f6812-970f-4409-a5d3-855c015459bc", "b53203f4-b10b-45c7-8555-f7c2e02e99b4", "5a944135-62ab-41bb-99b5-35170cdf5ac0", "a181c346-fab3-4b5e-a9be-3c9265f3bf35", "7c0a3fbc-e32d-43c3-9ea4-eec887b0bbf2", "6b63f131-24fe-4293-a0f5-a7ed64bc9dc6", "5f529d0b-e0ca-4dc7-9ead-6077e62dbe72"], "metadata": {"file_path": "./phala_dist/build-your-ai-agent-contract-with-openai.md"}}, "9b7db6b9-b27e-43a1-8c9d-602fec7afae1": {"node_ids": ["41aaee03-f43f-41b9-a7fd-f2f07056735c", "7433d21c-b438-4985-8dcc-aab444cb8f7d", "e6d8fc3c-d2f9-4ff7-b497-69657ee09b1c", "770eb057-c0f7-4d8d-abb3-011d562cc376", "efc0b5a8-b073-427a-819e-4bfa3acb028f", "6d81bc35-b8dc-46da-a959-1ddd656d6021", "1ab3d3b6-89cb-47eb-b812-eef1042cc2d8"], "metadata": {"file_path": "./phala_dist/ethglobal-hackathon-guide.md"}}, "0cd02182-e002-4546-a045-ac87d8f909bd": {"node_ids": ["e3ba0457-eabf-4515-bb3b-bb57403e086e"], "metadata": {"file_path": "./phala_dist/astar-zkatana-testnet.md"}}, "4c7da0b3-398f-458b-a513-2fde9ad061bf": {"node_ids": ["0b0e1f18-afe5-48e2-95fe-e29f31b8bfcf"], "metadata": {"file_path": "./phala_dist/resource-limits.md"}}, "5e7f57c7-b6a0-4239-8e92-f62b9a2a0c4f": {"node_ids": ["8f13369a-5622-4bef-93e1-9c6a70acc52d", "11838006-0814-4214-902e-f2f4e56cfb6c"], "metadata": {"file_path": "./phala_dist/system-requirements.md"}}, "ca44f813-d1fe-4d7d-9dca-f574de8c3ddd": {"node_ids": ["0813a86e-5bc8-48d7-a213-13ee3f553c88", "c29c70f2-5b9a-421a-bcca-a97b8cbb75d8"], "metadata": {"file_path": "./phala_dist/secret-key-hierarchy.md"}}, "7bc5f364-2d9b-4873-bcf8-dd73223379ce": {"node_ids": ["35214b57-3e88-4e2c-b2a7-f7345b995b4c", "59a8533a-77b7-48eb-9627-19418ab4761e", "48b635cd-c863-40cf-a2b9-bd1fa1c5c5db", "da9dc258-4911-46ab-b2f7-97114d8022e4", "fdae48e4-0ba8-43d9-b164-f7db9f884f7d", "b1df9970-2a8f-455c-ae29-52b85692227e", "18a64f86-c099-4b2c-9064-dffbaaf03ca4", "f8b442c6-50e6-4301-849e-15e43ac323ee", "a340a6ce-db64-44e6-b4e2-83a744e1c9c5", "b5577030-cab5-4527-965b-4b879c24049c", "dcfda2cd-9e75-486e-b6cb-be1ffbf9a94c", "7f2b306a-501c-404c-a818-8e8b18154436", "70968419-04ec-48d5-8de9-b53ce45f7e5e", "2f3694e2-4a5b-49a7-a4ff-2073eae508fb", "b1ae6e68-80be-4dba-8be2-b8c4792eb92c", "5ccb5fe5-5620-4651-bf69-45e2d5868b04", "d6bd7703-29fb-4cae-af77-c7288b49e5f1", "df393344-8401-44c6-9328-7396c7b77d79", "c5654f98-d63c-406d-b066-4efd01fab2c6"], "metadata": {"file_path": "./phala_dist/create-a-weather-agent-w-function-calling.md"}}, "cec680df-a496-4129-b16a-c293c82d4e19": {"node_ids": ["135147d6-ce8d-48e6-9f4e-18c09710608a"], "metadata": {"file_path": "./phala_dist/create-and-play-with-social-agents.md"}}, "3ce7b196-10ce-4de3-ac11-d3573b59bad7": {"node_ids": ["3267ee0d-cb81-4032-8da5-dffb6bed731f", "b8b8f094-b252-4968-95c1-468a4a8f4b48"], "metadata": {"file_path": "./phala_dist/call-your-contract.md"}}, "5ebddc10-3409-4e20-beb5-47e530dbd813": {"node_ids": ["eb3c75c8-4631-43be-b19d-4344f31b7f8d"], "metadata": {"file_path": "./phala_dist/cluster-of-workers.md"}}, "915c1c22-3978-49af-b5af-f4d55e5d46e3": {"node_ids": ["4bc73f01-97d3-469a-b145-dba543e6bab1"], "metadata": {"file_path": "./phala_dist/cross-chain-solutions.md"}}, "f7bc81cd-e68b-425b-b6b6-e25c18a53d8b": {"node_ids": ["c52261dc-67a5-449a-a006-8b0bf857ade5", "221acc83-ba32-496e-a38a-14310e2f5083"], "metadata": {"file_path": "./phala_dist/create-contract.md"}}, "b386f2bf-8350-4270-b238-8d43c4c4365f": {"node_ids": ["c5bb7a7d-a00a-4aa6-8782-0ab2b9b8ca6a", "f8d0ab61-ae51-4692-a9ab-a2c1ca0589cc", "731775c6-8145-420a-876d-bb9fda44afae", "87947ab9-2c4a-4418-9241-2ff7f35708f8", "6f23876b-6b33-4dce-95ba-bd4e346a0a56", "8a623195-250f-4b5c-a9a9-49db2fc1ba33", "cd11839d-647d-4e17-8fbe-9ff089f57168", "e55b472a-0430-42ca-97d4-7b390be2ddea", "535b7d48-018f-4f15-b6aa-e0c113f509a8", "d27b14bf-ec02-402b-a4d2-f702a6a2e6b3", "5e4937e2-30a6-4d8a-98ff-cd27dd149cfd", "cd14055f-0cfd-4f94-8406-60a011fa0214", "070dabb5-69bb-49a2-882f-1c20ba99f191", "397f51b1-40a0-4feb-929e-07eedf0aaaa8", "89cbebf3-81c4-405f-af7a-26e24041cebe", "5e36276b-a7c1-4768-8584-3e75e32ba130", "97d967e0-0f7b-4055-be87-840dd1f72a88", "88c6aa60-ff0e-45ea-ae28-e17a2b15af65", "3fa10454-a1f4-40a0-9efa-152d01c2fcdb", "8e39bbfd-b6da-4323-a35c-a20a3017f57d", "d6970594-0d2e-4b2d-b957-9fa4e7260f57", "66654028-1bf8-4d17-8904-ab61f69a0012", "3df44ab9-101b-405e-a9a2-bee3cd7e2d1b", "2b59b021-8d47-486f-9f83-9d2aa779e8ab"], "metadata": {"file_path": "./phala_dist/debug.md"}}, "ad6bbd65-c12b-4895-a95f-b6631f056e32": {"node_ids": ["7a886c0b-4e8c-4862-b5cc-495a49577de7", "7f93da22-810b-42d2-887e-95e30cb5cc02", "213914c3-0585-4574-83c7-b7f61e853931"], "metadata": {"file_path": "./phala_dist/ai-agent-contract-templates.md"}}, "a1a6977d-4d98-4755-ba6f-36437522168a": {"node_ids": ["9e5415e3-d744-402b-9cac-25aa34edb6d0", "5e515a89-c878-4eae-910e-e23ee1d72f5c"], "metadata": {"file_path": "./phala_dist/net.md"}}, "90af409f-c756-463a-bcdd-5fe821a41086": {"node_ids": ["24aac1c5-6c18-4728-b4c2-cf0e62d43663", "74787427-8216-43e2-bda6-8e6a0b28101e", "871347ad-00df-42a7-afaa-b46edbcedd62", "2956b2c2-64f5-4dbf-b95a-91a080e8763b", "c532c073-4591-4bad-a790-8d916925aee1", "c2ea066e-c0be-4add-a1fb-aae03f2b9258", "79ebc8ce-31d7-4277-bc65-242a39a5430a", "9a7b1819-0e40-4221-aa6c-1de0c8cebc73", "74415c35-5f6e-4575-9fa9-78f3343c9205", "09f6487e-4040-4435-a61e-907e9c182406", "0bd2d75e-f6fe-4cb3-b96f-0bf0482cb904", "4aee9564-034e-4955-8cf0-a96754d1b73c", "5b68d7d7-30bc-4f99-8fd5-37fe891601b1", "ad367bdc-0dc7-4790-84f0-0bd389e1bf7c", "27153ee6-43e7-4c53-b771-41bdca6acc05", "0d6aa7ba-b641-4bc9-b557-8ded67f3cc38", "000c8bd9-e962-4991-b073-c7d581c2eac9", "53702a7b-19e7-4da6-835a-3bc9aff9a2b9", "fc9253db-122d-44b3-8329-88a687879d74", "0a77825a-fc2c-4167-b1b0-8bf73c8bcb38", "90b1a3ca-6da7-44c7-b3c9-cac59dcd3651", "94e4880b-90af-45a1-a624-6ec52e7a35a3", "b7a747b9-2222-4e2e-926a-f328286da410", "db550ca6-d1ca-49bf-a4cf-5dc25287c4ec", "bba88364-9d11-4f61-aef3-007fb15cad7d", "d20b43cf-15fe-4d98-af09-af53eb8c80f5", "ef9c58a7-ee4a-464c-9207-0c6f6d06ab26", "ca835b75-5996-45af-a32c-71cff752b846"], "metadata": {"file_path": "./phala_dist/polygon-consumer-contract-for-lensapi-oracle.md"}}, "d1a27334-ce28-4019-bc1b-b33da3799538": {"node_ids": ["62eaa8af-ceb0-4513-9710-94b8ba5682c0", "c5546439-8131-4832-8fc7-a494e93e6f3f", "1f2bf05f-a882-4d2a-bda4-e059a1d73c3b", "4641231a-d154-4a46-b251-26bffaff5d7a", "6f66fbe2-adfc-4f6e-b385-3dd9c647e162"], "metadata": {"file_path": "./phala_dist/budget-balancer.md"}}, "88e868c3-e9a3-47bc-986d-ee16e8e93f2b": {"node_ids": ["1311a242-bad8-4c15-91a5-dd4c8bb08eca", "f8c1caf5-72e1-4c64-b27b-42ea66c81904", "ba312d85-05f3-4a1d-b5fa-b8d814a33a59", "8fa4ce7b-08e8-42e1-8dd9-1dbcc3121686", "837aac04-f924-4f52-a7ff-ca4c8105b519", "4042e1e5-432a-4df3-bdf9-3649f3a34d7d", "e7b723ad-3ae2-4186-90d9-dd2ae8bd4d7c", "f95ae7f2-4c18-4acd-be96-f9ec1430d9d4", "a0d491ff-abef-48a1-b83a-3272b630685d", "9eeee46a-158d-4820-a250-05e4b0a9d47d", "4acc4f74-9616-4773-97d1-c3848cddf09c", "6827ab4c-a3c9-48fe-a1ec-923f7af364b0", "e14c13d5-e059-47e3-95c5-91e79d8214cd", "2c27127b-a148-4355-9480-531e0d6f4406", "d03e7f22-4540-41a2-9776-4461f95c3c44", "a3a35c9e-6770-487c-af13-b5f7b843bf14", "3a3df816-cde5-421c-9676-c2f1d3bae85c", "e27477ab-c688-49e1-9ccb-788b2aed20c5", "9078663a-03fb-4e65-bc16-08ad53964b49", "f75ca808-9c4d-4a82-8ebc-347a5eaeca09", "67cbd19f-e2a8-4bda-b58e-b06184fa7b7e", "7ace2373-1dd2-4288-95c8-28765c76d658", "10e716c9-4285-47b6-886a-98c9f3d6ca95", "4fa255da-c6af-439f-9d40-1983372d7731", "2e77c3f1-4328-4824-81de-b0dde5f8c3c7", "b64c24e7-2e76-4207-a72e-48b77e302d5c", "56984496-8ee4-454d-9b90-428fe9b9eac5", "05c322dc-485d-4797-88c6-2874f4a36407", "c18bef5b-decc-4cbf-b851-e591eeee5b0f"], "metadata": {"file_path": "./phala_dist/customizing-your-phat-contract.md"}}, "18895003-606e-4d70-a3e1-7ef72dfd1cfe": {"node_ids": ["6a9d626a-249f-46d9-9ee4-f561e5c5fcff", "723e9505-e44a-4945-b233-42bf0747a2c7", "b41e8fd4-c499-49f4-8a56-45d1daeec168", "ffe0a4a9-a251-4e28-9602-7e5a99db225d", "138b5e24-47a8-4b6c-afee-c9d8820939aa", "db536609-7c03-4972-8d62-372ed7260936"], "metadata": {"file_path": "./phala_dist/private-networks.md"}}, "584639c9-78c1-4cdb-b0b6-cf17c165b565": {"node_ids": ["97470287-fa73-4694-bc3d-2210a6816ca3", "847fe7c9-4b5b-48c7-a76e-d808810d5492", "6062d01d-d55c-4395-873b-117ba037552a"], "metadata": {"file_path": "./phala_dist/dotnet-counters.md"}}, "b0707069-c442-45f1-bfcc-1f9f5684a1fa": {"node_ids": ["ba693fcd-56bc-4e40-9186-bdb68ddcbb4c", "bc1f674a-93f3-4524-b3ea-b6a5a31fb717", "885e7028-37a3-4139-abb0-1428a68a2e01", "d6a9a312-9ec5-4790-a508-e4d38ef0773e", "0d1288fb-8ce2-4257-85cb-c69bb2e757fe", "33d30f6b-d935-4180-94d8-c55acfb99914", "445a4d5e-c59e-4b7a-93d8-0ca1c6c771ef", "033f3991-a266-4a65-842a-4b1cd965d89a", "cb82f321-7cd7-4dc9-8ae2-659cc4a7face", "d4ceffc4-b563-4a6f-8e09-ff40511f222a", "7f796eb2-baf3-4e29-98c2-b6ce544a6498"], "metadata": {"file_path": "./phala_dist/governance-mechanism.md"}}, "ab0459de-7b89-433f-a2c9-b87d0a7b52a0": {"node_ids": ["fe2cae98-694d-43dd-ac92-27e3bd43196f"], "metadata": {"file_path": "./phala_dist/how-mirrored-price-feeds-work.md"}}, "0954c2e1-7675-49fa-8dd4-a1a94b385e2f": {"node_ids": ["9fbe4a0d-db61-4e13-8d01-7ad16c687495", "af397169-5eeb-459d-a8e9-71d63650bace", "50da90de-aef8-4183-b12c-97a41c77c56f", "be5732bc-746e-4a95-9797-dc80c0b2d78a"], "metadata": {"file_path": "./phala_dist/database.md"}}, "be7fe169-5433-4cef-b642-ace6510db393": {"node_ids": ["c325e3bf-b323-4719-89d6-4a69384a5b5a"], "metadata": {"file_path": "./phala_dist/phala-agent-gateway.md"}}, "b0ed3677-f3f9-4bea-ac51-39ff6f2bce01": {"node_ids": ["797863b2-c049-453a-9e2e-3af09f089fbc", "ff19f9a0-ccfd-45df-b8b9-b902a061bb90"], "metadata": {"file_path": "./phala_dist/get-pha-and-transfer.md"}}, "f167efb6-c80a-460a-8550-1b104e5a08ef": {"node_ids": ["2acb024c-4cad-48c1-8747-24b521c66a62"], "metadata": {"file_path": "./phala_dist/use-pink-extension.md"}}, "7ac1b3e7-3741-475e-9479-b02a7f8b8214": {"node_ids": ["b50c0166-c9dd-46ce-aed6-d4d2a241551d", "dc499656-68a1-445a-841d-4cb884ebf933", "d4b38f36-3594-4ca8-b0a9-b81291158f20", "28728dd6-bebe-4095-8ca6-3fe03c944f7a", "aff21859-24c1-4e65-8c3b-70d57f0edf19", "bcd7ca2e-539b-4416-8ddc-e2e165cd77e6"], "metadata": {"file_path": "./phala_dist/installing-nethermind.md"}}, "b9bfa6af-f3fe-4c78-b3c5-4cf8d0ca4d63": {"node_ids": ["dd41fe07-378b-4969-96e4-a122c41aa9b4"], "metadata": {"file_path": "./phala_dist/update-your-workers-node.md"}}, "291b61a9-70b7-4770-bd18-cf66d3f52508": {"node_ids": ["4a8ad005-20f1-4c77-a940-be030694cdf6", "8600772c-ce20-4308-87f8-33b00ba0d920"], "metadata": {"file_path": "./phala_dist/whats-share.md"}}, "9867c265-0338-4b6b-8f01-daf3431d1045": {"node_ids": ["435a881f-1221-4151-a1b6-dcf8d31e409b"], "metadata": {"file_path": "./phala_dist/supported-chains.md"}}, "7837cee6-a90f-44bf-a0f4-db4fe99697b9": {"node_ids": ["b2fb192e-e045-45b1-9d6c-a1a026b57e3e", "966a0a73-de05-49b7-9d2f-3856f6b27860", "c42509bd-dfec-486a-bfe9-45356b96822e", "ef82c5f4-908f-4a2d-bac1-ac482202154a", "9f2037b8-cdd9-44d6-bc72-5d448f766637", "c1a8b4a6-a9a4-4fcf-b1fd-41a8eabd8f39", "6ed4e0dd-766e-4e0e-9674-64e03aa7d045", "05278d8f-8207-45f0-9e94-2977eb8914e3"], "metadata": {"file_path": "./phala_dist/worker-rewards.md"}}, "aa2ec759-c06a-4484-9aef-7fa7247d5fe8": {"node_ids": ["7a2ac467-dcba-4d09-819c-3898d180a74b", "21203c61-c7da-41b2-8f73-0810b135078b", "5bc2dbbb-119d-4685-ba81-9b9da65b8bb1", "7ead1f6e-ad84-41de-b72c-661c77fe39bf"], "metadata": {"file_path": "./phala_dist/consensus-clients.md"}}, "f31e1bb5-3223-4886-b50a-ff09d80bf990": {"node_ids": ["410a567e-6d07-439c-bdbf-d307965e07ea", "65162b19-7509-40b7-b080-cb74e3dfc0ba", "443285f6-6082-4858-9fc8-8f0c0a19c562", "4527295f-9551-4dbf-9e79-b78b948dd324", "e7eb7adf-8ffe-4def-bb3f-0c5c03a486c6", "75618a35-55e3-4121-8300-0cf9f9e2851f"], "metadata": {"file_path": "./phala_dist/pruning.md"}}, "5ac0b7c7-522b-4138-a761-9e88bfd1f6ad": {"node_ids": ["303b15da-e483-4cd9-928a-738ddd27f190", "5bc43f19-eaf9-4347-8afd-cb05a2704f45"], "metadata": {"file_path": "./phala_dist/apply-for-project-funding.md"}}, "cae417db-3352-4bec-b7e9-ee694afdf24b": {"node_ids": ["d0b86f80-8d10-48f0-8cd5-9875a067ff77", "62481a09-6006-4f5f-a32b-4f05319d99c1", "7858ad84-edd5-459d-bb97-cdb630a2e103", "937b36f6-2f12-4b46-bd0f-f7b408f5de2e", "7578fec1-fa50-45f2-93c3-da46cde1e882", "db9c7723-bde7-48ac-b63c-56870df54181", "4a02451a-9e4a-4319-879b-4ad9021e0cd4", "9c7644b8-0df3-4a2e-841b-ef5b8122aad3", "a8461ce1-f1ce-4290-a363-82823d8b2c53", "7863a509-e199-49e5-b401-c6d4f84318c2", "16b14f97-fd6e-4725-95a8-ce29a0c7cef7", "fe7af23d-6b49-4d86-b82e-cd4cb262bb09", "d422c0dc-73f9-47f1-8fdb-4a355941df5a", "f30d9352-28be-4ef5-a016-6ed9e64d61a7", "4e5c83ac-9998-456f-8b9a-40eebf54a84d", "63ac37d0-a8df-407f-b016-45cacb1d390b", "9ad73e8d-b23c-426a-9576-db75441df13a", "c5ab60a7-e170-4ad2-aa5f-2f07c470274c", "8f47b2a6-0e05-45bd-912e-d7dc281a1826", "7ae7c2b9-a533-4a4a-b1f6-fd72cf297d07", "3e790f24-bf62-4aca-ba3b-9ecfbcd35780", "9be6b89a-d899-4748-93e2-4341f9f43b86", "fb7ac0af-06d5-4677-a357-901923cb402c", "52208510-42a9-4f37-8d45-d72c8a2e69a8", "f8134054-a55e-472b-8369-6f8480eb1b00", "928e4914-d1af-4fff-9d16-d57defd7b1d1", "42fe31f0-949c-438c-b84e-2f1a3c384136", "e31e263b-a914-431f-83da-76fe86dbc73e", "94bc794f-9f06-43f1-bb79-3bbc6b640135", "914da60f-a79d-4172-8e9d-76967fc239d6", "fda6d800-577f-4b1c-a987-ee603ddc794c", "684f5536-7b7f-411c-ba3b-8e855548a345", "474ff184-1c29-47ea-848f-4de79f8b6679", "ca3d4503-5a74-47f8-8417-551dd6ba482f", "7eceeff0-a6c6-4cc0-a13a-ffde0fd18233", "9cd8cbce-a32a-4c75-9028-d0fa94fe4c72", "6a7d782b-6b19-478b-81a6-0b5fa766d2ab", "d65189d8-631d-47b7-b97d-0d94b1af1c81", "489345d8-d839-4463-a26b-ae611f1de5c9", "6f4e457b-0fa8-455b-b15f-a2711e04b789", "34aa32b0-a53f-4486-9de0-dc5a4c430bb3", "3b000468-1dc8-4459-a20c-e268447e2dac", "3e945fbd-25aa-4d6e-bec5-f3031601c9fc", "3e876354-93f5-4209-a8f9-9776b513d5dc", "8c08b8cd-33c8-40de-a87b-744f4c2e0234"], "metadata": {"file_path": "./phala_dist/eth.md"}}}}