{"docstore/data": {"127ac2be-4a98-4d76-b753-cc2df09c179d": {"__data__": {"id_": "127ac2be-4a98-4d76-b753-cc2df09c179d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "701e7e49-90aa-4c07-8287-636770eea2f5", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5cbd1801-bbe9-4299-9ada-a2cc97d972aa", "node_type": "1", "metadata": {}, "hash": "38e78daee93af300db9551f8559e81156af31f81b122e757d3468e5260034611", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: proof namespace\nsidebar_label: proof\nsidebar_position: 7\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### proof_getTransactionByHash\n\nThis function returns the same result as `eth_getTransactionReceipt` and also a tx proof, receipt proof and serialized block headers.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n2. `includeHeader`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"proof_getTransactionByHash\",\n      \"params\": [txHash, includeHeader]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5cbd1801-bbe9-4299-9ada-a2cc97d972aa": {"__data__": {"id_": "5cbd1801-bbe9-4299-9ada-a2cc97d972aa", "embedding": null, "metadata": {"file_path": "./nethermind_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "701e7e49-90aa-4c07-8287-636770eea2f5", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "127ac2be-4a98-4d76-b753-cc2df09c179d", "node_type": "1", "metadata": {}, "hash": "e542e47aa8a1b258cc20937c87f20f2be564b8c83731d39c260bc836db446ccb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e31bcc6-97cf-4340-ba95-1a4f6a2fd56c", "node_type": "1", "metadata": {}, "hash": "a45d27d9e7a9d9489778f8332d0abce85dcdb5f14809fcea566d8a5238c4d5d5", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `blockHeader`: *string* (hex data)\n  - `transaction`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n  - `txProof`: array of *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### proof_getTransactionReceipt\n\nThis function should return the same result as `eth_call` and also proofs of all used accounts and their storages and serialized block headers.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n2. `includeHeader`: *boolean*", "mimetype": "text/plain", "start_char_idx": 817, "end_char_idx": 2370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e31bcc6-97cf-4340-ba95-1a4f6a2fd56c": {"__data__": {"id_": "9e31bcc6-97cf-4340-ba95-1a4f6a2fd56c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "701e7e49-90aa-4c07-8287-636770eea2f5", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5cbd1801-bbe9-4299-9ada-a2cc97d972aa", "node_type": "1", "metadata": {}, "hash": "38e78daee93af300db9551f8559e81156af31f81b122e757d3468e5260034611", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5dce95dd-0aa5-4b5b-8297-39e93cb36d65", "node_type": "1", "metadata": {}, "hash": "568bc818e1f990c85f5ea08b622fa8152a48646aa85e117bc9a0caf907dd008e", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"proof_getTransactionReceipt\",\n      \"params\": [txHash, includeHeader]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 2373, "end_char_idx": 2763, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5dce95dd-0aa5-4b5b-8297-39e93cb36d65": {"__data__": {"id_": "5dce95dd-0aa5-4b5b-8297-39e93cb36d65", "embedding": null, "metadata": {"file_path": "./nethermind_dist/proof.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "701e7e49-90aa-4c07-8287-636770eea2f5", "node_type": "4", "metadata": {}, "hash": "b2923568f3ff8269d5d821190a19b460645ecf40501f47e6aad42c68674e0633", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e31bcc6-97cf-4340-ba95-1a4f6a2fd56c", "node_type": "1", "metadata": {}, "hash": "a45d27d9e7a9d9489778f8332d0abce85dcdb5f14809fcea566d8a5238c4d5d5", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `blockHeader`: *string* (hex data)\n  - `receipt`: *object*\n    - `blobGasPrice`: *string* (hex integer)\n    - `blobGasUsed`: *string* (hex integer)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `contractAddress`: *string* (address)\n    - `cumulativeGasUsed`: *string* (hex integer)\n    - `effectiveGasPrice`: *string* (hex integer)\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gasUsed`: *string* (hex integer)\n    - `logs`: array of *object*\n      - `address`: *string* (address)\n      - `blockHash`: *string* (hash)\n      - `blockNumber`: *string* (hex integer)\n      - `data`: *string* (hex data)\n      - `logIndex`: *string* (hex integer)\n      - `removed`: *boolean*\n      - `topics`: array of *string* (hash)\n      - `transactionHash`: *string* (hash)\n      - `transactionIndex`: *string* (hex integer)\n    - `logsBloom`: *string* (hex data)\n    - `root`: *string* (hash)\n    - `status`: *string* (hex integer)\n    - `to`: *string* (address)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n  - `receiptProof`: array of *string* (hex data)\n  - `txProof`: array of *string* (hex data)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 2766, "end_char_idx": 4044, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e2fc607-4299-4217-a9e0-18932cc25f36": {"__data__": {"id_": "1e2fc607-4299-4217-a9e0-18932cc25f36", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth_unsubscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "00ba67e4-8e74-4429-8abe-ca4bbed48126", "node_type": "4", "metadata": {}, "hash": "d2113404970a7c6576b43c530d2660756827873bcce5bcc05fddffbe2bbdb2d0", "class_name": "RelatedNodeInfo"}}, "text": "### eth_unsubscribe\n\nUnsubscribes from a subscription.\n\n:::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionId`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_unsubscribe\",\n  \"params\": [subscriptionId]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean* (`true` if unsubscribed successfully; otherwise, `false`)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 708, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e5db49b-2cf0-479a-89c6-5eeca9533227": {"__data__": {"id_": "1e5db49b-2cf0-479a-89c6-5eeca9533227", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45a591e7-cec0-43e0-af8b-4f51b08294d5", "node_type": "1", "metadata": {}, "hash": "cf4a9e7621e11300bff43547ff87c57d520bf2dc1ccc596f13a66d0b4c43cbac", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: trace namespace\nsidebar_label: trace\nsidebar_position: 8\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### trace_block\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `numberOrTag`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_block\",\n      \"params\": [numberOrTag]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45a591e7-cec0-43e0-af8b-4f51b08294d5": {"__data__": {"id_": "45a591e7-cec0-43e0-af8b-4f51b08294d5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e5db49b-2cf0-479a-89c6-5eeca9533227", "node_type": "1", "metadata": {}, "hash": "588f0b2045884ee0e09b3694156146fa5e482a80a24ac6b9f536b9a13979485b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b96321f-fa80-4aee-a730-52a573f9d795", "node_type": "1", "metadata": {}, "hash": "ea270816d00f12fb3aa2419b20364c9a93d42e415343c31087cddf3d1c80f04e", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `error`: *string*\n  - `result`: *object*\n    - `address`: *string* (address)\n    - `code`: *string* (hex data)\n    - `gasUsed`: *string* (hex integer)\n    - `output`: *string* (hex data)\n  - `subtraces`: *string* (hex integer)\n  - `traceAddress`: array of *string* (hex integer)\n  - `transactionHash`: *string* (hash)\n  - `transactionPosition`: *string* (hex integer)\n  - `type`: *string*\n\n</TabItem>\n</Tabs>\n\n### trace_call\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 701, "end_char_idx": 2044, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b96321f-fa80-4aee-a730-52a573f9d795": {"__data__": {"id_": "8b96321f-fa80-4aee-a730-52a573f9d795", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45a591e7-cec0-43e0-af8b-4f51b08294d5", "node_type": "1", "metadata": {}, "hash": "cf4a9e7621e11300bff43547ff87c57d520bf2dc1ccc596f13a66d0b4c43cbac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "195dfec3-8754-4233-beee-9a94f80adc51", "node_type": "1", "metadata": {}, "hash": "1c1aaef098aea941d14bd4d5a19dd6e0d512b10c90734857e8892f601bbdbc0c", "class_name": "RelatedNodeInfo"}}, "text": "`call`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `traceTypes`: array of *string*\n\n3. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_call\",\n      \"params\": [call, traceTypes,", "mimetype": "text/plain", "start_char_idx": 2045, "end_char_idx": 3571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "195dfec3-8754-4233-beee-9a94f80adc51": {"__data__": {"id_": "195dfec3-8754-4233-beee-9a94f80adc51", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b96321f-fa80-4aee-a730-52a573f9d795", "node_type": "1", "metadata": {}, "hash": "ea270816d00f12fb3aa2419b20364c9a93d42e415343c31087cddf3d1c80f04e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c17cb743-d453-4a9d-bd3e-351e3ad3379e", "node_type": "1", "metadata": {}, "hash": "359ae254d313da02ca9e17fb88f9caa582926b69d5516b17faa2a4e279262454", "class_name": "RelatedNodeInfo"}}, "text": "blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of", "mimetype": "text/plain", "start_char_idx": 3572, "end_char_idx": 4877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c17cb743-d453-4a9d-bd3e-351e3ad3379e": {"__data__": {"id_": "c17cb743-d453-4a9d-bd3e-351e3ad3379e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "195dfec3-8754-4233-beee-9a94f80adc51", "node_type": "1", "metadata": {}, "hash": "1c1aaef098aea941d14bd4d5a19dd6e0d512b10c90734857e8892f601bbdbc0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b62e3470-1163-4f57-83f7-c13757e0dd55", "node_type": "1", "metadata": {}, "hash": "c51c4a9c481d11c0c7579ce18bd32daf6e5308994789e766a6be44742ca0613c", "class_name": "RelatedNodeInfo"}}, "text": "*object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_filter\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `traceFilterForRpc`: *object*\n    - `after`: *string* (hex integer)\n    - `count`: *string* (hex integer)\n    - `fromAddress`: array of *string* (address)\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toAddress`: array of *string* (address)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 4878, "end_char_idx": 6251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b62e3470-1163-4f57-83f7-c13757e0dd55": {"__data__": {"id_": "b62e3470-1163-4f57-83f7-c13757e0dd55", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c17cb743-d453-4a9d-bd3e-351e3ad3379e", "node_type": "1", "metadata": {}, "hash": "359ae254d313da02ca9e17fb88f9caa582926b69d5516b17faa2a4e279262454", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31916a26-85e3-4ae7-8076-73cbb3660f61", "node_type": "1", "metadata": {}, "hash": "03f7573419aa058c1cde80769fa3c2dcb274246b7fec17da0ebee767f7b1b9c6", "class_name": "RelatedNodeInfo"}}, "text": "\"method\": \"trace_filter\",\n      \"params\": [traceFilterForRpc]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `error`: *string*\n  - `result`: *object*\n    - `address`: *string* (address)\n    - `code`: *string* (hex data)\n    - `gasUsed`: *string* (hex integer)\n    - `output`: *string* (hex data)\n  - `subtraces`: *string* (hex integer)\n  - `traceAddress`: array of *string* (hex integer)\n  - `transactionHash`: *string* (hash)\n  - `transactionPosition`: *string* (hex integer)\n  - `type`: *string*\n\n</TabItem>\n</Tabs>\n\n### trace_rawTransaction\n\nTraces a call to eth_sendRawTransaction without making the call,", "mimetype": "text/plain", "start_char_idx": 6258, "end_char_idx": 7794, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31916a26-85e3-4ae7-8076-73cbb3660f61": {"__data__": {"id_": "31916a26-85e3-4ae7-8076-73cbb3660f61", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b62e3470-1163-4f57-83f7-c13757e0dd55", "node_type": "1", "metadata": {}, "hash": "c51c4a9c481d11c0c7579ce18bd32daf6e5308994789e766a6be44742ca0613c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93d2706d-e077-4ae2-b9db-12691d71d2d4", "node_type": "1", "metadata": {}, "hash": "4425ca2d14cd78bfd7f7b5b5cf3f86622e13c526268e84138783c889169deb93", "class_name": "RelatedNodeInfo"}}, "text": "returning the traces\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `data`: *string* (hex data)\n\n2. `traceTypes`: array of *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_rawTransaction\",\n      \"params\": [data, traceTypes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`:", "mimetype": "text/plain", "start_char_idx": 7795, "end_char_idx": 9180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93d2706d-e077-4ae2-b9db-12691d71d2d4": {"__data__": {"id_": "93d2706d-e077-4ae2-b9db-12691d71d2d4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31916a26-85e3-4ae7-8076-73cbb3660f61", "node_type": "1", "metadata": {}, "hash": "03f7573419aa058c1cde80769fa3c2dcb274246b7fec17da0ebee767f7b1b9c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20788d48-fc5a-45e6-a395-ba99a9e3c84c", "node_type": "1", "metadata": {}, "hash": "a43e377ac5a9dd6cd8c820bfab1f0b72295bf672bd3eecf5b53e357c64cf77ef", "class_name": "RelatedNodeInfo"}}, "text": "*object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_replayBlockTransactions\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `traceTypes`: array of *string*", "mimetype": "text/plain", "start_char_idx": 9181, "end_char_idx": 10406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20788d48-fc5a-45e6-a395-ba99a9e3c84c": {"__data__": {"id_": "20788d48-fc5a-45e6-a395-ba99a9e3c84c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93d2706d-e077-4ae2-b9db-12691d71d2d4", "node_type": "1", "metadata": {}, "hash": "4425ca2d14cd78bfd7f7b5b5cf3f86622e13c526268e84138783c889169deb93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9154316-ac02-4018-8676-481e7e8266ba", "node_type": "1", "metadata": {}, "hash": "829efc374be407772ad84de4b6490efa81b8eb0ef21a9544bc6bdfce50f8ef94", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_replayBlockTransactions\",\n      \"params\": [blockParameter, traceTypes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    -", "mimetype": "text/plain", "start_char_idx": 10409, "end_char_idx": 11775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9154316-ac02-4018-8676-481e7e8266ba": {"__data__": {"id_": "e9154316-ac02-4018-8676-481e7e8266ba", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20788d48-fc5a-45e6-a395-ba99a9e3c84c", "node_type": "1", "metadata": {}, "hash": "a43e377ac5a9dd6cd8c820bfab1f0b72295bf672bd3eecf5b53e357c64cf77ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c20db2ed-f30a-44f1-8b73-c846890f1870", "node_type": "1", "metadata": {}, "hash": "547621d410c2def51a5eb729ca3bcca8ee0296daa576c2bc1387a874a316d5c5", "class_name": "RelatedNodeInfo"}}, "text": "`code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_replayTransaction\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n2. `traceTypes`: array of *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_replayTransaction\",\n      \"params\": [txHash,", "mimetype": "text/plain", "start_char_idx": 11776, "end_char_idx": 13071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c20db2ed-f30a-44f1-8b73-c846890f1870": {"__data__": {"id_": "c20db2ed-f30a-44f1-8b73-c846890f1870", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9154316-ac02-4018-8676-481e7e8266ba", "node_type": "1", "metadata": {}, "hash": "829efc374be407772ad84de4b6490efa81b8eb0ef21a9544bc6bdfce50f8ef94", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51acd792-70f4-4f0b-ade0-76179461410f", "node_type": "1", "metadata": {}, "hash": "dcbff61a1fafca9c15187046e1500496be889554dab44ebfa1a15c957bfb30c5", "class_name": "RelatedNodeInfo"}}, "text": "traceTypes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `output`: *string* (hex data)\n  - `stateChanges`: map of *object*\n    - `balance`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `code`: *object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n    - `nonce`: *object*\n      - `after`: *string* (hex integer)\n      - `before`: *string* (hex integer)\n    - `storage`: map of", "mimetype": "text/plain", "start_char_idx": 8196, "end_char_idx": 9497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51acd792-70f4-4f0b-ade0-76179461410f": {"__data__": {"id_": "51acd792-70f4-4f0b-ade0-76179461410f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c20db2ed-f30a-44f1-8b73-c846890f1870", "node_type": "1", "metadata": {}, "hash": "547621d410c2def51a5eb729ca3bcca8ee0296daa576c2bc1387a874a316d5c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e5af461e-d0c3-4efa-a292-d9901fa8f3c5", "node_type": "1", "metadata": {}, "hash": "11649da730c27247f8915e4375dcd54219b42535beeaeaba48f50a918923a09b", "class_name": "RelatedNodeInfo"}}, "text": "*object*\n      - `after`: *string* (hex data)\n      - `before`: *string* (hex data)\n  - `transactionHash`: *string* (hash)\n  - `vmTrace`: *object*\n    - `code`: *string* (hex data)\n    - `operations`: array of *object*\n      - `cost`: *string* (hex integer)\n      - `memory`: *object*\n        - `data`: *string* (hex data)\n        - `offset`: *string* (hex integer)\n      - `pc`: *string* (hex integer)\n      - `push`: array of *string* (hex data)\n      - `store`: *object*\n        - `key`: *string* (hex data)\n        - `value`: *string* (hex data)\n      - `sub`: *object*\n        <!--[circular ref]-->\n      - `used`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### trace_transaction\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"trace_transaction\",\n      \"params\": [txHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 14374, "end_char_idx": 15509, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e5af461e-d0c3-4efa-a292-d9901fa8f3c5": {"__data__": {"id_": "e5af461e-d0c3-4efa-a292-d9901fa8f3c5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/trace.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e9b80aa0-3a10-442e-aca6-208744012837", "node_type": "4", "metadata": {}, "hash": "2a1465936a633fc400daa94be97b67d18c75f3b553f5a021c818d79862d16af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51acd792-70f4-4f0b-ade0-76179461410f", "node_type": "1", "metadata": {}, "hash": "dcbff61a1fafca9c15187046e1500496be889554dab44ebfa1a15c957bfb30c5", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `action`: *object*\n    - `author`: *string* (address)\n    - `callType`: *string*\n    - `creationMethod`: *string*\n    - `error`: *string*\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `includeInTrace`: *boolean*\n    - `input`: *string* (hex data)\n    - `isPrecompiled`: *boolean*\n    - `result`: *object*\n      - `address`: *string* (address)\n      - `code`: *string* (hex data)\n      - `gasUsed`: *string* (hex integer)\n      - `output`: *string* (hex data)\n    - `rewardType`: *string*\n    - `subtraces`: array of *object*\n      <!--[circular ref]-->\n    - `to`: *string* (address)\n    - `traceAddress`: array of *string* (hex integer)\n    - `type`: *string*\n    - `value`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `error`: *string*\n  - `result`: *object*\n    - `address`: *string* (address)\n    - `code`: *string* (hex data)\n    - `gasUsed`: *string* (hex integer)\n    - `output`: *string* (hex data)\n  - `subtraces`: *string* (hex integer)\n  - `traceAddress`: array of *string* (hex integer)\n  - `transactionHash`: *string* (hash)\n  - `transactionPosition`: *string* (hex integer)\n  - `type`: *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 701, "end_char_idx": 1972, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edc77b9c-da58-4c48-817a-37c217a475ad": {"__data__": {"id_": "edc77b9c-da58-4c48-817a-37c217a475ad", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b5940f1-3314-49c8-8d02-f2f81011816a", "node_type": "1", "metadata": {}, "hash": "bb5fa559cba94a5af21225eb44231d8225f84efee40aca832769c71c799ad2c0", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Sync\nsidebar_position: 2\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n## There are three main synchronization modes\n\n* snap sync\n\t* the fastest way to sync to the network (syncs to mainnet in \\~3 hours)\n\t* downloads only the latest state, headers, and optionally bodies and receipts\n* fast sync\n\t* slower than snap sync\n\t* useful on nethermind-only chains (like Gnosis), where snap sync is not available for now\n\t* downloads only the latest state, headers, and optionally bodies and receipts\n* archive sync\n\t* heavy historical sync verifying all the transactions and keeping all the historical state\n\t* you can run it like this `./Nethermind.Runner --config mainnet_archive`\n\n| Sync Mode                                                  | Disk Space needed | Full current state | Full current and all historical states | Can sync a full archive node from this | Time to sync | Time to RPC |\n|------------------------------------------------------------|-------------------|--------------------|----------------------------------------|----------------------------------------|--------------|-------------|\n| archive                                                    | \\~12TB            | YES                | YES                                    | YES                                    | \\~3 weeks    | \\~3 weeks   |\n| snap/fast sync with all bodies and receipts                | \\~800GB           | YES                | NO                                     | YES                                    | \\~20 hours   | \\~20 hours  |\n| default snap/fast sync (with barriers set to support Eth2) | \\~500GB           | YES                | NO                                     | NO                                     | \\~11 hours   | \\~11 hours  |\n| snap/fast sync without receipts                            | \\~450GB           | YES                | NO                                     | YES                                    | \\~12 hours   | \\~12 hours  |\n| snap/fast sync without bodies and receipts                 | \\~200GB           | YES                | NO                                     | NO                                     | \\~9 hours    | \\~9 hours   |\n\n## Snap Sync\n\nSnap sync allows a node to perform the initial synchronization and download of Ethereum\u2019s state up to 10 times faster\nthan using fast sync.\n\n#### How to Enable\n\nSnap sync is enabled by default for majority of networks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b5940f1-3314-49c8-8d02-f2f81011816a": {"__data__": {"id_": "2b5940f1-3314-49c8-8d02-f2f81011816a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "edc77b9c-da58-4c48-817a-37c217a475ad", "node_type": "1", "metadata": {}, "hash": "38de270ab329ebf6e03766d1bb214ac40645bf699ce3a0db4e0d3988f40f8b49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "255d5927-21ee-4324-8834-a3ea11f81930", "node_type": "1", "metadata": {}, "hash": "cc9bf0dda4a94282d5b0e675612c5975fa7a940c9a897f294dcfe70b707781b0", "class_name": "RelatedNodeInfo"}}, "text": "To make sure, check if`SnapSync` is set to `true` in the Sync\nmodule of your `.cfg` file\n\n```\n\"Sync\": {\n\t\"SnapSync\": true\n}\n```\n\n> **IMPORTANT**: Do not enable snap sync on a previously synced node. Only use when syncing to the network for the first\n> time.\n>\n> **IMPORTANT**: Do not remove other configurations from Sync module. Just add `\"SnapSync\": true`, e.g.\n>\n> ```\n> \"Sync\": {\n> \t\"SnapSync\": true,\n> \t\"PivotNumber\": 15011000,\n>         \"PivotHash\": \"0x46c838d02d5fa5bc070080ed7965da1d888f6eb1797045365407c7011280af56\",\n>     \t\"PivotTotalDifficulty\": \"52367203434576253689712\",\n>     \t\"FastBlocks\": true\n> }\n> ```\n\n#### Snap Sync vs Other Sync Modes\n\nMore than 12TB of storage is needed today to run a full archive node \u2014 one that stores all the state since genesis.\nBecause of that, setting up an archive node can take days or even weeks. Fast Sync can still take more than 24 hours on\nthe fast machine and download about 90GB state data. With Snap Sync, sync time is reduced to 2-3h with a download of\nabout 30GB.\n\nThis reduction in sync time and download size has to do with the specific way in which Ethereum\u2019s state is stored in a\nnode: Merkle trees.\n\n![](</img/Untitled(1).png>)\n\nWith Fast Sync, a node downloads the headers of each block and retrieves all the nodes beneath it until it reaches the\nleaves. By contrast, Snap Sync only downloads the leaf nodes, generating the remaining nodes locally which saves time\nand packets downloaded.\n\n#### Current limitations and future development\n\nFor now Snap Sync on the Nethermind client can only download the Ethereum state but not serve it to other clients - snap\nserving development is in progress, expected late 2023/early 2024.\n\nThe only Ethereum client that supports serving Snap Sync requests is Geth, so only networks supported by Geth can be\nsynced using that method: Mainnet, Goerli, Sepolia.", "mimetype": "text/plain", "start_char_idx": 2523, "end_char_idx": 4383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "255d5927-21ee-4324-8834-a3ea11f81930": {"__data__": {"id_": "255d5927-21ee-4324-8834-a3ea11f81930", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b5940f1-3314-49c8-8d02-f2f81011816a", "node_type": "1", "metadata": {}, "hash": "bb5fa559cba94a5af21225eb44231d8225f84efee40aca832769c71c799ad2c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d1edae9-a0f8-4150-ae84-357373ef1221", "node_type": "1", "metadata": {}, "hash": "49b9fc5bcedf8052135b058d5bda36ac5bb56c0ebf47c8becdc7aec0acf7d5a5", "class_name": "RelatedNodeInfo"}}, "text": "## Fast Sync\n\nAfter completing the fast sync your node will have the ability to answer questions like _'what is my account\nbalance **now**'_, _'how many XYZ tokens SomeExchange holds **at the moment**'_.\n\nFast sync has multiple stages. Nethermind uses a `pivot block` number to improve fast sync performance.\nThe `pivot block` data is automatically updated after initialization of the client and consists of\nthe `block number`, `block hash` and `block total difficulty` (please note that `total difficulty` is different\nthan `difficulty`). Before synchronizing state data Nethermind synchronizes in two directions - backwards\nfrom `pivot block` to 0 for headers and forward to the head of the chain for headers, blocks and receipts. Forward sync\nmight be very slow (5 - 50 bps) so having fresh pivot block is very important - it is guaranteed by recently implemented\nauto-update.\n\nAfter downloading the block data Nethermind will start state sync (downloading the latest state trie nodes). We are\nproviding an estimate for the download size and progress but the real value may be different than the estimate (\nespecially if you are using an old version of Nethermind as we sometimes manually adjust the estimator based on our\nobservations of the chain growth rate). Because of this sometimes your sync may continue even when it shows \\~100%\nfinished. The other important component is the speed of your sync - if your IO / network / file system causes the state\nsync to go much slower than around 1.5MB per second on average then you will start downloading some parts of the trie\nover and over again. In such cases you may be surprised to see something like 58000MB / 53000MB (100%). It means that\nyou downloaded around 5GB of data that is no longer needed. If your sync is very slow (extended beyond two days) then\nvery likely your setup cannot catch up with the chain progress.\n\nAfter the state sync finishes you will see the _'Processed...'_ messages like in archive sync - it means that your node\nis in sync and is processing the latest blocks.", "mimetype": "text/plain", "start_char_idx": 4385, "end_char_idx": 6432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d1edae9-a0f8-4150-ae84-357373ef1221": {"__data__": {"id_": "1d1edae9-a0f8-4150-ae84-357373ef1221", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "255d5927-21ee-4324-8834-a3ea11f81930", "node_type": "1", "metadata": {}, "hash": "cc9bf0dda4a94282d5b0e675612c5975fa7a940c9a897f294dcfe70b707781b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc8d3609-fe6e-4c47-b14b-cfdd9a80b883", "node_type": "1", "metadata": {}, "hash": "333f33fa4de8a5f0a6537db6dff202c3b42e3d05b1b7dbc928ed7d9a2516d8ff", "class_name": "RelatedNodeInfo"}}, "text": "Mainnet sync, at the time of writing (December 2020), takes around 8 hours on an UpCloud 16GB RAM 8 CPU $40 VM (and then\nsyncs receipts and bodies in the background if you enabled them in the configuration). Goerli sync should take around 40\nminutes.\n\n![Fast sync logs example for mainnet.](</img/image(59).png>)\n\nState sync log messages have multiple values displayed. First `dd.HH:mm:ss` total state sync time is displayed, followed\nby an estimated sync progress (percentage of total database data synced), then the current download speed is displayed (\nthere will be times when it will slow down to 0 or single digit numbers, especially towards the end of the sync). In\ngeneral 6 hours sync times shown on screenshots are with around 2000 kB/s (kilobytes per second) average sync rate. You\ncan calculate it in the example as \\~45GB / (2MB/s) \\~ 22500 seconds \\~6.25 hours. We also display the number of state\naccounts synced, number of trie nodes synced and a diagnostic message in the format of _\\[number\\_of\\_pending\\_requests]\n.\\[average time spent in response handler displayed as milliseconds]_. So `5.6.20ms` means that we are awaiting for\nresponses to 5 requests that have been sent to peers and the average time it takes us to process a single response is\n6.20ms. The response handling times will differ depending on how many trie nodes are already cached (so they will be\nsignificantly slower for a while after the node restart when cache has to be rebuilt) and based on how fast the database\nIO is (SSD vs NVMe vs cloud drives). For a reasonable sync time you probably should expect these values to be below\n15ms (but they may be as high as 700ms for a while after restarting the node).\n\nA single restart of the node during the fast sync may extend the sync time by up to two hours because the node has to\nrebuild the caches by reading millions of values from the database.\n\nAt the last stages of the sync the node will be repeatedly displaying the branch sync progress and changing the block\nnumber to which it tries to catch up. This stage should take between 30 minutes and two hours.", "mimetype": "text/plain", "start_char_idx": 6434, "end_char_idx": 8534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc8d3609-fe6e-4c47-b14b-cfdd9a80b883": {"__data__": {"id_": "bc8d3609-fe6e-4c47-b14b-cfdd9a80b883", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d1edae9-a0f8-4150-ae84-357373ef1221", "node_type": "1", "metadata": {}, "hash": "49b9fc5bcedf8052135b058d5bda36ac5bb56c0ebf47c8becdc7aec0acf7d5a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "01a9637b-3d0d-493f-b2d3-26d4e590fcc6", "node_type": "1", "metadata": {}, "hash": "470b75b03b07e30255cc91f3eaf8c47d58b3e99917c03b43372726d05a3b5405", "class_name": "RelatedNodeInfo"}}, "text": "If it lasts much more\nthen it is possible that you will not be able to catch up with the network progress.\n\nOne of the best indicators that you are close to be synced is combined \\~100% state size progress and nearly 100% branch\nsync progress.\n\n![](</img/image(64).png>)\n\n![](</img/image(62).png>)\n\n## Archive Sync\n\nArchive sync is the 'heaviest' and slowest sync mode but allows to ask questions like _'what was the balance of my\naccount 2 years ago?'_, _'how many XYZ token were held in SomeExchange custody in 2017?'_.\n\nWe have prepared default archive sync configurations and they can be launched from Nethermind Launcher (just choose the\narchive options) or by simply loading appropriate config when launching `./Nethermind.Runner --config mainnet_archive`\n\n`./Nethermind.Runner --config goerli_archive`\n\nWhile for some smaller networks archive sync can complete very quickly (in minutes or hours) mainnet sync would take 2 -\n6 weeks depending on the speed of your IO (whether you use SSD or NVMe or depending on the cloud provider IOPS).\nDatabase size in archive sync is the biggest from all modes as you will store all the historical data.\n\n![Example of the archive sync logs](</img/image(58).png>)\n\n![](</img/image(57).png>)\n\nExplanation of some data in the logs:\n\n* at the beginning you may see a _'Waiting for peers...'_ message while the node is trying to discover nodes that it can\n  sync with.\n* _'Downloaded 1234/8000000'_ shows the number of unprocessed blocks (with transactions) downloaded from the network.\n  For `mainnet`this value may be slower than processing at first but very quickly you will see blocks being downloaded\n  much faster than processed. Empty blocks can be as small as 512 bytes (just headers without transactions) and full\n  blocks with heavy transactions can reach a few hundred kilobytes. We display both current download speed (calculated\n  in the last second) and average (total) speed since starting the node.\n* _'Processed ...'_ displays the blocks that have been processed by the EVM.", "mimetype": "text/plain", "start_char_idx": 8535, "end_char_idx": 10564, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01a9637b-3d0d-493f-b2d3-26d4e590fcc6": {"__data__": {"id_": "01a9637b-3d0d-493f-b2d3-26d4e590fcc6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc8d3609-fe6e-4c47-b14b-cfdd9a80b883", "node_type": "1", "metadata": {}, "hash": "333f33fa4de8a5f0a6537db6dff202c3b42e3d05b1b7dbc928ed7d9a2516d8ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a252df2-239a-49bd-81f1-9419891545ff", "node_type": "1", "metadata": {}, "hash": "01d643a102f6dafd0cbc39db01e7b38ef3805e93375df37002411c09f5bfb769", "class_name": "RelatedNodeInfo"}}, "text": "The first number shows the current head\n  block number, then you can see `mgasps` (million gas per second) - current and total, then `tps` (transactions per\n  second) - current and total, `bps` (blocks per second). Then `recv queue` (transactions signature public key recovery\n  queue), `proc queue` (processor queue). Both recovery queue and processor queue are designed so when too many blocks\n  are waiting for processing then only their hashes are kept in memory and remaining data are stored in the database.\n  Thus, the queues numbers that you can see will be capped by some number.\n* _'Cache for epoch...'_ informs about `ethash` cache needed for block seal verification (only on `mainnet`\n  and `ropsten`). Caches will be calculated every 30000 blocks (length of an epoch) but can also be calculated for the\n  latest blocks that are being broadcast on the network.\n* After the archive sync finishes you will see the _'Processed...'_ message appearing on average every 15 seconds when\n  the new block is processed.\n* `mgasps`, `tps`, `bps` values should not be treated as comparable as they may differ massively on different parts of\n  the chain. For example when blocks are empty you may see very high `bps` values with very low (or even zero) `tps`\n  and `mgasps` values as there are no transactions and no gas for EVM processing and blocks are very light. On the other\n  hand when blocks are filled with very heavy transactions then `bps` might be very low while `mgasps` will be very\n  high. It is even possible that you will see a lot of very light transactions where `tps` will be high while `bps`\n  and `mgasps` will be average.\n\n## Sync time\n\nSync time heavily depends on the hardware used for the node, network speed, and peering. We are constantly pursuing to make it as fast as possible. Below is a brief on how the sync time looks on different machines and various chains (tested with Nethermind v1.21.0).", "mimetype": "text/plain", "start_char_idx": 10565, "end_char_idx": 12489, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a252df2-239a-49bd-81f1-9419891545ff": {"__data__": {"id_": "6a252df2-239a-49bd-81f1-9419891545ff", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "01a9637b-3d0d-493f-b2d3-26d4e590fcc6", "node_type": "1", "metadata": {}, "hash": "470b75b03b07e30255cc91f3eaf8c47d58b3e99917c03b43372726d05a3b5405", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6543d586-7d83-48e0-a497-934d98af2935", "node_type": "1", "metadata": {}, "hash": "634ef94c9848114238e1b9444ad6d45bd20ef9a02f50371d436ab49eaecfaf80", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"highend-vm\" label=\"High-end VM\">\n\nHardware configuration:\n\n- Cloud provider: Akamai (formerly Linode)\n- CPU: AMD EPYC 7601, 16 vCPU\n- Memory: 64 GB\n- Storage: 1.2 TB, ~40k IOPS\n\n<Tabs groupId=\"network\">\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 2h 3m\n- **Full sync time:** 7h 3m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 1h 58m\n- **State sync:** 4m\n- **Old headers:** 1h 27m\n- **Old bodies:** 1h 55m\n- **Old receipts:** 3h 2m\n\n</TabItem>\n<TabItem value=\"goerli\" label=\"Goerli\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 2h 49m\n- **Full sync time:** 4h 58m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 2h 49m\n- **State sync:** 0.5m\n- **Old headers:** 11m\n- **Old bodies:** 1h 2m\n- **Old receipts:** 1h 5m\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 8m\n- **Full sync time:** 1h 9m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 8m\n- **State sync:** 0.", "mimetype": "text/plain", "start_char_idx": 12491, "end_char_idx": 13611, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6543d586-7d83-48e0-a497-934d98af2935": {"__data__": {"id_": "6543d586-7d83-48e0-a497-934d98af2935", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a252df2-239a-49bd-81f1-9419891545ff", "node_type": "1", "metadata": {}, "hash": "01d643a102f6dafd0cbc39db01e7b38ef3805e93375df37002411c09f5bfb769", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a627d66-3424-477b-b0e8-a6cc5f962323", "node_type": "1", "metadata": {}, "hash": "5327dbf0a02e1eba31eaeaf5d730297b2e8cc717d589570a8bd17c7b1bc2bb64", "class_name": "RelatedNodeInfo"}}, "text": "3m\n- **Old headers:** 12m\n- **Old bodies:** 21m\n- **Old receipts:** 22m\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 13h 40m\n- **Full sync time:** 17h 17m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 13h 40m\n- **Old headers:** 1h 46m\n- **Old bodies:** 1h 31m\n- **Old receipts:** 2h 3m\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 20m\n- **Full sync time:** 40m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 20m\n- **Old headers:** 11m\n- **Old bodies:** 8m\n- **Old receipts:** 10m\n\n</TabItem>\n</Tabs>\n</TabItem>\n<TabItem value=\"midend-vm\" label=\"Mid-end VM\">\n\nHardware configuration:\n\n- Cloud provider: AWS\n- [c7g.2xlarge](https://aws.amazon.com/ec2/instance-types/c7g/): 8 vCPU, 16 GiB memory\n- Storage: 1 TB, ~10k IOPS\n\n<Tabs groupId=\"network\">\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 5h 55m\n- **Full sync time:** 12h 37m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 4h 35m\n- **State sync:** 1h 20m\n- **Old headers:** 1h 43m\n- **Old bodies:** 2h 13m\n- **Old receipts:** 4h 28m\n\n</TabItem>\n<TabItem value=\"goerli\" label=\"Goerli\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 1h 32m\n- **Full sync time:** 4h 10m\n\nThe detailed breakdown of sync", "mimetype": "text/plain", "start_char_idx": 13611, "end_char_idx": 15058, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a627d66-3424-477b-b0e8-a6cc5f962323": {"__data__": {"id_": "8a627d66-3424-477b-b0e8-a6cc5f962323", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6543d586-7d83-48e0-a497-934d98af2935", "node_type": "1", "metadata": {}, "hash": "634ef94c9848114238e1b9444ad6d45bd20ef9a02f50371d436ab49eaecfaf80", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74a22d81-d56b-43b4-8884-00b51196dc08", "node_type": "1", "metadata": {}, "hash": "5218e5f685d2f25e8cabd2b6b869a58a9aa34c4b0e1d4a198a1aaa54058bab38", "class_name": "RelatedNodeInfo"}}, "text": "stages:\n\n- **Snap sync phase 1:** 1h 19m\n- **State sync:** 12m\n- **Old headers:** 23m\n- **Old bodies:** 49m\n- **Old receipts:** 1h 35m\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 17m\n- **Full sync time:** 1h 3m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 13m\n- **State sync:** 4m\n- **Old headers:** 15m\n- **Old bodies:** 19m\n- **Old receipts:** 29m\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 15h 54m\n- **Full sync time:** 18h 28m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 15h 54m\n- **Old headers:** 1h 4m\n- **Old bodies:** 40m\n- **Old receipts:** 1h 52m\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 13m\n- **Full sync time:** 25m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 13m\n- **Old headers:** 12m\n- **Old bodies:** 5m\n- **Old receipts:** 5m\n\n</TabItem>\n</Tabs>\n</TabItem>\n<TabItem value=\"oldspec-vm\" label=\"Old-spec VM\">\n\nHardware configuration:\n\n- Cloud provider: Scaleway\n- CPU: Intel Xeon Processor E5-2620 v2, 2 vCPU\n- Memory: 192 GB\n- Storage: 1 TB, ~44k IOPS\n\n<Tabs groupId=\"network\">\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 5h 55m\n- **Full sync time:** 17h 1m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync", "mimetype": "text/plain", "start_char_idx": 15059, "end_char_idx": 16553, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74a22d81-d56b-43b4-8884-00b51196dc08": {"__data__": {"id_": "74a22d81-d56b-43b4-8884-00b51196dc08", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a627d66-3424-477b-b0e8-a6cc5f962323", "node_type": "1", "metadata": {}, "hash": "5327dbf0a02e1eba31eaeaf5d730297b2e8cc717d589570a8bd17c7b1bc2bb64", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "806bd4ff-b93d-485c-8e60-1a8ef3267bff", "node_type": "1", "metadata": {}, "hash": "d06e7afe790ed8a104814d25884e0327667c8c804bccb25d27d3cb320c15e06d", "class_name": "RelatedNodeInfo"}}, "text": "phase 1:** 4h 29m\n- **State sync:** 25m\n- **Old headers:** 1h 27m\n- **Old bodies:** 3h 39m\n- **Old receipts:** 8h 3m\n\n</TabItem>\n<TabItem value=\"goerli\" label=\"Goerli\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 1h 51m\n- **Full sync time:** 5h 55m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 1h 40m\n- **State sync:** 11m\n- **Old headers:** 50m\n- **Old bodies:** 1h 34m\n- **Old receipts:** 2h 14m\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 16m\n- **Full sync time:** 2h 9m\n\nThe detailed breakdown of sync stages:\n\n- **Snap sync phase 1:** 15m\n- **State sync:** 1m\n- **Old headers:** 26m\n- **Old bodies:** 45m\n- **Old receipts:** 56m\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 15h 13m\n- **Full sync time:** 17h 30m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 15h 13m\n- **Old headers:** 3h 8m\n- **Old bodies:** 50m\n- **Old receipts:** 1h 25m\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\nThe high-level data on major sync milestones:\n\n- **Attestation time:** 20m\n- **Full sync time:** 40m\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 4m\n- **Old headers:** 1h 27m\n- **Old bodies:** 1h 55m\n- **Old receipts:** 3h 2m\n\n</TabItem>\n<TabItem value=\"energyweb\" label=\"Energy", "mimetype": "text/plain", "start_char_idx": 16554, "end_char_idx": 17967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "806bd4ff-b93d-485c-8e60-1a8ef3267bff": {"__data__": {"id_": "806bd4ff-b93d-485c-8e60-1a8ef3267bff", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74a22d81-d56b-43b4-8884-00b51196dc08", "node_type": "1", "metadata": {}, "hash": "5218e5f685d2f25e8cabd2b6b869a58a9aa34c4b0e1d4a198a1aaa54058bab38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe70b6d3-5c2f-4310-877a-b28b50cd28c5", "node_type": "1", "metadata": {}, "hash": "c9ed7306ff66cdf86483dd647205134e38f1d0f79226d98c25b2d77681243fbc", "class_name": "RelatedNodeInfo"}}, "text": "Web\">\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 13h 7m\n- **Old headers:** 2h 32m\n- **Old bodies:** 51m\n- **Old receipts:** 1h 11m\n- **Full sync time:** 15h 20m\n\n</TabItem>\n<TabItem value=\"volta\" label=\"Volta\">\n\nThe detailed breakdown of sync stages:\n\n- **State sync:** 14h 27m\n- **Old headers:** 2h 42m\n- **Old bodies:** 40m\n- **Old receipts:** 58m\n- **Full sync time:** 16h 10m\n\n</TabItem>\n</Tabs>\n</TabItem>\n</Tabs>\n\n## Resync a node from scratch\n\nThis guide explains how to resync a Nethermind node using the existing Pivot block or updating it to a more recent one.\n\n### Steps to Resync a Nethermind Node\n\n1. **Stop the Nethermind node**: If your Nethermind node is currently running, stop it to ensure that no new data is\n   being written to the database during the resync process.\n2. **Delete the existing database**: Navigate to the Nethermind data directory. The location of this directory depends\n   on how Nethermind was installed and your configuration settings. Inside the data directory, find the `nethermind_db`\n   folder and delete the `mainnet` subfolder to remove the existing database for the mainnet.\n3. **Update the configuration file (optional)**: If you want to change any configuration settings before resyncing the\n   node, edit the `mainnet.cfg` file located in the Nethermind directory. For example, you might want to adjust the\n   pruning settings or specify a different network.\n4. **Update the Pivot block (optional)**\\\n   :::danger\n   **Only for versions before 1.19.0 where Auto-Pivot approach was introduced**\n   :::\n\t1. **Using Etherscan**: If you want to speed up the syncing process, you can update the Pivot block to a more recent\n\t   one.", "mimetype": "text/plain", "start_char_idx": 17968, "end_char_idx": 19660, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe70b6d3-5c2f-4310-877a-b28b50cd28c5": {"__data__": {"id_": "fe70b6d3-5c2f-4310-877a-b28b50cd28c5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "806bd4ff-b93d-485c-8e60-1a8ef3267bff", "node_type": "1", "metadata": {}, "hash": "d06e7afe790ed8a104814d25884e0327667c8c804bccb25d27d3cb320c15e06d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "516c970b-98e3-4986-89ec-4df1909b61ab", "node_type": "1", "metadata": {}, "hash": "80f0183155a5701310018d61ceedca832db34729a6afcea6a713b3b13eb2dea1", "class_name": "RelatedNodeInfo"}}, "text": "To do this, find the `Sync` section in the `mainnet.cfg` file and update the `PivotNumber` and `PivotHash`\n\t   fields to match a recent \"finalized\" block number and its corresponding hash. You can obtain this information from\n\t   a block explorer such as [Etherscan](https://etherscan.io/).\\\n\t   \\\n\t   Using block number 17165278 from [Etherscan](https://etherscan.io/block/17165278):\n\t   \n\t   ```\n\t\t { \n\t\t\t \"PivotNumber\": 17165278,\n\t\t\t \"PivotHash\": \"0xa665315efd923f3b11215feee09a9d3e13c5e6ee602fa19b642824682ec0a752\"\n\t\t }\n\t\t ```\n\t2. **Using Nethermind's GitHub**: Alternatively, you can update the Pivot block by referring to\n\t   the [Nethermind's mainnet.cfg file on GitHub](https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.Runner/configs/mainnet.cfg).\n\t   The Pivot block is periodically bumped to the HEAD-8192 block of the mainnet chain. Copy the `PivotNumber`\n\t   and `PivotHash` values from the GitHub file and update your local `mainnet.cfg` file accordingly.\n5. **Restart the Nethermind node**: Start the Nethermind node again to initiate the resync process. The node will begin\n   syncing from the existing Pivot block or the specified updated Pivot block, downloading and processing all the blocks\n   in the blockchain.\n\nTo ensure that your Nethermind node is resyncing, you can monitor the logs for the node's progress. The logs will\ndisplay information about the block processing, synchronization status and `OldHeaders` being processed. By observing\nthe increasing block numbers and synchronization messages in the logs, you can confirm that the resync process is active\nand working as expected.", "mimetype": "text/plain", "start_char_idx": 19661, "end_char_idx": 21304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "516c970b-98e3-4986-89ec-4df1909b61ab": {"__data__": {"id_": "516c970b-98e3-4986-89ec-4df1909b61ab", "embedding": null, "metadata": {"file_path": "./nethermind_dist/sync.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb", "node_type": "4", "metadata": {}, "hash": "23611b9a4592a9ae9e513880ec84da7dde11141b57cb0a3336cf75d852104a3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe70b6d3-5c2f-4310-877a-b28b50cd28c5", "node_type": "1", "metadata": {}, "hash": "c9ed7306ff66cdf86483dd647205134e38f1d0f79226d98c25b2d77681243fbc", "class_name": "RelatedNodeInfo"}}, "text": "> Old Headers 0 / 17154000 | queue 0 | current 0.00bps | total 0.00bps\n>\n> Old Headers 768 / 17154000 | queue 0 | current 766.07bps | total 762.49bps\n>\n> Beacon Headers from block 17154001 to block 17169722 | 960 / 15722 | queue 4992 | current 0.00bps | total\n> 40622848.83bps\n>\n> Old Headers 9024 / 17154000 | queue 0 | current 576.40bps | total 1286.40bps\n>\n> Beacon Headers from block 17154001 to block 17169723 | 9024 / 15723 | queue 6698 | current 2694.81bps | total\n> 3882943.63bps\\\n> Downloaded 17154031 / 17172359 | current 0.00bps | total 0.00bps\n>\n> Downloaded 17154062 / 17169724 | current 0.00bps | total 2.88bps\n\nKeep in mind that resyncing a Nethermind node can take a considerable amount of time. It depends on your hardware,\ninternet connection, and the size of the blockchain.", "mimetype": "text/plain", "start_char_idx": 21306, "end_char_idx": 22099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23cae480-f555-4e84-aa12-f18b6cc51ce0": {"__data__": {"id_": "23cae480-f555-4e84-aa12-f18b6cc51ce0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/setting-up-local-metrics-infrastracture.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "748ca42a-058d-4d2b-b2d1-99378659ed03", "node_type": "4", "metadata": {}, "hash": "3e97034ca4d015e4d17e14b90e56dd2ada1255c407221cb5591041b61d4d1644", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "440826c7-6545-4d08-adf5-57228073a7a9", "node_type": "1", "metadata": {}, "hash": "fa7aa1b717edbb043a6075275d0402c86fcc0a7666310c65c21bb8dc5a0b8846", "class_name": "RelatedNodeInfo"}}, "text": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n# Setting up local Metrics infrastructure\n\n## Metrics Configuration\n\nNethermind metrics can be consumed by _Prometheus/Grafana_ if configured\nin [Metrics configuration category](../../fundamentals/configuration#metrics).\n\n## Metrics infrastructure\n\n### Enabling Metrics in Nethermind\n\nMetrics can be enabled by simply passing `--Metrics.Enabled true` argument to the Docker containers,`Nethermind.Runner`\nor `Nethermind.Launcher`  e.g. `./Nethermind.Runner --Metrics.Enabled true`.\n\n`Metrics.PushGatewayUrl` will need to be amended if pushgateway endpoint is not default.\n\n### Running sample configuration\n\n* [x] clone [metrics-infrastructure](https://github.com/NethermindEth/metrics-infrastructure) repository\n\n```bash\ngit clone https://github.com/NethermindEth/metrics-infrastructure.git\n```\n\n1. [x] go to `metrics-infrastructure` directory\n\n```bash\ncd metrics-explanation-infrastructure\n```\n\n1. [x] run docker stack\n\n```bash\ndocker-compose up -d\n```\n\n* _Prometheus_ instance should be now running on [`http://localhost:9090/`](http://localhost:9090/)\n* _Pushgateway_ on [`http://localhost:9091/`](http://localhost:9091/)\n* _Grafana on_ [`http://localhost:3000/`](http://localhost:3000/)\\`\\`\n\n1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "440826c7-6545-4d08-adf5-57228073a7a9": {"__data__": {"id_": "440826c7-6545-4d08-adf5-57228073a7a9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/setting-up-local-metrics-infrastracture.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "748ca42a-058d-4d2b-b2d1-99378659ed03", "node_type": "4", "metadata": {}, "hash": "3e97034ca4d015e4d17e14b90e56dd2ada1255c407221cb5591041b61d4d1644", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23cae480-f555-4e84-aa12-f18b6cc51ce0", "node_type": "1", "metadata": {}, "hash": "cfde6df9a4a758f7c42908299d20bc5c7b54d2664d2a3b57b05beb6417c3ec13", "class_name": "RelatedNodeInfo"}}, "text": "[x] run the `Nethermind` node with `Metrics` enabled and you should see metrics inflowing on\n   _Pushgateway_ [url](http://localhost:9091/)\n\n:::info\nYou can add nethermind service to the `docker-compose.yml` file so that it runs with the whole stack\n\n```yaml\nnethermind:\n  image: nethermind/nethermind\n  container_name: nethermind\n  restart: unless-stopped\n  command: '--config goerli --Metrics.Enabled true'\n  network_mode: host\n  volumes:\n    - ./nethermind_db/:/nethermind/nethermind_db/\n    - ./keystore/:/nethermind/keystore/\n    - ./logs/:/nethermind/logs/\n```\n\n:::\n\n<Tabs>\n<TabItem value=\"Runner\" label=\"Runner\">\n\n```bash\n./Nethermind.Runner --Metrics.Enabled true\n```\n\n</TabItem>\n<TabItem value=\"Launcher\" label=\"Launcher\">\n\n```bash\n./Nethermind.Launcher --Metrics.Enabled true\n```\n\n</TabItem>\n<TabItem value=\"Docker\" label=\"Docker\">\n\n```bash\ndocker run -it --network host nethermind/nethermind:alpine --Metrics.Enabled\n```\n\n</TabItem>\n</Tabs>\n\n![http://localhost:9091/](https://nethermind.readthedocs.io/en/latest/_images/pushgateway.png)\n\n1. [x] open _Grafana_ [url](http://localhost:3000) and login with default login \\(admin\\) and password \\(admin\\), skip\n   password change if you want\n\n![](/img/image(28).png)\n\n* [x] go to dashboards management [`http://localhost:3000/dashboards`](http://localhost:3000/dashboards)and\n  click `Nethermind`\n\n![](/img/image(26).png)\n\n* [x] you can now explore metrics and monitor your Nethermind node\n\n![](/img/image(29).png)\n\n### Useful Resources\n\n- [Prometheus](https://github.com/prometheus/prometheus)\n- [Pushgateway](https://github.com/prometheus/pushgateway)\n- [Grafana](https://github.com/grafana/grafana)", "mimetype": "text/plain", "start_char_idx": 1336, "end_char_idx": 2994, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d2a1deb-f45f-4291-96f3-02c13d0353e6": {"__data__": {"id_": "8d2a1deb-f45f-4291-96f3-02c13d0353e6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth_subscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2b21c998-df88-4b0f-bff2-ee542bda43da", "node_type": "4", "metadata": {}, "hash": "440e10ec66ef46adce796efe906bd51ec22e722df53ca0af2a8fc90bad2db8c3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "631c4930-4a8e-4adb-a4ec-8f36c24d941e", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}}, "text": "### eth_subscribe\n\nStarts a subscription to a particular event over WebSockets. A JSON-RPC notification with event payload and subscription id is sent to a client for every event matching the subscription topic.\n\n:::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionName`: *string*\n\n2. `filter`: *object*\n    - `address`: *string* (address)\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *string* (hex data)\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_subscribe\",\n  \"params\": [subscriptionName, args]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": \"0x...\" // subscription id\n}\n```\n\n`result`: *string*\n\n</TabItem>\n<TabItem value=\"notif\" label=\"Notification\">\n\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_subscription\",\n  \"params\": {\n    \"subscription\": \"0x...\", // subscription id\n    \"result\": payload\n  }\n}\n```\n\nSee specific subcription topic below for `payload` details.\n\n</TabItem>\n</Tabs>\n\n#### Subscription topics\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newHeads\n\n</summary>\n<p>\n\nSubscribes to incoming block headers. Fires a notification each time a new header is appended to the chain, including chain reorganizations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1703, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "631c4930-4a8e-4adb-a4ec-8f36c24d941e": {"__data__": {"id_": "631c4930-4a8e-4adb-a4ec-8f36c24d941e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth_subscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2b21c998-df88-4b0f-bff2-ee542bda43da", "node_type": "4", "metadata": {}, "hash": "440e10ec66ef46adce796efe906bd51ec22e722df53ca0af2a8fc90bad2db8c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8d2a1deb-f45f-4291-96f3-02c13d0353e6", "node_type": "1", "metadata": {}, "hash": "c276d8b87bc78a05a9ab28aaf91f0a30505bdbab4d445fbb55a683bae8fd22d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8145fc51-d6e2-463d-acf9-61a462febbf1", "node_type": "1", "metadata": {}, "hash": "1d5437dd74954f83d8079d695b90f7afa2dfda1a21f22209a90cb6e0141bccb0", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amount`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### logs\n\n</summary>\n<p>\n\nSubscribes to incoming logs filtered by the given options. In case of a chain reorganization, previously sent logs on the old chain will be re-sent with the `removed` field set to `true`.", "mimetype": "text/plain", "start_char_idx": 1705, "end_char_idx": 3267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8145fc51-d6e2-463d-acf9-61a462febbf1": {"__data__": {"id_": "8145fc51-d6e2-463d-acf9-61a462febbf1", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth_subscribe.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2b21c998-df88-4b0f-bff2-ee542bda43da", "node_type": "4", "metadata": {}, "hash": "440e10ec66ef46adce796efe906bd51ec22e722df53ca0af2a8fc90bad2db8c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "631c4930-4a8e-4adb-a4ec-8f36c24d941e", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to incoming pending transactions. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### droppedPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to transactions evicted from the transaction pool. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### syncing\n\n</summary>\n<p>\n\nSubscribes to syncing events. Returns `false` (once) if the node is synced or an object with statistics (once) when the node starts syncing.\n\nNotification `payload`:\n\n  - if synced: *boolean*\n  - if syncing: *object*\n      - `currentBlock`: *string* (hex integer)\n      - `highestBlock`: *string* (hex integer)\n      - `isSyncing`: *boolean*\n      - `startingBlock`: *string* (hex integer)\n\n</p>\n</details>", "mimetype": "text/plain", "start_char_idx": 3269, "end_char_idx": 4674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66aca90c-7fb6-4002-81c9-367abeaab9ee": {"__data__": {"id_": "66aca90c-7fb6-4002-81c9-367abeaab9ee", "embedding": null, "metadata": {"file_path": "./nethermind_dist/building-from-source.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6bf93139-a8b3-4200-97eb-84f9e4f895df", "node_type": "4", "metadata": {}, "hash": "53cfbcd20a5408581374280efdaa5e873f4fcf4fda80099bf6e3ee52d6c44e57", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "04317601-a5e7-4a89-b2c5-7729992fe7d7", "node_type": "1", "metadata": {}, "hash": "4a6a5bca1b8679df5f1b5659f74ac388481707d30639a8dd74212b617d4c0c6d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Building from source\nsidebar_label: Building from source\nsidebar_position: 0\n---\n\nThe Nethermind's source code can be obtained from [our repository](https://github.com/NethermindEth/nethermind) on\nGitHub:\n\n```bash\ngit clone --recursive https://github.com/nethermindeth/nethermind.git\n```\n\nThere are two options buiding Nethermind from source code:\n\n* [Standalone binaries](#building-standalone-binaries)\n* [Docker image](#bulding-docker-image)\n\n## Building standalone binaries\n\n### Prerequisites\n\nTo build Nethermind from source, install [.NET SDK](https://dotnet.microsoft.com/en-us/download) 8 or later.\n\n### Building\n\nTo build both the client and tests, run the following command from the project's root directory:\n\n```bash\ndotnet build src/Nethermind/Nethermind.sln -c release\n```\n\nTo simply run the client with a specific configuration without building tests, see below.\n\n:::info\nBefore running the client or tests, ensure the\nplatform-specific [prerequisites](../get-started/installing-nethermind#prerequisites) are met.\n:::\n\n#### Running\n\nNethermind can be launched immediately without compiling explicitly (thus, the previous step can be skipped). The following command builds Nethermind if needed and runs it:\n\n```bash\ncd src/Nethermind/Nethermind.Runner\ndotnet run -c release -- -c mainnet\n```\n\nAll Nethermind-specific parameters can be specified after `--`. For instance, the command above specifies the Mainnet\nconfiguration only.\n\nThe build artifacts can be found in the `src/Nethermind/artifacts/bin/Nethermind.Runner/release` directory. By default, the logs and database directories are located here as well.\n\nFor more info, see [Running Nethermind](../get-started/installing-nethermind.md#running).\n\n#### Testing\n\nThere are two test suites \u2014 Nethermind and Ethereum Foundation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04317601-a5e7-4a89-b2c5-7729992fe7d7": {"__data__": {"id_": "04317601-a5e7-4a89-b2c5-7729992fe7d7", "embedding": null, "metadata": {"file_path": "./nethermind_dist/building-from-source.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6bf93139-a8b3-4200-97eb-84f9e4f895df", "node_type": "4", "metadata": {}, "hash": "53cfbcd20a5408581374280efdaa5e873f4fcf4fda80099bf6e3ee52d6c44e57", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66aca90c-7fb6-4002-81c9-367abeaab9ee", "node_type": "1", "metadata": {}, "hash": "d746331affd5ffcf5329db904a807fc4fc95cfcb790b904bc64fc0332b9881bb", "class_name": "RelatedNodeInfo"}}, "text": "Tests can be run with the following commands (the\ninitial step of the build is not required):\n\n```bash\ncd src/Nethermind\n\n# Run Nethermind tests\ndotnet test Nethermind.sln -c release\n\n# Run Ethereum Foundation tests\ndotnet test EthereumTests.sln -c release\n```\n\n## Bulding Docker image\n\nTo build Nethermind Docker image, run the following command from the project's root directory:\n\n```bash\ndocker build -t nethermind .\n```\n\nFor more info about running Docker containers,\nsee [Installing Nethermind](../get-started/installing-nethermind#docker-container).", "mimetype": "text/plain", "start_char_idx": 1805, "end_char_idx": 2360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57003504-93d5-4a95-8bd8-4ca9f026acde": {"__data__": {"id_": "57003504-93d5-4a95-8bd8-4ca9f026acde", "embedding": null, "metadata": {"file_path": "./nethermind_dist/json-rpc-server.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "668b12a1-fcb4-4ede-b7e9-d15abe5dbb3f", "node_type": "4", "metadata": {}, "hash": "d85bb993c3841f5806f7d9e4c233aeae6d4a530707a4b4cf202ba96f1d54efad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "274057e8-fc64-47c7-b427-992b7d825f69", "node_type": "1", "metadata": {}, "hash": "c0e27d468d92b91ccc9329ea289a823d54d5fbed67ad92d063221ffe839d17cf", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: JSON-RPC server\nsidebar_position: 0\n---\n\nInteracting with Nethermind requires using the JSON-RPC 2.0 protocol. Nethermind provides JSON-RPC over [HTTP](#http),  [WebSocket](#websocket), and [IPC socket](#ipc-socket) transports. Each transport must be enabled with the respective configuration option, as shown below. For more details, see the [JSON-RPC configuration options](../fundamentals/configuration.md#jsonrpc).\n\nThe JSON-RPC API methods are grouped into several categories (namespaces) depending on their purpose. All API method names are composed of the namespace and the actual method name in that namespace. For instance, the `eth_call` method belongs to the `eth` namespace. See the sidebar for all supported namespaces and methods.\n\n:::note\nNot all of the JSON-RPC namespaces are enabled by default. Instead, they must be enabled explicitly with the `--JsonRpc.EnabledModules` command line option. Otherwise, error code `-32600` is returned. The enabled namespaces can be found in the configuration file specified with the `--config` command line option.\n:::\n\n## Transports\n\n:::tip\nThe right choice of transport depends on the specific use case.\n\n- HTTP is a familiar and idempotent transport that closes connections between requests and can, therefore, have lower overall overhead for a relatively low number of requests.\n- WebSocket provides a continuous open channel that enables event subscriptions and streaming and handles large volumes of requests with more negligible per-message overhead.\n- IPC is generally the most secure as it is limited to local interactions and cannot be exposed to external traffic. It can also be used for event subscriptions.\n:::\n\n### HTTP\n\nHTTP is the most widely used transport for Nethermind. To enable the HTTP server, use the `--JsonRpc.Enabled true` command line option. By default, Nethermind uses local loopback (`127.0.0.1` or `localhost`) and `8545` port. To use a different host or port, set the `--JsonRpc.Host` and `--JsonRpc.Port` command line options, respectively.\n\n### WebSocket\n\nThe configuration of the WebSocket server follows the same pattern as the HTTP server. The WebSocket server is enabled automatically when the HTTP server is enabled and uses the same host and port.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "274057e8-fc64-47c7-b427-992b7d825f69": {"__data__": {"id_": "274057e8-fc64-47c7-b427-992b7d825f69", "embedding": null, "metadata": {"file_path": "./nethermind_dist/json-rpc-server.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "668b12a1-fcb4-4ede-b7e9-d15abe5dbb3f", "node_type": "4", "metadata": {}, "hash": "d85bb993c3841f5806f7d9e4c233aeae6d4a530707a4b4cf202ba96f1d54efad", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "57003504-93d5-4a95-8bd8-4ca9f026acde", "node_type": "1", "metadata": {}, "hash": "09858e143f7b6c8fc9bcf656aaf232b791b86cfa69310dd0c27a38314a63a8f0", "class_name": "RelatedNodeInfo"}}, "text": "To disable the WebSocket server, use the `--Init.WebSocketsEnabled false` command line option. To use a different a port, set the `--JsonRpc.WebSocketsPort` command line option.\n\n### IPC socket\n\nNethermind uses IPC based on Unix domain socket. To enable the IPC server, use the `--JsonRpc.IpcUnixDomainSocketPath path/to/ipc` command line option. If the `path/to/ipc` doesn't exist, Nethermind creates one.\n\n## Engine API\n\nThe Engine API is a set of RPC methods that enable communication between an execution and consensus client. The clients call these methods automatically when they need to exchange information. Engine API is enabled automatically by default and is not designed to be exposed to the user.\n\nBy default, the Engine API uses local loopback (`127.0.0.1` or `localhost`) and `8551` port. To use a different host or port, set the `--JsonRpc.EngineHost` and `--JsonRpc.EnginePort` command line options, respectively. For example, this can be useful when execution and consensus clients are on different machines.\n\n:::warning Important\nWhen the `--JsonRpc.EngineHost` option is specified, the `--JsonRpc.EnginePort` option must be specified as well.\n:::\n\nThe Engine API uses JWT authentication and requires a JWT secret. By default, Nethermind creates one at `keystore/jwt-secret` path in its root directory. To use a different path, specify the `--JsonRpc.JwtSecretFile path/to/jwt.hex` command line option.", "mimetype": "text/plain", "start_char_idx": 2253, "end_char_idx": 3674, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6557f38-f085-49cb-ad07-7746cc0433a0": {"__data__": {"id_": "a6557f38-f085-49cb-ad07-7746cc0433a0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9c8b5cfd-b4b8-457c-9d1e-88dfb3eb48c5", "node_type": "1", "metadata": {}, "hash": "cfe00b3f3cdf3e92be0daae4f0474d88d35a6e8ca67a44361e6d180bc2bc5b29", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Health check\nsidebar_position: 1\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nNethermind has a pre-packed `Nethermind.HealthChecks.dll` plugin that allows you to monitor your Nethermind node better.\nIt leverages the power\nof [AspNetCore.Diagnostics.HealthChecks](https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks). It simply adds\nan`/health`endpoint to the JSON RPC service which can be used to check the Nethermind's _**liveness** -_ verify if the\nnode is **synced** and has **at least one peer.** Useful when you don't want to query the node before it's able to\nprovide you data available only for fully synced nodes like `eth_getBalance`.\n\nThe `Nethermind.HealthChecks.dll`plugin will be automatically loaded on Nethermind start.\n\n## Enabling and configuring Health Checks\n\nThe health checks need to be additionally enabled which can be done either through `--HealthChecks.*` flags or by adding\na `\"HealthChecks\"` section to the config file.&#x20;\n\n``` json title=\"HealthChecks config section example\" \n  \"HealthChecks\": {\n    \"Enabled\": true,\n    \"WebhooksEnabled\": true,\n    \"WebhooksUri\": \"https://slack.webhook\",\n    \"UIEnabled\": true,\n    \"PollingInterval\": 10,\n    \"Slug\": \"/api/health\"\n  }\n```\n\n:::danger\nJSON RPC Service needs to be enabled in order for health checks to work `--JsonRpc.Enabled true`\n:::\n\nEach configuration option is described [here](../fundamentals/configuration#healthchecks).\n\n#### Enabling Health Checks without UI&#x20;\n\n```bash\n./Nethermind.Runner --HealthChecks.Enabled true\n```\n\nThe `health` endpoint is now available at `localhost:8545/health`  by default (if your `--JsonRpc.Port` is `8545`).\nThe `health` endpoint can be configured via `--HealthChecks.Slug` parameter e.g. `--HealthChecks.Slug /api/health`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1868, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c8b5cfd-b4b8-457c-9d1e-88dfb3eb48c5": {"__data__": {"id_": "9c8b5cfd-b4b8-457c-9d1e-88dfb3eb48c5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a6557f38-f085-49cb-ad07-7746cc0433a0", "node_type": "1", "metadata": {}, "hash": "8dc9ae1a7e5858f0beb6cada43ae1f20e0096560f3d9d417b2e77b8bb9b7297a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2fd4779-49da-4fcc-a2f7-e24100dab9e0", "node_type": "1", "metadata": {}, "hash": "c8ab35d15255f7dfe6d12be724f6f3b728c825a45a03b6de4e39f96f1f3c8b22", "class_name": "RelatedNodeInfo"}}, "text": "We\ncan if it is working with `curl`:\n\n```bash\n// Request\ncurl localhost:8545/health\n\n// Example of response for Unhealthy node\n{\"status\":\"Unhealthy\",\"totalDuration\":\"00:00:00.0015582\",\"entries\":{\"node-health\":{\"data\":{},\"description\":\"The node has 0 peers connected\",\"duration\":\"00:00:00.0003881\",\"status\":\"Unhealthy\",\"tags\":[]}}}\n\n// Example of response for Healthy node\n{\"status\":\"Healthy\",\"totalDuration\":\"00:00:00.0015582\",\"entries\":{\"node-health\":{\"data\":{},\"description\":\"The node is now fully synced with a network, number of peers: 99\",\"duration\":\"00:00:00.0003881\",\"status\":\"Healthy\",\"tags\":[]}}}\n```\n\n:::info\n\n* **Unhealthy** returns **503** (Service Unavailable) status code\n:::\n\n:::info\n* **Healthy** returns **200** status code\n:::\n\n#### Enabling Health Checks UI\n\n```bash\n./Nethermind.Runner --HealthChecks.Enabled true --HealthChecks.UIEnabled true\n```\n\nEnabling UI will expose an additional endpoint `/healthchecks-ui`and will allow seeing node's health on a nice UI. To\nview the UI simply go to `http://localhost:8545/healthchecks-ui`.\n\n![Unhealthy status reported on UI page](</img/image(76).png>)\n\n#### Enabling Slack reports\n\nWe may also add Slack Webhook endpoint to which our node's health will be reported. We need to pass\nthe `--HealthChecks.WebhooksEnabled true` and add the `--HealthChecks.WebhooksUri` which can be found in your Slack app\nconfiguration.\n\n```bash\nnethermind --HealthChecks.Enabled true --HealthChecks.UIEnabled true --HealthChecks.WebhooksEnabled true --HealthChecks.WebhooksUri https://hooks.slack.com/\n```\n\nIf your node will be **Unhealthy** you should receive a message similar to this:\n\n![Unhealthy](/img/unhealthy.png)\n\nwith description of why the node is unhealthy, node's name and information about the machine on which the node is\nrunning.\\\nWhen it becomes **Healthy** (**synced** and with **peers**) you should receive:\n\n!", "mimetype": "text/plain", "start_char_idx": 1869, "end_char_idx": 3743, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2fd4779-49da-4fcc-a2f7-e24100dab9e0": {"__data__": {"id_": "c2fd4779-49da-4fcc-a2f7-e24100dab9e0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c8b5cfd-b4b8-457c-9d1e-88dfb3eb48c5", "node_type": "1", "metadata": {}, "hash": "cfe00b3f3cdf3e92be0daae4f0474d88d35a6e8ca67a44361e6d180bc2bc5b29", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df484fa6-4652-4281-9ab2-7843591e728f", "node_type": "1", "metadata": {}, "hash": "b1722e20c6eab0d1afcdd15ca0e27e13ef1fbf686f5976254d32089518bb45b8", "class_name": "RelatedNodeInfo"}}, "text": "[Healthy](</img/image(46).png>)\n\n#### Consensus Client health\n\nThis check verifies if the client receives messages from the CL. If you see this warning in your logs, it means that\nthere is something wrong with CL/Nethermind communication. Check more about setting up Nethermind and\nCL [here](../get-started/consensus-clients.md).\n\n```\nNo incoming messages from Consensus Client. Consensus Client is required to sync the node. Please make sure that it's working properly.\n```\n\n:::warning\nNote that Consensus Client is required for normal node operations.\n:::\n\n#### health\\_nodeStatus\n\nHealth checks via JSON RPC requests were introduced in version v.1.10.18. For that,  `HealthChecks.Enabled` should be\nset to true.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\">\n\n\n```\n{ \"jsonrpc\":\"2.0\",\"method\":\"health_nodeStatus\",\"params\":[],\"id\":67 }\n```\n\n</TabItem>\n<TabItem label=\"Response\" value=\"response\">\n\n\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"healthy\": false,\n        \"messages\": [\n            \"Sync degraded\",\n            \"No messages from CL\"\n        ],\n        \"errors\": [\n            \"SyncDegraded\",\n            \"ClUnavailable\"\n        ],\n        \"isSyncing\": true\n    },\n    \"id\": 67\n}\n```\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 3743, "end_char_idx": 4969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df484fa6-4652-4281-9ab2-7843591e728f": {"__data__": {"id_": "df484fa6-4652-4281-9ab2-7843591e728f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/health-check.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d", "node_type": "4", "metadata": {}, "hash": "72072338005b52a500e324f63870503d5a8151833d388b4c6873bf313ec3b9d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2fd4779-49da-4fcc-a2f7-e24100dab9e0", "node_type": "1", "metadata": {}, "hash": "c8ab35d15255f7dfe6d12be724f6f3b728c825a45a03b6de4e39f96f1f3c8b22", "class_name": "RelatedNodeInfo"}}, "text": "#### Monitoring available storage space\n\nFeature which is helping to track free disk space is enabled by default and monitors a drive which has been used to\nconfigure database location. There are two new configuration options available:\n\n* `--HealthChecks.LowStorageSpaceWarningThreshold` - Percentage of free disk space below which a warning will be\n  displayed. If Health Checks UI is enabled, it will also be reported under node's health. Default value is 5 - meaning\n  5% of free disk space.\n* `--HealthChecks.LowStorageSpaceShutdownThreshold` - Percentage of available disk space below which node will shutdown\n  to avoid database corruption. Default value is 1 - meaning 1% of free disk space.\n\n```bash\nnethermind --HealthChecks.LowStorageSpaceWarningThreshold 5 --HealthChecks.LowStorageSpaceShutdownThreshold 1\n```\n\n#### HealthChecks for producing and processing blocks\n\nThere are two fields for HealthChecks config: MaxIntervalWithoutProcessedBlock and MaxIntervalWithoutProducedBlock. The\nnode will return unhealthy status if the interval elapsed without processing or producing a block. Let's use the below\nconfig as an example. If the node doesn't process a block for 15 seconds, we will return unhealthy status. Analogically,\nwe will be waiting 45 seconds for a newly produced block.\n\n``` json title=\"HealthChecks config section example\" \n\n  \"HealthChecks\": {\n    \"Enabled\": true,\n    \"WebhooksEnabled\": true,\n    \"UIEnabled\": true,\n    \"Slug\": \"/api/health\",\n    \"MaxIntervalWithoutProcessedBlock \": 15,\n    \"MaxIntervalWithoutProducedBlock\": 45\n  }\n```\n\nIf those fields are not set in a config, application will try to use them based on seal engine specification. If there\nis infinite time, unhealthy status can still be reported if processing or producing threads stopped.", "mimetype": "text/plain", "start_char_idx": 4972, "end_char_idx": 6760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "985ea85d-2d98-40aa-a3f8-b4afdadc0de0": {"__data__": {"id_": "985ea85d-2d98-40aa-a3f8-b4afdadc0de0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4f2c6e2-4492-4663-a076-c3e1e8421331", "node_type": "1", "metadata": {}, "hash": "ff616b034bb490d94a11cb233255c1c391cf5e3bc4560ecd55dd9962216309aa", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Plugins\nsidebar_position: 1\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\nNethermind plugins is a powerful way of extending your local node capabilities.\n\n\\(see also an article\nhere: [https://medium.com/nethermind-eth/writing-your-first-nethermind-plugin-a9e04d81cf59](https://medium.com/nethermind-eth/writing-your-first-nethermind-plugin-a9e04d81cf59)\\)\n\nPlugins that you can write:\n\n| Plugin Type         | What can it be used for?                                                                                                                                                                       |\n|:--------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| RPC                 | Adding additional RPC modules to the client that have full access to the internal Nethermind APIs and can extend capabilities of the node when integrating with your infrastructure / systems. |\n| Block Tree Visitors | Code allowing you to analyze entire block tree from genesis to the head block and execute aggregated calculations and checks.                                                                  |\n| Devp2p              | Allows you to create additional devp2p network protocol for your nodes to communicate over TCP/IP. You can also build custom products that will run attached to Nethermind nodes.              |\n| State Visitors      | Allow you to run aggregated analysis on the entire raw format state \\(or just some accounts storages\\).                                                                                        |\n| Config              | You can add additional configuration categories to our config files and then use them in env variables, json files or command line to configure behaviour of your plugins.                     |\n| TxPool              | TxPool behaviours and listeners.                                                                                                                                                               |\n| Tracers             | Custom, powerful EVM tracers capable of extracting elements of EVM execution in real time.                                                                                                     |\n| CLI                 | Additional modules for Nethermind CLI that can allow you build some quick scratchpad style JavaScript based behaviors.                                                                         |\n\n**Note:** When writing a plugin be carefull about exceptions you throw. Especially if you are hooking up event handlers\non some core objects like BlockProcessor or BlockTree. Those exceptions can bring the node down. This is by design. Its\nresponsibility of plugin writer to correctly handle those exceptions.\n\nHow to build a plugin? We included an example inside the Nethermind.Analytics plugin:\n\n!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4f2c6e2-4492-4663-a076-c3e1e8421331": {"__data__": {"id_": "f4f2c6e2-4492-4663-a076-c3e1e8421331", "embedding": null, "metadata": {"file_path": "./nethermind_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "985ea85d-2d98-40aa-a3f8-b4afdadc0de0", "node_type": "1", "metadata": {}, "hash": "c74c9426f3ad1aa5c319de328a29eefc438f6621cb8c507399d28f2d6356ee22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b84c592b-a0ea-4f0b-9c86-d2b19957c939", "node_type": "1", "metadata": {}, "hash": "6493ab4ee8d48147d44b2161c958f8c4371a0b90f895efd1d68076a863885fb6", "class_name": "RelatedNodeInfo"}}, "text": "[](/img/image(133).png)\n\n## RPC Plugin example:\n\n```csharp\n    [RpcModule(ModuleType.Clique)]\n    public interface IAnalyticsModule : IModule\n    {\n        [JsonRpcMethod(Description = \"Retrieves ETH supply counted from state.\", IsImplemented = true)]\n        ResultWrapper<UInt256> analytics_verifySupply();\n\n        [JsonRpcMethod(Description = \"Retrieves ETH supply counted from rewards.\", IsImplemented = true)]\n        ResultWrapper<UInt256> analytics_verifyRewards();\n    }\n```\n\n## CLI Plugin example:\n\n```csharp\n[CliModule(\"analytics\")]\npublic class AnalyticsCliModule : CliModuleBase\n{\n    [CliFunction(\"analytics\", \"verifySupply\")]\n    public string VerifySupply()\n    {\n        return NodeManager.Post<string>(\"analytics_verifySupply\").Result;\n    }\n\n    [CliFunction(\"analytics\", \"verifyRewards\")]\n    public string VerifyRewards()\n    {\n        return NodeManager.Post<string>(\"analytics_verifyRewards\").Result;\n    }\n\n    public AnalyticsCliModule(ICliEngine cliEngine, INodeManager nodeManager)\n        : base(cliEngine, nodeManager) { }\n}\n```\n\n## Block Tree Visitor Plugin example:\n\n```csharp\n    public class RewardsVerifier : IBlockTreeVisitor\n    {\n        private ILogger _logger;\n        public bool PreventsAcceptingNewBlocks => true;\n        public long StartLevelInclusive => 0;\n        public long EndLevelExclusive { get; }\n\n        private UInt256 _genesisAllocations = UInt256.Parse(\"72009990499480000000000000\");\n        private UInt256 _uncles;\n\n        public UInt256 BlockRewards { get; private set; }\n\n        public RewardsVerifier(ILogManager logManager, long endLevelExclusive)\n        {\n            _logger = logManager.GetClassLogger();\n            EndLevelExclusive = endLevelExclusive;\n            BlockRewards = _genesisAllocations;\n        }\n\n        private RewardCalculator _rewardCalculator = new RewardCalculator(MainnetSpecProvider.Instance);\n\n        public Task<BlockVisitOutcome> VisitBlock(Block block, CancellationToken cancellationToken)\n        {\n            BlockReward[] rewards = _rewardCalculator.CalculateRewards(block);\n            for (int i = 0; i < rewards.Length; i++)\n            {\n                if (rewards[i].RewardType == BlockRewardType.", "mimetype": "text/plain", "start_char_idx": 2992, "end_char_idx": 5199, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b84c592b-a0ea-4f0b-9c86-d2b19957c939": {"__data__": {"id_": "b84c592b-a0ea-4f0b-9c86-d2b19957c939", "embedding": null, "metadata": {"file_path": "./nethermind_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4f2c6e2-4492-4663-a076-c3e1e8421331", "node_type": "1", "metadata": {}, "hash": "ff616b034bb490d94a11cb233255c1c391cf5e3bc4560ecd55dd9962216309aa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cfcb3c05-d06e-4919-8c38-bb632c1df841", "node_type": "1", "metadata": {}, "hash": "67d994c57e12f2476b3c73389cd7304c6cad900eb18b7d240b9a31c9dea73a5a", "class_name": "RelatedNodeInfo"}}, "text": "Uncle)\n                {\n                    _uncles += rewards[i].Value;\n                }\n                else\n                {\n                    BlockRewards += rewards[i].Value;\n                }\n            }\n\n            _logger.Info($\"Visiting block {block.Number}, total supply is (genesis + miner rewards + uncle rewards) | {_genesisAllocations} + {BlockRewards} + {_uncles}\");\n            return Task.FromResult(BlockVisitOutcome.None);\n        }\n\n        public Task<LevelVisitOutcome> VisitLevelStart(ChainLevelInfo chainLevelInfo, CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);\n\n        public Task<bool> VisitMissing(Keccak hash, CancellationToken cancellationToken)\n            => Task.FromResult(true);\n\n        public Task<HeaderVisitOutcome> VisitHeader(BlockHeader header, CancellationToken cancellationToken)\n            => Task.FromResult(HeaderVisitOutcome.None);\n\n        public Task<LevelVisitOutcome> VisitLevelEnd(CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);\n    }\n```\n\n## Config plugin example:\n\n```csharp\npublic class AnalyticsConfig : IAnalyticsConfig\n{\n    public bool PluginsEnabled { get; set; }\n    public bool StreamTransactions { get; set; }\n    public bool StreamBlocks { get; set; }\n    public bool LogPublishedData { get; set; }\n}\n```\n\n## State Tree Visitor example:\n\n```csharp\npublic class SupplyVerifier : ITreeVisitor\n{\n    private readonly ILogger _logger;\n    private HashSet<Keccak> _ignoreThisOne = new HashSet<Keccak>();\n    private int _accountsVisited;\n    private int _nodesVisited;\n\n    public SupplyVerifier(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public UInt256 Balance { get; set; } = UInt256.Zero;\n\n    public bool ShouldVisit(Keccak nextNode)\n    {\n        if (_ignoreThisOne.Count > 16)\n        {\n            _logger.Warn($\"Ignore count leak -> {_ignoreThisOne.Count}\");\n        }\n\n        if (_ignoreThisOne.Contains(nextNode))\n        {\n            _ignoreThisOne.Remove(nextNode);\n            return false;\n        }\n\n        return true;\n    }\n\n    public void VisitTree(Keccak rootHash,", "mimetype": "text/plain", "start_char_idx": 5199, "end_char_idx": 7362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfcb3c05-d06e-4919-8c38-bb632c1df841": {"__data__": {"id_": "cfcb3c05-d06e-4919-8c38-bb632c1df841", "embedding": null, "metadata": {"file_path": "./nethermind_dist/plugins.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc", "node_type": "4", "metadata": {}, "hash": "dd46e8744057917af29094b453c5f9b4fa218aa5b45ca6d9544f5dec57cad69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b84c592b-a0ea-4f0b-9c86-d2b19957c939", "node_type": "1", "metadata": {}, "hash": "6493ab4ee8d48147d44b2161c958f8c4371a0b90f895efd1d68076a863885fb6", "class_name": "RelatedNodeInfo"}}, "text": "TrieVisitContext trieVisitContext)\n    {\n    }\n\n    public void VisitMissingNode(Keccak nodeHash, TrieVisitContext trieVisitContext)\n    {\n        _logger.Warn($\"Missing node {nodeHash}\");\n    }\n\n    public void VisitBranch(TrieNode node, TrieVisitContext trieVisitContext)\n    {\n        _logger.Info($\"Balance after visiting {_accountsVisited} accounts and {_nodesVisited} nodes: {Balance}\");\n        _nodesVisited++;\n\n        if (trieVisitContext.IsStorage)\n        {\n            for (int i = 0; i < 16; i++)\n            {\n                Keccak childHash = node.GetChildHash(i);\n                if (childHash != null)\n                {\n                    _ignoreThisOne.Add(childHash);\n                }\n            }\n        }\n    }\n\n    public void VisitExtension(TrieNode node, TrieVisitContext trieVisitContext)\n    {\n        _nodesVisited++;\n        if (trieVisitContext.IsStorage)\n        {\n            _ignoreThisOne.Add(node.GetChildHash(0));\n        }\n    }\n\n    public void VisitLeaf(TrieNode node, TrieVisitContext trieVisitContext, byte[] value = null)\n    {\n        _nodesVisited++;\n\n        if (trieVisitContext.IsStorage)\n        {\n            return;\n        }\n\n        AccountDecoder accountDecoder = new AccountDecoder();\n        Account account = accountDecoder.Decode(node.Value.AsRlpStream());\n        Balance += account.Balance;\n        _accountsVisited++;\n\n        _logger.Info($\"Balance after visiting {_accountsVisited} accounts and {_nodesVisited} nodes: {Balance}\");\n    }\n\n    public void VisitCode(Keccak codeHash, TrieVisitContext trieVisitContext)\n    {\n        _nodesVisited++;\n    }\n}\n```", "mimetype": "text/plain", "start_char_idx": 7363, "end_char_idx": 8988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae250fc3-02ca-4e83-9452-3533f0dc4cfe": {"__data__": {"id_": "ae250fc3-02ca-4e83-9452-3533f0dc4cfe", "embedding": null, "metadata": {"file_path": "./nethermind_dist/security.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7c8fbb93-1954-4964-8281-6adc2170f2c7", "node_type": "4", "metadata": {}, "hash": "72180a8070cb40183a7a39d2808f35d5a7dfa440f8df2ed6a7ed1a0cac7b88d9", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Security\nsidebar_position: 3\n---\n\n## General security considerations\n\n:::tip\nAlthough Nethermind is thoroughly tested, the more popular it becomes, the more likely it will be a target of client-specific attacks. Generally, we recommend you always consider running backup client nodes from another developer for any critical operations.\n:::\n\n:::warning\nEnable only the [JSON-RPC namespaces](../interacting/json-rpc-server.md) you absolutely need. This is particularly important for namespaces like `admin` and `debug`, as they can be exploited to get elevated access to your node or for DOS attacks.\n:::\n\n:::danger\nThe private key the node id is derived from is stored on the disk as plaintext.\n:::\n\n## Networking security\n\nThese rules are **highly recommended** to be applied to your firewall:\n\n- Block all traffic to the port `8545`, or whatever port is defined for JSON-RPC interface, except for traffic from explicitly defined trusted sources.\n- Allow traffic to the TCP port `30303` or whatever port is defined for P2P communication. This allows the node to connect to peers.\n- Allow traffic to the UDP port `30303` or whatever port ia defined for P2P communication. This allows node discovery.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "658e44aa-4095-47da-89cc-4c65c082ff25": {"__data__": {"id_": "658e44aa-4095-47da-89cc-4c65c082ff25", "embedding": null, "metadata": {"file_path": "./nethermind_dist/custom-analytic-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d03748cf-4666-40c8-9c7a-973b989532a9", "node_type": "4", "metadata": {}, "hash": "a9c92b808f68ec7e4c57bb1a348c89a4d774a52a9a4b643fb5d3354bba859977", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9b34817-2c00-42fe-aa0f-a18318b77ff2", "node_type": "1", "metadata": {}, "hash": "6a6b8542c94dbd8b1450345a39d9722255b9597316d860b0995d9041f94c186d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Custom analytic tools\nsidebar_position: 2\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\nCheck plugins for some easy addition of analytical tools\n\n:::info\n[Learn more about Plugins](plugins.md)\n:::\n\nYou can also read more about some useful interfaces below:\n\nThere are multiple extension points where you can add custom analytics to your Nethermind node if you know some C#.\nBelow you will find an example of using two very useful interfaces - `IBlockVisitor` and `ITreeVisitor`.\n\nJust to execute the code I have added one new initialization step that invokes two custom verifiers that I have used for\ncalculating total supply in two different ways - by calculating mining rewards and by summing up all account balances:\n\n```\n    [RunnerStepDependencies(typeof(ReviewBlockTree))]\n    public class RunCustomTools : IStep\n    {\n        private readonly EthereumRunnerContext _context;\n\n        public RunCustomTools(EthereumRunnerContext context)\n        {\n            _context = context;\n        }\n\n        public Task Execute(CancellationToken cancellationToken)\n        {\n            ILogger logger = _context.LogManager.GetClassLogger();\n            IInitConfig initConfig = _context.Config<IInitConfig>();\n\n            switch (initConfig.DiagnosticMode)\n            {\n                case DiagnosticMode.VerifySupply:\n                {\n                    logger.Info(\"Genesis supply:\");\n                    SupplyVerifier supplyVerifier = new SupplyVerifier(logger);\n                    StateDb stateDb = new StateDb(_context.DbProvider.StateDb.Innermost);\n                    StateDb codeDb = new StateDb(_context.DbProvider.StateDb.Innermost);\n                    StateReader stateReader = new StateReader(stateDb, codeDb, _context.LogManager);\n                    stateReader.RunTreeVisitor(supplyVerifier, _context.BlockTree!.Genesis.StateRoot);\n\n                    Block head = _context.BlockTree!.Head;\n                    logger.Info($\"Head ({head.Number}) block supply:\");\n                    supplyVerifier = new SupplyVerifier(logger);\n                    stateReader.RunTreeVisitor(supplyVerifier, head.StateRoot);\n                    break;\n                }\n                case DiagnosticMode.VerifyRewards:\n                    _context.BlockTree!.Accept(new RewardsVerifier(_context.LogManager), cancellationToken);\n                    break;\n            }\n\n            return Task.CompletedTask;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9b34817-2c00-42fe-aa0f-a18318b77ff2": {"__data__": {"id_": "d9b34817-2c00-42fe-aa0f-a18318b77ff2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/custom-analytic-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d03748cf-4666-40c8-9c7a-973b989532a9", "node_type": "4", "metadata": {}, "hash": "a9c92b808f68ec7e4c57bb1a348c89a4d774a52a9a4b643fb5d3354bba859977", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "658e44aa-4095-47da-89cc-4c65c082ff25", "node_type": "1", "metadata": {}, "hash": "73ed9c36e5d9d2dd2fb99ae6e2e3307447d55a59f12411df756b6cf6fe12d07e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5bdcd376-340a-4120-96ad-92bbc3e3b6e1", "node_type": "1", "metadata": {}, "hash": "6212fc1ecbfeb43779209a61c524db2ec37b900ca36917563fb7f2399ebcc470", "class_name": "RelatedNodeInfo"}}, "text": "}\n    }\n```\n\nBelow you will see an example of using ITreeVisitor that allows to check all the blocks, including some of the discarded\nbranches if you wish so:\n\n```\n    public class RewardsVerifier : IBlockTreeVisitor\n    {\n        private ILogger _logger;\n        public bool PreventsAcceptingNewBlocks => true;\n        public long StartLevelInclusive => 0;\n        public long EndLevelExclusive => 10618000;\n\n        private UInt256 _genesisAllocations = UInt256.Parse(\"72009990499480000000000000\");\n        private UInt256 _uncles;\n        private UInt256 _blockRewards;\n\n        public RewardsVerifier(ILogManager logManager)\n        {\n            _logger = logManager.GetClassLogger();\n        }\n\n        private RewardCalculator _rewardCalculator = new RewardCalculator(MainnetSpecProvider.Instance);\n\n        public Task<BlockVisitOutcome> VisitBlock(Block block, CancellationToken cancellationToken)\n        {\n            BlockReward[] rewards = _rewardCalculator.CalculateRewards(block);\n            for (int i = 0; i < rewards.Length; i++)\n            {\n                if (rewards[i].RewardType == BlockRewardType.Uncle)\n                {\n                    _uncles += rewards[i].Value;\n                }\n                else\n                {\n                    _blockRewards += rewards[i].Value;\n                }\n            }\n\n            _logger.Info($\"Visiting block {block.Number}, total supply is (genesis + miner rewards + uncle rewards) | {_genesisAllocations} + {_blockRewards} + {_uncles}\");\n            return Task.FromResult(BlockVisitOutcome.None);\n        }\n\n        public Task<LevelVisitOutcome> VisitLevelStart(ChainLevelInfo chainLevelInfo, CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);\n\n        public Task<bool> VisitMissing(Keccak hash, CancellationToken cancellationToken)\n            => Task.FromResult(true);\n\n        public Task<bool> VisitHeader(BlockHeader header, CancellationToken cancellationToken)\n            => Task.FromResult(true);\n\n        public Task<LevelVisitOutcome> VisitLevelEnd(CancellationToken cancellationToken)\n            => Task.FromResult(LevelVisitOutcome.None);", "mimetype": "text/plain", "start_char_idx": 2460, "end_char_idx": 4634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bdcd376-340a-4120-96ad-92bbc3e3b6e1": {"__data__": {"id_": "5bdcd376-340a-4120-96ad-92bbc3e3b6e1", "embedding": null, "metadata": {"file_path": "./nethermind_dist/custom-analytic-tools.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d03748cf-4666-40c8-9c7a-973b989532a9", "node_type": "4", "metadata": {}, "hash": "a9c92b808f68ec7e4c57bb1a348c89a4d774a52a9a4b643fb5d3354bba859977", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9b34817-2c00-42fe-aa0f-a18318b77ff2", "node_type": "1", "metadata": {}, "hash": "6a6b8542c94dbd8b1450345a39d9722255b9597316d860b0995d9041f94c186d", "class_name": "RelatedNodeInfo"}}, "text": "}\n```\n\nAnd here you will find an example of a tree visitor that sums up all the account balances:\n\n```\n    public class SupplyVerifier : ITreeVisitor\n    {\n        private readonly ILogger _logger;\n        private UInt256 _balance = UInt256.Zero;\n        private int _accountsVisited;\n\n        public SupplyVerifier(ILogger logger)\n        {\n            _logger = logger;\n        }\n\n        public bool ShouldVisit(Keccak nextNode) { return true; }\n\n        public void VisitTree(Keccak rootHash, TrieVisitContext trieVisitContext) { }\n\n        public void VisitMissingNode(Keccak nodeHash, TrieVisitContext trieVisitContext) { }\n\n        public void VisitBranch(TrieNode node, TrieVisitContext trieVisitContext) { }\n\n        public void VisitExtension(TrieNode node, TrieVisitContext trieVisitContext) { }\n\n        public void VisitLeaf(TrieNode node, TrieVisitContext trieVisitContext, byte[] value = null)\n        {\n            if (trieVisitContext.IsStorage)\n            {\n                return;\n            }\n\n            AccountDecoder accountDecoder = new AccountDecoder();\n            Account account = accountDecoder.Decode(node.Value.AsRlpStream());\n            _balance += account.Balance;\n            _accountsVisited++;\n\n            _logger.Info($\"Balance after visiting {_accountsVisited}: {_balance}\");\n        }\n\n        public void VisitCode(Keccak codeHash, TrieVisitContext trieVisitContext) { }\n    }\n```", "mimetype": "text/plain", "start_char_idx": 4639, "end_char_idx": 6064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2047d01e-d72c-432f-90f2-7c413c0d9e5f": {"__data__": {"id_": "2047d01e-d72c-432f-90f2-7c413c0d9e5f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/README.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5f277d37-995e-4aca-ac43-d26f95fb4e7b", "node_type": "4", "metadata": {}, "hash": "067920c568a84ef35be18feba9043905e442bab05bf1d95c3a9c94ec46a1d934", "class_name": "RelatedNodeInfo"}}, "text": "# Nethermind docs\n\nBuilt with [Docusaurus](https://docusaurus.io).\n\n## Running locally\n\nRequires [Node.js](https://nodejs.org/en/download) v18 or later.\n\nIf running the first time, install dependencies:\n\n```bash\nnpm i\n```\n\nRun the docs as follows:\n\n```bash\nnpm run start\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 274, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a14147fc-1451-4e78-9d59-a28199d1a00b": {"__data__": {"id_": "a14147fc-1451-4e78-9d59-a28199d1a00b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84f0355b-6732-4a10-a598-d8fd14ce9a73", "node_type": "1", "metadata": {}, "hash": "41aeea325fce3f81db171215a881022e98103fb0d4c39c379d10e5c2bec8498d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Logs\nsidebar_position: 4\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n## Log config file location\n\nLogging in Nethermind is done via NLog library that can be configured by editing the NLog.config file.\n\n| Environment Type                                                                  | NLog.config location                                                   |\n|-----------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| built from src - Debug mode                                                       | src\\Nethermind\\Nethermind.Runner\\bin\\Debug\\netcoreapp3.1\\NLog.config   |\n| built from src - Release mode                                                     | src\\Nethermind\\Nethermind.Runner\\bin\\Release\\netcoreapp3.1\\NLog.config |\n| PPA                                                                               | /usr/share/nethermind/NLog.config                                      |\n| Docker                                                                            | /nethermind/NLog.config                                                |\n| from [downloads page](https://downloads.nethermind.io)                            | top level directory after unzipping the package                        |\n| from [GitHub releases page](https://github.com/NethermindEth/nethermind/releases) | top level directory after unzipping the package                        |\n| dAppNode                                                                          | ? \\[to be documented]                                                  |\n\n## Log config file syntax\n\nDetailed NLog configuration options can be found\nhere: [https://nlog-project.org/config/](https://nlog-project.org/config/)\n\n## Config or CLI log rules\n\nSimple logging rules can be added through configuration file or command line argument.\n\nFor example this would add `Trace` level logs to any logger under `Synchronization` module and `Debug` level logs\nfor `BlockTree` from `Blockchain` module:\\\n`--Init.LogRules Synchronization.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84f0355b-6732-4a10-a598-d8fd14ce9a73": {"__data__": {"id_": "84f0355b-6732-4a10-a598-d8fd14ce9a73", "embedding": null, "metadata": {"file_path": "./nethermind_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a14147fc-1451-4e78-9d59-a28199d1a00b", "node_type": "1", "metadata": {}, "hash": "bb6beb51cf9885ea27c7d65f43d9bafa2a9f248c3b1dc998b67c8c6f34b0104f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9887fcc4-843b-43cd-819c-1f245554420c", "node_type": "1", "metadata": {}, "hash": "71223cfd6fcc9ef1183047554bc98815baa7c15d1c1dfbe2a66cc9b13f7990dc", "class_name": "RelatedNodeInfo"}}, "text": "*:Trace;Blockchain.BlockTree:Debug`\n\n## Global logging override\n\nAdditionally there are global logging override that you can use temporarily:\n\n| Command line override                            | Log level |\n|--------------------------------------------------|-----------|\n| ./Nethermind.Runner --config mainnet --log TRACE | TRACE     |\n| ./Nethermind.Runner --config mainnet --log DEBUG | DEBUG     |\n| ./Nethermind.Runner --config mainnet --log INFO  | INFO      |\n| ./Nethermind.Runner --config mainnet --log WARN  | WARN      |\n| ./Nethermind.Runner --config mainnet --log ERROR | ERROR     |\n\n## JSON RPC logging level\n\nThis can be done by including these lines in the logging configuration file:\n\n```\n<logger name=\"JsonRpc.*\" minlevel=\"Error\" writeTo=\"file-async\"/>\n<logger name=\"JsonRpc.*\" minlevel=\"Error\" writeTo=\"auto-colored-console-async\" final=\"true\"/>\n<logger name=\"JsonRpc.*\" final=\"true\"/>\n```\n\n## Enterprise Logging\n\nSee how to configure Seq [here](https://docs.nethermind.io/nethermind/enterprise/seq)\n\n## Explaining Nethermind logs\n\nYou can check the supported operating systems, architectures and hardware requirements\nhere: [system-requirements.md](../get-started/system-requirements.md)\n\nAfter the node starts, you will see some initial info about the node and then the sync will start. G\u00f6rli fast sync uses\na `fast blocks` sync mode initially. The `fast blocks` sync picks some known `pivot block` from the past and\ndownloads `headers`, `bodies`, and `receipts` downwards all the way to `genesis block`. All blocks from 0 to\nthe `pivot block` are showed as `Old Headers` in the `fast blocks sync` logs. The console display shows the number\ngrowing from 0 to pivot, but this is just to make the display more user-friendly.\n\nYou will see some information about the sync progress, like below:\n\n1. Shows the number of already downloaded `headers`, `bodies` and `receipts` under the name `Downloaded` out of all to\n   be downloaded in the fast blocks stage.\n2. Shows the current queue of already downloaded `blocks`, `headers` and `receipts` waiting for being saved to the\n   database.", "mimetype": "text/plain", "start_char_idx": 2130, "end_char_idx": 4234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9887fcc4-843b-43cd-819c-1f245554420c": {"__data__": {"id_": "9887fcc4-843b-43cd-819c-1f245554420c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84f0355b-6732-4a10-a598-d8fd14ce9a73", "node_type": "1", "metadata": {}, "hash": "41aeea325fce3f81db171215a881022e98103fb0d4c39c379d10e5c2bec8498d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b06ea2b8-e1ef-48a9-8a0a-e7a4cc671530", "node_type": "1", "metadata": {}, "hash": "d61e677191b0ec5cb9ed4e5e9dfb3d2b7a9809965aeb2c8b082eeacc59c4ce01", "class_name": "RelatedNodeInfo"}}, "text": "3. Shows the current download speed (blocks per second - bps).\n4. Shows the average download speed (blocks per second - bps).\n\n![Fast blocks sync logs](/img/getting\\_started\\_log\\_0.png)\n\nWhen the fast blocks stage finishes, there will be some period of downloading blocks between the `pivot` and\nthe`latest blocks` which will have some additional info:\n\n1. Shows the last entry from the fast blocks stage.\n2. Shows the mode transition moment.\n3. Displays the speed (in blocks per second) of all `headers`, `bodies` and `receipts` at the same time.\n4. Additional info will appear every 30000 blocks with information about the G\u00f6rli epoch being stored.\n\n![G\u00f6rli fast sync logs](/img/getting\\_started\\_7.png)\n\nAfter the `fast sync` part finished, the node will transition to the `state sync stage` when the `state trie` is being\ndownloaded. Much information is displayed about the progress, as this process may take a long time on mainnet (a few\nhours).\n\n1. Total elapsed time in `state sync` is displayed.\n2. The total percentage of downloaded DB size is displayed (on mainnet the sync finishes around 34GB in March 2020, on\n   G\u00f6rli around 800MB).\n3. `branches` stands for the percentage of downloaded branches.\n4. Download speed in kilobytes per second is displayed.\n5. `accounts` stands for the number of accounts data downloaded already.\n6. `nodes` stands for the number of `Patricia trie nodes` downloaded by the sync process.\n7. `diagnostic` shows the time spent in the DB write / read access. The higher the value, the worse. It may get much\n   worse if you restart the node during the sync process, as we need to recreate some caches then by reading data from\n   the DB.\n\n![G\u00f6rli state sync logs](/img/getting\\_started\\_8.png)\n\nWhen the state sync is nearing completion, you may see a series of `branch sync` information reloading many times from\n0% to nearly 100%. This is the node trying to retrieve the few remaining state nodes and progressing with the head block\nrapidly:\n\n!", "mimetype": "text/plain", "start_char_idx": 4235, "end_char_idx": 6221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b06ea2b8-e1ef-48a9-8a0a-e7a4cc671530": {"__data__": {"id_": "b06ea2b8-e1ef-48a9-8a0a-e7a4cc671530", "embedding": null, "metadata": {"file_path": "./nethermind_dist/logs.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0", "node_type": "4", "metadata": {}, "hash": "6b90298e68505e745ca1edaef8927941cb50664ba8a7c93ac6be71473e449178", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9887fcc4-843b-43cd-819c-1f245554420c", "node_type": "1", "metadata": {}, "hash": "71223cfd6fcc9ef1183047554bc98815baa7c15d1c1dfbe2a66cc9b13f7990dc", "class_name": "RelatedNodeInfo"}}, "text": "[G\u00f6rli branch sync logs](/img/getting\\_started\\_26.png)\n\nAt some point, the entire state is downloaded and the node enters the `full sync` mode and will allow you to issue CLI /\nWeb3 queries and send / receive transactions\ud83e\udd73\n\n1. The `root` is saved at the moment when the entire `Patricia trie` is downloaded.\n2. We also clearly state that the node transitions to the `full sync`.\n3. When you see the block being processed, then you are in the `full sync` and the newly arrived block is being\n   calculated.\n4. Every two minutes you will see a summary of connected peers with their client version, IP address, highest synced\n   block, and data download speeds.\n\n![G\u00f6rli full sync logs](/img/getting\\_started\\_9.png)\n\nAlso, every now and then, a peer report will appear like below:\n\n![](</img/Screenshot2022-08-10205144.png>)\n\n1. First bracket is for Allocated contexts. It has possible values of `H` for Headers, `B` for Bodies, `R` for\n   Receipts, `N` for State, `S` for Snap, and `W` for Witness.\n2. Second bracket is for Sleeping contexts. It has possible values of `H` for Headers, `B` for Bodies, `R` for\n   Receipts, `N` for State, `S` for Snap, and `W` for Witness.\n3. Third bracket contains Peer Info.\n4. Fourth bracket is for Speeds as Follows:\n    * Latency\n    * Headers Transfer\n    * Bodies Transfer\n    * Receipts Transfer\n    * Node Data Transfer\n    * Snap Ranges Transfer\n5. Fifth bracket is for Client Info like Client Name, Client Version, Operating System and Language Version.", "mimetype": "text/plain", "start_char_idx": 6221, "end_char_idx": 7718, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11cce8c5-6b0a-499b-a3b0-626142ec33db": {"__data__": {"id_": "11cce8c5-6b0a-499b-a3b0-626142ec33db", "embedding": null, "metadata": {"file_path": "./nethermind_dist/txpool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e265db7c-5479-412b-99a8-18bc0514d45a", "node_type": "4", "metadata": {}, "hash": "9d480a4246e34db64643e3d0325e5c6b60949996cf938ff91ed919e5a7165d4a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "632c5823-56b0-4c6b-85ce-fbc206d01b83", "node_type": "1", "metadata": {}, "hash": "224ca5b74557224775deb5cccfb77f38283dfc892f9df5d47a604bcc5dfa77c7", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: txpool namespace\nsidebar_label: txpool\nsidebar_position: 9\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### txpool_content\n\nReturns tx pool content.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"txpool_content\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `pending`: map of map of *object*\nmap of *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "632c5823-56b0-4c6b-85ce-fbc206d01b83": {"__data__": {"id_": "632c5823-56b0-4c6b-85ce-fbc206d01b83", "embedding": null, "metadata": {"file_path": "./nethermind_dist/txpool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e265db7c-5479-412b-99a8-18bc0514d45a", "node_type": "4", "metadata": {}, "hash": "9d480a4246e34db64643e3d0325e5c6b60949996cf938ff91ed919e5a7165d4a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11cce8c5-6b0a-499b-a3b0-626142ec33db", "node_type": "1", "metadata": {}, "hash": "6eab88dbfedd2611dd33708238196531daab612b8d25b44239597078dca82db4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60daf961-f7d0-43f8-a4f8-69a40d34044d", "node_type": "1", "metadata": {}, "hash": "0da47972f564e83a15828c2b3b85f293c8f97b1ec247556d9ec92b32c168e0de", "class_name": "RelatedNodeInfo"}}, "text": "- `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n  - `queued`: map of map of *object*\nmap of *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### txpool_inspect\n\nReturns a detailed info on tx pool transactions.", "mimetype": "text/plain", "start_char_idx": 1504, "end_char_idx": 2852, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60daf961-f7d0-43f8-a4f8-69a40d34044d": {"__data__": {"id_": "60daf961-f7d0-43f8-a4f8-69a40d34044d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/txpool.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e265db7c-5479-412b-99a8-18bc0514d45a", "node_type": "4", "metadata": {}, "hash": "9d480a4246e34db64643e3d0325e5c6b60949996cf938ff91ed919e5a7165d4a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "632c5823-56b0-4c6b-85ce-fbc206d01b83", "node_type": "1", "metadata": {}, "hash": "224ca5b74557224775deb5cccfb77f38283dfc892f9df5d47a604bcc5dfa77c7", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"txpool_inspect\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `pending`: map of map of *string*\n  - `queued`: map of map of *string*\n\n</TabItem>\n</Tabs>\n\n### txpool_status\n\nReturns a tx pool status.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"txpool_status\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `pending`: *string* (hex integer)\n  - `queued`: *string* (hex integer)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 2854, "end_char_idx": 3885, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1e514ca-b78d-4f67-91a6-a43fa26574bc": {"__data__": {"id_": "d1e514ca-b78d-4f67-91a6-a43fa26574bc", "embedding": null, "metadata": {"file_path": "./nethermind_dist/grafana-and-prometheus.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "feccd6cc-06a9-4e0a-a409-e2cf694bf358", "node_type": "4", "metadata": {}, "hash": "ce5c11e75b6e941f7a17ae6cd8a2cc20cf83d275b8fec58a7c5609994828b945", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "21f5eaae-7fa5-43b2-a4d9-839d67beda00", "node_type": "1", "metadata": {}, "hash": "f1ae108bf37a3050874a96d4ad879e89769e0197b1dd265c2d72094c9314e69d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Grafana and Prometheus\nsidebar_position: 0\n---\n\nThis guide will walk you through setting up a local metrics infrastructure using [Grafana](https://grafana.com) and [Prometheus](https://prometheus.io).\n\n## Step 1: Set up Grafana and Prometheus\n\nTo simplify the process, we will use the [metrics-infrastructure](https://github.com/NethermindEth/metrics-infrastructure) repository, which contains the necessary configuration files to run Grafana and Prometheus in a Docker container. However, you can also set up Grafana and Prometheus manually the way it fits your specific needs.\n\n```bash\ngit clone https://github.com/NethermindEth/metrics-infrastructure.git\n```\n\n## Step 2: Run the stack\n\nAfter cloning the repository, navigate to its root directory and run the containers using Docker Compose as follows:\n\n```bash\ndocker compose up\n```\n\nOnce the stack is running, you can access the following services:\n\n- **Grafana**: [localhost:3000](http://localhost:3000)\\\n  Use `admin` for both the username and password. When asked for a password change, you may skip it. Then, navigate to Dashboards > Nethermind Dashboard.\n- **Prometheus**: [localhost:9090](http://localhost:9090)\n- **Pushgateway**: [localhost:9091](http://localhost:9091)\\\n  To specify another endpoint for the Pushgateway, use the `--Metrics.PushGatewayUrl` command line option.\n\n## Step 3: Run Nethermind\n\nTo enable metrics in Nethermind, use the `--Metrics.Enabled true` command line option. For more options, see the [Metrics](../../fundamentals/configuration.md#metrics) configuration section.\n\n:::warning Important\nA [consensus client](../../get-started/consensus-clients.md) of your choice must be running before you start Nethermind.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1712, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21f5eaae-7fa5-43b2-a4d9-839d67beda00": {"__data__": {"id_": "21f5eaae-7fa5-43b2-a4d9-839d67beda00", "embedding": null, "metadata": {"file_path": "./nethermind_dist/grafana-and-prometheus.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "feccd6cc-06a9-4e0a-a409-e2cf694bf358", "node_type": "4", "metadata": {}, "hash": "ce5c11e75b6e941f7a17ae6cd8a2cc20cf83d275b8fec58a7c5609994828b945", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1e514ca-b78d-4f67-91a6-a43fa26574bc", "node_type": "1", "metadata": {}, "hash": "7b1c089b9b96c6c2a431f6a83204be87c4cdac3c07286714591dca101176cd7f", "class_name": "RelatedNodeInfo"}}, "text": ":::\n\nRun Nethermind as follows:\n\n```bash\nnethermind -c mainnet --Metrics.Enabled true\n```\n\nAlternatively, you may add the `nethermind` service to the `docker-compose.yml` file in the repository root to run everything altogether:\n\n```yaml title=\"docker-compose.yml\"\nnethermind:\n  image: nethermind/nethermind:latest\n  container_name: nethermind\n  restart: unless-stopped\n  ports:\n    - 8545:8545\n    - 8551:8551\n    - 30303:30303\n  ulimits:\n    nofile:\n      soft: 1000000\n      hard: 1000000\n  command: -c mainnet --Metrics.Enabled true\n  volumes:\n    - ./keystore:/nethermind/keystore\n    - ./logs:/nethermind/logs\n    - ./nethermind_db:/nethermind/nethermind_db\n```\n\nIn this case, you may want to configure your consensus client similarly.", "mimetype": "text/plain", "start_char_idx": 1713, "end_char_idx": 2454, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26d16158-980a-48c0-9707-7370530b0305": {"__data__": {"id_": "26d16158-980a-48c0-9707-7370530b0305", "embedding": null, "metadata": {"file_path": "./nethermind_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7801535-6336-429d-a221-86859805d3b2", "node_type": "1", "metadata": {}, "hash": "2c0619b8997b820f3f9722394e5af4938bed7754febf2780e71903a912da5b5a", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: admin namespace\nsidebar_label: admin\nsidebar_position: 0\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### admin_addPeer\n\nAdds given node.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `enode`: *string*\n\n2. `addToStaticNodes`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_addPeer\",\n      \"params\": [enode, addToStaticNodes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nAdded node\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### admin_nodeInfo\n\nDisplays relevant information about this node.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7801535-6336-429d-a221-86859805d3b2": {"__data__": {"id_": "d7801535-6336-429d-a221-86859805d3b2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26d16158-980a-48c0-9707-7370530b0305", "node_type": "1", "metadata": {}, "hash": "75f2e99859c903e909031980eceba37d1ca586005f0c3d38a9b79fc8aa38d581", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a23211df-1876-434f-bfb6-30ed8a7276e4", "node_type": "1", "metadata": {}, "hash": "7bb6730c89d5b06384ca69f27d53f2f45b37df7ece1f632804f973f254715a2b", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_nodeInfo\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nInformation about this node\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `enode`: *string*\n  - `id`: *string*\n  - `ip`: *string*\n  - `listenAddress`: *string*\n  - `name`: *string*\n  - `ports`: *object*\n    - `discovery`: *string* (hex integer)\n    - `listener`: *string* (hex integer)\n  - `protocols`: map of *object*\n    - `difficulty`: *string* (hex integer)\n    - `genesisHash`: *string* (hash)\n    - `headHash`: *string* (hash)\n    - `newtorkId`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### admin_peers\n\nDisplays a list of connected peers including information about them (`clientId`, `host`, `port`, `address`, `isBootnode`, `isStatic`, `enode`).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `includeDetails`: *boolean*", "mimetype": "text/plain", "start_char_idx": 815, "end_char_idx": 1912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a23211df-1876-434f-bfb6-30ed8a7276e4": {"__data__": {"id_": "a23211df-1876-434f-bfb6-30ed8a7276e4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7801535-6336-429d-a221-86859805d3b2", "node_type": "1", "metadata": {}, "hash": "2c0619b8997b820f3f9722394e5af4938bed7754febf2780e71903a912da5b5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6812d7a3-c15b-4866-ba4c-056580cef6c0", "node_type": "1", "metadata": {}, "hash": "26ddda8fb63a698d939c151c326d1ab0a84a06d14d6f81a6171e17381704b5f1", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_peers\",\n      \"params\": [includeDetails]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nList of connected peers including information\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `address`: *string*\n  - `clientId`: *string*\n  - `clientType`: *string*\n  - `enode`: *string*\n  - `ethDetails`: *string*\n  - `host`: *string*\n  - `isBootnode`: *boolean*\n  - `isStatic`: *boolean*\n  - `isTrusted`: *boolean*\n  - `lastSignal`: *string*\n  - `port`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### admin_prune\n\nRuns full pruning if enabled.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_prune\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *integer*\n\n</TabItem>\n</Tabs>\n\n### admin_removePeer\n\nRemoves given node.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `enode`: *string*\n\n2. `removeFromStaticNodes`: *boolean*", "mimetype": "text/plain", "start_char_idx": 1915, "end_char_idx": 3313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6812d7a3-c15b-4866-ba4c-056580cef6c0": {"__data__": {"id_": "6812d7a3-c15b-4866-ba4c-056580cef6c0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/admin.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c", "node_type": "4", "metadata": {}, "hash": "427472627033a873ab7fb31912e57d296fd3ced41c5c62bd21fb6ebc66bdc3fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a23211df-1876-434f-bfb6-30ed8a7276e4", "node_type": "1", "metadata": {}, "hash": "7bb6730c89d5b06384ca69f27d53f2f45b37df7ece1f632804f973f254715a2b", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"admin_removePeer\",\n      \"params\": [enode, removeFromStaticNodes]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\nRemoved node\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 3316, "end_char_idx": 3781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c8b1005-ad0f-48a4-af0e-c2c6503bc803": {"__data__": {"id_": "7c8b1005-ad0f-48a4-af0e-c2c6503bc803", "embedding": null, "metadata": {"file_path": "./nethermind_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdf2be51-caee-40c2-aa2f-4680e30bbecd", "node_type": "1", "metadata": {}, "hash": "9f13f51e4c63fa7009d5b5d52621f91271e2be93c53383e3ba0a1c39aad4732d", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Performance tuning\nsidebar_position: 7\n---\n\nBy default, Nethermind is configured for general use cases that fit well for most users. However, to improve various aspects of Nethermind performance, there are options for different subsystems that can be configured for your specific needs.\n\n## Peer discovery\n\nTo connect to the Ethereum network, Nethermind needs to maintain connections to other clients. The number of connections can be configured with `--Network.MaxActivePeers <value>`. The default value depends on the network. Increasing this number may reduce syncing time, while reducing this number may help with attestation performance.\nAlso, you can increase the rate at which a new connection is established with `--Network.MaxOutgoingConnectPerSec <value>`. The default value is 20 while 50 would be a reasonable higher value. This tends to reduce the snap sync time; however, some ISPs may throttle your Internet connection if you set this value too high. Also, some WiFi routers may hang if the value is set too high.\n\n## Port forwarding\n\nWhile port forwarding is not strictly required, it helps significantly with finding peers and is essential for the network's overall health. The exact steps for port forwarding highly depend on your environment, router, and ISP. For most home configurations, automatic port forwarding can be turned on with `--Network.EnableUPnP true`. \nSome ISPs are more restrictive and do not support port forwarding and/or utilize provider-level NAT. In such cases, your best option is to use a VPN that supports port forwarding. Keep in mind that consensus clients need a separate port forwarding.\n\n## Sync time\n\nOn the Ethereum mainnet, most of the syncing time is split into three phases: snap sync, old bodies, and old receipts. Strictly speaking, there are also fast sync, full sync, and state sync phases. However, they usually complete in less than a minute, with state sync usually taking up to 3 minutes.\n\nAt the moment, the best test case sync time is 1 hour 50 minutes for all phases with the following configuration:\n\n- CPU: AMD Ryzen 9 7950X\n- Memory: 128GB RAM\n- Storage: Intel Optane SSD 905P Series 900GB\n- Network: 1 Gbps Internet with TorGuard VPN with WireGuard protocol.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdf2be51-caee-40c2-aa2f-4680e30bbecd": {"__data__": {"id_": "fdf2be51-caee-40c2-aa2f-4680e30bbecd", "embedding": null, "metadata": {"file_path": "./nethermind_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c8b1005-ad0f-48a4-af0e-c2c6503bc803", "node_type": "1", "metadata": {}, "hash": "78aa4b2d7e01548b8c819d4c2b3883807d083bdc69c0c6d983729e1bf08b4bcd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4f4b631-78d5-4d96-be80-19254e21380a", "node_type": "1", "metadata": {}, "hash": "3a7c4ef33985d69f6735acdfec2e3c62fe4bddd2e4c1c2ab34625ef0888f4371", "class_name": "RelatedNodeInfo"}}, "text": "Both execution and consensus clients port forwarding are set up manually.\n- Command line options:\n\n    ```\n    --Network.EnableUPnP true\n    --Network.MaxOutgoingConnectPerSec 50\n    --Network.ProcessingThreadCount 32\n    --Sync.TuneDbMode HeavyWrite\n    ```\n\n## Snap sync\n\nSnap sync is the process of downloading the Ethereum state tree. After it is complete, and after the state sync phase, Nethermind can process and follow the chain. The fastest tested snap sync and state sync time is 25 minutes.\nThis phase is the most I/O-intensive sync phase, and therefore, assuming a fast internet, the sync time highly depends on your SSD's write speed. Remember that most SSDs only advertise peak write speed, usually above 5GB/s. However, they tend to slow down significantly to around 0.5GB/s (or even less for a QLC SSD) after a few seconds. Therefore, look for SSDs with high sustained write speed.\n\nAlso, ensuring your SSD is sufficiently cooled to prevent thermal throttling is essential. This is often overlooked as most workloads rarely stress SSD as much; however, to reduce sync time, Nethermind will utilize your SSD to its limit. If, for whatever reason, you need to minimize the I/O load, you can specify a rate limit with `--Db.MaxBytesPerSec 1000000000`.\n\nNethermind temporarily changes the database configuration during sync to optimize it for writing, notably the option `--Sync.TuneDbMode HeavyWrite` is turned on by default. On some systems with slow SSDs, the use of the option `--Sync.TuneDbMode AggressiveHeavyWrite` may boost. Also, the option `--Sync.TuneDbMode DisableCompaction` can be used to disable compaction altogether. This is likely faster for systems using entry-level NVMe SSDs and is also useful to extend the lifespan of your SSD as it provides the lowest total writes possible. However, it uses about 3GB of extra memory during snap sync. The state sync phase may appear to hang for about 10 minutes as the whole database compacts for the first time after snap sync.", "mimetype": "text/plain", "start_char_idx": 2239, "end_char_idx": 4238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4f4b631-78d5-4d96-be80-19254e21380a": {"__data__": {"id_": "e4f4b631-78d5-4d96-be80-19254e21380a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdf2be51-caee-40c2-aa2f-4680e30bbecd", "node_type": "1", "metadata": {}, "hash": "9f13f51e4c63fa7009d5b5d52621f91271e2be93c53383e3ba0a1c39aad4732d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59b3aea3-2e6d-4f97-9923-9f956aee7dad", "node_type": "1", "metadata": {}, "hash": "248db730516d5585a09de2cabe23edb697841506589271e4481669ee2322eed8", "class_name": "RelatedNodeInfo"}}, "text": "If you are running on a VPS with artificially capped IOPS, or you are using SATA SSD (which is highly not recommended), increasing the state DB block size with `--Db.StateDbBlockSize 16384` may help to reduce snap sync time. However, this negatively affects block processing time. An alternative is to turn on compaction readahead with `--Db.CompactionReadAhead 128000`; however, this may take up a few extra GB of memory depending on the readahead value.\n\n## Old bodies and receipts\n\nOld bodies and old receipts are the process of downloading block bodies and receipts. This is required for some RPC methods, such as `eth_getLogs`, and for consensus clients to work correctly. If you don't need them, skip this phase with\n\n```\n--Sync.DownloadBodiesInFastSync false\n--Sync.DownloadReceiptsInFastSync false\n--Sync.NonValidatorNode true\n```\n\nOld bodies and receipts are mainly limited by your Internet connection. With a 1Gbps connection, they consume around 250MB/s and 500MB/s of writes, respectively, which is generally reasonable for most PCIE SSDs. On older systems or VPS with low single thread performance and high Internet speed, the block body deserialization may be a bottleneck, in which case, you can increase the number of network processing threads with `--Network.ProcessingThreadCount 32`. However, this may impact block processing time.\n\n## Block processing time and attestation\n\nBlock processing time is limited mainly by SSD performance. Strictly speaking, it's not the IOPS that matters, but the response time. Nevertheless, the IOPS is a good approximation as most SSDs don't advertise the response time.\nTo help further reduce reads from SSD, Nethermind has multiple levels of caching, which is tuned by the memory hint option `--Init.MemoryHint 2000000000`. If you are running a system with more than 16GB of memory, it is highly recommended to increase this value. In-memory pruning (turned on by default) also improves block processing time.\n\nIt is also possible to disable compression of the state DB with `--Db.StateDbDisableCompression true` that improves block processing time by 3% to 5% but increases disk space usage correspondingly. Block processing is susceptible to the number of peers connected.", "mimetype": "text/plain", "start_char_idx": 4240, "end_char_idx": 6469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59b3aea3-2e6d-4f97-9923-9f956aee7dad": {"__data__": {"id_": "59b3aea3-2e6d-4f97-9923-9f956aee7dad", "embedding": null, "metadata": {"file_path": "./nethermind_dist/performance-tuning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35", "node_type": "4", "metadata": {}, "hash": "d4a48ef9c82e126d1084a90a174c5bfd1f300ebd64747559044134e27e9403c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4f4b631-78d5-4d96-be80-19254e21380a", "node_type": "1", "metadata": {}, "hash": "3a7c4ef33985d69f6735acdfec2e3c62fe4bddd2e4c1c2ab34625ef0888f4371", "class_name": "RelatedNodeInfo"}}, "text": "Therefore, after the node is synced, it makes sense to reduce the number of peers with `--Network.MaxActivePeers 20`.", "mimetype": "text/plain", "start_char_idx": 6470, "end_char_idx": 6587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1057c323-7f05-4e7b-b7bd-6df73da4fad0": {"__data__": {"id_": "1057c323-7f05-4e7b-b7bd-6df73da4fad0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/validators.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a905c3c1-4a67-451c-8cb3-641cec283d4a", "node_type": "4", "metadata": {}, "hash": "6052616cddc920b1ca734f0684df271a07852e5c091b52492747919fbba99986", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ae8ebc9-5fe7-429f-9651-d80e615a18f9", "node_type": "1", "metadata": {}, "hash": "a484e959df5104861bc0997a3502a1cfbe5b026b46bf4c577b18c33bd4797566", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Validators\nsidebar_position: 0\n---\n\n## General considerations\n\n:::warning Important\nPlease check out the [security considerations](../fundamentals/security.md) before using Nethermind as a validator.\n:::\n\nFor Ethereum validators, we highly recommend checking out [Staking with Ethereum](https://ethereum.org/staking) and [Validator checklist](https://launchpad.ethereum.org/en/checklist).\n\n## Hardware configurations\n\nThe following hardware configurations for Ethereum Mainnet validators have been battle-tested by us and our users. We have observed excellent validator performance and stability with these configurations.\n\n:::note\nBefore setting up your infrastructure, check out [Nethermind hardware requirements](../get-started/system-requirements.md#hardware-requirements).\n:::\n\n### On-premises\n\nA single validator on Intel NUC 11:\n\n- CPU: Intel Core i7-1165G7\n- Memory: Crucial 32GB DDR4-3200 SODIMM\n- Storage: Samsung 980 PRO PCIe NVMe SSD 2TB\n- Internet speed: 620 Mbps download, 160 Mbps upload\n\n### AWS\n\nMultiple validators on the following EC2 instances:\n\n- [m6i.2xlarge](https://aws.amazon.com/ec2/instance-types/m6i/): 8 vCPU, 32 GiB memory\n- [m7g.2xlarge](https://aws.amazon.com/ec2/instance-types/m7g/): 8 vCPU, 32 GiB memory\n\nThese configurations have proven to work well for 1000-1500 validators and haven't been tested for more validators. Also, the validator clients have been separated from the consensus and execution clients and running on [t4g.small](https://aws.amazon.com/ec2/instance-types/t4/) instances.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1541, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ae8ebc9-5fe7-429f-9651-d80e615a18f9": {"__data__": {"id_": "1ae8ebc9-5fe7-429f-9651-d80e615a18f9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/validators.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a905c3c1-4a67-451c-8cb3-641cec283d4a", "node_type": "4", "metadata": {}, "hash": "6052616cddc920b1ca734f0684df271a07852e5c091b52492747919fbba99986", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1057c323-7f05-4e7b-b7bd-6df73da4fad0", "node_type": "1", "metadata": {}, "hash": "81f97a2547325773674f19c3acc6c9999bb1d657421ff97e6b86b7db63be6346", "class_name": "RelatedNodeInfo"}}, "text": "### Azure\n\nMultiple validators on the following VM instances:\n\n- [Standard_D8_v5](https://learn.microsoft.com/en-us/azure/virtual-machines/dv5-dsv5-series#dv5-series): 8 vCPU, 32 GiB memory\n- [Standard_D8ps_v5](https://learn.microsoft.com/en-us/azure/virtual-machines/dpsv5-dpdsv5-series#dpsv5-series): 8 vCPU, 32 GiB memory\n\nThese configurations have proven to work well for 1000-1500 validators and haven't been tested for more validators. Also, the validator clients have been separated from the consensus and execution clients and running on [Standard_D2pls_v5](https://learn.microsoft.com/en-us/azure/virtual-machines/dplsv5-dpldsv5-series#dplsv5-series) instances.\n\n### GCP\n\nMultiple validators on the [c2d-highmem-4](https://cloud.google.com/compute/docs/compute-optimized-machines#c2d-high-mem) instance: 4 vCPU, 32 GB memory\n\nThese configurations have proven to work well for 1000-1500 validators and haven't been tested for more validators. Also, the validator clients have been separated from the consensus and execution clients and running on [e2-small](https://cloud.google.com/compute/docs/general-purpose-machines#sharedcore) instances.\n\n## Gnosis validators\n\nTo set up a Gnosis Chain validator, see the [Gnosis Chain documentation](https://docs.gnosischain.com/node).", "mimetype": "text/plain", "start_char_idx": 1543, "end_char_idx": 2826, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8ec3b47-9f59-4dfe-bdbf-cc41a6adca64": {"__data__": {"id_": "c8ec3b47-9f59-4dfe-bdbf-cc41a6adca64", "embedding": null, "metadata": {"file_path": "./nethermind_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd90a438-2708-46c2-9856-978ec91c79d7", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e36c057e-1789-45e4-8992-983baf045b88", "node_type": "1", "metadata": {}, "hash": "878a0558df5dab055b7458f71a5cf62b9c973fe52084fbdfc038da07b7553d2e", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: parity namespace\nsidebar_label: parity\nsidebar_position: 5\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### parity_clearEngineSigner\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_clearEngineSigner\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### parity_enode\n\nReturns the node enode URI.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_enode\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### parity_getBlockReceipts\n\nGet receipts from all transactions from particular block, more efficient than fetching the receipts one-by-one.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e36c057e-1789-45e4-8992-983baf045b88": {"__data__": {"id_": "e36c057e-1789-45e4-8992-983baf045b88", "embedding": null, "metadata": {"file_path": "./nethermind_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd90a438-2708-46c2-9856-978ec91c79d7", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8ec3b47-9f59-4dfe-bdbf-cc41a6adca64", "node_type": "1", "metadata": {}, "hash": "5f97d17972340dcb74577a1d2817dcea9ee771cd5f28ae88e46721f4806b4d50", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f125e8c-e8e9-4c1b-9a73-e072717b7821", "node_type": "1", "metadata": {}, "hash": "4d8c2016af2d7636befd3b8bae466a3c923c8dc4770b880206002b67644ef704", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_getBlockReceipts\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n\n</TabItem>\n</Tabs>\n\n### parity_netPeers\n\nReturns connected peers. Peers with non-empty protocols have completed handshake.", "mimetype": "text/plain", "start_char_idx": 1388, "end_char_idx": 2951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f125e8c-e8e9-4c1b-9a73-e072717b7821": {"__data__": {"id_": "3f125e8c-e8e9-4c1b-9a73-e072717b7821", "embedding": null, "metadata": {"file_path": "./nethermind_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd90a438-2708-46c2-9856-978ec91c79d7", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e36c057e-1789-45e4-8992-983baf045b88", "node_type": "1", "metadata": {}, "hash": "878a0558df5dab055b7458f71a5cf62b9c973fe52084fbdfc038da07b7553d2e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51cf1cdd-71c7-4a0f-aa9a-0e46cbb206c4", "node_type": "1", "metadata": {}, "hash": "6203c6ed5a517f59e213bf9c912a778ed6865eee7a4dd19fda9d2e2b6110b0db", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_netPeers\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `active`: *string* (hex integer)\n  - `connected`: *string* (hex integer)\n  - `max`: *string* (hex integer)\n  - `peers`: array of *object*\n    - `caps`: array of *string*\n    - `id`: *string*\n    - `name`: *string*\n    - `network`: *object*\n      - `localAddress`: *string*\n      - `remoteAddress`: *string*\n    - `protocols`: map of *object*\n      - `difficulty`: *string* (hex integer)\n      - `headHash`: *string* (hash)\n      - `version`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### parity_pendingTransactions\n\nReturns a list of transactions currently in the queue. If address is provided, returns transactions only with given sender address.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)", "mimetype": "text/plain", "start_char_idx": 2953, "end_char_idx": 4088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51cf1cdd-71c7-4a0f-aa9a-0e46cbb206c4": {"__data__": {"id_": "51cf1cdd-71c7-4a0f-aa9a-0e46cbb206c4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd90a438-2708-46c2-9856-978ec91c79d7", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f125e8c-e8e9-4c1b-9a73-e072717b7821", "node_type": "1", "metadata": {}, "hash": "4d8c2016af2d7636befd3b8bae466a3c923c8dc4770b880206002b67644ef704", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9fcb0bd2-0b86-4d0d-bbcd-e7f41e15869b", "node_type": "1", "metadata": {}, "hash": "3b17c5f117567377c61027dc8712c358392ab21aa5a1febb0b0feb4557f1646a", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_pendingTransactions\",\n      \"params\": [address]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `condition`: *object*\n  - `creates`: *string* (address)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `nonce`: *string* (hex integer)\n  - `publicKey`: *object*\n    - `address`: *string* (address)\n    - `bytes`: *string* (hex data)\n    - `prefixedBytes`: *string* (hex data)\n  - `r`: *string* (hex data)\n  - `raw`: *string* (hex data)\n  - `s`: *string* (hex data)\n  - `standardV`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### parity_setEngineSigner\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `password`: *string*", "mimetype": "text/plain", "start_char_idx": 4091, "end_char_idx": 5466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9fcb0bd2-0b86-4d0d-bbcd-e7f41e15869b": {"__data__": {"id_": "9fcb0bd2-0b86-4d0d-bbcd-e7f41e15869b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/parity.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cd90a438-2708-46c2-9856-978ec91c79d7", "node_type": "4", "metadata": {}, "hash": "27194da3d8a1a47d0b1f56e1075c6065efb9f55dbf80834c9332e035ce4d2808", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51cf1cdd-71c7-4a0f-aa9a-0e46cbb206c4", "node_type": "1", "metadata": {}, "hash": "6203c6ed5a517f59e213bf9c912a778ed6865eee7a4dd19fda9d2e2b6110b0db", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_setEngineSigner\",\n      \"params\": [address, password]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### parity_setEngineSignerSecret\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `privateKey`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"parity_setEngineSignerSecret\",\n      \"params\": [privateKey]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 5469, "end_char_idx": 6478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b041b8e5-6dc4-4bb2-99c2-eefb5521eba5": {"__data__": {"id_": "b041b8e5-6dc4-4bb2-99c2-eefb5521eba5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c766f9a4-6ee0-4345-9a63-fd7f4318c70d", "node_type": "1", "metadata": {}, "hash": "aff6f85a8f967febca0c4ed4d720287228cd58770b6462646e8fb9b12d2fb2d6", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: clique namespace\nsidebar_label: clique\nsidebar_position: 1\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### clique_discard\n\nThis method drops a currently running proposal. The signer will not cast further votes (either for or against) the address.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `signer`: *string* (address)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_discard\",\n      \"params\": [signer]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### clique_getBlockSigner\n\nRetrieves the signer of the block with the given hash. Returns error of a block with the given hash does not exist.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getBlockSigner\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSigners\n\nRetrieves the list of authorized signers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c766f9a4-6ee0-4345-9a63-fd7f4318c70d": {"__data__": {"id_": "c766f9a4-6ee0-4345-9a63-fd7f4318c70d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b041b8e5-6dc4-4bb2-99c2-eefb5521eba5", "node_type": "1", "metadata": {}, "hash": "bbb168d129da86dd869eed6317ed8e53dc8f2e40ba10936746987f760d627173", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e180c88-13bf-4057-9c0a-99d6772addf7", "node_type": "1", "metadata": {}, "hash": "2333a8384afb497709659b5c9a2cb1bbc01a6f029a9a321393699048d6e7af8b", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSigners\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAnnotated\n\nRetrieves the list of authorized signers but with signer names instead of addresses\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAnnotated\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAtHash\n\nRetrieves the list of authorized signers at the specified block by hash.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 1542, "end_char_idx": 2721, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e180c88-13bf-4057-9c0a-99d6772addf7": {"__data__": {"id_": "5e180c88-13bf-4057-9c0a-99d6772addf7", "embedding": null, "metadata": {"file_path": "./nethermind_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c766f9a4-6ee0-4345-9a63-fd7f4318c70d", "node_type": "1", "metadata": {}, "hash": "aff6f85a8f967febca0c4ed4d720287228cd58770b6462646e8fb9b12d2fb2d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d822b678-93e5-4a4e-a4d6-090719a0e78a", "node_type": "1", "metadata": {}, "hash": "39f22570ab6b287ac4f32b5bfc8d51ba52b5c56f3847105b0bc83ecbe66ba23b", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAtHash\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAtHashAnnotated\n\nRetrieves the list of authorized signers at the specified block by hash but with signer names instead of addresses\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAtHashAnnotated\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### clique_getSignersAtNumber\n\nRetrieves the list of authorized signers at the specified block by block number.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `number`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 2724, "end_char_idx": 4068, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d822b678-93e5-4a4e-a4d6-090719a0e78a": {"__data__": {"id_": "d822b678-93e5-4a4e-a4d6-090719a0e78a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e180c88-13bf-4057-9c0a-99d6772addf7", "node_type": "1", "metadata": {}, "hash": "2333a8384afb497709659b5c9a2cb1bbc01a6f029a9a321393699048d6e7af8b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b47e435d-8ead-466f-ae16-1be1888c310c", "node_type": "1", "metadata": {}, "hash": "d9496feb1b2e0b82d80e6463de5cc257a129b844661d8965a5774f84a265136c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSignersAtNumber\",\n      \"params\": [number]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### clique_getSnapshot\n\nRetrieves a snapshot of all clique state at a given block.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSnapshot\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `hash`: *string* (hash)\n  - `number`: *string* (hex integer)\n  - `signerLimit`: *string* (hex integer)\n  - `signers`: map of *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### clique_getSnapshotAtHash\n\nRetrieves the state snapshot at a given block.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 4071, "end_char_idx": 5345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b47e435d-8ead-466f-ae16-1be1888c310c": {"__data__": {"id_": "b47e435d-8ead-466f-ae16-1be1888c310c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d822b678-93e5-4a4e-a4d6-090719a0e78a", "node_type": "1", "metadata": {}, "hash": "39f22570ab6b287ac4f32b5bfc8d51ba52b5c56f3847105b0bc83ecbe66ba23b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "185a0863-ab6c-4c1e-a5b6-dd3cc7a8e45c", "node_type": "1", "metadata": {}, "hash": "1564e4ea2dc113398d7f3bb1400d1f0f24f0d16ced9d89350fea0f0ad3ccc246", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_getSnapshotAtHash\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `hash`: *string* (hash)\n  - `number`: *string* (hex integer)\n  - `signerLimit`: *string* (hex integer)\n  - `signers`: map of *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### clique_produceBlock\n\nForces Clique block producer to produce a new block\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `parentHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_produceBlock\",\n      \"params\": [parentHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### clique_propose\n\nAdds a new authorization proposal that the signer will attempt to push through. If the `vote` parameter is true, the local signer votes for the given address to be included in the set of authorized signers. With `vote` set to false, the signer is against the address.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `signer`: *string* (address)\n\n2. `vote`: *boolean*", "mimetype": "text/plain", "start_char_idx": 5348, "end_char_idx": 6935, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "185a0863-ab6c-4c1e-a5b6-dd3cc7a8e45c": {"__data__": {"id_": "185a0863-ab6c-4c1e-a5b6-dd3cc7a8e45c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/clique.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0", "node_type": "4", "metadata": {}, "hash": "5ef30b158bdf812979d57a3472fa1ec258e9ff49e46c4a2a898fa3f0ead27996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b47e435d-8ead-466f-ae16-1be1888c310c", "node_type": "1", "metadata": {}, "hash": "d9496feb1b2e0b82d80e6463de5cc257a129b844661d8965a5774f84a265136c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"clique_propose\",\n      \"params\": [signer, vote]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 6938, "end_char_idx": 7372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0f1fffc-bbe7-47d3-9960-2b024c572fa6": {"__data__": {"id_": "f0f1fffc-bbe7-47d3-9960-2b024c572fa6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/web3.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11612d7c-a423-405d-8164-b98f1ce79e1e", "node_type": "4", "metadata": {}, "hash": "030ddd371485bd6fee26be52353666907dfcc4c1d113ca5efba4af86a33185db", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: web3 namespace\nsidebar_label: web3\nsidebar_position: 10\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### web3_clientVersion\n\nReturns the current client version.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"web3_clientVersion\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### web3_sha3\n\nReturns Keccak of the given data.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `data`: *string* (hex data)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"web3_sha3\",\n      \"params\": [data]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hash)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1892a731-3716-4057-9030-84549ede490f": {"__data__": {"id_": "1892a731-3716-4057-9030-84549ede490f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/troubleshooting.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5e74a428-275c-435d-bc0b-5730cd065dcf", "node_type": "4", "metadata": {}, "hash": "f0ecd44b6f5a6bbeff2280be70158e1277b5361205fdbf1a9739ccf8c19a4d6f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ea9f49c-6817-4942-91ca-ccc8eceb5da6", "node_type": "1", "metadata": {}, "hash": "e22e4627d00de4b3d3762631f770b9db69506c597a0a2c08ced9018d473a4018", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Troubleshooting\nsidebar_position: 8\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n## File descriptor limits\n\nIn some cases, file descriptor limits may cause errors like \"Too many open files\". To solve that, see the instructions for your platform below.\n\n<Tabs groupId=\"os\">\n<TabItem value=\"linux\" label=\"Linux\">\n\nTo increase the limits for the user running Nethermind (given the process name of `nethermind`), run:\n\n```bash\nsudo echo \"nethermind soft nofile 100000\" > /etc/security/limits.d/nethermind.conf\nsudo echo \"nethermind hard nofile 100000\" >> /etc/security/limits.d/nethermind.conf\n```\n\n</TabItem>\n<TabItem value=\"macos\" label=\"macOS\">\n\nTo increase the limits, run:\n\n```bash\nulimit -n 10000\n```\n\nIf you run into issues with the above command, see the [workaround](https://developer.apple.com/forums/thread/735798?answerId=762679022#762679022).\n\nNote that the changes above are temporary and will be reset after the system reboot. To make them permanent, you can add them to your `~/.bashrc` or `~/.bash_profile` shell configuration file.\n\n</TabItem>\n</Tabs>\n\n## Database corruption issues\n\nDatabase corruption is one of the issues that happen now and then; it has many possible causes among them: \n\n- Hardware failures: disk failures, memory errors, hardware overheating, etc.\n- Power cuts and abrupt shutdowns\n\nThere's no shortcut in such situations, and [resyncing Nethermind from scratch](./fundamentals/sync.md#resync-a-node-from-scratch) is the recommended remedy.\n\n## TrieNodeException errors\n\nIf Nethermind reports `Nethermind.Trie.TrieNodeException` or `Nethermind.Trie.MissingTrieNodeException` errors, that usually indicates database corruption or missing data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1721, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ea9f49c-6817-4942-91ca-ccc8eceb5da6": {"__data__": {"id_": "2ea9f49c-6817-4942-91ca-ccc8eceb5da6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/troubleshooting.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5e74a428-275c-435d-bc0b-5730cd065dcf", "node_type": "4", "metadata": {}, "hash": "f0ecd44b6f5a6bbeff2280be70158e1277b5361205fdbf1a9739ccf8c19a4d6f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1892a731-3716-4057-9030-84549ede490f", "node_type": "1", "metadata": {}, "hash": "da3dd80e2cfa2cbde2c77f7eb6f23b74097d957438629685ba7b335afa08b055", "class_name": "RelatedNodeInfo"}}, "text": "The following steps may help:\n\n- If the node is still syncing, wait until it has been fully synced and observe for errors\n- Restart the node and observe for errors\n- Update to the latest version of Nethermind\n- If the above steps fail, a [resync](./fundamentals/sync.md#resync-a-node-from-scratch) may be required\n\n## Issues with lock files\n\nIf Nethermind complains about the lock files, it perhaps because of one of the following:\n\n- Another Nethermind process is running using the same database\n- The database has not been appropriately closed on the last run.\\\n  In this case, run the following command from the Nethermind database directory:\n\n  ```bash\n  find . -type f -name 'LOCK' -delete\n  ```\n\n\n## Block checksum mismatch\n\nSometimes Nethermind may fail with an error similar the following:\n\n```\nCorruption: block checksum mismatch: expected 2087346143, got 2983326672 in... \n```\n\nThis tends to happen on XFS file systems under very high memory pressure. The issue can be mitigated by using the `--Db.UseDirectIoForFlushAndCompactions true` option although at the cost of performance.\n\nHowever, quite often, this is because of memory module issues.\n\n## Plugin loading failure\n\nIf Nethermind fails to start with a message like `Failed to load plugin...`, this is most likely due to a missing or incompatible plugin. Reinstalling Nethermind usually fixes the issue.\n\n:::tip\nIf you install Nethermind over an existing installation, remove the old installation first, particularly the `plugins` directory. Package managers do this automatically.\n:::", "mimetype": "text/plain", "start_char_idx": 1722, "end_char_idx": 3274, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1443373-26b0-422f-af88-2f4fb40b1468": {"__data__": {"id_": "c1443373-26b0-422f-af88-2f4fb40b1468", "embedding": null, "metadata": {"file_path": "./nethermind_dist/aura.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8c61042e-106e-4344-8944-9f3fb38ac1b1", "node_type": "4", "metadata": {}, "hash": "6422bdefb2855130a0ad91899bf05f3987192cc39c2b94475fb2a371b8a95ae0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "160897e3-8c5c-4821-b8d3-7e880ced511c", "node_type": "1", "metadata": {}, "hash": "7a65c8624348df4ac337ea7c1de0d75b3847de04e3645ff32ad7d0b93e4739ed", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Aura-based validators\nsidebar_position: 0\n---\n\nThis guide will walk you through configuring an Aura-based validator with Nethermind in a Docker container using the Energy Web chain as an example.\n\n:::info\nYour machine's clock has to be synchronized. Otherwise, you might miss block sealing. By default, the block time is set to 5 seconds.\n:::\n\n## Configuring a Docker container\n\nThe example below shows how to configure a Docker container for an Aura-based validator on the Energy Web chain:\n\n```yaml title=\"docker-compose.yml\"\nservices:\n  nethermind-validator:\n    image: nethermind/nethermind:latest\n    container_name: nethermind-validator\n    restart: unless-stopped\n    ports:\n      - 8545:8545\n      - 30303:30303\n    ulimits:\n      nofile:\n        soft: 1000000\n        hard: 1000000\n    environment:\n      - NETHERMIND_CONFIG=energyweb\n    volumes:\n      - ./keystore:/nethermind/keystore\n      - ./logs:/nethermind/logs\n      - ./nethermind_db:/nethermind/nethermind_db\n```\n\n## Configuring keyfile\n\nMake sure that the keyfile name contains the public key (address). Otherwise, Nethermind doesn't recognize it as such. \nFor instance, a keyfile can be named `key-0x1234567890123456789012345678901234567890`.\n\nThe keyfile must be stored in the `keystore` directory located in the Nethermind base data directory.\n\n## Configuration settings\n\nHere is an example of recommended settings for a validator. The most convenient way to configure these settings is either defining them in the configuration file or passing them as environment variables.\n\n- `Init.IsMining`: `true`\n- `Init.MemoryHint`: Can be left unspecified. It's recommended to configure it accordingly to the machine specification(for Eneergy Web, 768000000 is enough).\n- `EthStats` namespace parameters if you want to report node status to Ethstats for your network.\n- `Metrics` namespace parameters to enable node monitoring.\n- `KeyStore.PasswordFiles`: The  path to the file containing the password for the mining private key.\n- `KeyStore.UnlockAccounts`: An array of accounts. Provide the miner public address here.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2096, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "160897e3-8c5c-4821-b8d3-7e880ced511c": {"__data__": {"id_": "160897e3-8c5c-4821-b8d3-7e880ced511c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/aura.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8c61042e-106e-4344-8944-9f3fb38ac1b1", "node_type": "4", "metadata": {}, "hash": "6422bdefb2855130a0ad91899bf05f3987192cc39c2b94475fb2a371b8a95ae0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1443373-26b0-422f-af88-2f4fb40b1468", "node_type": "1", "metadata": {}, "hash": "1d21b9b5265d44f04ced5b598a549c7aa0b4975c88ed7b0ec1650ed61456e8ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "113cd6bc-9c5e-4043-97e3-80afe334b3c9", "node_type": "1", "metadata": {}, "hash": "c0e0b8fe8d8e272480b450ab4433c58d3e09b38874a2f20c81dd66f53fefe62d", "class_name": "RelatedNodeInfo"}}, "text": "- `KeyStore.BlockAuthorAccount`: The miner public address should be provided here as well.\n- `Aura.ForceSealing`: `true`\n- `Merge.Enabled`: `false`\n\nHere's an example of above settings in the Energy Web configuration file:\n\n```json title=\"energyweb.cfg\"\n{\n  \"Init\": {\n    \"ChainSpecPath\": \"chainspec/energyweb.json\",\n    \"GenesisHash\": \"0x0b6d3e680af2fc525392c720666cce58e3d8e6fe75ba4b48cb36bcc69039229b\",\n    \"BaseDbPath\": \"nethermind_db/energyweb\",\n    \"LogFileName\": \"energyweb.log\",\n    \"MemoryHint\": 768000000\n  },\n  \"Sync\": {\n    \"FastSync\": true,\n    \"PivotNumber\": 26940000,\n    \"PivotHash\": \"0x8835983de9578a4355313afd2a43d8eada6f2a4ddbd9c51da103e0d5f53c4d8b\",\n    \"PivotTotalDifficulty\": \"9167206964850082205703311924211835616257898274\",\n    \"FastBlocks\": true,\n    \"UseGethLimitsInFastBlocks\": false,\n    \"FastSyncCatchUpHeightDelta\": 10000000000\n  },\n  \"EthStats\": {\n    \"Enabled\": true,\n    \"Name\": \"Nethermind Energy Web\",\n    \"Secret\": \"secret.\",\n    \"Url\": \"ws://localhost:3000/api\"\n  },\n  \"Metrics\": {\n    \"Enabled\": true,\n    \"NodeName\": \"Energy Web\",\n    \"PushGatewayUrl\": \"http://localhost:9091/metrics\"\n  },\n  \"Mining\": {\n    \"MinGasPrice\": 1\n  },\n  \"Merge\": {\n    \"Enabled\": false\n  },\n  \"Aura\": {\n    \"ForceSealing\": true\n  },\n  \"KeyStore\": {\n    \"PasswordFiles\": [\"keystore/password\"],\n    \"UnlockAccounts\": [\"0x.\"],\n    \"BlockAuthorAccount\": \"0x.\" \n  },", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "113cd6bc-9c5e-4043-97e3-80afe334b3c9": {"__data__": {"id_": "113cd6bc-9c5e-4043-97e3-80afe334b3c9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/aura.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8c61042e-106e-4344-8944-9f3fb38ac1b1", "node_type": "4", "metadata": {}, "hash": "6422bdefb2855130a0ad91899bf05f3987192cc39c2b94475fb2a371b8a95ae0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "160897e3-8c5c-4821-b8d3-7e880ced511c", "node_type": "1", "metadata": {}, "hash": "7a65c8624348df4ac337ea7c1de0d75b3847de04e3645ff32ad7d0b93e4739ed", "class_name": "RelatedNodeInfo"}}, "text": "}\n```\n\n## Running the validator\n\nThe above Docker Compose file can be run from the directory the `docker-compose.yml` is located in as follows:\n\n```bash\ndocker compose up -d\n```\n\nTo check the logs and verify the sealing of blocks, run:\n\n```bash\ndocker compose logs -f nethermind-validator\n```", "mimetype": "text/plain", "start_char_idx": 3482, "end_char_idx": 3774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54f4f001-34f4-40a4-8326-bc3049483b5b": {"__data__": {"id_": "54f4f001-34f4-40a4-8326-bc3049483b5b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ecb58a4-58cf-4345-b23c-04f8bbce9dd3", "node_type": "1", "metadata": {}, "hash": "c7c6ce6498a445b36659a5ff640a30c79415cdd816559d04ff2df68e2749fb16", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Metrics\nsidebar_position: 0\ntoc_max_heading_level: 4\n---\n\nCurrently, Nethermind provides the following options to monitor and collect metrics about itself:\n\n- [Grafana and Prometheus](grafana-and-prometheus.md)\n- [dotnet-counters](dotnet-counters.md)\n\n### Parameters by namespace\n\n<!--[start autogen]-->\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Aura\n\n</summary>\n<p>\n\n- **`nethermind_au_ra_step`**\n  \n  Current AuRa step\n\n- **`nethermind_commit_hash_transaction`**\n  \n  RANDAO number of commit hash transactions\n\n- **`nethermind_emit_initiate_change`**\n  \n  POSDAO number of emit init change transactions\n\n- **`nethermind_reported_benign_misbehaviour`**\n  \n  Number of reported benign misbehaviour validators\n\n- **`nethermind_reported_malicious_misbehaviour`**\n  \n  Number of reported malicious misbehaviour validators\n\n- **`nethermind_reveal_number`**\n  \n  RANDAO number of reveal number transactions\n\n- **`nethermind_sealed_transactions`**\n  \n  Number of sealed transactions generated by engine\n\n- **`nethermind_validators_count`**\n  \n  Number of current AuRa validators", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1099, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ecb58a4-58cf-4345-b23c-04f8bbce9dd3": {"__data__": {"id_": "1ecb58a4-58cf-4345-b23c-04f8bbce9dd3", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54f4f001-34f4-40a4-8326-bc3049483b5b", "node_type": "1", "metadata": {}, "hash": "0f89013550570c06a7e8e9720835b269bae8564a0a107493b9bef17421574da9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b3aee40-afc8-4922-8c33-d5e67d4a3122", "node_type": "1", "metadata": {}, "hash": "25988f7bc15296a9223616483e9fc309ca89bc5f392fa221fa369273db00db9b", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Blockchain\n\n</summary>\n<p>\n\n- **`nethermind_best_known_block_number`**\n  \n  The estimated highest block available.\n\n- **`nethermind_blockchain_height`**\n  \n  The current height of the canonical chain.\n\n- **`nethermind_blocks`**\n  \n  Total number of blocks processed\n\n- **`nethermind_blocks_sealed`**\n  \n  Total number of sealed blocks\n\n- **`nethermind_failed_block_seals`**\n  \n  Total number of failed block seals\n\n- **`nethermind_gas_limit`**\n  \n  Gas Limit for processed blocks\n\n- **`nethermind_gas_used`**\n  \n  Gas Used in processed blocks\n\n- **`nethermind_last_difficulty`**\n  \n  Difficulty of the last block\n\n- **`nethermind_mgas`**\n  \n  Total MGas processed\n\n- **`nethermind_mgas_per_sec`**\n  \n  MGas processed per second\n\n- **`nethermind_processing_queue_size`**\n  \n  Number of blocks awaiting for processing.\n\n- **`nethermind_recovery_queue_size`**\n  \n  Number of blocks awaiting for recovery of public keys from signatures.\n\n- **`nethermind_reorganizations`**\n  \n  Total number of chain reorganizations\n\n- **`nethermind_total_difficulty`**\n  \n  Total difficulty on the chain\n\n- **`nethermind_transactions`**\n  \n  Total number of transactions processed", "mimetype": "text/plain", "start_char_idx": 1102, "end_char_idx": 2336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b3aee40-afc8-4922-8c33-d5e67d4a3122": {"__data__": {"id_": "1b3aee40-afc8-4922-8c33-d5e67d4a3122", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ecb58a4-58cf-4345-b23c-04f8bbce9dd3", "node_type": "1", "metadata": {}, "hash": "c7c6ce6498a445b36659a5ff640a30c79415cdd816559d04ff2df68e2749fb16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6528a368-f9c6-4298-b137-e1decfd48cf5", "node_type": "1", "metadata": {}, "hash": "da82d832e295f22c4025116ef670ca616f8b6917b6743606329a2759ce8f2a37", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Db\n\n</summary>\n<p>\n\n- **`nethermind_code_db_cache`**\n  \n  Number of Code DB cache reads.\n\n- **`nethermind_db_block_cache_size`**\n  \n  Database block cache size per database\n\n- **`nethermind_db_compaction_stats`**\n  \n  Metrics extracted from RocksDB Compaction Stats\n\n- **`nethermind_db_index_filter_size`**\n  \n  Database index and filter size per database\n\n- **`nethermind_db_memtable_size`**\n  \n  Database memtable per database\n\n- **`nethermind_db_reads`**\n  \n  Database reads per database\n\n- **`nethermind_db_size`**\n  \n  Database size per database\n\n- **`nethermind_db_stats`**\n  \n  Metrics extracted from RocksDB Compaction Stats and DB Statistics\n\n- **`nethermind_db_writes`**\n  \n  Database writes per database\n\n- **`nethermind_state_db_pruning`**\n  \n  Indicator if StadeDb is being pruned.\n\n- **`nethermind_state_reader_reads`**\n  \n  Number of State Reader reads.\n\n- **`nethermind_state_tree_cache`**\n  \n  Number of State Trie cache hits.\n\n- **`nethermind_state_tree_reads`**\n  \n  Number of State Trie reads.\n\n- **`nethermind_state_tree_writes`**\n  \n  Number of Blocks Trie writes.\n\n- **`nethermind_storage_reader_reads`**\n  \n  Number of storage reader reads.\n\n- **`nethermind_storage_tree_cache`**\n  \n  Number of storage trie cache hits.\n\n- **`nethermind_storage_tree_reads`**\n  \n  Number of storage trie reads.\n\n- **`nethermind_storage_tree_writes`**\n  \n  Number of storage trie writes.\n\n- **`nethermind_thread_local_code_db_cache`**\n  \n  Number of Code DB cache reads on thread.\n\n- **`nethermind_thread_local_state_tree_reads`**\n  \n  Number of State Trie reads on thread.\n\n- **`nethermind_thread_local_storage_tree_reads`**\n  \n  Number of storage trie reads on thread.", "mimetype": "text/plain", "start_char_idx": 2339, "end_char_idx": 4089, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6528a368-f9c6-4298-b137-e1decfd48cf5": {"__data__": {"id_": "6528a368-f9c6-4298-b137-e1decfd48cf5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b3aee40-afc8-4922-8c33-d5e67d4a3122", "node_type": "1", "metadata": {}, "hash": "25988f7bc15296a9223616483e9fc309ca89bc5f392fa221fa369273db00db9b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05ee67e2-7b9d-4103-9edd-db602df79dbd", "node_type": "1", "metadata": {}, "hash": "0f7b9719cb9b68e256fd93bf2c8ea443272ed8f6c8ca9e3ef8aa4d2949185f49", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Evm\n\n</summary>\n<p>\n\n- **`nethermind_blockhash_opcode`**\n  \n  Number of BLOCKHASH opcodes executed.\n\n- **`nethermind_bn254_add_precompile`**\n  \n  Number of BN254_ADD precompile calls.\n\n- **`nethermind_bn254_mul_precompile`**\n  \n  Number of BN254_MUL precompile calls.\n\n- **`nethermind_bn254_pairing_precompile`**\n  \n  Number of BN254_PAIRING precompile calls.\n\n- **`nethermind_calls`**\n  \n  Number of calls to other contracts.\n\n- **`nethermind_contracts_analysed`**\n  \n  Number of contracts' code analysed for jump destinations.\n\n- **`nethermind_creates`**\n  \n  Number of contract create calls.\n\n- **`nethermind_ec_recover_precompile`**\n  \n  Number of EC_RECOVERY precompile calls.\n\n- **`nethermind_empty_calls`**\n  \n  Number of calls made to addresses without code.\n\n- **`nethermind_evm_exceptions`**\n  \n  Number of EVM exceptions thrown by contracts.\n\n- **`nethermind_exp_opcode`**\n  \n  Number of EXP opcodes executed.\n\n- **`nethermind_m_copy_opcode`**\n  \n  Number of MCOPY opcodes executed.\n\n- **`nethermind_mod_exp_precompile`**\n  \n  Number of MODEXP precompile calls.\n\n- **`nethermind_point_evaluation_precompile`**\n  \n  Number of Point Evaluation precompile calls.\n\n- **`nethermind_ripemd160_precompile`**\n  \n  Number of RIPEMD160 precompile calls.\n\n- **`nethermind_secp256r1_precompile`**\n  \n  Number of Secp256r1 precompile calls.\n\n- **`nethermind_self_destructs`**\n  \n  Number of SELFDESTRUCT calls.\n\n- **`nethermind_sha256_precompile`**\n  \n  Number of SHA256 precompile calls.\n\n- **`nethermind_sload_opcode`**\n  \n  Number of SLOAD opcodes executed.\n\n- **`nethermind_sstore_opcode`**\n  \n  Number of SSTORE opcodes executed.\n\n- **`nethermind_thread_local_calls`**\n  \n  Number of calls to other contracts on thread.", "mimetype": "text/plain", "start_char_idx": 4092, "end_char_idx": 5888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05ee67e2-7b9d-4103-9edd-db602df79dbd": {"__data__": {"id_": "05ee67e2-7b9d-4103-9edd-db602df79dbd", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6528a368-f9c6-4298-b137-e1decfd48cf5", "node_type": "1", "metadata": {}, "hash": "da82d832e295f22c4025116ef670ca616f8b6917b6743606329a2759ce8f2a37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ac4b596-cbe4-4aee-970a-42464a04bbcf", "node_type": "1", "metadata": {}, "hash": "8777f3bc4a6b27cb64a1651059561c378273a31e0c467b65786db846f629c72a", "class_name": "RelatedNodeInfo"}}, "text": "- **`nethermind_thread_local_contracts_analysed`**\n  \n  Number of contracts' code analysed for jump destinations on thread.\n\n- **`nethermind_thread_local_creates`**\n  \n  Number of contract create calls on thread.\n\n- **`nethermind_thread_local_empty_calls`**\n  \n  Number of calls made to addresses without code on thread.\n\n- **`nethermind_thread_local_s_load_opcode`**\n  \n  Number of SLOAD opcodes executed on thread.\n\n- **`nethermind_thread_local_s_store_opcode`**\n  \n  Number of SSTORE opcodes executed on thread.\n\n- **`nethermind_tload_opcode`**\n  \n  Number of TLOAD opcodes executed.\n\n- **`nethermind_tstore_opcode`**\n  \n  Number of TSTORE opcodes executed.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### JsonRpc\n\n</summary>\n<p>\n\n- **`nethermind_json_rpc_bytes_received`**\n  \n  Number of JSON RPC bytes received.\n\n- **`nethermind_json_rpc_bytes_sent`**\n  \n  Number of JSON RPC bytes sent.\n\n- **`nethermind_json_rpc_errors`**\n  \n  Number of JSON RPC requests processed with errors.\n\n- **`nethermind_json_rpc_invalid_requests`**\n  \n  Number of JSON RPC requests that were invalid.\n\n- **`nethermind_json_rpc_request_deserialization_failures`**\n  \n  Number of JSON RPC requests that failed JSON deserialization.\n\n- **`nethermind_json_rpc_requests`**\n  \n  Total number of JSON RPC requests received by the node.\n\n- **`nethermind_json_rpc_successes`**\n  \n  Number of JSON RPC requests processed successfully.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Merge\n\n</summary>\n<p>\n\n- **`nethermind_forkchoice_upded_execution_time`**\n  \n  ForkchoiceUpded request execution time\n\n- **`nethermind_get_payload_requests`**\n  \n  Number of GetPayload Requests\n\n- **`nethermind_new_payload_execution_time`**\n  \n  NewPayload request execution time\n\n- **`nethermind_number_of_transactions_in_get_payload`**\n  \n  Number of Transactions included in the Last GetPayload Request", "mimetype": "text/plain", "start_char_idx": 5890, "end_char_idx": 7806, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ac4b596-cbe4-4aee-970a-42464a04bbcf": {"__data__": {"id_": "8ac4b596-cbe4-4aee-970a-42464a04bbcf", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05ee67e2-7b9d-4103-9edd-db602df79dbd", "node_type": "1", "metadata": {}, "hash": "0f7b9719cb9b68e256fd93bf2c8ea443272ed8f6c8ca9e3ef8aa4d2949185f49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f54bdb0-f73b-43b9-a089-1b7c3a33ee57", "node_type": "1", "metadata": {}, "hash": "51a344a2ef8a160ccb1e741507370580f81cfb11558118e1b945917cbbe60b58", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Network\n\n</summary>\n<p>\n\n- **`nethermind_handshakes`**\n  \n  Number of devp2p handshakes\n\n- **`nethermind_handshake_timeouts`**\n  \n  Number of devp2p handshake timeouts\n\n- **`nethermind_incoming_connections`**\n  \n  Number of incoming connection.\n\n- **`nethermind_incoming_p2_p_message_bytes`**\n  \n  Bytes of incoming p2p packets.\n\n- **`nethermind_incoming_p2_p_messages`**\n  \n  Number of incoming p2p packets.\n\n- **`nethermind_local_disconnects_total`**\n  \n  Number of local disconnects\n\n- **`nethermind_outgoing_connections`**\n  \n  Number of outgoing connection.\n\n- **`nethermind_outgoing_p2_p_message_bytes`**\n  \n  Bytes of outgoing p2p packets.\n\n- **`nethermind_outgoing_p2_p_messages`**\n  \n  Number of outgoing p2p packets.\n\n- **`nethermind_peer_limit`**\n  \n  The maximum number of peers this node allows to connect.\n\n- **`nethermind_remote_disconnects_total`**\n  \n  Number of remote disconnects", "mimetype": "text/plain", "start_char_idx": 7809, "end_char_idx": 8781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f54bdb0-f73b-43b9-a089-1b7c3a33ee57": {"__data__": {"id_": "9f54bdb0-f73b-43b9-a089-1b7c3a33ee57", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ac4b596-cbe4-4aee-970a-42464a04bbcf", "node_type": "1", "metadata": {}, "hash": "8777f3bc4a6b27cb64a1651059561c378273a31e0c467b65786db846f629c72a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "222286d5-b1f2-4651-9e5d-00edbc94033f", "node_type": "1", "metadata": {}, "hash": "337a855f2896e2f3caf952624db8a822a6fc8b3afd14443e36c1659ef76c899d", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Pruning\n\n</summary>\n<p>\n\n- **`nethermind_cached_nodes_count`**\n  \n  Nodes that are currently kept in cache (either persisted or not)\n\n- **`nethermind_committed_nodes_count`**\n  \n  Nodes that have been committed since the session start. These nodes may have been pruned, persisted or replaced.\n\n- **`nethermind_deep_pruned_persisted_nodes_count`**\n  \n  Nodes that have been removed from the cache during deep pruning because they have been persisted before.\n\n- **`nethermind_deep_pruning_time`**\n  \n  Time taken by the last deep pruning.\n\n- **`nethermind_last_persisted_block_number`**\n  \n  Last persisted block number (snapshot).\n\n- **`nethermind_loaded_from_cache_nodes_count`**\n  \n  Number of reads from the node cache.\n\n- **`nethermind_loaded_from_db_nodes_count`**\n  \n  Number of DB reads.\n\n- **`nethermind_loaded_from_rlp_cache_nodes_count`**\n  \n  Number of reads from the RLP cache.\n\n- **`nethermind_memory_used_by_cache`**\n  \n  Estimated memory used by cache.\n\n- **`nethermind_persisted_node_count`**\n  \n  Nodes that have been persisted since the session start.\n\n- **`nethermind_pruned_persisted_nodes_count`**\n  \n  Nodes that have been removed from the cache during pruning because they have been persisted before.\n\n- **`nethermind_pruned_transient_nodes_count`**\n  \n  Nodes that have been removed from the cache during pruning because they were no longer needed.\n\n- **`nethermind_pruning_time`**\n  \n  Time taken by the last pruning.\n\n- **`nethermind_removed_node_count`**\n  \n  Nodes that was removed via live pruning.\n\n- **`nethermind_replaced_nodes_count`**\n  \n  Number of nodes that have been exactly the same as other nodes in the cache when committing.\n\n- **`nethermind_snapshot_persistence_time`**\n  \n  Time taken by the last snapshot persistence.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Runner\n\n</summary>\n<p>\n\n- **`nethermind_version`**\n  \n  Version number", "mimetype": "text/plain", "start_char_idx": 8784, "end_char_idx": 10766, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "222286d5-b1f2-4651-9e5d-00edbc94033f": {"__data__": {"id_": "222286d5-b1f2-4651-9e5d-00edbc94033f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f54bdb0-f73b-43b9-a089-1b7c3a33ee57", "node_type": "1", "metadata": {}, "hash": "51a344a2ef8a160ccb1e741507370580f81cfb11558118e1b945917cbbe60b58", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc647d79-f469-4732-b387-beeedbe06235", "node_type": "1", "metadata": {}, "hash": "2d42de5be2885f09a76f4efcb8981fa0be6259491b1dfe71976c76d62e082471", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Synchronization\n\n</summary>\n<p>\n\n- **`nethermind_sync_peers`**\n  \n  Number of sync peers.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Trie\n\n</summary>\n<p>\n\n- **`nethermind_tree_node_hash_calculations`**\n  \n  Number of trie node hash calculations.\n\n- **`nethermind_tree_node_rlp_decodings`**\n  \n  Number of trie node RLP decodings.\n\n- **`nethermind_tree_node_rlp_encodings`**\n  \n  Number of trie node RLP encodings.\n\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### TxPool\n\n</summary>\n<p>\n\n- **`nethermind_blobs_in_block`**\n  \n  Number of blobs in the block.\n\n- **`nethermind_blob_transaction_count`**\n  \n  Number of blob transactions in pool.\n\n- **`nethermind_blob_transactions_in_block`**\n  \n  Number of blob transactions in the block.\n\n- **`nethermind_dark_pool_ratio_level1`**\n  \n  Ratio of transactions in the block absent in hashCache.\n\n- **`nethermind_dark_pool_ratio_level2`**\n  \n  Ratio of transactions in the block absent in pending transactions.\n\n- **`nethermind_eip1559_transactions_ratio`**\n  \n  Ratio of 1559-type transactions in the block.\n\n- **`nethermind_pending1559_transactions_added`**\n  \n  Number of pending 1559-type transactions added to transaction pool.\n\n- **`nethermind_pending_blob_transactions_added`**\n  \n  Number of pending blob-type transactions added to transaction pool.\n\n- **`nethermind_pending_transactions_added`**\n  \n  Number of pending transactions added to transaction pool.\n\n- **`nethermind_pending_transactions_balance_below_value`**\n  \n  Number of pending transactions received that were ignored because balance is less than txn value.\n\n- **`nethermind_pending_transactions_conflicting_tx_type`**\n  \n  Number of transactions rejected because of already pending tx of other type (allowed blob txs or others, not both at once).\n\n- **`nethermind_pending_transactions_discarded`**\n  \n  Number of pending transactions received that were ignored.", "mimetype": "text/plain", "start_char_idx": 10769, "end_char_idx": 12782, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc647d79-f469-4732-b387-beeedbe06235": {"__data__": {"id_": "bc647d79-f469-4732-b387-beeedbe06235", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "222286d5-b1f2-4651-9e5d-00edbc94033f", "node_type": "1", "metadata": {}, "hash": "337a855f2896e2f3caf952624db8a822a6fc8b3afd14443e36c1659ef76c899d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8781e331-8cb1-41ff-827a-ffc5e4e7378b", "node_type": "1", "metadata": {}, "hash": "f6dad7bdd559b2b81aa980b1dc23c715ea643099eac013c1052ada47ece82c93", "class_name": "RelatedNodeInfo"}}, "text": "- **`nethermind_pending_transactions_evicted`**\n  \n  Number of pending transactions evicted from transaction pool.\n\n- **`nethermind_pending_transactions_gas_limit_too_high`**\n  \n  Number of pending transactions received that were ignored because the gas limit was to high for the block.\n\n- **`nethermind_pending_transactions_hashes_received`**\n  \n  Number of hashes of pending transactions received from peers.\n\n- **`nethermind_pending_transactions_hashes_sent`**\n  \n  Number of hashes of pending transactions broadcasted to peers.\n\n- **`nethermind_pending_transactions_known`**\n  \n  Number of already known pending transactions.\n\n- **`nethermind_pending_transactions_low_nonce`**\n  \n  Number of transactions with already used nonce.\n\n- **`nethermind_pending_transactions_malformed`**\n  \n  Number of malformed transactions.\n\n- **`nethermind_pending_transactions_nonce_gap`**\n  \n  Number of pending transactions received that were ignored because of not having preceding nonce of this sender in TxPool.\n\n- **`nethermind_pending_transactions_nonce_too_far_in_future`**\n  \n  Number of transactions with nonce too far in future.\n\n- **`nethermind_pending_transactions_not_supported_tx_type`**\n  \n  Number of pending transactions received that were ignored because of not supported transaction type.\n\n- **`nethermind_pending_transactions_passed_filters_but_cannot_compete_on_fees`**\n  \n  Number of pending transactions received that were ignored after passing early rejections as balance is too low to compete with lowest effective fee in transaction pool.\n\n- **`nethermind_pending_transactions_passed_filters_but_cannot_replace`**\n  \n  Number of pending transactions received that were trying to replace tx with the same sender and nonce and failed.\n\n- **`nethermind_pending_transactions_received`**\n  \n  Number of pending transactions received from peers.\n\n- **`nethermind_pending_transactions_sent`**\n  \n  Number of pending transactions broadcasted to peers.\n\n- **`nethermind_pending_transactions_too_low_balance`**\n  \n  Number of pending transactions received that were ignored because balance too low for fee to be higher than the lowest fee in transaction pool.\n\n- **`nethermind_pending_transactions_too_low_fee`**\n  \n  Number of pending transactions received that were ignored because of fee lower than the lowest fee in transaction pool.", "mimetype": "text/plain", "start_char_idx": 12784, "end_char_idx": 15123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8781e331-8cb1-41ff-827a-ffc5e4e7378b": {"__data__": {"id_": "8781e331-8cb1-41ff-827a-ffc5e4e7378b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/metrics.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef", "node_type": "4", "metadata": {}, "hash": "77f7f7b5057d5c752295ee346f27f621a9b1281d9f85f02d5b2eafe1b5953598", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc647d79-f469-4732-b387-beeedbe06235", "node_type": "1", "metadata": {}, "hash": "2d42de5be2885f09a76f4efcb8981fa0be6259491b1dfe71976c76d62e082471", "class_name": "RelatedNodeInfo"}}, "text": "- **`nethermind_pending_transactions_too_low_priority_fee`**\n  \n  Number of pending transactions received that were ignored because of priority fee lower than minimal requirement.\n\n- **`nethermind_pending_transactions_unresolvable_sender`**\n  \n  Number of pending transactions received that were ignored because the sender couldn't be resolved.\n\n- **`nethermind_pending_transactions_with_expensive_filtering`**\n  \n  Number of pending transactions that reached filters which are resource expensive\n\n- **`nethermind_pending_transactions_zero_balance`**\n  \n  Number of pending transactions received that were ignored because balance is zero and cannot pay gas.\n\n- **`nethermind_transaction_count`**\n  \n  Number of transactions in pool.\n\n\n</p>\n</details>\n\n<!--[end autogen]-->", "mimetype": "text/plain", "start_char_idx": 15125, "end_char_idx": 15897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab4ba967-6daf-4ccf-b6f7-d67fbdade85d": {"__data__": {"id_": "ab4ba967-6daf-4ccf-b6f7-d67fbdade85d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03e2812a-4217-48de-88a3-19da70122ab5", "node_type": "1", "metadata": {}, "hash": "f9d27b2ea8155eca013487d7e9f607c29c1a66a60f6c02ba903de75c6f47563b", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Configuration\nsidebar_position: 1\ntoc_max_heading_level: 4\n---\n\nNethermind is highly configurable. There are 3 ways of configuring it, listed by priority:\n\n- [Command line options](#command-line-options) (aka arguments or flags)\n- [Environment variables](#environment-variables)\n- [Configuration file](#configuration-file)\n\n:::note\nGiven the above priority list, an option defined in a more priority way overrides the same option defined elsewhere if any.\n:::\n\n## Command line options\n\nThe full list of command line options can be displayed by running:\n\n```bash\nnethermind -h\n```\n\nBelow is the list of the basic options followed by an exhaustive list of options by namespace.\n\n:::warning\nThe command line options are case-sensitive and can be defined only once unless stated otherwise.\n:::\n\n### Basic options\n\n- **`-d, --baseDbPath <path>`**\n\n  The path to the Nethermind database directory. Defaults to `db`.\n\n- **`-c, --config <value>`**\n\n  The path to the [configuration file](#configuration-file) or the name (without extension) of any of the configuration files in the configuration directory. Defaults to `mainnet`.\n\n  <details>\n  <summary>Available configurations</summary>\n  <p>\n\n  Nethermind provides the following pre-built configurations named as the networks they are for. Their respective versions for archive nodes are suffixed `_archive`.\n\n  - `base-mainnet` `base-mainnet_archive`\n  - `base-sepolia` `base-sepolia_archive`\n  - `chiado` `chiado_archive`\n  - `energyweb` `energyweb_archive`\n  - `gnosis` `gnosis_archive`\n  - `holesky` `holesky_archive`\n  - `mainnet` `mainnet_archive`\n  - `op-mainnet` `op-mainnet_archive`\n  - `op-sepolia` `op-sepolia_archive`\n  - `sepolia` `sepolia_archive`\n  - `volta` `volta_archive`\n\n  </p>\n  </details>\n\n- **`-cd, --configsDirectory <path>`**\n\n  The path to the configuration files directory. Defaults to `configs`.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03e2812a-4217-48de-88a3-19da70122ab5": {"__data__": {"id_": "03e2812a-4217-48de-88a3-19da70122ab5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab4ba967-6daf-4ccf-b6f7-d67fbdade85d", "node_type": "1", "metadata": {}, "hash": "5bae633bebdc489dfaa896365e7d93ef76e86cd58e2075d498e7bb0fc64bd505", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f2a68b4-cf53-49d1-b6cf-916407b25f7d", "node_type": "1", "metadata": {}, "hash": "acf8cd6ac8503fce514f68dd6999aa162b89521b15993b23157ec6ed5264a198", "class_name": "RelatedNodeInfo"}}, "text": "- **`-dd, --datadir <path>`**\n\n  The path to the Nethermind data directory. Defaults to Nethermind's current directory.\n\n  :::warning\n  The absolute paths set by `Init.BaseDbPath`, `Init.LogDirectory`, or `KeyStore.KeyStoreDirectory` options in a configuration file are not overridden by `--datadir`.\n  :::\n\n- **`-?, -h, --help`**\n\n  Displays the full list of available command line options.\n\n- **`-l, --log <level>`**\n\n  Log level (severity). Allowed values: `TRACE` `DEBUG` `INFO` `WARN` `ERROR` `OFF`. Defaults to `INFO`.\n\n- **`-lcs, --loggerConfigSource <path>`**\n\n  The path to the NLog configuration file. Defaults to `NLog.config`.\n\n- **`-pd, --pluginsDirectory <path>`**\n\n  The path to the Nethermind plugins directory. Defaults to `plugins`.\n\n- **`-v, --version`**\n\n  Displays the Nethermind version info.\n\n### Options by namespaces\n\n<!--[start autogen]-->\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Aura\n\n</summary>\n<p>\n\n- **`--Aura.AllowAuRaPrivateChains <value>`** `NETHERMIND_AURACONFIG_ALLOWAURAPRIVATECHAINS`\n\n  Whether to allow private Aura-based chains only. Do not use with existing Aura-based chains. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Aura.ForceSealing <value>`** `NETHERMIND_AURACONFIG_FORCESEALING`\n\n  Whether to seal empty blocks if mining. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Aura.Minimum2MlnGasPerBlockWhenUsingBlockGasLimitContract <value>`** `NETHERMIND_AURACONFIG_MINIMUM2MLNGASPERBLOCKWHENUSINGBLOCKGASLIMITCONTRACT`\n\n  Whether to use 2M gas if the contract returns less than that when using `BlockGasLimitContractTransitions`. Allowed values: `true` `false`. Defaults to `false`.", "mimetype": "text/plain", "start_char_idx": 1881, "end_char_idx": 3555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f2a68b4-cf53-49d1-b6cf-916407b25f7d": {"__data__": {"id_": "2f2a68b4-cf53-49d1-b6cf-916407b25f7d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03e2812a-4217-48de-88a3-19da70122ab5", "node_type": "1", "metadata": {}, "hash": "f9d27b2ea8155eca013487d7e9f607c29c1a66a60f6c02ba903de75c6f47563b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b8beeec3-a3f4-40f3-9302-2125d780627e", "node_type": "1", "metadata": {}, "hash": "65d78b1e4ff463a848d4c5fc35d6bdc7a533ad635f8749bbfe9ca083359c5cc9", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Aura.TxPriorityConfigFilePath <value>`** `NETHERMIND_AURACONFIG_TXPRIORITYCONFIGFILEPATH`\n\n  The path to the transaction priority rules file to use when selecting transactions from the transaction pool. Defaults to `null`.\n\n- **`--Aura.TxPriorityContractAddress <value>`** `NETHERMIND_AURACONFIG_TXPRIORITYCONTRACTADDRESS`\n\n  The address of the transaction priority contract to use when selecting transactions from the transaction pool. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Blocks\n\n</summary>\n<p>\n\n- **`--Blocks.ExtraData <value>`** `NETHERMIND_BLOCKSCONFIG_EXTRADATA`\n\n  The block header extra data up to 32 bytes in length. Defaults to `Nethermind`.\n\n- **`--Blocks.MinGasPrice <value>`** `NETHERMIND_BLOCKSCONFIG_MINGASPRICE`\n\n  The minimum gas premium (or the gas price before the London hard fork) for transactions accepted by the block producer. Defaults to `1`.\n\n- **`--Blocks.PreWarmStateOnBlockProcessing <value>`** `NETHERMIND_BLOCKSCONFIG_PREWARMSTATEONBLOCKPROCESSING`\n\n  Try to pre-warm the state when processing blocks. Can lead to 2x speedup in main loop block processing. Allowed values: `true` `false`. Defaults to `True`.\n\n- **`--Blocks.RandomizedBlocks <value>`** `NETHERMIND_BLOCKSCONFIG_RANDOMIZEDBLOCKS`\n\n  Whether to change the difficulty of the block randomly within the constraints. Used in NethDev only. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Blocks.SecondsPerSlot <value>`** `NETHERMIND_BLOCKSCONFIG_SECONDSPERSLOT`\n\n  The block time slot, in seconds. Defaults to `12`.\n\n- **`--Blocks.TargetBlockGasLimit <value>`** `NETHERMIND_BLOCKSCONFIG_TARGETBLOCKGASLIMIT`\n\n  The block gas limit that the block producer should try to reach in the fastest possible way based on the protocol rules. If not specified, then the block producer should follow others. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 3557, "end_char_idx": 5439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8beeec3-a3f4-40f3-9302-2125d780627e": {"__data__": {"id_": "b8beeec3-a3f4-40f3-9302-2125d780627e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f2a68b4-cf53-49d1-b6cf-916407b25f7d", "node_type": "1", "metadata": {}, "hash": "acf8cd6ac8503fce514f68dd6999aa162b89521b15993b23157ec6ed5264a198", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17a68b79-5cf0-4498-a908-ce6fbb252de0", "node_type": "1", "metadata": {}, "hash": "ff0bc324130ea8321a070c564ee6982cb80c6a155f3ff7f4a904c8c61739a793", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Bloom\n\n</summary>\n<p>\n\n- **`--Bloom.Index <value>`** `NETHERMIND_BLOOMCONFIG_INDEX`\n\n  Whether to use the Bloom index. The Bloom index speeds up the RPC log searches. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Bloom.IndexLevelBucketSizes <value>`** `NETHERMIND_BLOOMCONFIG_INDEXLEVELBUCKETSIZES`\n\n  An array of multipliers for index levels. Can be tweaked per chain to boost performance. Defaults to `[4, 8, 8]`.\n\n- **`--Bloom.Migration <value>`** `NETHERMIND_BLOOMCONFIG_MIGRATION`\n\n  Whether to migrate the previously downloaded blocks to the Bloom index. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Bloom.MigrationStatistics <value>`** `NETHERMIND_BLOOMCONFIG_MIGRATIONSTATISTICS`\n\n  Whether the migration statistics should be calculated and output. Allowed values: `true` `false`. Defaults to `false`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### EthStats\n\n</summary>\n<p>\n\n- **`--EthStats.Contact <value>`** `NETHERMIND_ETHSTATSCONFIG_CONTACT`\n\n  The node owner contact details displayed on Ethstats. Defaults to `hello@nethermind.io`.\n\n- **`--EthStats.Enabled <value>`** `NETHERMIND_ETHSTATSCONFIG_ENABLED`\n\n  Whether to use Ethstats publishing. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--EthStats.Name <value>`** `NETHERMIND_ETHSTATSCONFIG_NAME`\n\n  The node name displayed on Ethstats. Defaults to `Nethermind`.\n\n- **`--EthStats.Secret <value>`** `NETHERMIND_ETHSTATSCONFIG_SECRET`\n\n  The Ethstats secret. Defaults to `secret`.\n\n- **`--EthStats.SendInterval <value>`** `NETHERMIND_ETHSTATSCONFIG_SENDINTERVAL`\n\n  The stats update interval, in seconds. Defaults to `15`.", "mimetype": "text/plain", "start_char_idx": 5441, "end_char_idx": 7172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17a68b79-5cf0-4498-a908-ce6fbb252de0": {"__data__": {"id_": "17a68b79-5cf0-4498-a908-ce6fbb252de0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b8beeec3-a3f4-40f3-9302-2125d780627e", "node_type": "1", "metadata": {}, "hash": "65d78b1e4ff463a848d4c5fc35d6bdc7a533ad635f8749bbfe9ca083359c5cc9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b149ec91-6302-447c-b50c-2f9ab916b601", "node_type": "1", "metadata": {}, "hash": "7340dda8f2551af82663c844790073edb574cc0035cf36390296ce0e86026f24", "class_name": "RelatedNodeInfo"}}, "text": "- **`--EthStats.Server <value>`** `NETHERMIND_ETHSTATSCONFIG_SERVER`\n\n  The Ethstats server URL. Defaults to `ws://localhost:3000/api`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### HealthChecks\n\n</summary>\n<p>\n\n- **`--HealthChecks.Enabled <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_ENABLED`\n\n  Whether to enable the health check. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.LowStorageCheckAwaitOnStartup <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_LOWSTORAGECHECKAWAITONSTARTUP`\n\n  Whether to check for low disk space on startup and suspend until enough space is available. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.LowStorageSpaceShutdownThreshold <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_LOWSTORAGESPACESHUTDOWNTHRESHOLD`\n\n  The percentage of available disk space below which Nethermind shuts down. `0` to disable. Defaults to `1`.\n\n- **`--HealthChecks.LowStorageSpaceWarningThreshold <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_LOWSTORAGESPACEWARNINGTHRESHOLD`\n\n  The percentage of available disk space below which a warning is displayed. `0` to disable. Defaults to `5`.\n\n- **`--HealthChecks.MaxIntervalClRequestTime <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_MAXINTERVALCLREQUESTTIME`\n\n  The max request interval, in seconds, in which the consensus client is assumed healthy. Defaults to `300`.\n\n- **`--HealthChecks.MaxIntervalWithoutProcessedBlock <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_MAXINTERVALWITHOUTPROCESSEDBLOCK`\n\n  The max interval, in seconds, in which the block processing is assumed healthy. Defaults to `null`.\n\n- **`--HealthChecks.MaxIntervalWithoutProducedBlock <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_MAXINTERVALWITHOUTPRODUCEDBLOCK`\n\n  The max interval, in seconds, in which the block production is assumed healthy. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 7174, "end_char_idx": 9024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b149ec91-6302-447c-b50c-2f9ab916b601": {"__data__": {"id_": "b149ec91-6302-447c-b50c-2f9ab916b601", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17a68b79-5cf0-4498-a908-ce6fbb252de0", "node_type": "1", "metadata": {}, "hash": "ff0bc324130ea8321a070c564ee6982cb80c6a155f3ff7f4a904c8c61739a793", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90bd36bb-ca82-43be-b919-6d9a0ceb90c9", "node_type": "1", "metadata": {}, "hash": "3834dd7ba033faad9056178607def9b4f2dc940cfa2551fcc847d077e7179890", "class_name": "RelatedNodeInfo"}}, "text": "- **`--HealthChecks.PollingInterval <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_POLLINGINTERVAL`\n\n  The health check updates polling interval, in seconds. Defaults to `5`.\n\n- **`--HealthChecks.Slug <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_SLUG`\n\n  The URL slug the health checks service is exposed at. Defaults to `/health`.\n\n- **`--HealthChecks.UIEnabled <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_UIENABLED`\n\n  Whether to enable the health checks UI. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.WebhooksEnabled <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSENABLED`\n\n  Whether to enable web hooks. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--HealthChecks.WebhooksPayload <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSPAYLOAD`\n\n  An escaped JSON paylod to be sent to the web hook on failure.\n  Defaults to:\n\n  ```json\n  {\n    \"attachments\": [\n      {\n        \"color\": \"#FFCC00\",\n        \"pretext\": \"Health Check Status :warning:\",\n        \"fields\": [\n          {\n            \"title\": \"Details\",\n            \"value\": \"More details available at /healthchecks-ui\",\n            \"short\": false\n          },\n          {\n            \"title\": \"Description\",\n            \"value\": \"[[DESCRIPTIONS]]\",\n            \"short\": false\n          }\n        ]\n      }\n    ]\n  }\n  ```", "mimetype": "text/plain", "start_char_idx": 9026, "end_char_idx": 10343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90bd36bb-ca82-43be-b919-6d9a0ceb90c9": {"__data__": {"id_": "90bd36bb-ca82-43be-b919-6d9a0ceb90c9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b149ec91-6302-447c-b50c-2f9ab916b601", "node_type": "1", "metadata": {}, "hash": "7340dda8f2551af82663c844790073edb574cc0035cf36390296ce0e86026f24", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5fdc879d-08b7-446c-95ed-755439b6d2b6", "node_type": "1", "metadata": {}, "hash": "aef7c0f09aac41d3e6131e8025b5c54838d810233022f695c0d3320714cd0f47", "class_name": "RelatedNodeInfo"}}, "text": "- **`--HealthChecks.WebhooksRestorePayload <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSRESTOREPAYLOAD`\n\n  An escaped JSON paylod to be sent to the web hook on recovery.\n  Defaults to:\n\n  ```json\n  {\n    \"attachments\": [\n      {\n        \"color\": \"#36a64f\",\n        \"pretext\": \"Health Check Status :+1:\",\n        \"fields\": [\n          {\n            \"title\": \"Details\",\n            \"value\": \"More details available at /healthchecks-ui\",\n            \"short\": false\n          },\n          {\n            \"title\": \"description\",\n            \"value\": \"The HealthCheck `[[LIVENESS]]` is recovered. Everything is up and running.\",\n            \"short\": false\n          }\n        ]\n      }\n    ]\n  }\n  ```\n\n\n- **`--HealthChecks.WebhooksUri <value>`** `NETHERMIND_HEALTHCHECKSCONFIG_WEBHOOKSURI`\n\n  The web hook URL. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Hive\n\n</summary>\n<p>\n\n- **`--Hive.BlocksDir <value>`** `NETHERMIND_HIVECONFIG_BLOCKSDIR`\n\n  The path to the directory with additional blocks. Defaults to `/blocks`.\n\n- **`--Hive.ChainFile <value>`** `NETHERMIND_HIVECONFIG_CHAINFILE`\n\n  The path to the test chain spec file. Defaults to `/chain.rlp`.\n\n- **`--Hive.Enabled <value>`** `NETHERMIND_HIVECONFIG_ENABLED`\n\n  Whether to enable Hive for debugging. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Hive.GenesisFilePath <value>`** `NETHERMIND_HIVECONFIG_GENESISFILEPATH`\n\n  The path to the genesis block file. Defaults to `/genesis.json`.\n\n- **`--Hive.KeysDir <value>`** `NETHERMIND_HIVECONFIG_KEYSDIR`\n\n  The path to the keystore directory. Defaults to `/keys`.", "mimetype": "text/plain", "start_char_idx": 10346, "end_char_idx": 11980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fdc879d-08b7-446c-95ed-755439b6d2b6": {"__data__": {"id_": "5fdc879d-08b7-446c-95ed-755439b6d2b6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90bd36bb-ca82-43be-b919-6d9a0ceb90c9", "node_type": "1", "metadata": {}, "hash": "3834dd7ba033faad9056178607def9b4f2dc940cfa2551fcc847d077e7179890", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "496e384e-dc6e-4e0d-a112-03f7fce779df", "node_type": "1", "metadata": {}, "hash": "63346332af3e4b5b9355e59eae6ade37a684aecaa47784da91b8b653ba06138d", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Init\n\n</summary>\n<p>\n\n- **`--Init.AutoDump <value>`** `NETHERMIND_INITCONFIG_AUTODUMP`\n\n  Auto-dump on bad blocks for diagnostics. `Default` combines `Receipts` and `Rlp`.\n\n  Allowed values:\n\n    - `None`\n    - `Receipts`\n    - `Parity`\n    - `Geth`\n    - `Rlp`\n    - `RlpLog`\n    - `Default`\n    - `All`\n\n  Defaults to `Default`.\n\n- **`--Init.BadBlocksStored <value>`** `NETHERMIND_INITCONFIG_BADBLOCKSSTORED`\n\n  The maximum number of bad blocks observed on the network that will be stored on disk. Defaults to `100`.\n\n- **`--Init.BaseDbPath <value>`** `NETHERMIND_INITCONFIG_BASEDBPATH`\n\n  The base path for all Nethermind databases. Defaults to `db`.\n\n- **`--Init.ChainSpecPath <value>`** `NETHERMIND_INITCONFIG_CHAINSPECPATH`\n\n  The path to the chain spec file. Defaults to `chainspec/foundation.json`.\n\n- **`--Init.DiagnosticMode <value>`** `NETHERMIND_INITCONFIG_DIAGNOSTICMODE`\n\n  The diagnostic mode.\n\n  Allowed values:\n\n    - `None`\n    - `MemDb`\n    - `RpcDb`\n    - `ReadOnlyDb`\n    - `VerifyRewards`\n    - `VerifySupply`\n    - `VerifyTrie`\n\n  Defaults to `None`.\n\n- **`--Init.DiscoveryEnabled <value>`** `NETHERMIND_INITCONFIG_DISCOVERYENABLED`\n\n  Whether to enable the node discovery. If disabled, Nethermind doesn't look for other nodes beyond the bootnodes specified. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Init.EnableUnsecuredDevWallet <value>`** `NETHERMIND_INITCONFIG_ENABLEUNSECUREDDEVWALLET`\n\n  Whether to enable the in-app wallet/keystore. Allowed values: `true` `false`. Defaults to `false`.", "mimetype": "text/plain", "start_char_idx": 11982, "end_char_idx": 13589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "496e384e-dc6e-4e0d-a112-03f7fce779df": {"__data__": {"id_": "496e384e-dc6e-4e0d-a112-03f7fce779df", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5fdc879d-08b7-446c-95ed-755439b6d2b6", "node_type": "1", "metadata": {}, "hash": "aef7c0f09aac41d3e6131e8025b5c54838d810233022f695c0d3320714cd0f47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd241b06-8b68-4163-8397-3c89ffa258ed", "node_type": "1", "metadata": {}, "hash": "e808d8766732aba58fdf3de3aab3964002eebdd014bffa5720e524e3555f5e31", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Init.GenesisHash <value>`** `NETHERMIND_INITCONFIG_GENESISHASH`\n\n  The hash of the genesis block. If not specified, the genesis block validity is not checked which is useful in the case of ad hoc test/private networks. Defaults to `null`.\n\n- **`--Init.HiveChainSpecPath <value>`** `NETHERMIND_INITCONFIG_HIVECHAINSPECPATH`\n\n  The path to the chain spec file for Hive tests. Defaults to `chainspec/test.json`.\n\n- **`--Init.IsMining <value>`** `NETHERMIND_INITCONFIG_ISMINING`\n\n  Whether to seal/mine new blocks. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Init.KeepDevWalletInMemory <value>`** `NETHERMIND_INITCONFIG_KEEPDEVWALLETINMEMORY`\n\n  Whether to create session-only accounts and delete them on shutdown. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Init.KzgSetupPath <value>`** `NETHERMIND_INITCONFIG_KZGSETUPPATH`\n\n  The path to KZG trusted setup file. Defaults to `null`.\n\n- **`--Init.LogDirectory <value>`** `NETHERMIND_INITCONFIG_LOGDIRECTORY`\n\n  The path to the Nethermind logs directory. Defaults to `logs`.\n\n- **`--Init.LogFileName <value>`** `NETHERMIND_INITCONFIG_LOGFILENAME`\n\n  The name of the log file. Defaults to `log.txt`.\n\n- **`--Init.LogRules <value>`** `NETHERMIND_INITCONFIG_LOGRULES`\n\n  The logs format as `LogPath:LogLevel;*` Defaults to `null`.\n\n- **`--Init.MemoryHint <value>`** `NETHERMIND_INITCONFIG_MEMORYHINT`\n\n  The hint on the max memory limit, in bytes, to configure the database and networking memory allocations. Defaults to `null`.\n\n- **`--Init.PeerManagerEnabled <value>`** `NETHERMIND_INITCONFIG_PEERMANAGERENABLED`\n\n  Whether to connect to newly discovered peers. Allowed values: `true` `false`. Defaults to `true`.", "mimetype": "text/plain", "start_char_idx": 13591, "end_char_idx": 15289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd241b06-8b68-4163-8397-3c89ffa258ed": {"__data__": {"id_": "cd241b06-8b68-4163-8397-3c89ffa258ed", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "496e384e-dc6e-4e0d-a112-03f7fce779df", "node_type": "1", "metadata": {}, "hash": "63346332af3e4b5b9355e59eae6ade37a684aecaa47784da91b8b653ba06138d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1416434-ddd6-47ab-bff6-c90f2dbf0b2e", "node_type": "1", "metadata": {}, "hash": "c3c7bb0280607e733de4d9f6d7908db304e8ca48a76602ad9c072caa1b71d540", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Init.ProcessingEnabled <value>`** `NETHERMIND_INITCONFIG_PROCESSINGENABLED`\n\n  Whether to download/process new blocks. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Init.RpcDbUrl <value>`** `NETHERMIND_INITCONFIG_RPCDBURL`\n\n  The URL of the remote node used as a database source when `DiagnosticMode` is set to `RpcDb`.\n\n- **`--Init.StaticNodesPath <value>`** `NETHERMIND_INITCONFIG_STATICNODESPATH`\n\n  The path to the static nodes file. Defaults to `Data/static-nodes.json`.\n\n- **`--Init.WebSocketsEnabled <value>`** `NETHERMIND_INITCONFIG_WEBSOCKETSENABLED`\n\n  Whether to enable WebSocket service for the default JSON-RPC port on startup. Allowed values: `true` `false`. Defaults to `true`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### JsonRpc\n\n</summary>\n<p>\n\n- **`--JsonRpc.AdditionalRpcUrls <value>`** `NETHERMIND_JSONRPCCONFIG_ADDITIONALRPCURLS`\n\n  An array of additional JSON-RPC URLs to listen at with protocol and JSON-RPC namespace list. For instance, `[http://localhost:8546|http;ws|eth;web3]`. Defaults to `[]`.\n\n- **`--JsonRpc.BufferResponses <value>`** `NETHERMIND_JSONRPCCONFIG_BUFFERRESPONSES`\n\n  Whether to buffer responses before sending them. This allows using of `Content-Length` instead of `Transfer-Encoding: chunked`. Note that it may degrade performance on large responses. The max buffered response length is 2GB. Chunked responses can be larger. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--JsonRpc.CallsFilterFilePath <value>`** `NETHERMIND_JSONRPCCONFIG_CALLSFILTERFILEPATH`\n\n  The path to a file with the list of new-line-separated JSON-RPC calls. If specified, only the calls from that file are allowed. Defaults to `Data/jsonrpc.filter`.", "mimetype": "text/plain", "start_char_idx": 15291, "end_char_idx": 17026, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1416434-ddd6-47ab-bff6-c90f2dbf0b2e": {"__data__": {"id_": "c1416434-ddd6-47ab-bff6-c90f2dbf0b2e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd241b06-8b68-4163-8397-3c89ffa258ed", "node_type": "1", "metadata": {}, "hash": "e808d8766732aba58fdf3de3aab3964002eebdd014bffa5720e524e3555f5e31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d620e21-e8f6-4510-82ae-f696c714e7b7", "node_type": "1", "metadata": {}, "hash": "85247e2d4af59180db173824d0fe305cec0b930dfac3305fc50efddd0ce9c7f7", "class_name": "RelatedNodeInfo"}}, "text": "- **`--JsonRpc.Enabled <value>`** `NETHERMIND_JSONRPCCONFIG_ENABLED`\n\n  Whether to enable the JSON-RPC service. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--JsonRpc.EnabledModules <value>`** `NETHERMIND_JSONRPCCONFIG_ENABLEDMODULES`\n\n  An array of JSON-RPC namespaces to enable. For instance, `[debug,eth]`.\n  \n  Built-in namespaces:\n  \n  - `admin`\n  - `client`\n  - `debug`\n  - `engine`\n  - `eth`\n  - `evm`\n  - `health`\n  - `net`\n  - `parity`\n  - `personal`\n  - `proof`\n  - `rpc`\n  - `subscribe`\n  - `trace`\n  - `txpool`\n  - `web3`\n  \n  Defaults to `[Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc]`.\n\n- **`--JsonRpc.EngineEnabledModules <value>`** `NETHERMIND_JSONRPCCONFIG_ENGINEENABLEDMODULES`\n\n  An array of additional JSON-RPC URLs to listen at with protocol and JSON-RPC namespace list for Engine API. Defaults to `[Net,Eth,Subscribe,Web3]`.\n\n- **`--JsonRpc.EngineHost <value>`** `NETHERMIND_JSONRPCCONFIG_ENGINEHOST`\n\n  The Engine API host. Defaults to `127.0.0.1`.\n\n- **`--JsonRpc.EnginePort <value>`** `NETHERMIND_JSONRPCCONFIG_ENGINEPORT`\n\n  The Engine API port. Defaults to `null`.\n\n- **`--JsonRpc.EstimateErrorMargin <value>`** `NETHERMIND_JSONRPCCONFIG_ESTIMATEERRORMARGIN`\n\n  The error margin used in eth_estimateGas expressed in basis points. Defaults to `150`.", "mimetype": "text/plain", "start_char_idx": 17028, "end_char_idx": 18342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d620e21-e8f6-4510-82ae-f696c714e7b7": {"__data__": {"id_": "7d620e21-e8f6-4510-82ae-f696c714e7b7", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1416434-ddd6-47ab-bff6-c90f2dbf0b2e", "node_type": "1", "metadata": {}, "hash": "c3c7bb0280607e733de4d9f6d7908db304e8ca48a76602ad9c072caa1b71d540", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b22ac79a-1d5d-44bd-8b29-665bb0842959", "node_type": "1", "metadata": {}, "hash": "14d89235781bfcb92b3c12b3b1f002f986961d8a5065b8f556500c49e53a92b5", "class_name": "RelatedNodeInfo"}}, "text": "- **`--JsonRpc.EthModuleConcurrentInstances <value>`** `NETHERMIND_JSONRPCCONFIG_ETHMODULECONCURRENTINSTANCES`\n\n  The number of concurrent instances for non-sharable calls:\n  \n  - `eth_call`\n  - `eth_estimateGas`\n  - `eth_getLogs`\n  - `eth_newBlockFilter`\n  - `eth_newFilter`\n  - `eth_newPendingTransactionFilter`\n  - `eth_uninstallFilter`\n  \n  This limits the load on the CPU and I/O to reasonable levels. If the limit is exceeded, HTTP 503 is returned along with the JSON-RPC error. Defaults to the number of logical processors.\n\n- **`--JsonRpc.GasCap <value>`** `NETHERMIND_JSONRPCCONFIG_GASCAP`\n\n  The gas limit for `eth_call` and `eth_estimateGas`. Defaults to `100000000`.\n\n- **`--JsonRpc.Host <value>`** `NETHERMIND_JSONRPCCONFIG_HOST`\n\n  The JSON-RPC service host. Defaults to `127.0.0.1`.\n\n- **`--JsonRpc.IpcUnixDomainSocketPath <value>`** `NETHERMIND_JSONRPCCONFIG_IPCUNIXDOMAINSOCKETPATH`\n\n  The path to connect a UNIX domain socket over.\n\n- **`--JsonRpc.JwtSecretFile <value>`** `NETHERMIND_JSONRPCCONFIG_JWTSECRETFILE`\n\n  The path to the JWT secret file required for the Engine API authentication. Defaults to `keystore/jwt-secret`.\n\n- **`--JsonRpc.MaxBatchResponseBodySize <value>`** `NETHERMIND_JSONRPCCONFIG_MAXBATCHRESPONSEBODYSIZE`\n\n  The max batch size limit for batched JSON-RPC calls. Defaults to `33554432`.\n\n- **`--JsonRpc.MaxBatchSize <value>`** `NETHERMIND_JSONRPCCONFIG_MAXBATCHSIZE`\n\n  The max number of JSON-RPC requests in a batch. Defaults to `1024`.\n\n- **`--JsonRpc.MaxLoggedRequestParametersCharacters <value>`** `NETHERMIND_JSONRPCCONFIG_MAXLOGGEDREQUESTPARAMETERSCHARACTERS`\n\n  The max number of characters of a JSON-RPC request parameter printing to the log. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 18344, "end_char_idx": 20057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b22ac79a-1d5d-44bd-8b29-665bb0842959": {"__data__": {"id_": "b22ac79a-1d5d-44bd-8b29-665bb0842959", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d620e21-e8f6-4510-82ae-f696c714e7b7", "node_type": "1", "metadata": {}, "hash": "85247e2d4af59180db173824d0fe305cec0b930dfac3305fc50efddd0ce9c7f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2619e9fa-e622-4e99-a5e8-1d3f7794da6d", "node_type": "1", "metadata": {}, "hash": "3b58fa8c35db7b2b357355ce19db693e286cacb06279cec6647a1733272af56c", "class_name": "RelatedNodeInfo"}}, "text": "- **`--JsonRpc.MaxLogsPerResponse <value>`** `NETHERMIND_JSONRPCCONFIG_MAXLOGSPERRESPONSE`\n\n  The max number of logs per response. For method `eth_getLogs`. If 0 then no limit. Defaults to `20000`.\n\n- **`--JsonRpc.MaxRequestBodySize <value>`** `NETHERMIND_JSONRPCCONFIG_MAXREQUESTBODYSIZE`\n\n  The max length of HTTP request body, in bytes. Defaults to `30000000`.\n\n- **`--JsonRpc.MaxSimulateBlocksCap <value>`** `NETHERMIND_JSONRPCCONFIG_MAXSIMULATEBLOCKSCAP`\n\n  The max blocks count limit for eth_simulate JSON-RPC calls. Defaults to `256`.\n\n- **`--JsonRpc.MethodsLoggingFiltering <value>`** `NETHERMIND_JSONRPCCONFIG_METHODSLOGGINGFILTERING`\n\n  An array of the method names not to log. Defaults to `[engine_newPayloadV1,engine_newPayloadV2,engine_newPayloadV3,engine_forkchoiceUpdatedV1,engine_forkchoiceUpdatedV2]`.\n\n- **`--JsonRpc.Port <value>`** `NETHERMIND_JSONRPCCONFIG_PORT`\n\n  The JSON-RPC service HTTP port. Defaults to `8545`.\n\n- **`--JsonRpc.ReportIntervalSeconds <value>`** `NETHERMIND_JSONRPCCONFIG_REPORTINTERVALSECONDS`\n\n  The interval, in seconds, between the JSON-RPC stats report log. Defaults to `300`.\n\n- **`--JsonRpc.RequestQueueLimit <value>`** `NETHERMIND_JSONRPCCONFIG_REQUESTQUEUELIMIT`\n\n  The max number of concurrent requests in the queue for:\n  \n  - `eth_call`\n  - `eth_estimateGas`\n  - `eth_getLogs`\n  - `eth_newFilter`\n  - `eth_newBlockFilter`\n  - `eth_newPendingTransactionFilter`\n  - `eth_uninstallFilter`\n  \n  `0` to lift the limit. Defaults to `500`.\n\n- **`--JsonRpc.RpcRecorderBaseFilePath <value>`** `NETHERMIND_JSONRPCCONFIG_RPCRECORDERBASEFILEPATH`\n\n  The path to the base file for diagnostic recording.", "mimetype": "text/plain", "start_char_idx": 20059, "end_char_idx": 21701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2619e9fa-e622-4e99-a5e8-1d3f7794da6d": {"__data__": {"id_": "2619e9fa-e622-4e99-a5e8-1d3f7794da6d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b22ac79a-1d5d-44bd-8b29-665bb0842959", "node_type": "1", "metadata": {}, "hash": "14d89235781bfcb92b3c12b3b1f002f986961d8a5065b8f556500c49e53a92b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c2b7a65-4403-4b90-8fc6-b5269a1f9806", "node_type": "1", "metadata": {}, "hash": "e13ea37e0cd94b7a1ff3deb09f1e1c4f8360e3c95d76ad72db9a145efb63115b", "class_name": "RelatedNodeInfo"}}, "text": "Defaults to `logs/rpc.{counter}.txt`.\n\n- **`--JsonRpc.RpcRecorderState <value>`** `NETHERMIND_JSONRPCCONFIG_RPCRECORDERSTATE`\n\n  The diagnostic recording mode.\n\n  Allowed values:\n\n    - `None`\n    - `Request`\n    - `Response`\n    - `All`\n\n  Defaults to `None`.\n\n- **`--JsonRpc.Timeout <value>`** `NETHERMIND_JSONRPCCONFIG_TIMEOUT`\n\n  The request timeout, in milliseconds. Defaults to `20000`.\n\n- **`--JsonRpc.WebSocketsPort <value>`** `NETHERMIND_JSONRPCCONFIG_WEBSOCKETSPORT`\n\n  The JSON-RPC service WebSockets port. Defaults to `8545`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### KeyStore\n\n</summary>\n<p>\n\n- **`--KeyStore.BlockAuthorAccount <value>`** `NETHERMIND_KEYSTORECONFIG_BLOCKAUTHORACCOUNT`\n\n  An account to use as the block author (coinbase).\n\n- **`--KeyStore.Cipher <value>`** `NETHERMIND_KEYSTORECONFIG_CIPHER`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `aes-128-ctr`.\n\n- **`--KeyStore.EnodeAccount <value>`** `NETHERMIND_KEYSTORECONFIG_ENODEACCOUNT`\n\n  An account to use for networking (enode). If neither this nor the `EnodeKeyFile` option is specified, the key is autogenerated in `node.key.plain` file.\n\n- **`--KeyStore.EnodeKeyFile <value>`** `NETHERMIND_KEYSTORECONFIG_ENODEKEYFILE`\n\n  The path to the key file to use by for networking (enode). If neither this nor the `EnodeAccount` is specified, the key is autogenerated in `node.key.plain` file.\n\n- **`--KeyStore.IVSize <value>`** `NETHERMIND_KEYSTORECONFIG_IVSIZE`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `16`.\n\n- **`--KeyStore.Kdf <value>`** `NETHERMIND_KEYSTORECONFIG_KDF`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `scrypt`.", "mimetype": "text/plain", "start_char_idx": 21702, "end_char_idx": 23429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c2b7a65-4403-4b90-8fc6-b5269a1f9806": {"__data__": {"id_": "1c2b7a65-4403-4b90-8fc6-b5269a1f9806", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2619e9fa-e622-4e99-a5e8-1d3f7794da6d", "node_type": "1", "metadata": {}, "hash": "3b58fa8c35db7b2b357355ce19db693e286cacb06279cec6647a1733272af56c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ff1f568-c8ff-4341-8e0c-8ebb615af9ec", "node_type": "1", "metadata": {}, "hash": "b1d673a7d7037590b5511f0cd42bb67d025697476780d62228819f5b87645db8", "class_name": "RelatedNodeInfo"}}, "text": "- **`--KeyStore.KdfparamsDklen <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSDKLEN`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `32`.\n\n- **`--KeyStore.KdfparamsN <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSN`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `262144`.\n\n- **`--KeyStore.KdfparamsP <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSP`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `1`.\n\n- **`--KeyStore.KdfparamsR <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSR`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `8`.\n\n- **`--KeyStore.KdfparamsSaltLen <value>`** `NETHERMIND_KEYSTORECONFIG_KDFPARAMSSALTLEN`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `32`.\n\n- **`--KeyStore.KeyStoreDirectory <value>`** `NETHERMIND_KEYSTORECONFIG_KEYSTOREDIRECTORY`\n\n  The path to the keystore directory. Defaults to `keystore`.\n\n- **`--KeyStore.KeyStoreEncoding <value>`** `NETHERMIND_KEYSTORECONFIG_KEYSTOREENCODING`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `UTF-8`.\n\n- **`--KeyStore.PasswordFiles <value>`** `NETHERMIND_KEYSTORECONFIG_PASSWORDFILES`\n\n  An array of password files paths used to unlock the accounts set with `UnlockAccounts`. Defaults to `[]`.\n\n- **`--KeyStore.Passwords <value>`** `NETHERMIND_KEYSTORECONFIG_PASSWORDS`\n\n  An array of passwords used to unlock the accounts set with `UnlockAccounts`. Defaults to `[]`.\n\n- **`--KeyStore.SymmetricEncrypterBlockSize <value>`** `NETHERMIND_KEYSTORECONFIG_SYMMETRICENCRYPTERBLOCKSIZE`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `128`.", "mimetype": "text/plain", "start_char_idx": 23431, "end_char_idx": 25129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ff1f568-c8ff-4341-8e0c-8ebb615af9ec": {"__data__": {"id_": "6ff1f568-c8ff-4341-8e0c-8ebb615af9ec", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c2b7a65-4403-4b90-8fc6-b5269a1f9806", "node_type": "1", "metadata": {}, "hash": "e13ea37e0cd94b7a1ff3deb09f1e1c4f8360e3c95d76ad72db9a145efb63115b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9218bc85-5670-4c2f-bc84-631319827bad", "node_type": "1", "metadata": {}, "hash": "88d27ba86a373a4fbc7b3cbee2f59fb2010dd5a592fb018922b7958fc2f86bd7", "class_name": "RelatedNodeInfo"}}, "text": "- **`--KeyStore.SymmetricEncrypterKeySize <value>`** `NETHERMIND_KEYSTORECONFIG_SYMMETRICENCRYPTERKEYSIZE`\n\n  See [Web3 secret storage definition][web3-secret-storage]. Defaults to `128`.\n\n- **`--KeyStore.TestNodeKey <value>`** `NETHERMIND_KEYSTORECONFIG_TESTNODEKEY`\n\n  A plaintext private key to use for testing purposes.\n\n- **`--KeyStore.UnlockAccounts <value>`** `NETHERMIND_KEYSTORECONFIG_UNLOCKACCOUNTS`\n\n  An array of accounts to unlock on startup using passwords either in `PasswordFiles` and `Passwords`. Defaults to `[]`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Merge\n\n</summary>\n<p>\n\n- **`--Merge.BuilderRelayUrl <value>`** `NETHERMIND_MERGECONFIG_BUILDERRELAYURL`\n\n  The URL of a builder relay. If specified, blocks are sent to the relay. Defaults to `null`.\n\n- **`--Merge.CollectionsPerDecommit <value>`** `NETHERMIND_MERGECONFIG_COLLECTIONSPERDECOMMIT`\n\n  Request the garbage collector (GC) to release the process memory.\n  \n  Allowed values:\n  \n  - `-1` to disable\n  - `0` to release every time\n  - A positive number to release memory after that many Engine API calls\n  \n  Defaults to `25`.\n\n- **`--Merge.CompactMemory <value>`** `NETHERMIND_MERGECONFIG_COMPACTMEMORY`\n\n  The memory compaction mode. When set to `Full`, compacts the large object heap (LOH) if `SweepMemory` is set to `Gen2`.\n\n  Allowed values:\n\n    - `No`\n    - `Yes`\n    - `Full`\n\n  Defaults to `Yes`.\n\n- **`--Merge.Enabled <value>`** `NETHERMIND_MERGECONFIG_ENABLED`\n\n  Whether to enable the Merge hard fork. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Merge.FinalTotalDifficulty <value>`** `NETHERMIND_MERGECONFIG_FINALTOTALDIFFICULTY`\n\n  The total difficulty of the last PoW block. Must be greater than or equal to the terminal total difficulty (TTD). Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 25131, "end_char_idx": 26939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9218bc85-5670-4c2f-bc84-631319827bad": {"__data__": {"id_": "9218bc85-5670-4c2f-bc84-631319827bad", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ff1f568-c8ff-4341-8e0c-8ebb615af9ec", "node_type": "1", "metadata": {}, "hash": "b1d673a7d7037590b5511f0cd42bb67d025697476780d62228819f5b87645db8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5eba5aaa-0fcc-4326-9fc3-a810a8f5e039", "node_type": "1", "metadata": {}, "hash": "c993ff5445202e662cb60e427c138ee6df0a9cce938b73be4890021511fb9667", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Merge.PrioritizeBlockLatency <value>`** `NETHERMIND_MERGECONFIG_PRIORITIZEBLOCKLATENCY`\n\n  Whether to reduce block latency by disabling garbage collection during Engine API calls. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Merge.SweepMemory <value>`** `NETHERMIND_MERGECONFIG_SWEEPMEMORY`\n\n  The garbage collection (GC) mode between Engine API calls.\n\n  Allowed values:\n\n    - `NoGC`\n    - `Gen0`\n    - `Gen1`\n    - `Gen2`\n\n  Defaults to `Gen1`.\n\n- **`--Merge.TerminalBlockHash <value>`** `NETHERMIND_MERGECONFIG_TERMINALBLOCKHASH`\n\n  The terminal PoW block hash used for the transition. Defaults to `null`.\n\n- **`--Merge.TerminalBlockNumber <value>`** `NETHERMIND_MERGECONFIG_TERMINALBLOCKNUMBER`\n\n  The terminal PoW block number used for the transition.\n\n- **`--Merge.TerminalTotalDifficulty <value>`** `NETHERMIND_MERGECONFIG_TERMINALTOTALDIFFICULTY`\n\n  The terminal total difficulty (TTD) used for the transition. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Metrics\n\n</summary>\n<p>\n\n- **`--Metrics.CountersEnabled <value>`** `NETHERMIND_METRICSCONFIG_COUNTERSENABLED`\n\n  Whether to publish metrics using .NET diagnostics that can be collected with dotnet-counters. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Metrics.Enabled <value>`** `NETHERMIND_METRICSCONFIG_ENABLED`\n\n  Whether to publish various metrics to Prometheus Pushgateway at a given interval. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Metrics.EnableDbSizeMetrics <value>`** `NETHERMIND_METRICSCONFIG_ENABLEDBSIZEMETRICS`\n\n  Whether to publish database size metrics. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Metrics.ExposeHost <value>`** `NETHERMIND_METRICSCONFIG_EXPOSEHOST`\n\n  The IP address to expose Prometheus metrics at.", "mimetype": "text/plain", "start_char_idx": 26941, "end_char_idx": 28763, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5eba5aaa-0fcc-4326-9fc3-a810a8f5e039": {"__data__": {"id_": "5eba5aaa-0fcc-4326-9fc3-a810a8f5e039", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9218bc85-5670-4c2f-bc84-631319827bad", "node_type": "1", "metadata": {}, "hash": "88d27ba86a373a4fbc7b3cbee2f59fb2010dd5a592fb018922b7958fc2f86bd7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25e21b8a-af94-40e0-a77f-662e9d316bf5", "node_type": "1", "metadata": {}, "hash": "057376a24f6d55844bbfff12b03bdee03fbf0f639ef607d37a798aaa3fcb8776", "class_name": "RelatedNodeInfo"}}, "text": "The value of `+` means listening on all available hostnames. Setting this to `localhost` prevents remote access. Defaults to `+`.\n\n- **`--Metrics.ExposePort <value>`** `NETHERMIND_METRICSCONFIG_EXPOSEPORT`\n\n  The port to expose Prometheus metrics at. Defaults to `null`.\n\n- **`--Metrics.IntervalSeconds <value>`** `NETHERMIND_METRICSCONFIG_INTERVALSECONDS`\n\n  The frequency of pushing metrics to Prometheus, in seconds. Defaults to `5`.\n\n- **`--Metrics.NodeName <value>`** `NETHERMIND_METRICSCONFIG_NODENAME`\n\n  The name to display on the Grafana dashboard. Defaults to `\"Nethermind\"`.\n\n- **`--Metrics.PushGatewayUrl <value>`** `NETHERMIND_METRICSCONFIG_PUSHGATEWAYURL`\n\n  The Prometheus Pushgateway instance URL.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Mining\n\n</summary>\n<p>\n\n- **`--Mining.Enabled <value>`** `NETHERMIND_MININGCONFIG_ENABLED`\n\n  Whether to produce blocks. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Mining.Signer <value>`** `NETHERMIND_MININGCONFIG_SIGNER`\n\n  Url for an external signer like clef: https://github.com/ethereum/go-ethereum/blob/master/cmd/clef/tutorial.md Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Network\n\n</summary>\n<p>\n\n- **`--Network.Bootnodes <value>`** `NETHERMIND_NETWORKCONFIG_BOOTNODES`\n\n  A comma-separated enode list to be used as boot nodes.\n\n- **`--Network.DiagTracerEnabled <value>`** `NETHERMIND_NETWORKCONFIG_DIAGTRACERENABLED`\n\n  Whether to enable a verbose diagnostic tracing. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Network.DiscoveryDns <value>`** `NETHERMIND_NETWORKCONFIG_DISCOVERYDNS`\n\n  Use tree is available through a DNS name. For the default of `<chain name>.ethdisco.net`, leave unspecified. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 28764, "end_char_idx": 30563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25e21b8a-af94-40e0-a77f-662e9d316bf5": {"__data__": {"id_": "25e21b8a-af94-40e0-a77f-662e9d316bf5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5eba5aaa-0fcc-4326-9fc3-a810a8f5e039", "node_type": "1", "metadata": {}, "hash": "c993ff5445202e662cb60e427c138ee6df0a9cce938b73be4890021511fb9667", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55e572ee-a2d8-4f92-8b54-d645fc0b0a3b", "node_type": "1", "metadata": {}, "hash": "182d2103e5a67659ff053d6efa334b2bd5aa1af49b9bb6864ba2fa8586fb59ea", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Network.DiscoveryPort <value>`** `NETHERMIND_NETWORKCONFIG_DISCOVERYPORT`\n\n  The UDP port number for incoming discovery connections. It's recommended to keep it the same as the TCP port (`P2PPort`) because other values have not been tested yet. Defaults to `30303`.\n\n- **`--Network.EnableUPnP <value>`** `NETHERMIND_NETWORKCONFIG_ENABLEUPNP`\n\n  Whether to enable automatic port forwarding via UPnP. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Network.ExternalIp <value>`** `NETHERMIND_NETWORKCONFIG_EXTERNALIP`\n\n  The external IP. Use only when the external IP cannot be resolved automatically. Defaults to `null`.\n\n- **`--Network.LocalIp <value>`** `NETHERMIND_NETWORKCONFIG_LOCALIP`\n\n  The local IP. Use only when the local IP cannot be resolved automatically. Defaults to `null`.\n\n- **`--Network.MaxActivePeers <value>`** `NETHERMIND_NETWORKCONFIG_MAXACTIVEPEERS`\n\n  The max allowed number of connected peers. Defaults to `50`.\n\n- **`--Network.MaxNettyArenaCount <value>`** `NETHERMIND_NETWORKCONFIG_MAXNETTYARENACOUNT`\n\n  The maximum DotNetty arena count. Increasing this on a high-core CPU without increasing the memory budget may reduce chunk size so much that it causes a huge memory allocation. Defaults to `8`.\n\n- **`--Network.NettyArenaOrder <value>`** `NETHERMIND_NETWORKCONFIG_NETTYARENAORDER`\n\n  The size of the DotNetty arena order. `-1` to depend on the memory hint. Defaults to `-1`.\n\n- **`--Network.OnlyStaticPeers <value>`** `NETHERMIND_NETWORKCONFIG_ONLYSTATICPEERS`\n\n  Whether to use static peers only. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Network.P2PPort <value>`** `NETHERMIND_NETWORKCONFIG_P2PPORT`\n\n  The TCP port for incoming P2P connections. Defaults to `30303`.", "mimetype": "text/plain", "start_char_idx": 30565, "end_char_idx": 32301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55e572ee-a2d8-4f92-8b54-d645fc0b0a3b": {"__data__": {"id_": "55e572ee-a2d8-4f92-8b54-d645fc0b0a3b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25e21b8a-af94-40e0-a77f-662e9d316bf5", "node_type": "1", "metadata": {}, "hash": "057376a24f6d55844bbfff12b03bdee03fbf0f639ef607d37a798aaa3fcb8776", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62d902b7-c04e-4726-82a9-294cd10d7ef3", "node_type": "1", "metadata": {}, "hash": "b273a7555498a2bc0956922f599c8672838764739db43b3e719ffec8d0d8037f", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Network.PriorityPeersMaxCount <value>`** `NETHERMIND_NETWORKCONFIG_PRIORITYPEERSMAXCOUNT`\n\n  The max number of priority peers. Can be overridden by a plugin. Defaults to `0`.\n\n- **`--Network.StaticPeers <value>`** `NETHERMIND_NETWORKCONFIG_STATICPEERS`\n\n  A list of peers to keep connection for. Static peers are affected by `MaxActivePeers`. Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Optimism\n\n</summary>\n<p>\n\n- **`--Optimism.SequencerUrl <value>`** `NETHERMIND_OPTIMISMCONFIG_SEQUENCERURL`\n\n  Sequencer address Defaults to `null`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Pruning\n\n</summary>\n<p>\n\n- **`--Pruning.AvailableSpaceCheckEnabled <value>`** `NETHERMIND_PRUNINGCONFIG_AVAILABLESPACECHECKENABLED`\n\n  Whether to enables available disk space check. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Pruning.CacheMb <value>`** `NETHERMIND_PRUNINGCONFIG_CACHEMB`\n\n  The in-memory cache size, in MB. The bigger the cache size, the bigger the disk space savings. Defaults to `1024`.\n\n- **`--Pruning.FullPruningCompletionBehavior <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGCOMPLETIONBEHAVIOR`\n\n  The behavior after pruning completion:\n  \n  - `None`: Do nothing.\n  - `ShutdownOnSuccess`: Shut Nethermind down if pruning has succeeded but leave it running if failed.\n  - `AlwaysShutdown`: Shut Nethermind down when pruning completes, regardless of its status.\n\n  Allowed values:\n\n    - `None`\n    - `ShutdownOnSuccess`\n    - `AlwaysShutdown`\n\n  Defaults to `None`.\n\n- **`--Pruning.FullPruningDisableLowPriorityWrites <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGDISABLELOWPRIORITYWRITES`\n\n  Whether to disable low-priority for pruning writes. Full pruning uses low-priority write operations to prevent blocking block processing.", "mimetype": "text/plain", "start_char_idx": 32303, "end_char_idx": 34143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62d902b7-c04e-4726-82a9-294cd10d7ef3": {"__data__": {"id_": "62d902b7-c04e-4726-82a9-294cd10d7ef3", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55e572ee-a2d8-4f92-8b54-d645fc0b0a3b", "node_type": "1", "metadata": {}, "hash": "182d2103e5a67659ff053d6efa334b2bd5aa1af49b9bb6864ba2fa8586fb59ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "519be33e-d27f-48e4-adfc-d77064ff563a", "node_type": "1", "metadata": {}, "hash": "a07950da9e3435eec2df64a3108b58f87dd3fc31b8433fa85ef3f1650fa68464", "class_name": "RelatedNodeInfo"}}, "text": "If block processing is not high-priority, set this option to `true` for faster pruning. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Pruning.FullPruningMaxDegreeOfParallelism <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGMAXDEGREEOFPARALLELISM`\n\n  The max number of parallel tasks that can be used by full pruning:\n  \n  Allowed values:\n  \n  - `-1` to use the number of logical processors\n  - `0` to use 25% of logical processors\n  - `1` to run on single thread\n  \n  The recommended value depends on the type of the node:\n  \n  - If the node needs to be responsive (serves for RPC or validator), then the recommended value is `0` or `-1`.\n  - If the node doesn't have many other responsibilities but needs to be able to follow the chain reliably without any delays and produce live logs, the `0` or `1` is recommended.\n  - If the node doesn't have to be responsive, has very fast I/O (like NVMe) and the shortest pruning time is to be achieved, then `-1` is recommended. Defaults to `0`.\n\n- **`--Pruning.FullPruningMemoryBudgetMb <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGMEMORYBUDGETMB`\n\n  The memory budget, in MB, used for the trie visit. Increasing this value significantly reduces the IOPS requirement at the expense of memory usage. `0` to disable. Defaults to `4000`.\n\n- **`--Pruning.FullPruningMinimumDelayHours <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGMINIMUMDELAYHOURS`\n\n  The minimum delay, in hours, between full pruning operations not to exhaust disk writes. Defaults to `240`.\n\n- **`--Pruning.FullPruningThresholdMb <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGTHRESHOLDMB`\n\n  The threshold, in MB, to trigger full pruning. Depends on `Mode` and `FullPruningTrigger`. Defaults to `256000`.", "mimetype": "text/plain", "start_char_idx": 34144, "end_char_idx": 35879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "519be33e-d27f-48e4-adfc-d77064ff563a": {"__data__": {"id_": "519be33e-d27f-48e4-adfc-d77064ff563a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62d902b7-c04e-4726-82a9-294cd10d7ef3", "node_type": "1", "metadata": {}, "hash": "b273a7555498a2bc0956922f599c8672838764739db43b3e719ffec8d0d8037f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4683ad7-07b9-4f00-bb39-45d34eea0b6c", "node_type": "1", "metadata": {}, "hash": "21b359bdaa6b38374ff206eb05fcf4e4477f2f0a323b3906f84135b0991ba22a", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Pruning.FullPruningTrigger <value>`** `NETHERMIND_PRUNINGCONFIG_FULLPRUNINGTRIGGER`\n\n  The full pruning trigger:\n  \n  - `Manual`: Triggered manually.\n  - `StateDbSize`: Trigger when the state DB size is above the threshold.\n  - `VolumeFreeSpace`: Trigger when the free disk space where the state DB is stored is below the threshold.\n\n  Allowed values:\n\n    - `Manual`\n    - `StateDbSize`\n    - `VolumeFreeSpace`\n\n  Defaults to `Manual`.\n\n- **`--Pruning.Mode <value>`** `NETHERMIND_PRUNINGCONFIG_MODE`\n\n  The pruning mode:\n  \n  - `None`: No pruning (full archive)\n  - `Memory`: In-memory pruning\n  - `Full`: Full pruning\n  - `Hybrid`: Combined in-memory and full pruning\n\n  Allowed values:\n\n    - `None`\n    - `Memory`\n    - `Full`\n    - `Hybrid`\n\n  Defaults to `Hybrid`.\n\n- **`--Pruning.PersistenceInterval <value>`** `NETHERMIND_PRUNINGCONFIG_PERSISTENCEINTERVAL`\n\n  The block persistence frequency. If set to `N`, it caches after each `Nth` block even if not required by cache memory usage. Defaults to `8192`.\n\n- **`--Pruning.PruningBoundary <value>`** `NETHERMIND_PRUNINGCONFIG_PRUNINGBOUNDARY`\n\n  Past N state before state gets pruned Used to determine how old of a state to keep from the head. Defaults to `64`.\n\n- **`--Pruning.TrackedPastKeyCountMemoryRatio <value>`** `NETHERMIND_PRUNINGCONFIG_TRACKEDPASTKEYCOUNTMEMORYRATIO`\n\n  [TECHNICAL] Ratio of memory out of CacheMb to allocate for LRU used to track past keys for live pruning. Defaults to `0.1`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Receipt\n\n</summary>\n<p>\n\n- **`--Receipt.CompactReceiptStore <value>`** `NETHERMIND_RECEIPTCONFIG_COMPACTRECEIPTSTORE`\n\n  Whether to compact receipts database size at the expense of RPC performance. Allowed values: `true` `false`. Defaults to `true`.", "mimetype": "text/plain", "start_char_idx": 35881, "end_char_idx": 37673, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4683ad7-07b9-4f00-bb39-45d34eea0b6c": {"__data__": {"id_": "d4683ad7-07b9-4f00-bb39-45d34eea0b6c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "519be33e-d27f-48e4-adfc-d77064ff563a", "node_type": "1", "metadata": {}, "hash": "a07950da9e3435eec2df64a3108b58f87dd3fc31b8433fa85ef3f1650fa68464", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8559fb83-eef5-4ba1-bdb9-a998add0c442", "node_type": "1", "metadata": {}, "hash": "03979f5c19b9cd0f32fb64e687c74ea9f314ac6d448c6d3bfee4114e5d5381e0", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Receipt.CompactTxIndex <value>`** `NETHERMIND_RECEIPTCONFIG_COMPACTTXINDEX`\n\n  Whether to compact receipts transaction index database size at the expense of RPC performance. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Receipt.ReceiptsMigration <value>`** `NETHERMIND_RECEIPTCONFIG_RECEIPTSMIGRATION`\n\n  Whether to migrate the receipts database to the new schema. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Receipt.StoreReceipts <value>`** `NETHERMIND_RECEIPTCONFIG_STORERECEIPTS`\n\n  Whether to store receipts after a new block is processed. This setting is independent from downloading receipts in fast sync mode. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Receipt.TxLookupLimit <value>`** `NETHERMIND_RECEIPTCONFIG_TXLOOKUPLIMIT`\n\n  The number of recent blocks to maintain transaction index for. `0` to never remove indices, `-1` to never index. Defaults to `2350000`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Seq\n\n</summary>\n<p>\n\n- **`--Seq.ApiKey <value>`** `NETHERMIND_SEQCONFIG_APIKEY`\n\n  The Seq API key.\n\n- **`--Seq.MinLevel <value>`** `NETHERMIND_SEQCONFIG_MINLEVEL`\n\n  The min log level to sent to Seq. Defaults to `Off`.\n\n- **`--Seq.ServerUrl <value>`** `NETHERMIND_SEQCONFIG_SERVERURL`\n\n  The Seq instance URL. Defaults to `http://localhost:5341`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Snapshot\n\n</summary>\n<p>\n\n- **`--Snapshot.Checksum <value>`** `NETHERMIND_SNAPSHOTCONFIG_CHECKSUM`\n\n  The SHA-256 checksum of the snapshot file. Defaults to `null`.\n\n- **`--Snapshot.DownloadUrl <value>`** `NETHERMIND_SNAPSHOTCONFIG_DOWNLOADURL`\n\n  The URL of the snapshot file. Defaults to `null`.", "mimetype": "text/plain", "start_char_idx": 37675, "end_char_idx": 39398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8559fb83-eef5-4ba1-bdb9-a998add0c442": {"__data__": {"id_": "8559fb83-eef5-4ba1-bdb9-a998add0c442", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4683ad7-07b9-4f00-bb39-45d34eea0b6c", "node_type": "1", "metadata": {}, "hash": "21b359bdaa6b38374ff206eb05fcf4e4477f2f0a323b3906f84135b0991ba22a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "298ad726-aa09-4471-b7ec-36950cdb975d", "node_type": "1", "metadata": {}, "hash": "cb022925b9b2c11da4566b32ae3fb85b77bc00503044a82ada128454bfca68bc", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Snapshot.Enabled <value>`** `NETHERMIND_SNAPSHOTCONFIG_ENABLED`\n\n  Whether to enable the Snapshot plugin. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Snapshot.SnapshotDirectory <value>`** `NETHERMIND_SNAPSHOTCONFIG_SNAPSHOTDIRECTORY`\n\n  The path to the directory to store the snapshot file. Defaults to `snapshot`.\n\n- **`--Snapshot.SnapshotFileName <value>`** `NETHERMIND_SNAPSHOTCONFIG_SNAPSHOTFILENAME`\n\n  The name of the snapshot file. Defaults to `snapshot.zip`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Sync\n\n</summary>\n<p>\n\n- **`--Sync.AncientBodiesBarrier <value>`** `NETHERMIND_SYNCCONFIG_ANCIENTBODIESBARRIER`\n\n  The earliest body downloaded with fast sync when `DownloadBodiesInFastSync` is set to `true`. The actual value is determined as follows:\n  \n  ```\n  max{ 1, min{ PivotNumber, AncientBodiesBarrier } }\n  ```\n  Defaults to `0`.\n\n- **`--Sync.AncientReceiptsBarrier <value>`** `NETHERMIND_SYNCCONFIG_ANCIENTRECEIPTSBARRIER`\n\n  The earliest receipt downloaded with fast sync when `DownloadReceiptsInFastSync` is set to `true`. The actual value is determined as follows:\n  \n  ```\n  max{ 1, min{ PivotNumber, max{ AncientBodiesBarrier, AncientReceiptsBarrier } } }\n  ```\n  Defaults to `0`.\n\n- **`--Sync.BlocksDbTuneDbMode <value>`** `NETHERMIND_SYNCCONFIG_BLOCKSDBTUNEDBMODE`\n\n  Configure the blocks database for write optimizations during sync.\n\n  Allowed values:\n\n    - `Default`\n    - `WriteBias`\n    - `HeavyWrite`\n    - `AggressiveHeavyWrite`\n    - `DisableCompaction`\n    - `EnableBlobFiles`\n    - `HashDb`\n\n  Defaults to `EnableBlobFiles`.\n\n- **`--Sync.DownloadBodiesInFastSync <value>`** `NETHERMIND_SYNCCONFIG_DOWNLOADBODIESINFASTSYNC`\n\n  Whether to download the block bodies in the Fast sync mode.", "mimetype": "text/plain", "start_char_idx": 39400, "end_char_idx": 41178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "298ad726-aa09-4471-b7ec-36950cdb975d": {"__data__": {"id_": "298ad726-aa09-4471-b7ec-36950cdb975d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8559fb83-eef5-4ba1-bdb9-a998add0c442", "node_type": "1", "metadata": {}, "hash": "03979f5c19b9cd0f32fb64e687c74ea9f314ac6d448c6d3bfee4114e5d5381e0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c952276-0035-442e-979e-4c9ffb9b94d6", "node_type": "1", "metadata": {}, "hash": "88c5729e0aa931841149b0338c71fccc1422d57d73e79720b788d88c90c26542", "class_name": "RelatedNodeInfo"}}, "text": "Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.DownloadHeadersInFastSync <value>`** `NETHERMIND_SYNCCONFIG_DOWNLOADHEADERSINFASTSYNC`\n\n  Whether to download the old block headers in the Fast sync mode. If `false`, Nethermind downloads only recent blocks headers. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.DownloadReceiptsInFastSync <value>`** `NETHERMIND_SYNCCONFIG_DOWNLOADRECEIPTSINFASTSYNC`\n\n  Whether to download receipts in the Fast sync mode. This slows down the process by a few hours but allows to interact with dApps that perform extensive historical logs searches. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.ExitOnSynced <value>`** `NETHERMIND_SYNCCONFIG_EXITONSYNCED`\n\n  Whether to shut down Nethermind once sync is finished. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.ExitOnSyncedWaitTimeSec <value>`** `NETHERMIND_SYNCCONFIG_EXITONSYNCEDWAITTIMESEC`\n\n  The time, in seconds, to wait before shutting down Nethermind once sync is finished. Defaults to `60`.\n\n- **`--Sync.FastSync <value>`** `NETHERMIND_SYNCCONFIG_FASTSYNC`\n\n  Whether to use the Fast sync mode (the eth/63 synchronization algorithm). Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.FastSyncCatchUpHeightDelta <value>`** `NETHERMIND_SYNCCONFIG_FASTSYNCCATCHUPHEIGHTDELTA`\n\n  In Fast sync mode, the min height threshold limit up to which the Full sync, if already on, stays on when the chain is behind the network head. If the limit is exceeded, it switches back to Fast sync. For regular usage scenarios, setting this value lower than 32 is not recommended as this can cause issues with chain reorgs. Note that the last 2 blocks are always processed in Full sync, so setting it lower than 2 has no effect. Defaults to `8192`.", "mimetype": "text/plain", "start_char_idx": 41179, "end_char_idx": 42985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c952276-0035-442e-979e-4c9ffb9b94d6": {"__data__": {"id_": "3c952276-0035-442e-979e-4c9ffb9b94d6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "298ad726-aa09-4471-b7ec-36950cdb975d", "node_type": "1", "metadata": {}, "hash": "cb022925b9b2c11da4566b32ae3fb85b77bc00503044a82ada128454bfca68bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c4ba1c4-77f6-4f4a-9df1-2d10c392f1a9", "node_type": "1", "metadata": {}, "hash": "1a0a09cc55754464c924ef87616349f74a50d30ff759354fc0743592583ce625", "class_name": "RelatedNodeInfo"}}, "text": "- **`--Sync.FixReceipts <value>`** `NETHERMIND_SYNCCONFIG_FIXRECEIPTS`\n\n  Whether to enable receipts validation that checks for receipts that might be missing because of a bug. If needed, receipts are downloaded from the network. If `true`, the pivot number must be same one used originally as it's used as a cut-off point. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.FixTotalDifficulty <value>`** `NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTY`\n\n  Whether to recalculate the total difficulty from `FixTotalDifficultyStartingBlock` to `FixTotalDifficultyLastBlock`. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.FixTotalDifficultyLastBlock <value>`** `NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTYLASTBLOCK`\n\n  The last block to recalculate the total difficulty for. If not specified, the best known block is used.\n  Defaults to `null`.\n\n- **`--Sync.FixTotalDifficultyStartingBlock <value>`** `NETHERMIND_SYNCCONFIG_FIXTOTALDIFFICULTYSTARTINGBLOCK`\n\n  The first block to recalculate the total difficulty for. Defaults to `1`.\n\n- **`--Sync.MaxAttemptsToUpdatePivot <value>`** `NETHERMIND_SYNCCONFIG_MAXATTEMPTSTOUPDATEPIVOT`\n\n  The max number of attempts to update the pivot block based on the FCU message from the consensus client. Defaults to `2147483647`.\n\n- **`--Sync.MaxProcessingThreads <value>`** `NETHERMIND_SYNCCONFIG_MAXPROCESSINGTHREADS`\n\n  The max number of threads used for syncing. `0` to use the number of logical processors. Defaults to `0`.\n\n- **`--Sync.NetworkingEnabled <value>`** `NETHERMIND_SYNCCONFIG_NETWORKINGENABLED`\n\n  Whether to connect to peers and sync. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.NonValidatorNode <value>`** `NETHERMIND_SYNCCONFIG_NONVALIDATORNODE`\n\n  Whether to operate as a non-validator.", "mimetype": "text/plain", "start_char_idx": 42987, "end_char_idx": 44776, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c4ba1c4-77f6-4f4a-9df1-2d10c392f1a9": {"__data__": {"id_": "3c4ba1c4-77f6-4f4a-9df1-2d10c392f1a9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c952276-0035-442e-979e-4c9ffb9b94d6", "node_type": "1", "metadata": {}, "hash": "88c5729e0aa931841149b0338c71fccc1422d57d73e79720b788d88c90c26542", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49ff15cd-1804-4c1f-9edf-ea006e6d1e14", "node_type": "1", "metadata": {}, "hash": "e3b73f8e4b2b48973030857a3b53cbd7abc47ca18e88e480d5150d981419bf9e", "class_name": "RelatedNodeInfo"}}, "text": "If `true`, the `DownloadReceiptsInFastSync` and `DownloadBodiesInFastSync` can be set to `false`. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.PivotHash <value>`** `NETHERMIND_SYNCCONFIG_PIVOTHASH`\n\n  The hash of the pivot block for the Fast sync mode. Defaults to `null`.\n\n- **`--Sync.PivotNumber <value>`** `NETHERMIND_SYNCCONFIG_PIVOTNUMBER`\n\n  The number of the pivot block for the Fast sync mode. Defaults to `0`.\n\n- **`--Sync.PivotTotalDifficulty <value>`** `NETHERMIND_SYNCCONFIG_PIVOTTOTALDIFFICULTY`\n\n  The total difficulty of the pivot block for the Fast sync mode. Defaults to `null`.\n\n- **`--Sync.SnapSync <value>`** `NETHERMIND_SYNCCONFIG_SNAPSYNC`\n\n  Whether to use the Snap sync mode. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.SnapSyncAccountRangePartitionCount <value>`** `NETHERMIND_SYNCCONFIG_SNAPSYNCACCOUNTRANGEPARTITIONCOUNT`\n\n  The number of account range partitions to create. Increases the Snap sync request concurrency. Allowed values are between between 1 and 256. Defaults to `8`.\n\n- **`--Sync.StrictMode <value>`** `NETHERMIND_SYNCCONFIG_STRICTMODE`\n\n  Whether to disable some optimizations and do a more extensive sync. Useful when sync state is corrupted. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--Sync.SynchronizationEnabled <value>`** `NETHERMIND_SYNCCONFIG_SYNCHRONIZATIONENABLED`\n\n  Whether to download and process new blocks. Allowed values: `true` `false`. Defaults to `true`.\n\n- **`--Sync.TuneDbMode <value>`** `NETHERMIND_SYNCCONFIG_TUNEDBMODE`\n\n  Configure the database for write optimizations during sync. Significantly reduces the total number of writes and sync time if you are not network limited.", "mimetype": "text/plain", "start_char_idx": 44777, "end_char_idx": 46481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49ff15cd-1804-4c1f-9edf-ea006e6d1e14": {"__data__": {"id_": "49ff15cd-1804-4c1f-9edf-ea006e6d1e14", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c4ba1c4-77f6-4f4a-9df1-2d10c392f1a9", "node_type": "1", "metadata": {}, "hash": "1a0a09cc55754464c924ef87616349f74a50d30ff759354fc0743592583ce625", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82b1aa75-80d4-422d-8fab-c50d317220cd", "node_type": "1", "metadata": {}, "hash": "181ff410c3a418c3fe7c1fb372bc8b8af2bde2e208d9aefad322e293043424e1", "class_name": "RelatedNodeInfo"}}, "text": "Allowed values:\n\n    - `Default`\n    - `WriteBias`\n    - `HeavyWrite`\n    - `AggressiveHeavyWrite`\n    - `DisableCompaction`\n    - `EnableBlobFiles`\n    - `HashDb`\n\n  Defaults to `HeavyWrite`.\n\n- **`--Sync.UseGethLimitsInFastBlocks <value>`** `NETHERMIND_SYNCCONFIG_USEGETHLIMITSINFASTBLOCKS`\n\n  Whether to make smaller requests, in Fast Blocks mode, to avoid Geth from disconnecting. On the Geth-heavy networks (e.g., Mainnet), it's  a desired behavior while on Nethermind- or OpenEthereum-heavy networks (Aura), it slows down the sync by a factor of ~4. Allowed values: `true` `false`. Defaults to `true`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### TraceStore\n\n</summary>\n<p>\n\n- **`--TraceStore.BlocksToKeep <value>`** `NETHERMIND_TRACESTORECONFIG_BLOCKSTOKEEP`\n\n  The number of blocks to store, counting from the head. If `0`, all traces of the processed blocks are stored. Defaults to `10000`.\n\n- **`--TraceStore.DeserializationParallelization <value>`** `NETHERMIND_TRACESTORECONFIG_DESERIALIZATIONPARALLELIZATION`\n\n  The max parallelization when deserialization requests the `trace_filter` method. `0` to use the number of logical processors. If you experience a resource shortage, set to a low number. Defaults to `0`.\n\n- **`--TraceStore.Enabled <value>`** `NETHERMIND_TRACESTORECONFIG_ENABLED`\n\n  Whether to enable the TraceStore plugin. If enabled, traces come from the database whenever possible. Allowed values: `true` `false`. Defaults to `false`.\n\n- **`--TraceStore.TraceTypes <value>`** `NETHERMIND_TRACESTORECONFIG_TRACETYPES`\n\n  The type of traces to store.\n\n  Allowed values:\n\n    - `None`\n    - `VmTrace`\n    - `StateDiff`\n    - `Trace`\n    - `Rewards`\n    - `All`\n\n  Defaults to `Trace, Rewards`.", "mimetype": "text/plain", "start_char_idx": 46485, "end_char_idx": 48232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82b1aa75-80d4-422d-8fab-c50d317220cd": {"__data__": {"id_": "82b1aa75-80d4-422d-8fab-c50d317220cd", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49ff15cd-1804-4c1f-9edf-ea006e6d1e14", "node_type": "1", "metadata": {}, "hash": "e3b73f8e4b2b48973030857a3b53cbd7abc47ca18e88e480d5150d981419bf9e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a673e824-7e1b-4df2-9bb6-f879ed328ce7", "node_type": "1", "metadata": {}, "hash": "755dd727a2532e6a759306036911fd1fa025bc9c26b1d2d295bca58f42d71da5", "class_name": "RelatedNodeInfo"}}, "text": "</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### TxPool\n\n</summary>\n<p>\n\n- **`--TxPool.BlobCacheSize <value>`** `NETHERMIND_TXPOOLCONFIG_BLOBCACHESIZE`\n\n  The max number of full blob transactions cached in memory. The default value uses max 200MB for 6 blobs where one blob is 33MB (256 * 128KB) Defaults to `256`.\n\n- **`--TxPool.BlobsSupport <value>`** `NETHERMIND_TXPOOLCONFIG_BLOBSSUPPORT`\n\n  Blobs support mode:\n  \n  - `Disabled`: No support for blob transactions\n  - `InMemory`: Blob transactions stored only in memory\n  - `Storage`: Blob transactions stored in db\n  - `StorageWithReorgs`: Blob transactions stored in db with support for restoring reorganized blob transactions to blob pool\n\n  Allowed values:\n\n    - `Disabled`\n    - `InMemory`\n    - `Storage`\n    - `StorageWithReorgs`\n\n  Defaults to `StorageWithReorgs`.\n\n- **`--TxPool.GasLimit <value>`** `NETHERMIND_TXPOOLCONFIG_GASLIMIT`\n\n  The max transaction gas allowed. Defaults to `null`.\n\n- **`--TxPool.HashCacheSize <value>`** `NETHERMIND_TXPOOLCONFIG_HASHCACHESIZE`\n\n  The max number of cached hashes of already known transactions. Set automatically by the memory hint. Defaults to `524288`.\n\n- **`--TxPool.InMemoryBlobPoolSize <value>`** `NETHERMIND_TXPOOLCONFIG_INMEMORYBLOBPOOLSIZE`\n\n  The max number of full blob transactions stored in memory. Used only if persistent storage is disabled. Defaults to `512`.\n\n- **`--TxPool.MaxPendingBlobTxsPerSender <value>`** `NETHERMIND_TXPOOLCONFIG_MAXPENDINGBLOBTXSPERSENDER`\n\n  The max number of pending blob transactions per single sender. `0` to lift the limit. Defaults to `16`.\n\n- **`--TxPool.MaxPendingTxsPerSender <value>`** `NETHERMIND_TXPOOLCONFIG_MAXPENDINGTXSPERSENDER`\n\n  The max number of pending transactions per single sender. `0` to lift the limit.", "mimetype": "text/plain", "start_char_idx": 48234, "end_char_idx": 50033, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a673e824-7e1b-4df2-9bb6-f879ed328ce7": {"__data__": {"id_": "a673e824-7e1b-4df2-9bb6-f879ed328ce7", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82b1aa75-80d4-422d-8fab-c50d317220cd", "node_type": "1", "metadata": {}, "hash": "181ff410c3a418c3fe7c1fb372bc8b8af2bde2e208d9aefad322e293043424e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cfc412cd-5b94-4f18-ba16-1f060df7f30a", "node_type": "1", "metadata": {}, "hash": "362261c599be2aa6d2a1856ba350e4d0e13a7a62045a998803798e83dd5cbb07", "class_name": "RelatedNodeInfo"}}, "text": "Defaults to `0`.\n\n- **`--TxPool.MinBaseFeeThreshold <value>`** `NETHERMIND_TXPOOLCONFIG_MINBASEFEETHRESHOLD`\n\n  The minimal percentage of the current base fee that must be surpassed by the max fee (`max_fee_per_gas`) for the transaction to be broadcasted. Defaults to `70`.\n\n- **`--TxPool.PeerNotificationThreshold <value>`** `NETHERMIND_TXPOOLCONFIG_PEERNOTIFICATIONTHRESHOLD`\n\n  The average percentage of transaction hashes from persistent broadcast sent to a peer together with hashes of the last added transactions. Defaults to `5`.\n\n- **`--TxPool.PersistentBlobStorageSize <value>`** `NETHERMIND_TXPOOLCONFIG_PERSISTENTBLOBSTORAGESIZE`\n\n  The max number of full blob transactions stored in the database (increasing the number of transactions in the blob pool also results in higher memory usage). The default value uses max 13GB for 6 blobs where one blob is 2GB (16386 * 128KB). Defaults to `16384`.\n\n- **`--TxPool.ReportMinutes <value>`** `NETHERMIND_TXPOOLCONFIG_REPORTMINUTES`\n\n  The current transaction pool state reporting interval, in minutes. Defaults to `null`.\n\n- **`--TxPool.Size <value>`** `NETHERMIND_TXPOOLCONFIG_SIZE`\n\n  The max number of transactions held in the mempool (the more transactions in the mempool, the more memory used). Defaults to `2048`.\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n#### Wallet\n\n</summary>\n<p>\n\n- **`--Wallet.DevAccounts <value>`** `NETHERMIND_WALLETCONFIG_DEVACCOUNTS`\n\n  The number of autogenerated developer accounts to work with. Developer accounts have private keys from `00...01` to `00...n`. Defaults to `10`.\n\n</p>\n</details>\n\n<!--[end autogen]-->\n\n## Environment variables\n\nTo configure Nethermind using environment variables, the following naming convention is used in all uppercase:\n\n```text\nNETHERMIND_{NAMESPACE}CONFIG_{PROPERTY_NAME}\n```\nFor instance, the environment variable equivalent of the command line `--JsonRpc.JwtSecretFile` option is `NETHERMIND_JSONRPCCONFIG_JWTSECRETFILE`.", "mimetype": "text/plain", "start_char_idx": 50034, "end_char_idx": 52011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfc412cd-5b94-4f18-ba16-1f060df7f30a": {"__data__": {"id_": "cfc412cd-5b94-4f18-ba16-1f060df7f30a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/configuration.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca", "node_type": "4", "metadata": {}, "hash": "b98982692cb5441bb7cda8e2c98704e712235a759469e817e178b044e80602d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a673e824-7e1b-4df2-9bb6-f879ed328ce7", "node_type": "1", "metadata": {}, "hash": "755dd727a2532e6a759306036911fd1fa025bc9c26b1d2d295bca58f42d71da5", "class_name": "RelatedNodeInfo"}}, "text": "For the list of configuration namespaces and their options, see [Options by namespaces](#options-by-namespaces).\n\n## Configuration file\n\nThe configuration file is a JSON file with `.cfg` extension. The bundled configuration files are located in the `configs` directory and named after the network they are used for. For instance, see the Mainnet configuration file [`mainnet.cfg`](https://github.com/NethermindEth/nethermind/blob/master/src/Nethermind/Nethermind.Runner/configs/mainnet.cfg).\n\n[web3-secret-storage]: https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage", "mimetype": "text/plain", "start_char_idx": 52012, "end_char_idx": 52616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e62f6bc-7f3f-47d0-abd0-c1133b10cc15": {"__data__": {"id_": "9e62f6bc-7f3f-47d0-abd0-c1133b10cc15", "embedding": null, "metadata": {"file_path": "./nethermind_dist/migrating-from-geth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b651ce2-36d3-424b-94ad-c94608a85833", "node_type": "4", "metadata": {}, "hash": "0274b5a22d7aaf50ded7359e567010844b87e69c9d86d077c85deb67f857baae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3ef69fd-b76a-44da-a7f4-f9ff989b20f5", "node_type": "1", "metadata": {}, "hash": "c18858bde61825c0026e9487046f07baa8af219d756af16e70bf3535b2c8b02e", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Migrating from Geth\nsidebar_position: 4\n---\n\nThis guide will walk you through all the steps required for a seamless and quick transition.\n\nFirst, ensure _the disk has enough space_. The most secure way is having a Nethermind synced on the same machine as Geth without shutting Geth down. That allows you to check whether Nethermind is syncing properly, verify whether everything works as expected, and reduce node downtime to a bare minimum. This is a recommended approach for any public JSON-RPC provider or a validator.\n\n- If the disk has enough space, [option 1](#option-1) or [option 2](#option-2) are the recommended choices.\n- If there is not enough disk space, and downtime is not an option, we recommend either extending the disk or, if not possible, hosting Nethermind on another machine, syncing it, and whenever it completes, moving everything validator-related to that machine, and abandoning the first one.\n- If downtime of around 12 hours or more is not a problem, see the [option 3](#option-3).\n\n## Option 1: Sync Nethermind next to Geth {#option-1}\n\nFirst, [install Nethermind](./installing-nethermind.md) and a [consensus client](./consensus-clients.md) of your choice. \n\n:::warning\n- If you choose the same consensus client for Nethermind that is already being used with Geth, ensure their settings, such as data directories, do not interfere.\n- Ensure the network ports of the consensus client paired with Nethermind and the one paired with Geth do not interfere with each other.\n- Ensure the JSON-RPC port, Engine API port, and the P2P networking ports of Nethermind are different from the ones used by Geth. These ports are set using the following command line options:\n  - `--JsonRpc.Port <port>`\n  - `--JsonRpc.EnginePort <port>`\n  - `--Network.DiscoveryPort <port>`\n  - `--Network.P2PPort <port>`\n:::\n\nOnce you fulfill the above requirements, you can start syncing Nethermind. To check the sync status, use the [`eth_syncing`](../interacting/json-rpc-ns/eth.md#eth_syncing) JSON-RPC method.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3ef69fd-b76a-44da-a7f4-f9ff989b20f5": {"__data__": {"id_": "b3ef69fd-b76a-44da-a7f4-f9ff989b20f5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/migrating-from-geth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b651ce2-36d3-424b-94ad-c94608a85833", "node_type": "4", "metadata": {}, "hash": "0274b5a22d7aaf50ded7359e567010844b87e69c9d86d077c85deb67f857baae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e62f6bc-7f3f-47d0-abd0-c1133b10cc15", "node_type": "1", "metadata": {}, "hash": "a5a67e1aa7f0117970b196966cf1559132e06cf418d87eb044adca0da41106f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67f609d8-e38b-4678-baac-cc2b9b678830", "node_type": "1", "metadata": {}, "hash": "43c86f26e7d16249cfa9181427268ac4c9072d137e67944d609762d87a2e2a9c", "class_name": "RelatedNodeInfo"}}, "text": "When it returns `false`, Nethermind is considered fully synced with all block bodies and receipts needed to work properly as a validator. Another option to monitor the sync is a [health check](../monitoring/health-check.md).\n\nOnce Nethermind is synced, shut down both Geth and Nethermind, along with its paired consensus client. Then, restart Nethermind using the ports assigned for and the JWT secret used by Geth before. Ensure no warnings or errors are present in the logs of both Nethermind and the consensus client. Also, check if Nethermind is following the chain properly. If everything is alright, you can remove Geth and the consensus client paired with Nethermind previously along with their data.\n\n## Option 2: Sync Nethermind using Sedge next to Geth {#option-2}\n\n[Sedge](https://docs.sedge.nethermind.io) is a setup tool for PoS validators and nodes that runs on Linux and macOS.\n\nThis option is similar to the [option 1](#option-1), but Sedge automatically takes care of conflicting settings making the entire process much easier.\n\n:::tip\nYou can add a flag to Sedge as follows. For instance:\n\n- For the execution client, `--el-extra-flag JsonRpc.Port=8546`\n- For the consensus client, `--cl-extra-flag rpc-port=4001`\n:::\n\nOnce Nethermind is synced, you can remove extra flags if any from the `docker-compose.yml` and restart the node as follows:\n\n```bash\ndocker compose stop execution\ndocker compose up -d execution\n```\n\n## Option 3: Remove Geth and sync Nethermind {#option-3}\n\nThis is the simplest option as it doesn't require configuration adjustments. However, the node will be down until Nethermind is syncing.\n\n- Shut down and remove Geth along with its data.\n- [Install Nethermind](./installing-nethermind.md)\n- Ensure Nethermind uses the same network ports as Geth before and the same JWT secret. Otherwise, you must reconfigure the consensus client to the Nethermind settings.\n\nOnce you fulfill the above requirements, you can start syncing Nethermind. While Nethermid is syncing, ensure no errors are present in the logs of both Nethermind and the consensus client.", "mimetype": "text/plain", "start_char_idx": 2026, "end_char_idx": 4116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67f609d8-e38b-4678-baac-cc2b9b678830": {"__data__": {"id_": "67f609d8-e38b-4678-baac-cc2b9b678830", "embedding": null, "metadata": {"file_path": "./nethermind_dist/migrating-from-geth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b651ce2-36d3-424b-94ad-c94608a85833", "node_type": "4", "metadata": {}, "hash": "0274b5a22d7aaf50ded7359e567010844b87e69c9d86d077c85deb67f857baae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3ef69fd-b76a-44da-a7f4-f9ff989b20f5", "node_type": "1", "metadata": {}, "hash": "c18858bde61825c0026e9487046f07baa8af219d756af16e70bf3535b2c8b02e", "class_name": "RelatedNodeInfo"}}, "text": "Note that sync may take a while, depending on the chain. Also, you can periodically check the [`eth_syncing`](../interacting/json-rpc-ns/eth.md#eth_syncing) JSON-RPC method or the [health check](../monitoring/health-check.md).", "mimetype": "text/plain", "start_char_idx": 4117, "end_char_idx": 4343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91a6e201-063b-4f8d-8328-d013be697a5e": {"__data__": {"id_": "91a6e201-063b-4f8d-8328-d013be697a5e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/intro.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6a44dadf-6137-48de-9cb0-744ef74bd1c6", "node_type": "4", "metadata": {}, "hash": "dd2ee80f423630443d700fa393a1ad9c524908454ad1142395b519941b54db2a", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Introduction and overview\nsidebar_label: Introduction\nsidebar_position: 0\nslug: /\n---\n\nNethermind is a high-performance, highly configurable Ethereum execution client built on [.NET](https://dotnet.microsoft.com/en-us/) that runs on Linux, Windows, and macOS and supports Clique, Aura, and Ethash. With breakneck sync speeds and support for external plugins, it provides reliable access to rich on-chain data thanks to a high-performance JSON-RPC interface and node health monitoring with [Grafana](https://grafana.com) and [Seq](https://datalust.co/seq).\n\nFounded in 2017 and boosted by a grant from the Ethereum Foundation in 2018, we focus on delivering a robust Ethereum client, ensuring outstanding performance and flexibility for node operators. \n\nHere, you'll find instructions on installing, configuring, and using Nethermind and its features. We've organized the information by topic and included examples and visuals for better understanding.\n\nWe hope you find this documentation helpful and welcome your feedback and suggestions!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f812813-1898-4bec-a807-7ce1628c253f": {"__data__": {"id_": "9f812813-1898-4bec-a807-7ce1628c253f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "40dc6907-16f9-4b3b-8479-e4706214b737", "node_type": "4", "metadata": {}, "hash": "5edb9c888fb0e306aae0ce42c15512b0df2cf50dba76461841e18a704a566d61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3e2a74c-15de-41de-bd23-b66787c6983f", "node_type": "1", "metadata": {}, "hash": "28ad9c83f2f37a4ee307373e09b2c39583d2f0814025efd10e661611239e6c87", "class_name": "RelatedNodeInfo"}}, "text": "---\nsidebar_label: FAQ\nsidebar_position: 7\n---\n\n:::warning\nThis article is outdated and requires a revision.\n:::\n\n# FAQ\n\n## How do I upgrade my node?\n\n### Upgrading Nethermind for Docker users\n\nPull the latest version of Nethermind using the `latest` tag. You can find specific tag\nat [Docker Hub](https://hub.docker.com/r/nethermind/nethermind/tags).\n\n```sh\ndocker pull nethermind/nethermind:latest\n```\n\nor pull with docker-compose if the `nethermind/nethermind:latest` base image is specified\n\n```sh\ndocker-compose pull\n```\n\n### Upgrading Nethermind for Systemd users\n\nSimply download the latest Nethermind package either\nfrom [https://downloads.nethermind.io](https://downloads.nethermind.io/)\nor [https://github.com/NethermindEth/nethermind/releases](https://github.com/NethermindEth/nethermind/releases) and make\nsure that the package is extracted in the `WorkingDirectory` path defined in your `systemd` service. Make sure to stop\nthe service before the upgrade and start it after.\n\n```systemd\nWorkingDirectory=/home/nethermind/nethermind\n```\n\n### Upgrading Nethermind when running as a background process\n\nDownload the latest Nethermind package either from [https://downloads.nethermind.io](https://downloads.nethermind.io/)\nor [https://github.com/NethermindEth/nethermind/releases](https://github.com/NethermindEth/nethermind/releases) and\nextract the package in the folder you currently use for running Nethermind. Make sure the service is down before the\nupdate. Make sure to stop the service before the upgrade and start it after.\n\n## What is the minimum viable config to serve ETH2 validator requests?\n\nThis config downloads a minimal amount of bodies and receipts to be able to serve ETH2 validator requests since the\ndeposit contract deployment. It also enables JSON RPC (**important - make sure that you do not open firewall to the\noutside world!**)\n\n```sh\nnethermind --config mainnet --Init.BaseDbPath /your/db/path\n```\n\nIf you have any issues, please reach out to us on Discord: [https://discord.gg/X539yhn](https://discord.gg/X539yhn).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2053, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3e2a74c-15de-41de-bd23-b66787c6983f": {"__data__": {"id_": "d3e2a74c-15de-41de-bd23-b66787c6983f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "40dc6907-16f9-4b3b-8479-e4706214b737", "node_type": "4", "metadata": {}, "hash": "5edb9c888fb0e306aae0ce42c15512b0df2cf50dba76461841e18a704a566d61", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f812813-1898-4bec-a807-7ce1628c253f", "node_type": "1", "metadata": {}, "hash": "381da57897d553cbe89186f44e85cd7ee04c5c51496433d680c16ab4cb5c18c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32055c1a-a0ac-4f80-83d1-2b4c7886a7d2", "node_type": "1", "metadata": {}, "hash": "fae806ea644cd8bc054c1e654383cf0d9b5ebf18c3b00099074aa15099a2214e", "class_name": "RelatedNodeInfo"}}, "text": "## Can I disable logging to file?\n\nYou can find more details on the logging config page [here](./fundamentals/logs.md)\n\n## Can I disable logging of JSON RPC calls?\n\nYou can find more details on the logging config page [here](./fundamentals/logs.md)\n\n## How can I configure a validator?\n\nYou can find more details on running validators [here](./validators/validators.md).\n\n## My network bandwidth is used up by the Nethermind node\n\nTry changing the config to a lower number (`--Network.ActivePeersMaxCount 25`)\n\n## Is my node synced?\n\nYour node is synced when it shows log lines starting with:\n\n`Processed ...`\n\nAnd the block numbers shown are at the head of the chain.\n\nAlso, to check if your node is synced, you may execute `eth_syncing` call check its result\n\n```text\ncurl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_syncing\",\"params\":[],\"id\":1}' localhost:8545\n```\n\nIf the result shows `false` it means that your node is **synced**\n\n```text\n{\"jsonrpc\":\"2.0\",\"result\":false,\"id\":1}\n```\n\n:::info\nIn blockchain, any node can never be 100% sure it is synced because there is no central source of truth - so your node\nis generally not able to tell you that it is synced but, it is able to tell you that it believes it is synced based on\nwhat it knows from the peers that it talks to).\n:::\n\n## I want to run two or more nodes on one machine. How can I achieve this?\n\nYou have to configure a few ports used by Nethermind.\n\n| Settings               | Default Value | Comment                                                                    |\n|------------------------|---------------|----------------------------------------------------------------------------|\n| JsonRpc.EnginePort     | 8551          | Remember to change it on your Consensus client.                            |\n| JsonRpc.Port           | 8545          | Only needed if you are using standard JsonRpc                              |\n| JsonRpc.WebSocketsPort | 8545          | By default same as the JsonRpc port.", "mimetype": "text/plain", "start_char_idx": 2055, "end_char_idx": 4036, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32055c1a-a0ac-4f80-83d1-2b4c7886a7d2": {"__data__": {"id_": "32055c1a-a0ac-4f80-83d1-2b4c7886a7d2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/faq.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "40dc6907-16f9-4b3b-8479-e4706214b737", "node_type": "4", "metadata": {}, "hash": "5edb9c888fb0e306aae0ce42c15512b0df2cf50dba76461841e18a704a566d61", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3e2a74c-15de-41de-bd23-b66787c6983f", "node_type": "1", "metadata": {}, "hash": "28ad9c83f2f37a4ee307373e09b2c39583d2f0814025efd10e661611239e6c87", "class_name": "RelatedNodeInfo"}}, "text": "Only relevant when you use WebSockets |\n| Network.P2PPort        | 30303         |                                                                            |\n| Network.DiscoveryPort  | 30303         |                                                                            |\n\nThe example of parameters that you have to pass to your second node when the first has been running with default\nsettings:\\\n`--JsonRpc.EnginePort 8552 --JsonRpc.Port 8546 --Network.P2PPort 30304 --Network.DiscoveryPort 30304`", "mimetype": "text/plain", "start_char_idx": 4037, "end_char_idx": 4543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c65a1b06-9beb-4e22-ad72-bccc349406f4": {"__data__": {"id_": "c65a1b06-9beb-4e22-ad72-bccc349406f4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/personal.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87ade3c9-09cc-45e9-9912-2ddf943a9405", "node_type": "4", "metadata": {}, "hash": "e6e8f177e80b5283f8abfbd880c8c84b439e118bf424c79f6d22c1c44a8577a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98060030-1779-4673-92e0-3a4083dd9f2a", "node_type": "1", "metadata": {}, "hash": "435ed87920f504961a732821b51984342903db46099dbba6fe94e2012e4031b9", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: personal namespace\nsidebar_label: personal\nsidebar_position: 6\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### personal_importRawKey\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `keyData`: *string* (hex data)\n\n2. `passphrase`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_importRawKey\",\n      \"params\": [keyData, passphrase]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### personal_listAccounts\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_listAccounts\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (address)\n\n</TabItem>\n</Tabs>\n\n### personal_lockAccount\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98060030-1779-4673-92e0-3a4083dd9f2a": {"__data__": {"id_": "98060030-1779-4673-92e0-3a4083dd9f2a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/personal.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87ade3c9-09cc-45e9-9912-2ddf943a9405", "node_type": "4", "metadata": {}, "hash": "e6e8f177e80b5283f8abfbd880c8c84b439e118bf424c79f6d22c1c44a8577a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c65a1b06-9beb-4e22-ad72-bccc349406f4", "node_type": "1", "metadata": {}, "hash": "f9f1d892ddec26e973814d9a6c603cce659601b28477997391c45749235fdeb4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "589bf77a-e03a-4a43-a522-8aa7784cd6c9", "node_type": "1", "metadata": {}, "hash": "245cb72d918818c0749b18bfec286a11b5c53b6f0d00558b4dbc4531af05a93d", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_lockAccount\",\n      \"params\": [address]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### personal_newAccount\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `passphrase`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_newAccount\",\n      \"params\": [passphrase]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### personal_unlockAccount\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `passphrase`: *string*", "mimetype": "text/plain", "start_char_idx": 1336, "end_char_idx": 2465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "589bf77a-e03a-4a43-a522-8aa7784cd6c9": {"__data__": {"id_": "589bf77a-e03a-4a43-a522-8aa7784cd6c9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/personal.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87ade3c9-09cc-45e9-9912-2ddf943a9405", "node_type": "4", "metadata": {}, "hash": "e6e8f177e80b5283f8abfbd880c8c84b439e118bf424c79f6d22c1c44a8577a7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98060030-1779-4673-92e0-3a4083dd9f2a", "node_type": "1", "metadata": {}, "hash": "435ed87920f504961a732821b51984342903db46099dbba6fe94e2012e4031b9", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"personal_unlockAccount\",\n      \"params\": [address, passphrase]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 2468, "end_char_idx": 2917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c250543-4167-466e-ab6c-445f66916a09": {"__data__": {"id_": "8c250543-4167-466e-ab6c-445f66916a09", "embedding": null, "metadata": {"file_path": "./nethermind_dist/system-requirements.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "822762fa-de38-4879-9724-110e95b97f27", "node_type": "4", "metadata": {}, "hash": "c7afdef2d1c715b68d265ee0d751036b7335e252faedafd7efbcf48212b70c39", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0665b851-949f-4263-82b8-f37562490b6f", "node_type": "1", "metadata": {}, "hash": "1040d01e23c5c4c3ab1ef3f55db2c7a9f7688530924c6d4d7d8a70646188d2f1", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: System requirements\nsidebar_position: 1\n---\n\n## Supported operating systems\n\nNethermind supports a broad range of modern _64-bit_ operating systems including but not limited to:\n\n- **Linux**\n\t- Alpine 3.17+\n\t- CentOS Stream 9+\n\t- Debian 11+\n\t- Fedora 37+\n\t- openSUSE 15+\n\t- RHEL 8+\n\t- SLES 15+\n\t- Ubuntu 20.04+\n- **Windows**\n\t- Windows 10+ (x64 only)\n\t- Windows Server 2012+ (x64 only)\n- **macOS** 10.15+\n\n## Hardware requirements\n\nSuggested requirements can be found below.\n\n| Network             | Memory | CPU cores |\n|---------------------|:------:|:---------:|\n| **Mainnet**         | 16 GB  | 4         |\n| **Mainnet archive** | 128 GB | 8         |\n| **Gnosis**          | 16 GB  | 2         |\n| **Energy Web**      | 8 GB   | 2         |\n| **Volta**           | 8 GB   | 2         |\n\n### Disk requirements\n\nRunning an Ethereum Mainnet full node requires at least a 1 TB fast disk, such as NVMe or a fast SSD. However, **2\nTB is recommended** to minimize maintenance requirements. To choose a specific disk model, we recommend\nchecking out [this guide](https://gist.github.com/yorickdowne/f3a3e79a573bf35767cd002cc977b038#the-good).\\\nChoosing a 2 TB disk is a comfortable option for most common Mainnet node usage patterns, including staking.\nNonetheless, for a comprehensive understanding of disk growth and usage, we recommend delving further into the topic.\n\n#### Database growth\n\nNethermind requires approximately 898 GB of disk space (as of Jan 2024) after a fresh Ethereum Mainnet sync using default parameters. This size increases over time as the Ethereum chain grows. The node's database is in its most optimal state immediately after a sync or full pruning. Following the initial sync, the database grows at a rate of approximately 27 GB per week.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0665b851-949f-4263-82b8-f37562490b6f": {"__data__": {"id_": "0665b851-949f-4263-82b8-f37562490b6f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/system-requirements.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "822762fa-de38-4879-9724-110e95b97f27", "node_type": "4", "metadata": {}, "hash": "c7afdef2d1c715b68d265ee0d751036b7335e252faedafd7efbcf48212b70c39", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8c250543-4167-466e-ab6c-445f66916a09", "node_type": "1", "metadata": {}, "hash": "c9b942c6b62bb996a6a63e0e711d6e1c0a59dc0c70cac37eba3be51f2e648a2f", "class_name": "RelatedNodeInfo"}}, "text": "To maintain this process, occasional resyncing or pruning of the node is necessary to bring it back to its optimal database size. For more info on managing node disk usage growth, see [how to reduce database size](../fundamentals/database.md#reducing-database-size).\\\nHaving a larger disk space allocation reduces the need for frequent maintenance and alleviates concerns about the chain outgrowing the available space. It's worth noting that the only drawback of running a smaller disk is the requirement for more regular resyncing or pruning. We believe that a 2 TB disk will suffice for most users. However, the choice between 1 TB and 2 TB depends on factors such as hardware costs, cloud provider expenses, and individual requirements.\n\nFor more details, see [Database size](../fundamentals/database.md#database-size).\n\n#### Disk speed\n\nThe speed of the disk often acts as a bottleneck for the node's performance. It is crucial for optimizing your validator's performance rewards and the syncing process. We highly recommend a disk with a minimum of 10,000 IOPS for both write and read operations. Slower disks may hinder your ability to synchronize the blockchain successfully.\n\n#### Sync modes and disk usage\n\nA node can be run using different syncing options, and each option has different characteristics of disk space usage.\n\n- **Archive node.** This mode stores the full historical state for all blocks. As of July 2023, an archive node requires at least 14 TB of disk space, and it grows by approximately 60 GB per week. \n- **Ancient barriers.** Nethermind allows you to specify how many old block bodies and receipts you want to store. By default, Nethermind sets the ancient barrier at block 11052984. This block is significant because it marks the deployment of the deposit contract required for consensus client deposit scanning for validators. Peers and JSON-RPC requests will not have access to block bodies and receipts older than the ancient barrier.\n- **Non-validator mode.** This mode drops all historical receipts and bodies, but it cannot be used for validation.\n\nFor more details, see [sync modes](../fundamentals/sync.md).", "mimetype": "text/plain", "start_char_idx": 1776, "end_char_idx": 3924, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4bad18d-be5f-4af0-a001-94777c14e8ec": {"__data__": {"id_": "a4bad18d-be5f-4af0-a001-94777c14e8ec", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0faca715-c912-48e2-a097-bfae00bbc5e1", "node_type": "1", "metadata": {}, "hash": "74a5e17082642362ddabe1278a8609d6a9fadb33481bc615a1a742e2395d2679", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: debug namespace\nsidebar_label: debug\nsidebar_position: 2\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### debug_deleteChainSlice\n\nDeletes a slice of a chain from the tree on all branches (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `startNumber`: *string* (hex integer)\n\n2. `force`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_deleteChainSlice\",\n      \"params\": [startNumber, force]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### debug_getBadBlocks\n\nReturn list of invalid blocks.\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getBadBlocks\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `block`: *object*\n    - `author`: *string* (address)\n    - `baseFeePerGas`: *string* (hex integer)\n    - `blobGasUsed`: *string* (hex integer)\n    - `difficulty`: *string* (hex integer)\n    - `excessBlobGas`: *string* (hex integer)\n    - `extraData`: *string* (hex data)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0faca715-c912-48e2-a097-bfae00bbc5e1": {"__data__": {"id_": "0faca715-c912-48e2-a097-bfae00bbc5e1", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4bad18d-be5f-4af0-a001-94777c14e8ec", "node_type": "1", "metadata": {}, "hash": "61bf89793df71989cfe6970eac3a8dbe79e847d5ac540a89d091b4d912bb8e62", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f3408fb-792b-439e-8568-3619535ef40a", "node_type": "1", "metadata": {}, "hash": "b33af4773b28108431ed3eea50b0ec3dd1331f3af59e96563ea7c36f40a53ad5", "class_name": "RelatedNodeInfo"}}, "text": "- `gasLimit`: *string* (hex integer)\n    - `gasUsed`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `logsBloom`: *string* (hex data)\n    - `miner`: *string* (address)\n    - `mixHash`: *string* (hash)\n    - `nonce`: *string* (hex data)\n    - `number`: *string* (hex integer)\n    - `parentBeaconBlockRoot`: *string* (hash)\n    - `parentHash`: *string* (hash)\n    - `receiptsRoot`: *string* (hash)\n    - `sha3Uncles`: *string* (hash)\n    - `signature`: *string* (hex data)\n    - `size`: *string* (hex integer)\n    - `stateRoot`: *string* (hash)\n    - `step`: *string* (hex integer)\n    - `timestamp`: *string* (hex integer)\n    - `totalDifficulty`: *string* (hex integer)\n    - `transactions`: array of *object*\n    - `transactionsRoot`: *string* (hash)\n    - `uncles`: array of *string* (hash)\n    - `withdrawals`: array of *object*\n      - `address`: *string* (address)\n      - `amountInGwei`: *string* (hex integer)\n      - `amountInWei`: *string* (hex integer)\n      - `index`: *string* (hex integer)\n      - `validatorIndex`: *string* (hex integer)\n    - `withdrawalsRoot`: *string* (hash)\n  - `hash`: *string* (hash)\n  - `rlp`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getBlockRlp\n\nRetrieves a block in the RLP-serialized form.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `number`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 1580, "end_char_idx": 2922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f3408fb-792b-439e-8568-3619535ef40a": {"__data__": {"id_": "3f3408fb-792b-439e-8568-3619535ef40a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0faca715-c912-48e2-a097-bfae00bbc5e1", "node_type": "1", "metadata": {}, "hash": "74a5e17082642362ddabe1278a8609d6a9fadb33481bc615a1a742e2395d2679", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cbbdcea-b806-4801-9d7d-0c7d5ae32383", "node_type": "1", "metadata": {}, "hash": "55e589aaf4ce8bfa36af02c29a930248ca4e47ef6a930371254e411a5994f398", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getBlockRlp\",\n      \"params\": [number]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getBlockRlpByHash\n\nRetrieves a block in the RLP-serialized form.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `hash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getBlockRlpByHash\",\n      \"params\": [hash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getChainLevel\n\nRetrieves a representation of tree branches on a given chain level (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `number`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 2925, "end_char_idx": 4175, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cbbdcea-b806-4801-9d7d-0c7d5ae32383": {"__data__": {"id_": "3cbbdcea-b806-4801-9d7d-0c7d5ae32383", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f3408fb-792b-439e-8568-3619535ef40a", "node_type": "1", "metadata": {}, "hash": "b33af4773b28108431ed3eea50b0ec3dd1331f3af59e96563ea7c36f40a53ad5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dce38309-8c48-477e-aee4-55ae104ec487", "node_type": "1", "metadata": {}, "hash": "1db6ce56553f4361521f12d0b122f96a8611cb7a537e611a1ec94430a71522c7", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getChainLevel\",\n      \"params\": [number]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `blockInfos`: array of *object*\n    - `blockHash`: *string* (hash)\n    - `isFinalized`: *boolean*\n    - `totalDifficulty`: *string* (hex integer)\n    - `wasProcessed`: *boolean*\n  - `hasBlockOnMainChain`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_getConfigValue\n\nRetrieves the Nethermind configuration value, e.g. JsonRpc.Enabled\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `category`: *string*\n\n2. `name`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getConfigValue\",\n      \"params\": [category, name]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n\n</TabItem>\n</Tabs>\n\n### debug_getRawBlock\n\nGet Raw Block format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 4178, "end_char_idx": 5686, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dce38309-8c48-477e-aee4-55ae104ec487": {"__data__": {"id_": "dce38309-8c48-477e-aee4-55ae104ec487", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cbbdcea-b806-4801-9d7d-0c7d5ae32383", "node_type": "1", "metadata": {}, "hash": "55e589aaf4ce8bfa36af02c29a930248ca4e47ef6a930371254e411a5994f398", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15672a96-3441-405f-a189-95109b9a0526", "node_type": "1", "metadata": {}, "hash": "f7d69f4c6c744538d803aefc786d9199ef4e9e593a06dce52cc663b873fd9fe2", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawBlock\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getRawHeader\n\nGet Raw Header format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawHeader\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getRawReceipts\n\nGet Raw Receipt format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 5689, "end_char_idx": 7040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15672a96-3441-405f-a189-95109b9a0526": {"__data__": {"id_": "15672a96-3441-405f-a189-95109b9a0526", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dce38309-8c48-477e-aee4-55ae104ec487", "node_type": "1", "metadata": {}, "hash": "1db6ce56553f4361521f12d0b122f96a8611cb7a537e611a1ec94430a71522c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5d1442b-f414-4b50-a972-8420161e07ea", "node_type": "1", "metadata": {}, "hash": "640ab66906b0d2bdddd04fc8f4f228a2b61ed64ec3348f3f63dde5b114162f18", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawReceipts\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getRawTransaction\n\nGet Raw Transaction format.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transactionHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 7043, "end_char_idx": 7653, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5d1442b-f414-4b50-a972-8420161e07ea": {"__data__": {"id_": "c5d1442b-f414-4b50-a972-8420161e07ea", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15672a96-3441-405f-a189-95109b9a0526", "node_type": "1", "metadata": {}, "hash": "f7d69f4c6c744538d803aefc786d9199ef4e9e593a06dce52cc663b873fd9fe2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a10ee75-b2c3-421a-839c-fe8107fa3b17", "node_type": "1", "metadata": {}, "hash": "6afab61773af630da96a0e82b8aaf6927e2a0400c9a4822ef5c7dc40d396860d", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getRawTransaction\",\n      \"params\": [transactionHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### debug_getSyncStage\n\nRetrives Nethermind Sync Stage, With extra Metadata\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_getSyncStage\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `currentStage`: *string*\n\n</TabItem>\n</Tabs>\n\n### debug_insertReceipts\n\nInsert receipts for the block after verifying receipts root correctness.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2.", "mimetype": "text/plain", "start_char_idx": 7656, "end_char_idx": 8920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a10ee75-b2c3-421a-839c-fe8107fa3b17": {"__data__": {"id_": "0a10ee75-b2c3-421a-839c-fe8107fa3b17", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5d1442b-f414-4b50-a972-8420161e07ea", "node_type": "1", "metadata": {}, "hash": "640ab66906b0d2bdddd04fc8f4f228a2b61ed64ec3348f3f63dde5b114162f18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7e514a4-990e-49e3-84d5-c9cc77fc0cf2", "node_type": "1", "metadata": {}, "hash": "6471d44299df32ed47c5c266287f0a062a3eca8235202167e1275bf92b17bda7", "class_name": "RelatedNodeInfo"}}, "text": "`receiptForRpc`: array of *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*", "mimetype": "text/plain", "start_char_idx": 8921, "end_char_idx": 9961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7e514a4-990e-49e3-84d5-c9cc77fc0cf2": {"__data__": {"id_": "d7e514a4-990e-49e3-84d5-c9cc77fc0cf2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a10ee75-b2c3-421a-839c-fe8107fa3b17", "node_type": "1", "metadata": {}, "hash": "6afab61773af630da96a0e82b8aaf6927e2a0400c9a4822ef5c7dc40d396860d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2c44190-8f1f-4aca-ab21-3f0a2bd20128", "node_type": "1", "metadata": {}, "hash": "835b22aaf8c24dd27b28073531821b51823543e485ec5b15a1e90e17cb13fb61", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_insertReceipts\",\n      \"params\": [blockParameter, receiptForRpc]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_migrateReceipts\n\nSets the block number up to which receipts will be migrated to (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockNumber`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_migrateReceipts\",\n      \"params\": [blockNumber]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_resetHead\n\nUpdates / resets head block - use only when the node got stuck due to DB / memory corruption (Nethermind specific).\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 9964, "end_char_idx": 11295, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2c44190-8f1f-4aca-ab21-3f0a2bd20128": {"__data__": {"id_": "f2c44190-8f1f-4aca-ab21-3f0a2bd20128", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7e514a4-990e-49e3-84d5-c9cc77fc0cf2", "node_type": "1", "metadata": {}, "hash": "6471d44299df32ed47c5c266287f0a062a3eca8235202167e1275bf92b17bda7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efa13523-8c5f-4322-b8d9-758bef6f497f", "node_type": "1", "metadata": {}, "hash": "2ad4e03a06081c56fb4f3b8c2f44f442c81e7f4793a007c4872884ba795007a9", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_resetHead\",\n      \"params\": [blockHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### debug_standardTraceBadBlockToFile\n\nThis method is similar to the `debug_standardTraceBlockToFile` method, but can be used to obtain information about a block that has been rejected as invalid.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 11298, "end_char_idx": 12430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efa13523-8c5f-4322-b8d9-758bef6f497f": {"__data__": {"id_": "efa13523-8c5f-4322-b8d9-758bef6f497f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2c44190-8f1f-4aca-ab21-3f0a2bd20128", "node_type": "1", "metadata": {}, "hash": "835b22aaf8c24dd27b28073531821b51823543e485ec5b15a1e90e17cb13fb61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "527e28ad-9d10-4335-ba12-b8b1f7b5c59f", "node_type": "1", "metadata": {}, "hash": "f0811fd4a4d00b4011fd7b70d1e732b3708257dd1e11195c34b97b1a24261e71", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_standardTraceBadBlockToFile\",\n      \"params\": [blockHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_standardTraceBlockToFile\n\nWrites to a file the full stack trace of all invoked opcodes of the transaction specified (or all transactions if not specified) that was included in the block specified. The parent of the block must be present or it will fail.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 12433, "end_char_idx": 13667, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "527e28ad-9d10-4335-ba12-b8b1f7b5c59f": {"__data__": {"id_": "527e28ad-9d10-4335-ba12-b8b1f7b5c59f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efa13523-8c5f-4322-b8d9-758bef6f497f", "node_type": "1", "metadata": {}, "hash": "2ad4e03a06081c56fb4f3b8c2f44f442c81e7f4793a007c4872884ba795007a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9018f075-ad16-4a88-8c55-27c97aa86886", "node_type": "1", "metadata": {}, "hash": "6ab7c244e4327cb623408b12c60d0211f25a9927184bb8745a7062581ddc1032", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_standardTraceBlockToFile\",\n      \"params\": [blockHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceBlock\n\nReturns the full stack trace of all invoked opcodes of all transactions that were included in the block specified. The parent of the block must be present or it will fail.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockRlp`: *string* (hex data)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 13670, "end_char_idx": 14834, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9018f075-ad16-4a88-8c55-27c97aa86886": {"__data__": {"id_": "9018f075-ad16-4a88-8c55-27c97aa86886", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "527e28ad-9d10-4335-ba12-b8b1f7b5c59f", "node_type": "1", "metadata": {}, "hash": "f0811fd4a4d00b4011fd7b70d1e732b3708257dd1e11195c34b97b1a24261e71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7577b263-cd58-4cd8-9cdd-7bb610930c4f", "node_type": "1", "metadata": {}, "hash": "4ee2e1ce1f1c21c86f07ba1469144a42386bc4ebb8d109452f9f27838f7da75a", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceBlock\",\n      \"params\": [blockRlp, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceBlockByHash\n\nSimilar to debug_traceBlock, this method accepts a block hash and replays the block that is already present in the database.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2.", "mimetype": "text/plain", "start_char_idx": 14837, "end_char_idx": 16076, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7577b263-cd58-4cd8-9cdd-7bb610930c4f": {"__data__": {"id_": "7577b263-cd58-4cd8-9cdd-7bb610930c4f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9018f075-ad16-4a88-8c55-27c97aa86886", "node_type": "1", "metadata": {}, "hash": "6ab7c244e4327cb623408b12c60d0211f25a9927184bb8745a7062581ddc1032", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4cea4b5c-5cd6-47f9-8658-df0e5f352bad", "node_type": "1", "metadata": {}, "hash": "88c0fdf4a31c2ce8fc99d08f0d2b6542ca30879479f334de79b9df23ee50100e", "class_name": "RelatedNodeInfo"}}, "text": "`options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceBlockByHash\",\n      \"params\": [blockHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceBlockByNumber\n\nSimilar to debug_traceBlock, this method accepts a block number as well as \"latest\" or \"finalized\" and replays the block that is already present in the database.", "mimetype": "text/plain", "start_char_idx": 16077, "end_char_idx": 17688, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4cea4b5c-5cd6-47f9-8658-df0e5f352bad": {"__data__": {"id_": "4cea4b5c-5cd6-47f9-8658-df0e5f352bad", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7577b263-cd58-4cd8-9cdd-7bb610930c4f", "node_type": "1", "metadata": {}, "hash": "4ee2e1ce1f1c21c86f07ba1469144a42386bc4ebb8d109452f9f27838f7da75a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "09b095d5-543c-48d0-8672-c482b687f17d", "node_type": "1", "metadata": {}, "hash": "9a36df2b38b4d799f686185f66785eeb1f7c0af7b1f5a11efd0a97ae828a8c59", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 17690, "end_char_idx": 18280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09b095d5-543c-48d0-8672-c482b687f17d": {"__data__": {"id_": "09b095d5-543c-48d0-8672-c482b687f17d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4cea4b5c-5cd6-47f9-8658-df0e5f352bad", "node_type": "1", "metadata": {}, "hash": "88c0fdf4a31c2ce8fc99d08f0d2b6542ca30879479f334de79b9df23ee50100e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b349da3-541a-4408-8129-91c8f18557e9", "node_type": "1", "metadata": {}, "hash": "9407e3ff6312502239a5064959c22a1380d9c36bf42ff0884722fe45a92158fb", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceBlockByNumber\",\n      \"params\": [blockParameter, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceCall\n\nThis method lets you run an eth_call within the context of the given block execution using the final state of parent block as the base. The block can be specified either by hash or by number. It takes the same input object as a eth_call. It returns the same output as debug_traceTransaction.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 18283, "end_char_idx": 19663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b349da3-541a-4408-8129-91c8f18557e9": {"__data__": {"id_": "4b349da3-541a-4408-8129-91c8f18557e9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "09b095d5-543c-48d0-8672-c482b687f17d", "node_type": "1", "metadata": {}, "hash": "9a36df2b38b4d799f686185f66785eeb1f7c0af7b1f5a11efd0a97ae828a8c59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "183ce983-931c-49b3-841f-e511ec3bc825", "node_type": "1", "metadata": {}, "hash": "22e3f8926d090bb71f779b8bbaf71113e8e8831de35f9e21313d2a50f38252a8", "class_name": "RelatedNodeInfo"}}, "text": "`call`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n3.", "mimetype": "text/plain", "start_char_idx": 19664, "end_char_idx": 20896, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "183ce983-931c-49b3-841f-e511ec3bc825": {"__data__": {"id_": "183ce983-931c-49b3-841f-e511ec3bc825", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b349da3-541a-4408-8129-91c8f18557e9", "node_type": "1", "metadata": {}, "hash": "9407e3ff6312502239a5064959c22a1380d9c36bf42ff0884722fe45a92158fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9266f42f-e049-4cae-b2b1-4bf09df21c1f", "node_type": "1", "metadata": {}, "hash": "b71d3a1a04d54f29374ef8fde020b73b1f756195818670ce4ed490cdb6ad96c5", "class_name": "RelatedNodeInfo"}}, "text": "`options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceCall\",\n      \"params\": [call, blockParameter, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransaction\n\nThis method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.", "mimetype": "text/plain", "start_char_idx": 20897, "end_char_idx": 22618, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9266f42f-e049-4cae-b2b1-4bf09df21c1f": {"__data__": {"id_": "9266f42f-e049-4cae-b2b1-4bf09df21c1f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "183ce983-931c-49b3-841f-e511ec3bc825", "node_type": "1", "metadata": {}, "hash": "22e3f8926d090bb71f779b8bbaf71113e8e8831de35f9e21313d2a50f38252a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c04981d8-a728-44d0-acc3-321f0845b402", "node_type": "1", "metadata": {}, "hash": "112f459bfdea21ba5d5da5c9bd820b3e7a91b771de6dcd06648a08fba616c1ee", "class_name": "RelatedNodeInfo"}}, "text": "<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transactionHash`: *string* (hash)\n\n2. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransaction\",\n      \"params\": [transactionHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionByBlockAndIndex\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 22620, "end_char_idx": 24228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c04981d8-a728-44d0-acc3-321f0845b402": {"__data__": {"id_": "c04981d8-a728-44d0-acc3-321f0845b402", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9266f42f-e049-4cae-b2b1-4bf09df21c1f", "node_type": "1", "metadata": {}, "hash": "b71d3a1a04d54f29374ef8fde020b73b1f756195818670ce4ed490cdb6ad96c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe8d9dab-3816-412d-af27-7435423452bd", "node_type": "1", "metadata": {}, "hash": "c20d54cc65defd8f628b80c16091c8e7631c3b541e7b289cab4851149411fa19", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `txIndex`: *string* (hex integer)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 24229, "end_char_idx": 24802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe8d9dab-3816-412d-af27-7435423452bd": {"__data__": {"id_": "fe8d9dab-3816-412d-af27-7435423452bd", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c04981d8-a728-44d0-acc3-321f0845b402", "node_type": "1", "metadata": {}, "hash": "112f459bfdea21ba5d5da5c9bd820b3e7a91b771de6dcd06648a08fba616c1ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad82b241-512c-4c8f-8527-71e99bba281f", "node_type": "1", "metadata": {}, "hash": "65fecd709e6a5de5f81cf758b3578c15518487a1b188cd4f2067b92eb1c4ae7c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionByBlockAndIndex\",\n      \"params\": [blockParameter, txIndex, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionByBlockhashAndIndex\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `txIndex`: *string* (hex integer)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 24805, "end_char_idx": 26415, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad82b241-512c-4c8f-8527-71e99bba281f": {"__data__": {"id_": "ad82b241-512c-4c8f-8527-71e99bba281f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe8d9dab-3816-412d-af27-7435423452bd", "node_type": "1", "metadata": {}, "hash": "c20d54cc65defd8f628b80c16091c8e7631c3b541e7b289cab4851149411fa19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0793ea21-3815-40b7-a632-ba433bd07c9a", "node_type": "1", "metadata": {}, "hash": "9461c0564167892130432c4e534ac9815539e92169d14a7569f22c8040b79efd", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionByBlockhashAndIndex\",\n      \"params\": [blockHash, txIndex, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionInBlockByHash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockRlp`: *string* (hex data)\n\n2. `transactionHash`: *string* (hash)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 26418, "end_char_idx": 28025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0793ea21-3815-40b7-a632-ba433bd07c9a": {"__data__": {"id_": "0793ea21-3815-40b7-a632-ba433bd07c9a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad82b241-512c-4c8f-8527-71e99bba281f", "node_type": "1", "metadata": {}, "hash": "65fecd709e6a5de5f81cf758b3578c15518487a1b188cd4f2067b92eb1c4ae7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e177e861-cd6a-489f-9572-cd97464a5c99", "node_type": "1", "metadata": {}, "hash": "1e98f9024f0e3d90d57c037bde73f8426cec522f5f141bcb1a28a9fa452f4387", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionInBlockByHash\",\n      \"params\": [blockRlp, transactionHash, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>\n\n### debug_traceTransactionInBlockByIndex\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockRlp`: *string* (hex data)\n\n2. `txIndex`: *string* (hex integer)\n\n3. `options`: *object*\n    - `disableMemory`: *boolean*\n    - `disableStack`: *boolean*\n    - `disableStorage`: *boolean*\n    - `enableMemory`: *boolean*\n    - `timeout`: *string*\n    - `tracer`: *string*\n    - `tracerConfig`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `item`: *object*\n          <!--[circular ref]-->\n        - `valueKind`: *integer*\n    - `txHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 28028, "end_char_idx": 29636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e177e861-cd6a-489f-9572-cd97464a5c99": {"__data__": {"id_": "e177e861-cd6a-489f-9572-cd97464a5c99", "embedding": null, "metadata": {"file_path": "./nethermind_dist/debug.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed", "node_type": "4", "metadata": {}, "hash": "021f5a569d03d0a843c63c5c1679ae891c9a4f32e9d2a590be2a70cc5ee4f70f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0793ea21-3815-40b7-a632-ba433bd07c9a", "node_type": "1", "metadata": {}, "hash": "9461c0564167892130432c4e534ac9815539e92169d14a7569f22c8040b79efd", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"debug_traceTransactionInBlockByIndex\",\n      \"params\": [blockRlp, txIndex, options]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `customTracerResult`: *object*\n    - `value`: *object*\n  - `entries`: array of *object*\n    - `depth`: *string* (hex integer)\n    - `error`: *string*\n    - `gas`: *string* (hex integer)\n    - `gasCost`: *string* (hex integer)\n    - `memory`: array of *string*\n    - `opcode`: *string*\n    - `programCounter`: *string* (hex integer)\n    - `stack`: array of *string*\n    - `storage`: map of *string*\n  - `failed`: *boolean*\n  - `gas`: *string* (hex integer)\n  - `returnValue`: *string* (hex data)\n  - `storagesByDepth`: array of map of *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 29639, "end_char_idx": 30655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88041be2-debd-49b6-913f-3613385eefbf": {"__data__": {"id_": "88041be2-debd-49b6-913f-3613385eefbf", "embedding": null, "metadata": {"file_path": "./nethermind_dist/net.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a08e001a-8f19-4613-be32-3d77915d2f10", "node_type": "4", "metadata": {}, "hash": "c0e8367c0a9f47df2488ca9e5cfbfc1c21f5ee146ecc2b7f80777a826add30af", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cfa21f38-c744-4198-8e49-66956bad0e95", "node_type": "1", "metadata": {}, "hash": "bd7a68d7e7d0d905b17ea532da72ebe4149356a5be10870baa5771a51b64b9f9", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: net namespace\nsidebar_label: net\nsidebar_position: 4\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### net_listening\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_listening\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### net_localAddress\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_localAddress\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (address)\n\n</TabItem>\n</Tabs>\n\n### net_localEnode\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_localEnode\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfa21f38-c744-4198-8e49-66956bad0e95": {"__data__": {"id_": "cfa21f38-c744-4198-8e49-66956bad0e95", "embedding": null, "metadata": {"file_path": "./nethermind_dist/net.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a08e001a-8f19-4613-be32-3d77915d2f10", "node_type": "4", "metadata": {}, "hash": "c0e8367c0a9f47df2488ca9e5cfbfc1c21f5ee146ecc2b7f80777a826add30af", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88041be2-debd-49b6-913f-3613385eefbf", "node_type": "1", "metadata": {}, "hash": "e14cb3773b917fb00f1d640fd30cdf8a27208396124fdc6f7b5318e3facecb14", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### net_peerCount\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_peerCount\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### net_version\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"net_version\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 1406, "end_char_idx": 2352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7119b3a9-f68a-400c-a760-9b8e18fccb3f": {"__data__": {"id_": "7119b3a9-f68a-400c-a760-9b8e18fccb3f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de75718d-211d-4707-bd66-e473a3054f96", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd8e40ad-41ca-45bf-9020-df0b796075cc", "node_type": "1", "metadata": {}, "hash": "514ae492b553db05636e403cdef53907a0defdb53d8ca1330460611e93d51395", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Private networks\ndescription: Use Kurtosis to deploy a private Ethereum devnet with Nethermind and any consensus client at any scale you need, wherever you need it.\nsidebar_position: 8\n---\n\nThis guide will walk you through using [Kurtosis `ethereum-package`](https://github.com/ethpandaops/ethereum-package) to spin up a private, proof-of-stake (PoS) Ethereum devnet with three full Ethereum nodes locally over Docker. At the end of the guide, you will learn how to scale up your testnet on Kubernetes as well as enable optional services for your local testnet, such as network observability tools (e.g., Grafana, Prometheus) and Flashbot's `mev-boost` infrastructure to simulate MEV workflows.\n\n## Step 1: Prerequisites\n\nBefore you begin, ensure you have [Kurtosis CLI](https://docs.kurtosis.com/install) and [Docker](https://docs.docker.com/get-docker) installed. The [`ethereum-package`](https://github.com/ethpandaops/ethereum-package) is a Kurtosis environment definition known as a [package](https://docs.kurtosis.com/concepts-reference/packages). For more info about Kurtosis, see the [Kurtosis docs](https://docs.kurtosis.com).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd8e40ad-41ca-45bf-9020-df0b796075cc": {"__data__": {"id_": "bd8e40ad-41ca-45bf-9020-df0b796075cc", "embedding": null, "metadata": {"file_path": "./nethermind_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de75718d-211d-4707-bd66-e473a3054f96", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7119b3a9-f68a-400c-a760-9b8e18fccb3f", "node_type": "1", "metadata": {}, "hash": "7beef6ffdfe03f8212ca94fdfa458f183023bbeea75e030005601a0459235d96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4aac5a90-4f91-4448-859c-13b2578f4f41", "node_type": "1", "metadata": {}, "hash": "ab04133a2265500c330425936e64418918ef31f6282eca4bb9af544a572ac980", "class_name": "RelatedNodeInfo"}}, "text": "## Step 2: Configure your network\n\nNext, in your home directory, create a file with the name `network_params.json` and populate it with the following contents:\n\n```json title=\"network_params.json\"\n{\n  \"participants\": [\n    {\n      \"el_client_type\": \"nethermind\",\n      \"el_client_image\": \"nethermind/nethermind:latest\",\n      \"cl_client_type\": \"lighthouse\",\n      \"cl_client_image\": \"sigp/lighthouse:latest\",\n      \"count\": 1\n    },\n    {\n      \"el_client_type\": \"nethermind\",\n      \"el_client_image\": \"nethermind/nethermind:latest\",\n      \"cl_client_type\": \"teku\",\n      \"cl_client_image\": \"consensys/teku:latest\",\n      \"count\": 1\n    },\n    {\n      \"el_client_type\": \"nethermind\",\n      \"el_client_image\": \"nethermind/nethermind:latest\",\n      \"cl_client_type\": \"lodestar\",\n      \"cl_client_image\": \"chainsafe/lodestar:next\",\n      \"count\": 1\n    }\n  ],\n  \"mev_type\": \"None\",\n  \"launch_additional_services\": false\n}\n```\n\nAs you can see above, you have effectively created a network configuration file that Kurtosis will use to pass in the necessary parameters at runtime for your network. Notice that the `participant` key describes the execution and consensus client pairing desired for each full node and how many nodes of that type to instantiate.\n\nThere are many other configurations and flags you can use, including metrics and observability tools (e.g., Grafana, Prometheus, etc). For all supported options, see the `ethereum-package` [configuration](https://github.com/ethpandaops/ethereum-package#configuration).\n\n## Step 3: Deploy\n\nFinally, once you have saved the `network_params.json` file, it is time to deploy the private net:\n\n```bash\nkurtosis run github.com/ethpandaops/ethereum-package \"$(cat ~/network_params.json)\"\n```\n\nKurtosis will use the `ethereum-package` environment definition and your custom network configuration (defined in `network_params.json`) to spin up your network.", "mimetype": "text/plain", "start_char_idx": 1148, "end_char_idx": 3050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4aac5a90-4f91-4448-859c-13b2578f4f41": {"__data__": {"id_": "4aac5a90-4f91-4448-859c-13b2578f4f41", "embedding": null, "metadata": {"file_path": "./nethermind_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de75718d-211d-4707-bd66-e473a3054f96", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd8e40ad-41ca-45bf-9020-df0b796075cc", "node_type": "1", "metadata": {}, "hash": "514ae492b553db05636e403cdef53907a0defdb53d8ca1330460611e93d51395", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6fa43437-a036-463b-80ff-b3664bd8855c", "node_type": "1", "metadata": {}, "hash": "b278c1119370c1363f6b555a6cd82d9a275bb58a5a64cd0319bf5e3fed9b806e", "class_name": "RelatedNodeInfo"}}, "text": "Kurtosis will first spin up an [enclave][enclaves] (i.e., an ephemeral, isolated environment) and begin to configure and instantiate the nodes in your network. In the end, Kurtosis will print the services running in your enclave that form your private testnet alongside all the container ports and files that were generated and used to start up the private testnet.\n\nHere is a sample output:\n\n```\nINFO[2023-09-01T16:10:45-04:00] ====================================================\nINFO[2023-09-01T16:10:45-04:00] ||          Created enclave: timid-knoll          ||\nINFO[2023-09-01T16:10:45-04:00] ====================================================\nName:            timid-knoll\nUUID:            939dfb5d59b0\nStatus:          RUNNING\nCreation Time:   Fri, 01 Sep 2023 16:08:57 EDT\n\n========================================= Files Artifacts =========================================\nUUID           Name\na876b06035b7   1-lighthouse-nethermind-0-63\n87955ef69845   2-teku-nethermind-64-127\n4f77377da494   3-lodestar-nethermind-128-191\n9734313101e3   cl-genesis-data\n4164ed5c594c   el-genesis-data\na49a3d2774b5   genesis-generation-config-cl\n16fcc4f96236   genesis-generation-config-el\n5fc72346f646   geth-prefunded-keys\n96ae153a0b51   prysm-password\n\n========================================== User Services ==========================================\nUUID           Name                                       Ports                                         Status\nf369802ad2ae   cl-1-lighthouse-nethermind                 http: 4000/tcp -> http://127.0.0.1:49894      RUNNING\n                                                          metrics: 5054/tcp -> http://127.0.0.1:49892\n                                                          tcp-discovery: 9000/tcp -> 127.0.0.1:49893\n                                                          udp-discovery: 9000/udp -> 127.0.0.1:64949\n5e14eb26ef45   cl-1-lighthouse-nethermind-validator       http: 5042/tcp -> 127.", "mimetype": "text/plain", "start_char_idx": 3051, "end_char_idx": 5007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fa43437-a036-463b-80ff-b3664bd8855c": {"__data__": {"id_": "6fa43437-a036-463b-80ff-b3664bd8855c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de75718d-211d-4707-bd66-e473a3054f96", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4aac5a90-4f91-4448-859c-13b2578f4f41", "node_type": "1", "metadata": {}, "hash": "ab04133a2265500c330425936e64418918ef31f6282eca4bb9af544a572ac980", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dbdeb1e8-95c1-49b6-933d-5545aa75dff4", "node_type": "1", "metadata": {}, "hash": "99ecaa63d688652c1a0354502338aa8c0a03704f865a3b31dfad50464234b32c", "class_name": "RelatedNodeInfo"}}, "text": "0.0.1:49895             RUNNING\n                                                          metrics: 5064/tcp -> http://127.0.0.1:49896\nfed533d0e143   cl-2-teku-nethermind                       http: 4000/tcp -> 127.0.0.1:49899             RUNNING\n                                                          metrics: 8008/tcp -> 127.0.0.1:49897\n                                                          tcp-discovery: 9000/tcp -> 127.0.0.1:49898\n                                                          udp-discovery: 9000/udp -> 127.0.0.1:55521\n69cd832de246   cl-3-lodestar-nethermind                   http: 4000/tcp -> 127.0.0.1:49903             RUNNING\n                                                          metrics: 8008/tcp -> 127.0.0.1:49901\n                                                          tcp-discovery: 9000/tcp -> 127.0.0.1:49902\n                                                          udp-discovery: 9000/udp -> 127.0.0.1:50507\n75e3eec0c7d1   cl-3-lodestar-nethermind-validator         metrics: 8008/tcp -> 127.0.0.1:49904          RUNNING\ne10c3f07e0e0   el-1-nethermind-lighthouse                 engine-rpc: 8551/tcp -> 127.0.0.1:49872       RUNNING\n                                                          rpc: 8545/tcp -> 127.0.0.1:49870\n                                                          tcp-discovery: 30303/tcp -> 127.0.0.1:49869\n                                                          udp-discovery: 30303/udp -> 127.0.0.1:64508\n                                                          ws: 8546/tcp -> 127.0.0.1:49871\nc6a28d3136fe   el-2-nethermind-teku                       engine-rpc: 8551/tcp -> 127.0.0.1:49873       RUNNING\n                                                          rpc: 8545/tcp -> 127.0.0.1:49875\n                                                          tcp-discovery: 30303/tcp -> 127.0.0.", "mimetype": "text/plain", "start_char_idx": 5007, "end_char_idx": 6865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dbdeb1e8-95c1-49b6-933d-5545aa75dff4": {"__data__": {"id_": "dbdeb1e8-95c1-49b6-933d-5545aa75dff4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de75718d-211d-4707-bd66-e473a3054f96", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6fa43437-a036-463b-80ff-b3664bd8855c", "node_type": "1", "metadata": {}, "hash": "b278c1119370c1363f6b555a6cd82d9a275bb58a5a64cd0319bf5e3fed9b806e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54f83690-4a3d-4947-b3aa-5fdb8a38e42d", "node_type": "1", "metadata": {}, "hash": "2c0bc5babbc85c5374c7bf16b6d3f6101fd9c7c7b4a28a2a760c0831fe2f4f0d", "class_name": "RelatedNodeInfo"}}, "text": "1:49874\n                                                          udp-discovery: 30303/udp -> 127.0.0.1:52495\n                                                          ws: 8546/tcp -> 127.0.0.1:49876\n2fae3b3c41d3   el-3-nethermind-lodestar                   engine-rpc: 8551/tcp -> 127.0.0.1:49890       RUNNING\n                                                          rpc: 8545/tcp -> 127.0.0.1:49888\n                                                          tcp-discovery: 30303/tcp -> 127.0.0.1:49891\n                                                          udp-discovery: 30303/udp -> 127.0.0.1:62119\n                                                          ws: 8546/tcp -> 127.0.0.1:49889\n403cafe8416e   prelaunch-data-generator-cl-genesis-data   <none>                                        RUNNING\nebea71008cf4   prelaunch-data-generator-el-genesis-data   <none>                                        RUNNING\n```\n\nAnd that is it! You now have a 3-node, private Ethereum devnet with Nethermind/Lodestar, Nethermind/Teku, and Nethermind/Lighthouse execution and consensus client combinations.\n\nNotice how, at the end, Kurtosis will print out the contents of your enclave, which includes both the various [files artifacts](https://docs.kurtosis.com/concepts-reference/files-artifacts) and services that form your network. Kurtosis also maps the container ports to ephemeral local ports on your machine.\n\nGenesis data was generated using this [genesis-generator](https://github.com/ethpandaops/ethereum-genesis-generator) to bootstrap the execution and consensus clients for each node. The end result will be a private testnet with nodes deployed as Docker containers in an ephemeral, isolated environment on your machine called an [enclave][enclaves].\n\nKurtosis packages are modular, reproducible, and will work over Docker or Kubernetes. Read on to learn about additional services and configurations you may want to add to your private network.\n\n## Step 4: Optional workflows\n\nThis section briefly covers some optional configurations for your private devnet that are commonly used for validating and testing node-level behavior.", "mimetype": "text/plain", "start_char_idx": 6865, "end_char_idx": 9003, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54f83690-4a3d-4947-b3aa-5fdb8a38e42d": {"__data__": {"id_": "54f83690-4a3d-4947-b3aa-5fdb8a38e42d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/private-networks.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de75718d-211d-4707-bd66-e473a3054f96", "node_type": "4", "metadata": {}, "hash": "07264c7100fd8446c25f12e5031d49990e390d7e8ea3d1cc1d6ead5bc929738c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dbdeb1e8-95c1-49b6-933d-5545aa75dff4", "node_type": "1", "metadata": {}, "hash": "99ecaa63d688652c1a0354502338aa8c0a03704f865a3b31dfad50464234b32c", "class_name": "RelatedNodeInfo"}}, "text": "### Simulating MEV workflows with `mev-boost`\n\nThe `ethereum-package` can simulate out-of-protocol Proposer Builder Separation (PBS) workflows using Flashbot's `mev-boost` infrastructure. With a single flag, you can configure your network's validators to be instantiated with `mev-boost` and be registered with a relayer to receive payloads from builders.\n\nTo enable this in your `network_params.json` file, set `\"mev_type\":` to `\"full\"` or `\"mock\"`.\n\nTo learn more about how the `mev-boost` infrastructure works with your private network, check out [this guide](https://docs.kurtosis.com/how-to-full-mev-with-ethereum-package).\n\n### Observability tools\n\nThe `ethereum-package` comes out of the box with a few observability tools, including:\n\n- A Grafana and Prometheus instance\n- A [beacon metrics gazer service](https://github.com/dapplion/beacon-metrics-gazer) to collect network-wide participation metrics\n- A [JSON-RPC Snooper](https://github.com/ethDreamer/json_rpc_snoop) to log responses & requests between the execution engine API and the consensus client\n\nTo add your own custom Grafana dashboard template, fork the `ethereum-package` repository and add your configuration [here](https://github.com/ethpandaops/ethereum-package/tree/main/static_files/grafana-config/dashboards).\n\n### Deploying on Kubernetes\n\nAs mentioned earlier, Kurtosis packages (i.e. environment definitions) are portable and will work the same way over Docker or on Kubernetes. Should you require a larger scale devnet, Kurtosis can deploy any package, including the `ethereum-package` on Kubernetes, see [Running Kurtosis in Kubernetes](https://docs.kurtosis.com/k8s).\n\n## Questions and feedback\n\nIf you need help with your Nethermind full node in the private devnet, please don't hesitate to contact the Kurtosis team on [GitHub](https://github.com/ethpandaops/ethereum-package) or [Discord](https://discord.gg/jJFG7XBqcY).\n\n[enclaves]: https://docs.kurtosis.com/concepts-reference/enclaves", "mimetype": "text/plain", "start_char_idx": 9005, "end_char_idx": 10979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53b9c2f7-0ffe-4b5a-a416-2eb8d93729f4": {"__data__": {"id_": "53b9c2f7-0ffe-4b5a-a416-2eb8d93729f4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/dotnet-counters.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549", "node_type": "4", "metadata": {}, "hash": "3274a83dadc597bc7954a5af32124aafda3d9b8c668ad55c876a981c3bc1fdfa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "18acc7e4-135f-4cc7-9720-5326585bbf2e", "node_type": "1", "metadata": {}, "hash": "420371c93dd6b4d2b52b3dfe5cfbcb7c6939fbb2d90b23419272de3a21e45415", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: dotnet-counters\nsidebar_position: 1\n---\n\nThis guide will walk you through setting up performance counters using the [dotnet-counters](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters) performance monitoring tool that observes counters published via the [EventCounters API](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventcounter).\n\n## Step 1: Install dotnet-counters\n\ndotnet-counters can be either installed locally or in a Docker container.\n\n### Installing locally\n\nUse the dotnet tool install command as follows:\n\n```bash\ndotnet tool install -g dotnet-counters\n```\n\nOnce installed, you can run the tool from the command line by typing `dotnet-counters`.\n\n\n### Installing in a Docker container\n\nTo install dotnet-counters in a Docker container, create a Dockerfile with the following content:\n\n```docker title=\"Dockerfile\"\nFROM mcr.microsoft.com/dotnet/sdk:8.0\n\nRUN dotnet tool install -g dotnet-counters\n\nENV PATH=\"$PATH:/root/.dotnet/tools\"\n\nENTRYPOINT [\"/bin/bash\"]\n```\n\nThen, build the Docker image:\n\n```bash\ndocker build -t dotnet-counters .\n```\n\n## Step 2: Run Nethermind\n\nTo enable performance counters in Nethermind, use the command line option `--Metrics.CountersEnabled true`. For more options, see the [Metrics](../../fundamentals/configuration.md#metrics) configuration section.\n\n:::warning Important\nA [consensus client](../../get-started/consensus-clients.md) of your choice must be running before you start Nethermind.\n:::\n\n### Running locally\n\nTo enable performance counters, run Nethermind as follows:\n\n```bash\nnethermind -c mainnet --Metrics.CountersEnabled true\n```\n\n### Running in a Docker container\n\nThe easiest way of collecting metrics in a Docker container is to use Docker Compose.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1772, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18acc7e4-135f-4cc7-9720-5326585bbf2e": {"__data__": {"id_": "18acc7e4-135f-4cc7-9720-5326585bbf2e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/dotnet-counters.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549", "node_type": "4", "metadata": {}, "hash": "3274a83dadc597bc7954a5af32124aafda3d9b8c668ad55c876a981c3bc1fdfa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53b9c2f7-0ffe-4b5a-a416-2eb8d93729f4", "node_type": "1", "metadata": {}, "hash": "725f281d3281782faac9d5f766a4ef4ca3d7c8b71f6defcfb19af7ab946c5d55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "295eb3d5-30d4-49ae-bced-84bb0434624b", "node_type": "1", "metadata": {}, "hash": "210bdc6225784ef447e28ea76550d7638a8b4efacdd951a070bd338d84a9dddb", "class_name": "RelatedNodeInfo"}}, "text": "Below, we use the Nethermind official Docker image and the `dotnet-counters` image we created earlier:\n\n```yaml title=\"docker-compose.yml\"\nservices:\n\n  dotnet-counters:\n    image: dotnet-counters\n    container_name: dotnet-counters\n    stdin_open: true\n    tty: true\n    pid: service:nethermind\n    volumes:\n      - metrics:/tmp\n    depends_on:\n      - nethermind\n  \n  nethermind:\n    image: nethermind/nethermind:latest\n    container_name: nethermind\n    restart: unless-stopped\n    ports:\n      - 8545:8545\n      - 8551:8551\n      - 30303:30303\n    command: -c mainnet --Metrics.CountersEnabled true\n    volumes:\n      - ./keystore:/nethermind/keystore\n      - ./logs:/nethermind/logs\n      - ./nethermind_db:/nethermind/nethermind_db\n      - metrics:/tmp\n\nvolumes:\n  metrics:\n```\n\n:::info\ndotnet-counters uses IPC socket communication to monitor the target process. For this, we use the `metrics` volume to share the IPC socket directory with the `nethermind` and `dotnet-counter` services. The `pid` option in the `dotnet-counters` service is used to share the PID namespace with the `nethermind` service. This is necessary for `dotnet-counters` to be able to see the Nethermind process.\n:::\n\nWe can run the above file as follows:\n\n```bash\ndocker compose up\n```\n\n## Step 3: Collect metrics\n\nOnce dotnet-counters is installed and Nethermind is running, we can start collecting the metrics. If you chose to collect metrics in the containers, run the following command in the `dotnet-counters` container:\n\n```bash\ndotnet-counters collect -n nethermind\n```\n\nBy default, dotnet-counters stores the collected metrics in the current directory in CSV format. However, you may also store them in JSON format and another directory.", "mimetype": "text/plain", "start_char_idx": 1773, "end_char_idx": 3498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "295eb3d5-30d4-49ae-bced-84bb0434624b": {"__data__": {"id_": "295eb3d5-30d4-49ae-bced-84bb0434624b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/dotnet-counters.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549", "node_type": "4", "metadata": {}, "hash": "3274a83dadc597bc7954a5af32124aafda3d9b8c668ad55c876a981c3bc1fdfa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18acc7e4-135f-4cc7-9720-5326585bbf2e", "node_type": "1", "metadata": {}, "hash": "420371c93dd6b4d2b52b3dfe5cfbcb7c6939fbb2d90b23419272de3a21e45415", "class_name": "RelatedNodeInfo"}}, "text": "For instance:\n\n```bash\ndotnet-counters collect -n nethermind -f json -o /tmp/counters.json\n```\n\nFor more info about dotnet-counters, see its [official docs](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters).", "mimetype": "text/plain", "start_char_idx": 3499, "end_char_idx": 3731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "125e08e0-7468-4a45-927a-559d2f12c137": {"__data__": {"id_": "125e08e0-7468-4a45-927a-559d2f12c137", "embedding": null, "metadata": {"file_path": "./nethermind_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f528212e-2daa-41e8-8c25-c3edc14827c2", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95cd79e8-d794-4261-8894-e587055b2f8d", "node_type": "1", "metadata": {}, "hash": "3e148a67afcff516188a47496c86ccadc9ae6a48dfeae4e9b9c0bef2768218e7", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Database\nsidebar_position: 5\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nNethermind uses the [RocksDB](https://rocksdb.org) database to store the state. By default, the database is located in the\nsame directory where the Nethermind executable is. You can change the database location using the [`-d, --baseDbPath`](configuration.md#basic-options) command line option.\n\n## Database directory structure\n\n| Directory         | Description |\n| -                 | - |\n| blockInfos        | Information about blocks at each level of the block tree (canonical chain and branches) |\n| blocks            | Block bodies (block transactions and uncles) |\n| bloom             | Bloom indices for fast log searches |\n| canonicalHashTrie | LES protocol related data |\n| code              | Contract bytecodes |\n| discoveryNodes    | Peers discovered via discovery protocol - used for quick peering after restarts (you can copy this DB between nodes to speed up peering) |\n| headers           | Block headers only |\n| pendingTx         | The second level cache of pending transactions/mempool (the first level is in memory). Wiped out on each restart. |\n| peers             | Additional sync peers information (like peer reputation) - you can copy this DB between nodes to speed up peering on fresh sync |\n| receipts          | Transaction receipts |\n| state             | Blockchain state including accounts and contract storage (Patricia trie nodes) |\n\nYou can use `rsync` between your nodes to clone the database (One of our users copied the entire 4.5TB archive state this\nway while the node was running and only stopped the node for the very last stage of `rsync` ). You can also copy\nthe database between Linux, Windows, and macOS.\n\n## Database size\n\nBelow is a comprehensive list of the supported chains, along with a detailed breakdown of their respective database directories. For reference, the database sizes listed have been determined using the standard configurations provided.\n\n<!--[start autogen]-->\n\n<Tabs>\n<TabItem value=\"mainnet\" label=\"Mainnet\">\n\n- `state`: 158 GB\n- `receipts`: 209 GB\n- `blocks`: 595 GB\n- `bloom`: 6.4 GB\n- `headers`: 8.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95cd79e8-d794-4261-8894-e587055b2f8d": {"__data__": {"id_": "95cd79e8-d794-4261-8894-e587055b2f8d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f528212e-2daa-41e8-8c25-c3edc14827c2", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "125e08e0-7468-4a45-927a-559d2f12c137", "node_type": "1", "metadata": {}, "hash": "00547f8dfeed46bbf7d9fe73c6ae61e8d58328a003d723bc0978734391b6dfe4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c69763e-fb36-4246-b1c2-7326776e30c4", "node_type": "1", "metadata": {}, "hash": "d6b73d81eaf9b3f5be2b905c4425aad5de59234e7a6b7e66e28a39518c926111", "class_name": "RelatedNodeInfo"}}, "text": "9 GB\n- `code`: 4.7 GB\n- `blobTransactions`: 1.7 GB\n- .\n- **Total: 985 GB**\n\n</TabItem>\n<TabItem value=\"sepolia\" label=\"Sepolia\">\n\n- `state`: 42 GB\n- `receipts`: 39 GB\n- `blocks`: 293 GB\n- `bloom`: 2.1 GB\n- `headers`: 2.3 GB\n- `code`: 6.5 GB\n- `blobTransactions`: 1.3 GB\n- .\n- **Total: 386 GB**\n\n</TabItem>\n<TabItem value=\"holesky\" label=\"Holesky\">\n\n- `state`: 18 GB\n- `receipts`: 14 GB\n- `blocks`: 55 GB\n- `bloom`: 738 MB\n- `headers`: 967 MB\n- `code`: 506 MB\n- `blobTransactions`: 737 MB\n- .\n- **Total: 90 GB**\n\n</TabItem>\n<TabItem value=\"gnosis\" label=\"Gnosis\">\n\n- `state`: 66 GB\n- `receipts`: 216 GB\n- `blocks`: 199 GB\n- `bloom`: 9.2 GB\n- `headers`: 11 GB\n- `code`: 668 MB\n- `blobTransactions`: 75 MB\n- .\n- **Total: 503 GB**\n\n</TabItem>\n<TabItem value=\"chiado\" label=\"Chiado\">\n\n- `state`: 2.6 GB\n- `receipts`: 1.4 GB\n- `blocks`: 9.0 GB\n- `bloom`: 3.1 GB\n- `headers`: 2.3 GB\n- `code`: 67 MB\n- `blobTransactions`: 656 MB\n- .\n- **Total: 20 GB**\n\n</TabItem>\n<TabItem value=\"energyweb\" label=\"Energyweb\">\n\n- `state`: 27 GB\n- `receipts`: 4.5 GB\n- `blocks`: 25 GB\n- `bloom`: 9.8 GB\n- `headers`: 7.0 GB\n- `code`: 14 MB\n- `blobTransactions`: \n- .", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c69763e-fb36-4246-b1c2-7326776e30c4": {"__data__": {"id_": "6c69763e-fb36-4246-b1c2-7326776e30c4", "embedding": null, "metadata": {"file_path": "./nethermind_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f528212e-2daa-41e8-8c25-c3edc14827c2", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95cd79e8-d794-4261-8894-e587055b2f8d", "node_type": "1", "metadata": {}, "hash": "3e148a67afcff516188a47496c86ccadc9ae6a48dfeae4e9b9c0bef2768218e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13a9e367-cc44-4bb7-9703-50e0c9d9a88e", "node_type": "1", "metadata": {}, "hash": "3d8afa19ae57a2c0893ead5e7d014ad238bf34f0c94dee59a49a8287f9f6f034", "class_name": "RelatedNodeInfo"}}, "text": "- **Total: 75 GB**\n\n</TabItem>\n<TabItem value=\"volta\" label=\"Volta\">\n\n- `state`: 34 GB\n- `receipts`: 8.3 GB\n- `blocks`: 33 GB\n- `bloom`: 9.0 GB\n- `headers`: 6.9 GB\n- `code`: 95 MB\n- `blobTransactions`: \n- .\n- **Total: 93 GB**\n\n</TabItem>\n</Tabs>\n\n<!--[end autogen]-->\n\n## Reducing database size\n\nThe Nethermind database can experience substantial growth over time, starting from an initial size of approximately 650\nGB. As a result, many node setups are configured to run on 1 TB disks. However, even with settings\ndesigned to slow the growth rate, these disks may eventually run out of free space.\n\nThe current options to reduce the database size are as follows:\n\n- [Resyncing database from scratch](sync.md#resync-a-node-from-scratch)\n- [Pruning](pruning.md)\n\nThe table below presents a short comparison of these methods including possible fine-tuning of each method. Data was\nfetched from a node running on a machine with the below specifications:\n\n- **Node.js**: v1.18.0\n- **Consensus client**: Lighthouse\n- **CPU**: AMD EPYC 7713 (16 cores allocated for the VM)\n- **RAM**: 64 GB\n- **Disk size**: 1.2 TB\n- **Disk IOPS**: 70,000 to 80,000\n\n| Metric | Resync | Pruning | Pruning and memory budget (4 GB) |\n| - | - | - | - |\n| **Execution time** | ~4h | ~24h | ~12h |\n| **Minimum free disk space** | N/A. You can execute resync even if there is 0 free space (avoid such a case). | 250 GB | 250 GB |\n| **Attestation rate drop** | 100%. No attestation rewards during that time or highly reduced. | 5\u201310% during that time | N/A |\n| **Average block processing time of new blocks during the process** | N/A. New blocks are processed after state but are significantly slower until old bodies/receipts are downloaded.", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13a9e367-cc44-4bb7-9703-50e0c9d9a88e": {"__data__": {"id_": "13a9e367-cc44-4bb7-9703-50e0c9d9a88e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/database.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f528212e-2daa-41e8-8c25-c3edc14827c2", "node_type": "4", "metadata": {}, "hash": "3a9e42c7f532a007e0d31d102ad6bccfcaa1c391e76c8fa68285d3cec690c597", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c69763e-fb36-4246-b1c2-7326776e30c4", "node_type": "1", "metadata": {}, "hash": "d6b73d81eaf9b3f5be2b905c4425aad5de59234e7a6b7e66e28a39518c926111", "class_name": "RelatedNodeInfo"}}, "text": "Afterward, average about 0.35s. | 0.7s | 1.0s |\n| **Is the node online during the process?** | No, unless the state is synced. | Yes. The node follows the chain, and all modules are still enabled. | Yes. The node follows chain and all modules are still enabled. |\n\nThe command used for testing disk IOPS was as follows:\n\n```bash\nfio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --filename=test --bs=4k --iodepth=64 --size=4G --readwrite=randrw\n```", "mimetype": "text/plain", "start_char_idx": 5053, "end_char_idx": 5527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55f48373-e770-40c8-8551-03150a244952": {"__data__": {"id_": "55f48373-e770-40c8-8551-03150a244952", "embedding": null, "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2618dc8-60cf-4078-bdab-f57bafa411bb", "node_type": "1", "metadata": {}, "hash": "1f7601f29ea0b3bdddd1f4bbebffb41edbe7071f57af2b77db056abbee1ed1dc", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Installing Nethermind\nsidebar_position: 2\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\nNethermind can be installed in several ways:\n\n- [Via a package manager](#package-managers)\n- [As a standalone download](#standalone-downloads)\n- [As a Docker container](#docker-container)\n- [By building from source code](../developers/building-from-source.md)\n\n## Prerequisites\n\n:::info\nDoes not apply to Docker distributions.\n:::\n\nBefore installing Nethermind, your specific platform might need the following prerequisites.\n\n<Tabs groupId=\"os\">\n<TabItem value=\"linux\" label=\"Linux\">None</TabItem>\n<TabItem value=\"windows\" label=\"Windows\">\n\nAlthough the modern versions of Windows are bundled with a recent version of [Microsoft Visual C++ Redistributable](https://aka.ms/vcredist), in some cases, it may need an update:\n\n```powershell\nwinget install Microsoft.VCRedist.2015+.x64\n```\n\n</TabItem>\n<TabItem value=\"macos\" label=\"macOS\">None</TabItem>\n</Tabs>\n\n## Package managers\n\nPackage managers are the easiest and fastest way of installing Nethermind.\n\n:::tip\nIf you're using a package manager, it's highly recommended to set the `-dd, --datadir` flag to specify the data directory. Otherwise, Nethermind will use the default data directory where the package is installed, which may not be preserved on further updates or uninstall.\n:::\n\n<Tabs groupId=\"os\">\n<TabItem value=\"linux\" label=\"Linux\">\n\nOn Ubuntu and other Linux distros supporting PPA, Nethermind can be installed via Launchpad PPA.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2618dc8-60cf-4078-bdab-f57bafa411bb": {"__data__": {"id_": "e2618dc8-60cf-4078-bdab-f57bafa411bb", "embedding": null, "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55f48373-e770-40c8-8551-03150a244952", "node_type": "1", "metadata": {}, "hash": "32e4569f7506f1c3b0611f4e8783ec29c0e443354786947f6827d4ddd89a3e9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af3517d3-a8a3-44e2-94b7-8be9975b39f1", "node_type": "1", "metadata": {}, "hash": "9b3d5fe27bd10918f4dba2efef74cfa76c3368f9af94ee3c35e0424ddfb7355c", "class_name": "RelatedNodeInfo"}}, "text": "First, add the Nethermind repository:\n\n```bash\nsudo add-apt-repository ppa:nethermindeth/nethermind\n```\n\n:::note\nIf the command is not found, run:\n\n```bash\nsudo apt-get install software-properties-common\n```\n\n:::\n\nThen, install Nethermind as follows:\n\n```bash\nsudo apt-get update\nsudo apt-get install nethermind\n```\n\n</TabItem>\n<TabItem value=\"windows\" label=\"Windows\">\n\nOn Windows, Nethermind can be installed via Windows Package Manager as follows:\n\n```powershell\nwinget install nethermind\n```\n\n</TabItem>\n<TabItem value=\"macos\" label=\"macOS\">\n\nOn macOS, Nethermind can be installed via Homebrew.\n\nFirst, add the Nethermind repository:\n\n```sh\nbrew tap nethermindeth/nethermind\n```\n\nThen, install Nethermind as follows:\n\n```sh\nbrew install nethermind\n```\n\n</TabItem>\n</Tabs>\n\nFor further instructions, see [Running Nethermind](#running).\n\n## Standalone downloads\n\nStandalone downloads give users more flexibility by allowing them to install a specific version of Nethermind, choose the installation location, and prevent automatic updates.\n\nStandalone downloads are available on [GitHub Releases](https://github.com/NethermindEth/nethermind/releases) and at [downloads.nethermind.io](https://downloads.nethermind.io) as ZIP archives for x64 and AArch64 (ARM64) CPU architectures for Linux, Windows, and macOS.\n\n### Configuring as a Linux service\n\nTo install Nethermind as a Linux service, see the [nethermind.service](https://github.com/NethermindEth/nethermind/blob/master/scripts/nethermind.service) unit file as an example.\nAs it's configured to run Nethermind as the specific user and group and looks for the executable in a predefined location, the following steps need to be fulfilled:\n\n:::note\nAny of these steps can be omitted by replacing them with corresponding changes in the unit file.\nFor instance, if you want to run Nethermind as a different user, change the `User` and `Group` options in the unit file.\n:::\n\n1.", "mimetype": "text/plain", "start_char_idx": 1525, "end_char_idx": 3452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af3517d3-a8a3-44e2-94b7-8be9975b39f1": {"__data__": {"id_": "af3517d3-a8a3-44e2-94b7-8be9975b39f1", "embedding": null, "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2618dc8-60cf-4078-bdab-f57bafa411bb", "node_type": "1", "metadata": {}, "hash": "1f7601f29ea0b3bdddd1f4bbebffb41edbe7071f57af2b77db056abbee1ed1dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "246fe8bd-dcb4-4df0-94fe-3f61d5874bc7", "node_type": "1", "metadata": {}, "hash": "e0931f9719cd81068ad30ffcda2e304db43facbe6d5cad45d7f1f796d0643c84", "class_name": "RelatedNodeInfo"}}, "text": "Create a new user and group:\n\n   ```bash\n     # Create a new user and group\n     sudo useradd -m -s /bin/bash nethermind\n\n     # Increase the maximum number of open files\n     sudo bash -c 'echo \"nethermind soft nofile 100000\" > /etc/security/limits.d/nethermind.conf'\n     sudo bash -c 'echo \"nethermind hard nofile 100000\" >> /etc/security/limits.d/nethermind.conf'\n\n     # Switch to the nethermind user\n     sudo su -l nethermind\n\n     # Create required directories\n     # Note that the home directory (~) is now /home/nethermind\n     mkdir ~/build\n     mkdir ~/data\n   ```\n\n2. [Download Nethermind](#standalone-downloads) and extract the package contents to the `~/build` directory.\n3. Configure options in the `~/.env` file:\n\n   ```bash title=\"~/.env\"\n   # Required\n   NETHERMIND_CONFIG=\"mainnet\"\n\n   # Optional\n   NETHERMIND_HEALTHCHECKSCONFIG_ENABLED=\"true\"\n   ```\n\nNow, let's set up the Linux service:\n\n```bash\n# Download the unit file\ncurl -L https://raw.githubusercontent.com/NethermindEth/nethermind/master/scripts/nethermind.service -o nethermind.service\n\n# Move the unit file to the systemd directory\nsudo mv nethermind.service /etc/systemd/system\n\n# Reload the systemd daemon\nsudo systemctl daemon-reload\n\n# Start the service\nsudo systemctl start nethermind\n\n# Optionally, enable the service to start on boot\nsudo systemctl enable nethermind\n```\n\nTo ensure the service is up and running, check its status as follows:\n\n```bash\nsudo systemctl status nethermind\n```\n\nTo monitor the Nethermind output, run:\n\n```bash\njournalctl -u nethermind -f\n```\n\nFor further instructions, see [Running Nethermind](#running).\n\n## Docker container\n\nThe Docker images of Nethermind are available on [Docker Hub](https://hub.docker.com/r/nethermind/nethermind).", "mimetype": "text/plain", "start_char_idx": 3453, "end_char_idx": 5206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "246fe8bd-dcb4-4df0-94fe-3f61d5874bc7": {"__data__": {"id_": "246fe8bd-dcb4-4df0-94fe-3f61d5874bc7", "embedding": null, "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af3517d3-a8a3-44e2-94b7-8be9975b39f1", "node_type": "1", "metadata": {}, "hash": "9b3d5fe27bd10918f4dba2efef74cfa76c3368f9af94ee3c35e0424ddfb7355c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca4ad4ae-1383-4d2d-bdbc-cadce0a8d90a", "node_type": "1", "metadata": {}, "hash": "fd5cdb4ff54ab59c1634b8e31ab98380d67e7b66369d9f4d013d650ad93b0d7b", "class_name": "RelatedNodeInfo"}}, "text": "This registry provides production versions of Nethermind with 3 types of tags:\n\n- `nethermind/nethermind:latest` is the latest version of Nethermind (the default tag)\n- `nethermind/nethermind:<version>` is the specific version of Nethermind where `<version>` is the actual version of Nethermind.\n- `nethermind/nethermind:<version>-chiseled` is a _rootless_ and [chiseled](https://ubuntu.com/engage/chiselled-ubuntu-images-for-containers) image with the specific version of Nethermind where `<version>` is either `latest` or the actual version of Nethermind.\\\n  For security reasons, this image contains only the absolutely necessary components and is intended to run as a non-root `app` user with UID/GID of `64198`.\n\nTo download the image from the registry, run:\n\n```bash\ndocker pull nethermind/nethermind\n```\n\nStarting a node is achieved by:\n\n```bash\ndocker run -it nethermind/nethermind\n```\n\nThe following ports are exposed by default:\n\n- `8545`: TCP, for the JSON-RPC interface\n- `8551`: TCP, for the consensus client JSON-RPC interface\n- `30303`: TCP and UDP, for P2P networking\n\n:::tip\nIt's highly recommended to mount data volumes as the Nethermind's data directories to ensure the synced data is preserved between the container restarts.", "mimetype": "text/plain", "start_char_idx": 5208, "end_char_idx": 6453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca4ad4ae-1383-4d2d-bdbc-cadce0a8d90a": {"__data__": {"id_": "ca4ad4ae-1383-4d2d-bdbc-cadce0a8d90a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "246fe8bd-dcb4-4df0-94fe-3f61d5874bc7", "node_type": "1", "metadata": {}, "hash": "e0931f9719cd81068ad30ffcda2e304db43facbe6d5cad45d7f1f796d0643c84", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46aa25c1-738f-42d2-93d8-b386feb67dd3", "node_type": "1", "metadata": {}, "hash": "9f2f23e06b456905bb888107d1edf8aa21f2aec52a64cc46fa12abe11f2eca97", "class_name": "RelatedNodeInfo"}}, "text": ":::\n\nThe following volume mount points are available by default:\n\n- `/nethermind/nethermind_db`: used to store the database\n- `/nethermind/logs`: used to store the logs\n- `/nethermind/keystore`: used to store the keys\n\nTo mount separate volumes for each directory listed above, run:\n\n```bash\ndocker run -it \\\n  --mount type=bind,source=path/to/db,target=/nethermind/nethermind_db \\\n  --mount type=bind,source=path/to/logs,target=/nethermind/logs \\\n  --mount type=bind,source=path/to/keystore,target=/nethermind/keystore \\\n  nethermind/nethermind\n```\n\nAlternatively, a single volume can be specified as the Nethermind data directory as follows:\n\n```bash\ndocker run -it \\\n  --mount type=bind,source=path/to/data_dir,target=/nethermind/data_dir \\\n  nethermind/nethermind -dd /nethermind/data_dir\n```\n\nNote that any Nethermind-specific configuration option can be specified at the end. For instance, the `-dd` option in this case. For further instructions, see [Running Nethermind](#running).\n\nTo build the Docker image yourself, see [Building Docker image](../developers/building-from-source.md#bulding-docker-image).\n\n## Running Nethermind {#running}\n\n:::warning Important\n\n- A [consensus client](consensus-clients.md) of your choice must be running before you start Nethermind.\n- Please check out the [security considerations](../fundamentals/security.md) before using Nethermind for critical operations.\n  :::\n\nNethermind is mainly controlled by command line options (aka arguments or flags).\n\nThe full list of options can be displayed by running:\n\n```bash\nnethermind -h\n```\n\nFor instance, to launch the client with the default configuration for the Mainnet and custom data directory, run:\n\n```bash\nnethermind -c mainnet -dd path/to/data/dir\n```\n\nFor detailed info about the available configuration options, see [Configuration](../fundamentals/configuration.md).\n\n### Supported networks\n\nTo run Nethermind on a specific network, use the [`-c, --config`](../fundamentals/configuration.md#basic-options) command line option.", "mimetype": "text/plain", "start_char_idx": 6454, "end_char_idx": 8476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46aa25c1-738f-42d2-93d8-b386feb67dd3": {"__data__": {"id_": "46aa25c1-738f-42d2-93d8-b386feb67dd3", "embedding": null, "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f", "node_type": "4", "metadata": {}, "hash": "6f8637459d3305abe416680fd88abf2dce61faf63a4c33076d413de07e63f9bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca4ad4ae-1383-4d2d-bdbc-cadce0a8d90a", "node_type": "1", "metadata": {}, "hash": "fd5cdb4ff54ab59c1634b8e31ab98380d67e7b66369d9f4d013d650ad93b0d7b", "class_name": "RelatedNodeInfo"}}, "text": "Currently, the following networks are supported out of the box:\n\n- **Ethereum**\n  - [Mainnet](https://ethereum.org/en/developers/docs/networks/#ethereum-mainnet)\n  - [Holesky](https://github.com/eth-clients/holesky) (testnet)\n  - [Sepolia](https://ethereum.org/en/developers/docs/networks/#sepolia) (testnet)\n- **Base**\n  - [Base Mainnet](https://docs.base.org/network-information/#base-mainnet)\n  - [Base Sepolia](https://docs.base.org/network-information/#base-testnet-sepolia) (testnet)\n- **Energy Web Chain**\n  - [Energy Web](https://energy-web-foundation.gitbook.io/energy-web/ew-dos-technology-components-2023/trust-layer-energy-web-chain)\n  - [Volta](https://energy-web-foundation.gitbook.io/energy-web/ew-dos-technology-components-2023/trust-layer-energy-web-chain/ewc-guides-and-tutorials/testnet-and-mainnet#developing-on-volta-test-network) (testnet)\n- **Gnosis Chain**\n  - [Gnosis](https://docs.gnosischain.com/about/networks/mainnet)\n  - [Chiado](https://docs.gnosischain.com/about/networks/chiado) (testnet)\n- **Optimism**\n  - [OP Mainnet](https://docs.optimism.io/chain/networks#op-mainnet)\n  - [OP Sepolia](https://docs.optimism.io/chain/networks#op-sepolia) (testnet)", "mimetype": "text/plain", "start_char_idx": 8477, "end_char_idx": 9661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "011d5400-3d55-4412-a9d4-33cf7205712a": {"__data__": {"id_": "011d5400-3d55-4412-a9d4-33cf7205712a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37153e88-7f07-474f-a956-8ab1ee5374fd", "node_type": "1", "metadata": {}, "hash": "ac4b4b907d8d610f0cb00b07f39858820a2e8054f1641bcf8f2dda2ac16bd081", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Consensus clients\nsidebar_position: 3\n---\n\nEthereum's long-awaited shift from proof-of-work (PoW) to proof-of-stake (PoS) known as The Merge happened on September 15, 2022, and came with fundamental changes to the network. The most notable change is the addition of the consensus layer (aka Beacon Chain) which replaced the PoW mining. It is coordinating and pseudorandomly selecting block producers from the pool of stakers/validators in a way that makes it extremely difficult for validators to coordinate attacks on the network.\nThe Merge changed how operators run nodes on the Ethereum blockchain. A node now needs two clients that work together as a pair. In addition to the [execution client](https://ethereum.org/en/glossary/#execution-client) (e.g., Nethermind), you need a [consensus client](https://ethereum.org/en/glossary/#consensus-client) that connects to the consensus layer and runs the PoS algorithm. This guide shows how to run an Ethereum node with Nethermind and a consensus client of your choice.\n\n:::tip\nAn easy way to run both consensus and execution clients is with [Sedge](https://docs.sedge.nethermind.io). Sedge is a setup tool for PoS validators and nodes that runs on Linux and macOS.\n:::\n\n## Choosing a consensus client\n\nOn the consensus layer, there are 5 client implementations to choose from. Though all consensus clients are great, check them out yourself to find the one best suited to your needs.\n\n- [Grandine][grandine]\n- [Lighthouse][lighthouse]\n- [Lodestar][lodestar]\n- [Nimbus][nimbus]\n- [Prysm][prysm]\n- [Teku][teku]\n\n:::warning Important\nWe urge you to take [client diversity](https://ethereum.org/en/developers/docs/nodes-and-clients/client-diversity) into consideration when choosing your consensus client and avoid the majority clients.\n:::\n\n## Configuring JSON-RPC interface\n\nExecution and consensus clients communicate via an authenticated endpoint specified in Engine JSON-RPC API. In order to connect to a consensus client, the execution client must generate a [JWT](https://jwt.io) secret at a known path.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37153e88-7f07-474f-a956-8ab1ee5374fd": {"__data__": {"id_": "37153e88-7f07-474f-a956-8ab1ee5374fd", "embedding": null, "metadata": {"file_path": "./nethermind_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "011d5400-3d55-4412-a9d4-33cf7205712a", "node_type": "1", "metadata": {}, "hash": "86e2156c32e5870264a110ceddf37e0f7816d0ee1937fd4eaf82bb121e8a4038", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7f9f40d-5787-49a7-8cbd-c27568312249", "node_type": "1", "metadata": {}, "hash": "b69bf87cd044abb80f5fff488e31150c743b37ef0bf9dec396f5cf4434edde2c", "class_name": "RelatedNodeInfo"}}, "text": "Although the secret is generated automatically by Nethermind on startup at `keystore/jwt-secret` path in its root directory, in some cases, you might need to do it yourself. You can generate one using [OpenSSL](https://www.openssl.org):\n\n```bash\nopenssl rand -hex 32 > path/to/jwt.hex\n```\n:::note\nSince the JWT secret is simply a 64-character hex value, there are many other ways of generating it, including online resources. However, for security reasons, we recommend using OpenSSL.\n:::\n\nThe generated JWT secret can be specified with the `--JsonRpc.JwtSecretFile path/to/jwt.hex` command line option. For more configuration options, see [Engine API](../interacting/json-rpc-server.md#engine-api).\n\n## Running the consensus client\n\nThis step assumes that you have already [installed](../get-started/installing-nethermind.md) Nethermind, the [consensus client](#choosing-a-consensus-client) of your choice, and, optionally, created the [JWT secret](#configuring-json-rpc-interface).\n\n:::info\nAs syncing from the scratch can take a very long time on some networks (up to several days), the commands below optionally use [checkpoint sync](https://ethereum.org/en/developers/docs/nodes-and-clients/#checkpoint-sync) to speed up the process.\n:::\n\n### Grandine\n\n```bash\ngrandine \\\n  --network mainnet \\\n  --eth1-rpc-urls http://localhost:8551 \\\n  --jwt-secret path/to/jwt.hex \\\n  --checkpoint-sync-url https://beaconstate.ethstaker.cc\n```\n\nThe command above runs Grandine on Mainnet. For other networks, set the `--network` and `--checkpoint-sync-url` options accordingly. See the [Grandine documentation][grandine] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Lighthouse\n\n```bash\nlighthouse bn \\\n  --network mainnet \\\n  --execution-endpoint http://localhost:8551 \\\n  --execution-jwt path/to/jwt.hex \\\n  --checkpoint-sync-url https://mainnet.checkpoint.sigp.io \\\n  --http\n```\n\nThe command above runs Lighthouse on Mainnet. For other networks, set the `--network` and `--checkpoint-sync-url` options accordingly.", "mimetype": "text/plain", "start_char_idx": 2067, "end_char_idx": 4101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7f9f40d-5787-49a7-8cbd-c27568312249": {"__data__": {"id_": "f7f9f40d-5787-49a7-8cbd-c27568312249", "embedding": null, "metadata": {"file_path": "./nethermind_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37153e88-7f07-474f-a956-8ab1ee5374fd", "node_type": "1", "metadata": {}, "hash": "ac4b4b907d8d610f0cb00b07f39858820a2e8054f1641bcf8f2dda2ac16bd081", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05d2d4ca-50e2-4245-8d32-b25690167d1a", "node_type": "1", "metadata": {}, "hash": "962451a72edea4f98bb44ea894cda45ca10fa98b2f35d19c8db204118227b4fe", "class_name": "RelatedNodeInfo"}}, "text": "See the [Lighthouse documentation][lighthouse] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Lodestar\n\n```bash\nlodestar beacon \\\n  --network mainnet \\\n  --jwt-secret path/to/jwt.hex \\\n  --checkpointSyncUrl https://beaconstate-mainnet.chainsafe.io\n```\n\nThe command above runs Lodestar on Mainnet. For other networks, set the `--network` and `--checkpointSyncUrl` options accordingly. See the [Lodestar documentation][lodestar] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Nimbus\n\n```bash\n./run-mainnet-beacon-node.sh \\\n  --web3-url=http://127.0.0.1:8551 \\\n  --jwt-secret=path/to/jwt.hex\n```\n\nThe command above runs Numbus on Mainnet without checkpoint sync. For checkpoint sync, see [Sync from a trusted node](https://nimbus.guide/trusted-node-sync.html). For other networks, see the [Nimbus documentation][nimbus].\n\n### Prysm\n\n```bash\n./prysm.sh beacon-chain \\\n  --mainnet \\\n  --execution-endpoint=http://localhost:8551 \\\n  --jwt-secret=path/to/jwt.hex \\\n  --checkpoint-sync-url=https://beaconstate.ethstaker.cc \\\n  --genesis-beacon-api-url=https://beaconstate.ethstaker.cc\n```\n\nThe command above runs Prysm on Mainnet. For other networks, replace the `--mainnet` and set `--checkpoint-sync-url` and `--genesis-beacon-api-url` options accordingly. See the [Prysm documentation][prysm] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].\n\n### Teku\n\n```bash\nteku \\\n  --network=mainnet \\\n  --ee-endpoint=http://localhost:8551 \\\n  --ee-jwt-secret-file=path/to/jwt.hex \\\n  --metrics-enabled=true \\\n  --rest-api-enabled=true \\\n  --initial-state=https://beaconstate.ethstaker.cc\n```\n\nThe command above runs Teku on Mainnet. For other networks, set the `--network` and `--initial-state` options accordingly. See the [Teku documentation][teku] and [public checkpoint sync endpoints][checkpoint-sync-endpoints].", "mimetype": "text/plain", "start_char_idx": 4102, "end_char_idx": 5971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05d2d4ca-50e2-4245-8d32-b25690167d1a": {"__data__": {"id_": "05d2d4ca-50e2-4245-8d32-b25690167d1a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/consensus-clients.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9", "node_type": "4", "metadata": {}, "hash": "31bb8806f5e37376bc367d68ad73dc60210e05134bda16e3186562f7f587e5db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7f9f40d-5787-49a7-8cbd-c27568312249", "node_type": "1", "metadata": {}, "hash": "b69bf87cd044abb80f5fff488e31150c743b37ef0bf9dec396f5cf4434edde2c", "class_name": "RelatedNodeInfo"}}, "text": "## Running Nethermind\n\n:::warning Important\nThe consensus client must be running before you start Nethermind.\n:::\n\n```bash\nnethermind \\\n  -c mainnet \\\n  --JsonRpc.JwtSecretFile path/to/jwt.hex\n```\n\nThe command above runs Nethermind on Mainnet. For other networks, set the `-c` option accordingly. For more info, see [Running Nethermind](../get-started/installing-nethermind.md#running).\n\n[checkpoint-sync-endpoints]: https://eth-clients.github.io/checkpoint-sync-endpoints\n[grandine]: https://docs.grandine.io\n[lighthouse]: https://lighthouse-book.sigmaprime.io\n[lodestar]: https://chainsafe.github.io/lodestar\n[nimbus]: https://nimbus.guide\n[prysm]: https://docs.prylabs.network\n[teku]: https://docs.teku.consensys.net", "mimetype": "text/plain", "start_char_idx": 5973, "end_char_idx": 6692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "adfdc2bd-839a-4871-b373-024c42044a0b": {"__data__": {"id_": "adfdc2bd-839a-4871-b373-024c42044a0b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "747fc977-c677-424f-89fd-1e31fce604c2", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "236ef3b6-e731-453c-9f57-84834d3835e5", "node_type": "1", "metadata": {}, "hash": "05ada783c5ccbb9e02c138af864a1c6c8f27a21c8ca9858a35e7e68e147661ee", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: Pruning\nsidebar_position: 6\n---\n\n## Overview\n\nPruning pertains to eliminating or cleaning obsolete historical data to optimize disk space. Clients are responsible for maintaining the world state, which comprises a database that portrays the current Ethereum network status. The world state encompasses accounts, contracts, and other information.\n\nPruning aims to reduce disk requirements by storing only the current world state and removing historical data. This differs from archive nodes that retain complete transaction and state history. Pruning is helpful for users who don't require historical data and prefer to interact solely with the current state of the network. However, pruning may limit the client's ability to fulfill requests that depend on historical information. Nethermind provides two kinds of pruning \u2013 _full pruning_ and _in-memory pruning_; both are enabled by default, also called _hybrid pruning_.\n\n## How it works\n\nDuring synchronization using the snap sync method, Nethermind produces a local copy of the Ethereum network state. Although this size increases by around 30 GB each week, specific historical data is retained that is not necessary for node operation or to maintain the current Ethereum state. For a detailed description of the disk usage usage, check out the [database size](./database.md#database-size).\n\nWhen full pruning is activated and initiated, a thorough examination of the entire state tree is conducted to determine which data is no longer required and can be treated as historical. It then determines which information corresponds to the current state and duplicates it alongside the existing version. During verification of each node in the state, the new pruned state replaces the previous one. Once the verifier confirms everything is functioning correctly, the old state database is eliminated, resulting in significant savings in disk space. As a result, the size of the database will be close to its initial size again.\n\nIn-memory pruning is a continuous process that occurs under regular operation. Instead of saving a new state on each block, Nethermind will keep it in memory until a certain threshold is reached. At that point, Nethermind will only store data required by the newer state and discard unnecessary ones. This significantly reduces the total amount of data written while improving block processing performance. In-memory pruning is independent of full pruning.\n\n## Preparation for full pruning\n\nBecause full pruning is executed while the node is connected to the network, it can affect the node's performance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2594, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "236ef3b6-e731-453c-9f57-84834d3835e5": {"__data__": {"id_": "236ef3b6-e731-453c-9f57-84834d3835e5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "747fc977-c677-424f-89fd-1e31fce604c2", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "adfdc2bd-839a-4871-b373-024c42044a0b", "node_type": "1", "metadata": {}, "hash": "af24121be50fcaf33f2dd7a49e39dd4df9479d5593ec1fc34d4198cdb8ee2afc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd9348f9-a039-4b9d-8004-29f56f437054", "node_type": "1", "metadata": {}, "hash": "856d623a3d9d5579b6b65dc8b59b290b4dc06ca33057f2bcf23d4053570e6938", "class_name": "RelatedNodeInfo"}}, "text": "The process can consume significant memory, CPU, and disk resources, impacting block processing time.\nThis, in turn, can lead to reduced rewards for validator setups, particularly for proof-of-stake chains.\n\nCurrently, full pruning takes between 20 to 30 hours to complete, although the duration may vary based on the hardware configuration. At least 200 GB of storage is required to ensure pruning runs smoothly. Nevertheless, it's recommended to have 300 GB or more.\n\n:::warning Important\nDo not turn on full pruning on an archive node, as these are two opposing features. Archive nodes are designed to store\ncomplete historical data, whereas full pruning eliminates it. Use the option `--Pruning.Mode None` to ensure that pruning is turned off completely.\n:::\n\n## Configuring full pruning\n\nAs a very first point, check out the [pruning configuration options](./configuration.md#pruning).\\\nTo activate full pruning, use either the `--Pruning.Mode Hybrid` or `--Pruning.Mode Full` command line options.\n\n:::info\nSetting `--Pruning.Mode Hybrid` enables both `InMemory` and `Full` modes. The `InMemory` mode helps the node storage grow slower than the `Full` mode. Because of this, full pruning is executed less frequently, promoting\nhealthier disk operation. Since full pruning is hardware-intensive, this configuration also benefits attestation results.\n:::\n\nThe next step is to determine the trigger conditions for full pruning. Currently, there are 3 options available:\n\n- [Manual](#manual)\n- [State database size threshold](#state-db-threshold)\n- [Remaining storage space threshold](#storage-left-threshold)\n\n### Manual\n\nManual mode triggers full pruning only upon request, providing complete control. To configure this mode, use the following options: `--Pruning.Mode Hybrid --Pruning.FullPruningTrigger Manual`.\n\nPruning can also be triggered using the [`admin_prune`](../interacting/json-rpc-ns/admin.md#admin_prune) JSON-RPC method. Here's how to configure it:\n\n- Add the `admin` namespace to `--JsonRpc.EnabledModules`.", "mimetype": "text/plain", "start_char_idx": 2595, "end_char_idx": 4623, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd9348f9-a039-4b9d-8004-29f56f437054": {"__data__": {"id_": "cd9348f9-a039-4b9d-8004-29f56f437054", "embedding": null, "metadata": {"file_path": "./nethermind_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "747fc977-c677-424f-89fd-1e31fce604c2", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "236ef3b6-e731-453c-9f57-84834d3835e5", "node_type": "1", "metadata": {}, "hash": "05ada783c5ccbb9e02c138af864a1c6c8f27a21c8ca9858a35e7e68e147661ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54c6fb21-e67a-4ba3-984e-d97af68e99d2", "node_type": "1", "metadata": {}, "hash": "608546e8a5264cb184acf7cf9e5d0e72b6940f1008d9643b4193558c81a81e1e", "class_name": "RelatedNodeInfo"}}, "text": "For instance,\\\n  `--JsonRpc.EnabledModules [eth,net,...,admin]`\n- Create a separate port for `admin` namespace only:\\\n  `--JsonRpc.AdditionalRpcUrls http://localhost:8555|http|admin`\n\nRestart the client, and if everything is configured correctly, you should be able to call the `admin_prune` method, and full pruning should start.\n\n:::info\nOne potential disadvantage of the manual mode is that if full pruning is not triggered on time, it cannot be performed later because of insufficient disk space. In such cases, the only option to free up the disk space is to resync the node from scratch.\n:::\n\n### State database size threshold {#state-db-threshold}\n\nThis mode triggers full pruning automatically when the state database reaches the specified size.\nTo enable this mode, use the following options: `--Pruning.Mode Hybrid --Pruning.FullPruningTrigger StateDbSize --Pruning.FullPruningThresholdMb 256000`, where the value of `Pruning.FullPruningThresholdMb` should be set based on your requirements.\n\nThe above configuration triggers full pruning automatically whenever the state database size exceeds 256,000\nMB (250 GB). Assuming the state database has initially around 160 GB, pruning will be triggered when the database size grows by more than 90 GB.\n\n:::tip\nTo avoid unexpected behavior and ensure that full pruning can be completed in full, it's recommended to set the threshold value to trigger pruning before the free disk space drops below 250 GB as a minimum. This ensures that sufficient free disk space is available for the pruning process.\n:::\n\n### Remaining storage space threshold {#storage-left-threshold}\n\n:::note\nThis is the recommended approach as it ensures that pruning is executed on time.\n:::\n\nThis mode triggers full pruning when the storage space reaches the specified minimum. To enable this mode, use the following options: `--Pruning.Mode Hybrid --Pruning.FullPruningTrigger VolumeFreeSpace --Pruning.FullPruningThresholdMb 256000`, where the value of `Pruning.FullPruningThresholdMb` should be set based on your requirements. However, it should not be set below the default value of `256000`.\n\nThe above configuration triggers full pruning whenever free disk space drops to 256,000 MB (250 GB) or below.", "mimetype": "text/plain", "start_char_idx": 4624, "end_char_idx": 6858, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54c6fb21-e67a-4ba3-984e-d97af68e99d2": {"__data__": {"id_": "54c6fb21-e67a-4ba3-984e-d97af68e99d2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "747fc977-c677-424f-89fd-1e31fce604c2", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd9348f9-a039-4b9d-8004-29f56f437054", "node_type": "1", "metadata": {}, "hash": "856d623a3d9d5579b6b65dc8b59b290b4dc06ca33057f2bcf23d4053570e6938", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7aad8061-9ba7-40ed-a9f5-5f1b5b18077e", "node_type": "1", "metadata": {}, "hash": "1f8005e2f53da80a2fc803893a426b0fb3e4fb1f7a67d4a7598290ff9ab32c78", "class_name": "RelatedNodeInfo"}}, "text": "This ensures that pruning is invoked as infrequently as possible while also ensuring that sufficient free storage is always available to trigger it.\n\n:::warning\nIt's recommended not to set the value below 250 GB for stability reasons. In reality, full pruning should require approximately the same amount of storage as a fresh state database (around 160 GB). Still, it also needs a threshold for processing and other operations since it creates a copy of the existing state database. Therefore, it's essential to maintain a minimum amount of storage to ensure a robust pruning performance.\n:::\n\n## Monitoring progress\n\nWhen full pruning is triggered correctly, the corresponding messages appear in the Nethermind logs.\n\nThe very first ones should be:\n\n```\nFull Pruning Ready to start: pruning garbage before state <block number> with root <hash>.\nWARN: Full Pruning Started on root hash <hash>: do not close the node until finished or progress will be lost.\n```\n\nFrom that moment, ensure that no restarts will be performed on Nethermind to ensure that full pruning runs correctly.\nAfter a few minutes first logs with progress would start to appear. For instance:\n\n```\nFull Pruning In Progress: 00:00:57.0603307 1.00 mln nodes mirrored.\nFull Pruning In Progress: 00:01:40.3677103 2.00 mln nodes mirrored.\nFull Pruning In Progress: 00:02:25.6437030 3.00 mln nodes mirrored.\n```\n\nPruning may take even _more than 30 hours_, depending on hardware configuration.\n\nWhen pruning is completed, there is a log message similar the following:\n\n```\nFull Pruning Finished: 15:25:59.1620756 1,560.29 mln nodes mirrored.\n```\n\nAs you may notice, it took around 15 hours in this example.\n\n:::info\nSince the amount of mirrored nodes is not a static value, providing a simple progress indicator in percentage is impossible. Therefore, the approximate value given should be used to determine when full pruning is expected to be completed.\n:::\n\n## Additional settings\n\n### Memory budget\n\nThe `Pruning.FullPruningMemoryBudgetMb` configuration option controls the memory budget allocated for the trie visit during\nthe full pruning process. During pruning, pending nodes are queued to a pool of nodes whose size is determined by this value.", "mimetype": "text/plain", "start_char_idx": 6859, "end_char_idx": 9075, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7aad8061-9ba7-40ed-a9f5-5f1b5b18077e": {"__data__": {"id_": "7aad8061-9ba7-40ed-a9f5-5f1b5b18077e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "747fc977-c677-424f-89fd-1e31fce604c2", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54c6fb21-e67a-4ba3-984e-d97af68e99d2", "node_type": "1", "metadata": {}, "hash": "608546e8a5264cb184acf7cf9e5d0e72b6940f1008d9643b4193558c81a81e1e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a32ab99-95b2-4773-a20b-dc9f6f683ac7", "node_type": "1", "metadata": {}, "hash": "ea142ed274e00e8a16543db8bf8de4813983d535f9c065cd4bfa81368f1c191f", "class_name": "RelatedNodeInfo"}}, "text": "This allows multiple nodes to share a single I/O. By increasing this value, the required read IOP per second can be significantly reduced, resulting in a faster full pruning operation. However, this improvement comes at the expense of increased memory usage.\n\nAssuming your system has 64GB of RAM, with Nethermind, the consensus client, and system expenses consuming 20GB,\nyou need to determine the maximum value for `Pruning.FullPruningMemoryBudgetMb` while ensuring the system remains stable and respects the given limit. In this case, you have 44 GB (64 GB - 20 GB) of available memory for increasing the `Pruning.FullPruningMemoryBudgetMb` value. To calculate the maximum value in MB, multiply the available memory by 1024: `44 GB * 1024 = 45,056 MB`\n\n:::info\nBecause of the workload on Ethereum Mainnet, setting the value of `Pruning.FullPruningMemoryBudgetMb` higher than 16 GB may not provide any additional performance benefits.\n:::\n\nPlease note that this example assumes the remaining 44 GB of memory is sufficient for the full pruning memory budget.\nDepending on the specific use case and system requirements, it may be necessary to adjust the value further to optimize performance and resource usage.\n\n### Pruning completion behavior\n\nThe `Pruning.FullPruningCompletionBehavior` configuration option determines Nethermind's behavior after full pruning is completed. By default, Nethermind will continue to progress as usual. However, if a user wishes to shut down the node after pruning, there are three options available:\n\n- `None`: No action taken\n- `ShutdownOnSuccess`: Nethermind shuts down if pruning succeeds\n- `AlwaysShutdown`: Nethermind shuts down once pruning completes, regardless of whether it succeeds or fails\n\n### Number of pruning concurrent tasks\n\nThe `Pruning.FullPruningMaxDegreeOfParallelism` configuration option determines the number of parallel tasks/threads that can be used by pruning:\n\n- `-1`: uses the number of logical processors\n- `0`: uses 25% of logical processors\n- `1`: runs on a single thread\n\nThe recommended value depends on the type of node being used. If the node needs to be responsive (e.g., RPC or validator), using a value below the number of logical processors is recommended.", "mimetype": "text/plain", "start_char_idx": 9076, "end_char_idx": 11306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a32ab99-95b2-4773-a20b-dc9f6f683ac7": {"__data__": {"id_": "0a32ab99-95b2-4773-a20b-dc9f6f683ac7", "embedding": null, "metadata": {"file_path": "./nethermind_dist/pruning.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "747fc977-c677-424f-89fd-1e31fce604c2", "node_type": "4", "metadata": {}, "hash": "1a7b058ef1a836cc4f2610c856199b72e40df102e73d86638b41c6934475de81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7aad8061-9ba7-40ed-a9f5-5f1b5b18077e", "node_type": "1", "metadata": {}, "hash": "1f8005e2f53da80a2fc803893a426b0fb3e4fb1f7a67d4a7598290ff9ab32c78", "class_name": "RelatedNodeInfo"}}, "text": "The default value is recommended if the node doesn't have many other responsibilities but needs to follow the chain without delays and produce live logs reliably. If the node doesn't need to be responsive, has very fast I/O (such as NVMe), and the shortest pruning time\nis desired, this can be set to 2\u20133 times the number of logical processors.\n\n### In-memory cache size\n\nThe `Pruning.CacheMb` configuration option determines the size, in MB, of the memory pool of nodes used for in-memory pruning. The default value is 1024. Increasing this value can help reduce the rate at which the state database grows.\n\n## Side notes\n\nFor pruning, keep in mind the following:\n\n- Full pruning is a cumbersome task, but it's performed in the background, so the node continues progressing and following the chain.\n- The process' heaviness may affect the effectiveness of the validator rewards. Still, since it's executed only once every few months, it shouldn't have a significant impact on overall results (we've xperienced approximately 5\u201310% loss of rewards during full pruning).\n- Ensure that your storage has at least 250 GB of free space after syncing the node. Otherwise, full pruning will never complete successfully.\n- Several things can be done to reduce the size of the database after syncing: setting `Sync.AncientBodiesBarrier` and `Sync.AncientReceiptsBarrier` to a proper value higher than 0, using a consensus client that requires less storage, and setting logs to the lowest level to avoid log spamming.", "mimetype": "text/plain", "start_char_idx": 11307, "end_char_idx": 12813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b92317e-c0c2-4cb0-9f42-bf932f1d9641": {"__data__": {"id_": "5b92317e-c0c2-4cb0-9f42-bf932f1d9641", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3479d342-bf0d-4304-b9f8-4343cda6ec98", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}}, "text": "---\ntitle: eth namespace\nsidebar_label: eth\nsidebar_position: 3\n---\n\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n### eth_blobBaseFee\n\nReturns the base fee per blob gas in wei\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_blobBaseFee\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_blockNumber\n\nReturns current block number\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_blockNumber\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_call\n\nExecutes a tx call (does not create a transaction)\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3479d342-bf0d-4304-b9f8-4343cda6ec98": {"__data__": {"id_": "3479d342-bf0d-4304-b9f8-4343cda6ec98", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b92317e-c0c2-4cb0-9f42-bf932f1d9641", "node_type": "1", "metadata": {}, "hash": "928d1a0264c42a407b374771eab4dc616fd21c46f3a4a6dbc6856a1549be7251", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15e80a1b-bd66-4105-aef4-816c2bf962f6", "node_type": "1", "metadata": {}, "hash": "7ccc242a3f3e35d573f2a94ba92aaf9ce5fd5bf7491487a5728046f6b63d4154", "class_name": "RelatedNodeInfo"}}, "text": "`transactionCall`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 1243, "end_char_idx": 2482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15e80a1b-bd66-4105-aef4-816c2bf962f6": {"__data__": {"id_": "15e80a1b-bd66-4105-aef4-816c2bf962f6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3479d342-bf0d-4304-b9f8-4343cda6ec98", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "685947c2-f961-4432-b5ce-65ca173ebc1c", "node_type": "1", "metadata": {}, "hash": "8fd505f472186f726f42ef11eba62485fc66296c60ea30aebed6f109b40e73ee", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_call\",\n      \"params\": [transactionCall, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### eth_chainId\n\nReturns ChainID\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_chainId\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_createAccessList\n\nCreates an [EIP2930](https://eips.ethereum.org/EIPS/eip-2930) type AccessList for the given transaction\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 2485, "end_char_idx": 3582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "685947c2-f961-4432-b5ce-65ca173ebc1c": {"__data__": {"id_": "685947c2-f961-4432-b5ce-65ca173ebc1c", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15e80a1b-bd66-4105-aef4-816c2bf962f6", "node_type": "1", "metadata": {}, "hash": "7ccc242a3f3e35d573f2a94ba92aaf9ce5fd5bf7491487a5728046f6b63d4154", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96fadb2e-6eab-4adf-bc9b-f2dd19f148e2", "node_type": "1", "metadata": {}, "hash": "46b935423ec8c4c250ec25a402d5034d95b0016cda1ea021ae0ef79988bc0225", "class_name": "RelatedNodeInfo"}}, "text": "`transactionCall`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n3. `optimize`: *boolean*", "mimetype": "text/plain", "start_char_idx": 3583, "end_char_idx": 4848, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96fadb2e-6eab-4adf-bc9b-f2dd19f148e2": {"__data__": {"id_": "96fadb2e-6eab-4adf-bc9b-f2dd19f148e2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "685947c2-f961-4432-b5ce-65ca173ebc1c", "node_type": "1", "metadata": {}, "hash": "8fd505f472186f726f42ef11eba62485fc66296c60ea30aebed6f109b40e73ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9bc25b2-4b75-499f-8c5f-db31739f8329", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_createAccessList\",\n      \"params\": [transactionCall, blockParameter, optimize]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_estimateGas\n\nExecutes a tx call and returns gas used (does not create a transaction)\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 4851, "end_char_idx": 5632, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9bc25b2-4b75-499f-8c5f-db31739f8329": {"__data__": {"id_": "d9bc25b2-4b75-499f-8c5f-db31739f8329", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96fadb2e-6eab-4adf-bc9b-f2dd19f148e2", "node_type": "1", "metadata": {}, "hash": "46b935423ec8c4c250ec25a402d5034d95b0016cda1ea021ae0ef79988bc0225", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db460f3d-0fed-495e-a387-182d1c985ed2", "node_type": "1", "metadata": {}, "hash": "d01023e40717d5b75f68e49e124080254ad423839217007ebed426a7d2c8cf23", "class_name": "RelatedNodeInfo"}}, "text": "`transactionCall`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 1243, "end_char_idx": 2482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db460f3d-0fed-495e-a387-182d1c985ed2": {"__data__": {"id_": "db460f3d-0fed-495e-a387-182d1c985ed2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9bc25b2-4b75-499f-8c5f-db31739f8329", "node_type": "1", "metadata": {}, "hash": "0cd76058f8bec1b5a03ced391f0da9898eb777d1a6b25ad8b034d7e28e513250", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc6753f2-723d-4a4a-9c88-06fc0e599177", "node_type": "1", "metadata": {}, "hash": "aa98c7e3d761413d239b40521c60a7ddf3d76ad41cc47f44ab25a5792ad5bd7c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_estimateGas\",\n      \"params\": [transactionCall, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_feeHistory\n\nReturns block fee history.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockCount`: *string* (hex integer)\n\n2. `newestBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n3. `rewardPercentiles`: array of *object*", "mimetype": "text/plain", "start_char_idx": 6875, "end_char_idx": 7646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc6753f2-723d-4a4a-9c88-06fc0e599177": {"__data__": {"id_": "cc6753f2-723d-4a4a-9c88-06fc0e599177", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db460f3d-0fed-495e-a387-182d1c985ed2", "node_type": "1", "metadata": {}, "hash": "d01023e40717d5b75f68e49e124080254ad423839217007ebed426a7d2c8cf23", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd16bd16-b422-49c7-afc2-04b8ed1d2d4d", "node_type": "1", "metadata": {}, "hash": "3e36dda00c00d90dbe09429f5038ee1644cd75d61766d0818324ac360c26be44", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_feeHistory\",\n      \"params\": [blockCount, newestBlock, rewardPercentiles]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `baseFeePerBlobGas`: array of *string* (hex integer)\n  - `baseFeePerGas`: array of *string* (hex integer)\n  - `blobGasUsedRatio`: array of *object*\n  - `gasUsedRatio`: array of *object*\n  - `oldestBlock`: *string* (hex integer)\n  - `reward`: array of array of *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_gasPrice\n\nReturns miner's gas price\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_gasPrice\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getAccount\n\nRetrieves Accounts via Address and Blocknumber\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `accountAddress`: *string* (address)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 7649, "end_char_idx": 9159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd16bd16-b422-49c7-afc2-04b8ed1d2d4d": {"__data__": {"id_": "cd16bd16-b422-49c7-afc2-04b8ed1d2d4d", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc6753f2-723d-4a4a-9c88-06fc0e599177", "node_type": "1", "metadata": {}, "hash": "aa98c7e3d761413d239b40521c60a7ddf3d76ad41cc47f44ab25a5792ad5bd7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8657e696-818b-4f43-96ca-9a83158e8b3b", "node_type": "1", "metadata": {}, "hash": "62a22aa2e2ebe703dab888affabfc640dbdd95684b28a4df18ab99cb185c9783", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getAccount\",\n      \"params\": [accountAddress, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `balance`: *string* (hex integer)\n  - `codeHash`: *object*\n    - `bytes`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n    - `bytesAsSpan`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `storageRoot`: *object*\n    - `bytes`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n    - `bytesAsSpan`: *object*\n      - `isEmpty`: *boolean*\n      - `item`: *object*\n      - `length`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getBalance\n\nReturns account balance\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 9162, "end_char_idx": 10482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8657e696-818b-4f43-96ca-9a83158e8b3b": {"__data__": {"id_": "8657e696-818b-4f43-96ca-9a83158e8b3b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd16bd16-b422-49c7-afc2-04b8ed1d2d4d", "node_type": "1", "metadata": {}, "hash": "3e36dda00c00d90dbe09429f5038ee1644cd75d61766d0818324ac360c26be44", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3ef87a4-7ea3-4d0c-9de1-fda8c0829256", "node_type": "1", "metadata": {}, "hash": "577ba717387c85e86d98be4b429cf4a4b72a155238ae326f67244ed491b7e5b1", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBalance\",\n      \"params\": [address, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockByHash\n\nRetrieves a block by hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `returnFullTransactionObjects`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockByHash\",\n      \"params\": [blockHash, returnFullTransactionObjects]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 10485, "end_char_idx": 11527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3ef87a4-7ea3-4d0c-9de1-fda8c0829256": {"__data__": {"id_": "d3ef87a4-7ea3-4d0c-9de1-fda8c0829256", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8657e696-818b-4f43-96ca-9a83158e8b3b", "node_type": "1", "metadata": {}, "hash": "62a22aa2e2ebe703dab888affabfc640dbdd95684b28a4df18ab99cb185c9783", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1f02020-d012-409d-9680-49fe4f58f7de", "node_type": "1", "metadata": {}, "hash": "cd5c34eb1cb603fea08b1608b6ae67ca9a6aaaf1e93cebd67994d3c04c189213", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockByNumber\n\nRetrieves a block by number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 11530, "end_char_idx": 12997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1f02020-d012-409d-9680-49fe4f58f7de": {"__data__": {"id_": "d1f02020-d012-409d-9680-49fe4f58f7de", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3ef87a4-7ea3-4d0c-9de1-fda8c0829256", "node_type": "1", "metadata": {}, "hash": "577ba717387c85e86d98be4b429cf4a4b72a155238ae326f67244ed491b7e5b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b61cfe6e-fa45-42b2-8b25-b5a748e2b458", "node_type": "1", "metadata": {}, "hash": "443fb7daa0165242acb2b0eb2731e734d94b304adfa4051f2fd6bf0debccad81", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `returnFullTransactionObjects`: *boolean*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockByNumber\",\n      \"params\": [blockParameter, returnFullTransactionObjects]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 12998, "end_char_idx": 13571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b61cfe6e-fa45-42b2-8b25-b5a748e2b458": {"__data__": {"id_": "b61cfe6e-fa45-42b2-8b25-b5a748e2b458", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1f02020-d012-409d-9680-49fe4f58f7de", "node_type": "1", "metadata": {}, "hash": "cd5c34eb1cb603fea08b1608b6ae67ca9a6aaaf1e93cebd67994d3c04c189213", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b29915a-70c9-4a09-ba3c-5a472454286f", "node_type": "1", "metadata": {}, "hash": "ac8bd583ef176b22e23455893493fb9e746802f4f6b26c7dc41dd1c4d54792e4", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockReceipts\n\nGet receipts from all transactions from particular block, more efficient than fetching the receipts one-by-one.\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 13574, "end_char_idx": 15125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b29915a-70c9-4a09-ba3c-5a472454286f": {"__data__": {"id_": "2b29915a-70c9-4a09-ba3c-5a472454286f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b61cfe6e-fa45-42b2-8b25-b5a748e2b458", "node_type": "1", "metadata": {}, "hash": "443fb7daa0165242acb2b0eb2731e734d94b304adfa4051f2fd6bf0debccad81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf7ece49-4fa1-413d-8b6f-0961ea4a3d7b", "node_type": "1", "metadata": {}, "hash": "ae4078b9bf74e6183c4169be677385ef880d259ec4e9d4466b24aa5114856b56", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockReceipts\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 15126, "end_char_idx": 15623, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf7ece49-4fa1-413d-8b6f-0961ea4a3d7b": {"__data__": {"id_": "cf7ece49-4fa1-413d-8b6f-0961ea4a3d7b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b29915a-70c9-4a09-ba3c-5a472454286f", "node_type": "1", "metadata": {}, "hash": "ac8bd583ef176b22e23455893493fb9e746802f4f6b26c7dc41dd1c4d54792e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47955db1-fd52-4672-8ac8-f449e30edade", "node_type": "1", "metadata": {}, "hash": "13cbb35a780eb9a238fb0be80cdfcff26ff7d2fff956287a4e4d1f8880693585", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockTransactionCountByHash\n\nReturns number of transactions in the block block hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)", "mimetype": "text/plain", "start_char_idx": 15626, "end_char_idx": 16884, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47955db1-fd52-4672-8ac8-f449e30edade": {"__data__": {"id_": "47955db1-fd52-4672-8ac8-f449e30edade", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf7ece49-4fa1-413d-8b6f-0961ea4a3d7b", "node_type": "1", "metadata": {}, "hash": "ae4078b9bf74e6183c4169be677385ef880d259ec4e9d4466b24aa5114856b56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae8915f0-ace1-4727-999e-753ec461dacc", "node_type": "1", "metadata": {}, "hash": "fd9daea40a4149285e9cccb603181f188f3f2ca73af11ff172bbe68bddec948a", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockTransactionCountByHash\",\n      \"params\": [blockHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getBlockTransactionCountByNumber\n\nReturns number of transactions in the block by block number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getBlockTransactionCountByNumber\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getCode\n\nReturns account code at given address and block\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 16887, "end_char_idx": 18378, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae8915f0-ace1-4727-999e-753ec461dacc": {"__data__": {"id_": "ae8915f0-ace1-4727-999e-753ec461dacc", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47955db1-fd52-4672-8ac8-f449e30edade", "node_type": "1", "metadata": {}, "hash": "13cbb35a780eb9a238fb0be80cdfcff26ff7d2fff956287a4e4d1f8880693585", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dcf61618-1d91-4379-bd3a-a720aeaa1272", "node_type": "1", "metadata": {}, "hash": "89005ba5bca6a942c040388fb2b4f42c42ee966e2a32c0d408e2eebf056ebfab", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getCode\",\n      \"params\": [address, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### eth_getFilterChanges\n\nReads filter changes\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filterId`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getFilterChanges\",\n      \"params\": [filterId]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n\n</TabItem>\n</Tabs>\n\n### eth_getFilterLogs\n\nReads filter changes\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filterId`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 18381, "end_char_idx": 19555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcf61618-1d91-4379-bd3a-a720aeaa1272": {"__data__": {"id_": "dcf61618-1d91-4379-bd3a-a720aeaa1272", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae8915f0-ace1-4727-999e-753ec461dacc", "node_type": "1", "metadata": {}, "hash": "fd9daea40a4149285e9cccb603181f188f3f2ca73af11ff172bbe68bddec948a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0982c1d-eabe-417e-a8dd-e07603b34f0f", "node_type": "1", "metadata": {}, "hash": "1303ff6a546f333b2789eb9323cbbe3cd764fb5ed4cee4457425ffbaf519ba96", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getFilterLogs\",\n      \"params\": [filterId]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getLogs\n\nReads logs\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filter`: *object*\n    - `address`: *object*\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *object*", "mimetype": "text/plain", "start_char_idx": 19558, "end_char_idx": 20781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0982c1d-eabe-417e-a8dd-e07603b34f0f": {"__data__": {"id_": "b0982c1d-eabe-417e-a8dd-e07603b34f0f", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dcf61618-1d91-4379-bd3a-a720aeaa1272", "node_type": "1", "metadata": {}, "hash": "89005ba5bca6a942c040388fb2b4f42c42ee966e2a32c0d408e2eebf056ebfab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91290833-e020-4948-b2c2-48815eb52ff0", "node_type": "1", "metadata": {}, "hash": "26ee901f4017f7ae8b57482d8ff9cd4a915feb655428346cc10503174f847389", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getLogs\",\n      \"params\": [filter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getProof\n\nhttps://github.com/ethereum/EIPs/issues/1186\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `accountAddress`: *string* (address)\n\n2. `hashRate`: array of *string* (hex integer)\n\n3. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 20784, "end_char_idx": 21925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91290833-e020-4948-b2c2-48815eb52ff0": {"__data__": {"id_": "91290833-e020-4948-b2c2-48815eb52ff0", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0982c1d-eabe-417e-a8dd-e07603b34f0f", "node_type": "1", "metadata": {}, "hash": "1303ff6a546f333b2789eb9323cbbe3cd764fb5ed4cee4457425ffbaf519ba96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b68331cc-537d-4035-8190-547a1c536e86", "node_type": "1", "metadata": {}, "hash": "977f5451bb83b46da92c77b0598d1d43becbd1cb1e7957020336efe2519cff87", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getProof\",\n      \"params\": [accountAddress, hashRate, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `address`: *string* (address)\n  - `balance`: *string* (hex integer)\n  - `codeHash`: *string* (hash)\n  - `nonce`: *string* (hex integer)\n  - `proof`: array of *string* (hex data)\n  - `storageProofs`: array of *object*\n    - `key`: *string* (hex data)\n    - `proof`: array of *string* (hex data)\n    - `value`: *object*\n      - `hasValue`: *boolean*\n      - `value`: *object*\n        - `isEmpty`: *boolean*\n        - `length`: *string* (hex integer)\n        - `span`: *object*\n          - `isEmpty`: *boolean*\n          - `item`: *object*\n          - `length`: *string* (hex integer)\n  - `storageRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getStorageAt\n\nReturns storage data at address. storage_index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2. `positionIndex`: *string* (hex integer)\n\n3. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 21928, "end_char_idx": 23331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b68331cc-537d-4035-8190-547a1c536e86": {"__data__": {"id_": "b68331cc-537d-4035-8190-547a1c536e86", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91290833-e020-4948-b2c2-48815eb52ff0", "node_type": "1", "metadata": {}, "hash": "26ee901f4017f7ae8b57482d8ff9cd4a915feb655428346cc10503174f847389", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6196524c-9f82-4f08-a0f4-7a007cddda0b", "node_type": "1", "metadata": {}, "hash": "9a706e735c69c4650e8b2180827643d76ff6acd7d795aca41aef5ab6d5de468c", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getStorageAt\",\n      \"params\": [address, positionIndex, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex data)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionByBlockHashAndIndex\n\nRetrieves a transaction by block hash and index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHash`: *string* (hash)\n\n2. `positionIndex`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n      \"params\": [blockHash, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 23334, "end_char_idx": 24433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6196524c-9f82-4f08-a0f4-7a007cddda0b": {"__data__": {"id_": "6196524c-9f82-4f08-a0f4-7a007cddda0b", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b68331cc-537d-4035-8190-547a1c536e86", "node_type": "1", "metadata": {}, "hash": "977f5451bb83b46da92c77b0598d1d43becbd1cb1e7957020336efe2519cff87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b50150bd-1a76-41f9-aa4c-ec9e02d88d43", "node_type": "1", "metadata": {}, "hash": "273aeff0ce5ea1ee94e0ab8629491d2da5f3cbc8ef428a8341c114bbfa1fd6b3", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionByBlockNumberAndIndex\n\nRetrieves a transaction by block number and index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `positionIndex`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 24436, "end_char_idx": 25846, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b50150bd-1a76-41f9-aa4c-ec9e02d88d43": {"__data__": {"id_": "b50150bd-1a76-41f9-aa4c-ec9e02d88d43", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6196524c-9f82-4f08-a0f4-7a007cddda0b", "node_type": "1", "metadata": {}, "hash": "9a706e735c69c4650e8b2180827643d76ff6acd7d795aca41aef5ab6d5de468c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5351a4c1-c1ee-4d43-a8b6-77ff60129d65", "node_type": "1", "metadata": {}, "hash": "7360105f5f2426ae3caeec5d77743e1851f0dd4f77d15cde2699ca43f32cedce", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n      \"params\": [blockParameter, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 25849, "end_char_idx": 26259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5351a4c1-c1ee-4d43-a8b6-77ff60129d65": {"__data__": {"id_": "5351a4c1-c1ee-4d43-a8b6-77ff60129d65", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b50150bd-1a76-41f9-aa4c-ec9e02d88d43", "node_type": "1", "metadata": {}, "hash": "273aeff0ce5ea1ee94e0ab8629491d2da5f3cbc8ef428a8341c114bbfa1fd6b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53b6ddb2-3e77-4cff-92af-f3f7a7ef75f3", "node_type": "1", "metadata": {}, "hash": "6f780524585cc74d773b1ba7301b07a9ce6f93306a94f8b541c82472db929182", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionByHash\n\nRetrieves a transaction by hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transactionHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionByHash\",", "mimetype": "text/plain", "start_char_idx": 26262, "end_char_idx": 27752, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53b6ddb2-3e77-4cff-92af-f3f7a7ef75f3": {"__data__": {"id_": "53b6ddb2-3e77-4cff-92af-f3f7a7ef75f3", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5351a4c1-c1ee-4d43-a8b6-77ff60129d65", "node_type": "1", "metadata": {}, "hash": "7360105f5f2426ae3caeec5d77743e1851f0dd4f77d15cde2699ca43f32cedce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "938849db-0330-4823-9eb9-99e50b082b01", "node_type": "1", "metadata": {}, "hash": "6fd27eafa0b9cb611bc94572c545aeb08652a3f2a07e883b9a5b936f46c6bc3f", "class_name": "RelatedNodeInfo"}}, "text": "\"params\": [transactionHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionCount\n\nReturns account nonce (number of trnsactions from the account since genesis) at the given block number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `address`: *string* (address)\n\n2.", "mimetype": "text/plain", "start_char_idx": 27759, "end_char_idx": 29216, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "938849db-0330-4823-9eb9-99e50b082b01": {"__data__": {"id_": "938849db-0330-4823-9eb9-99e50b082b01", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53b6ddb2-3e77-4cff-92af-f3f7a7ef75f3", "node_type": "1", "metadata": {}, "hash": "6f780524585cc74d773b1ba7301b07a9ce6f93306a94f8b541c82472db929182", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "740afb66-58d4-4ad7-91a1-ae22a3e2a71a", "node_type": "1", "metadata": {}, "hash": "3bd4e90bf2b7e5b19ae67cd8c9729934d4ab543f8b757e5df0db81ea084cea26", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionCount\",\n      \"params\": [address, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getTransactionReceipt\n\nRetrieves a transaction receipt by tx hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `txHashData`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getTransactionReceipt\",\n      \"params\": [txHashData]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 29217, "end_char_idx": 30346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "740afb66-58d4-4ad7-91a1-ae22a3e2a71a": {"__data__": {"id_": "740afb66-58d4-4ad7-91a1-ae22a3e2a71a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "938849db-0330-4823-9eb9-99e50b082b01", "node_type": "1", "metadata": {}, "hash": "6fd27eafa0b9cb611bc94572c545aeb08652a3f2a07e883b9a5b936f46c6bc3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9a50725-29bc-4802-bc10-ee0a5a1d7b88", "node_type": "1", "metadata": {}, "hash": "ba55f7aade3a4347d66353e255beac604f77f779d991ec568661483008888d7b", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `blobGasPrice`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `contractAddress`: *string* (address)\n  - `cumulativeGasUsed`: *string* (hex integer)\n  - `effectiveGasPrice`: *string* (hex integer)\n  - `error`: *string*\n  - `from`: *string* (address)\n  - `gasUsed`: *string* (hex integer)\n  - `logs`: array of *object*\n    - `address`: *string* (address)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `logIndex`: *string* (hex integer)\n    - `removed`: *boolean*\n    - `topics`: array of *string* (hash)\n    - `transactionHash`: *string* (hash)\n    - `transactionIndex`: *string* (hex integer)\n  - `logsBloom`: *string* (hex data)\n  - `root`: *string* (hash)\n  - `status`: *string* (hex integer)\n  - `to`: *string* (address)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleByBlockHashAndIndex\n\nRetrieves an uncle block header by block hash and uncle index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockHashData`: *string* (hash)\n\n2. `positionIndex`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleByBlockHashAndIndex\",", "mimetype": "text/plain", "start_char_idx": 30349, "end_char_idx": 31898, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9a50725-29bc-4802-bc10-ee0a5a1d7b88": {"__data__": {"id_": "d9a50725-29bc-4802-bc10-ee0a5a1d7b88", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "740afb66-58d4-4ad7-91a1-ae22a3e2a71a", "node_type": "1", "metadata": {}, "hash": "3bd4e90bf2b7e5b19ae67cd8c9729934d4ab543f8b757e5df0db81ea084cea26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd6c3eb9-fc15-42c0-9702-dc0b94139ae9", "node_type": "1", "metadata": {}, "hash": "f9c8a50d8854acb03882b3b5eb84d487408b4da63229eaa5e3a201ac60e08c37", "class_name": "RelatedNodeInfo"}}, "text": "\"params\": [blockHashData, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 31905, "end_char_idx": 32054, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd6c3eb9-fc15-42c0-9702-dc0b94139ae9": {"__data__": {"id_": "bd6c3eb9-fc15-42c0-9702-dc0b94139ae9", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9a50725-29bc-4802-bc10-ee0a5a1d7b88", "node_type": "1", "metadata": {}, "hash": "ba55f7aade3a4347d66353e255beac604f77f779d991ec568661483008888d7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7a9295e-7cd4-46e4-bdc0-4e7fd249dead", "node_type": "1", "metadata": {}, "hash": "2b5431e29472e3d42168cd2351375b0d17f62f36042fdbd1578ae9aa2a9be2fa", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleByBlockNumberAndIndex\n\nRetrieves an uncle block header by block number and uncle index\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 32057, "end_char_idx": 33573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7a9295e-7cd4-46e4-bdc0-4e7fd249dead": {"__data__": {"id_": "c7a9295e-7cd4-46e4-bdc0-4e7fd249dead", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd6c3eb9-fc15-42c0-9702-dc0b94139ae9", "node_type": "1", "metadata": {}, "hash": "f9c8a50d8854acb03882b3b5eb84d487408b4da63229eaa5e3a201ac60e08c37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7dcb359-5493-4410-997d-766c492f5dec", "node_type": "1", "metadata": {}, "hash": "88ebd4cf7116840ef099359f4ebf40b7d7f5eb09048aa6082fba188eb2332a2c", "class_name": "RelatedNodeInfo"}}, "text": "`blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n2. `positionIndex`: *string* (hex integer)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleByBlockNumberAndIndex\",\n      \"params\": [blockParameter, positionIndex]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 33574, "end_char_idx": 34143, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7dcb359-5493-4410-997d-766c492f5dec": {"__data__": {"id_": "c7dcb359-5493-4410-997d-766c492f5dec", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7a9295e-7cd4-46e4-bdc0-4e7fd249dead", "node_type": "1", "metadata": {}, "hash": "2b5431e29472e3d42168cd2351375b0d17f62f36042fdbd1578ae9aa2a9be2fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76d7c033-f299-423c-a9df-ddfbf180d12a", "node_type": "1", "metadata": {}, "hash": "0e62fec459cfd3f712e7e87084674b02c18235992e95196ca507daa9a23fe58f", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amountInGwei`: *string* (hex integer)\n    - `amountInWei`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleCountByBlockHash\n\nReturns number of uncles in the block by block hash\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 34146, "end_char_idx": 35645, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76d7c033-f299-423c-a9df-ddfbf180d12a": {"__data__": {"id_": "76d7c033-f299-423c-a9df-ddfbf180d12a", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7dcb359-5493-4410-997d-766c492f5dec", "node_type": "1", "metadata": {}, "hash": "88ebd4cf7116840ef099359f4ebf40b7d7f5eb09048aa6082fba188eb2332a2c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd5da326-56f0-4fee-94ca-b8ded2b2bb92", "node_type": "1", "metadata": {}, "hash": "0795585e37d4cb96e009ca443aeeeef7623f3fe21d00668150aef67b8cd88c56", "class_name": "RelatedNodeInfo"}}, "text": "`blockHash`: *string* (hash)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleCountByBlockHash\",\n      \"params\": [blockHash]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_getUncleCountByBlockNumber\n\nReturns number of uncles in the block by block number\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)", "mimetype": "text/plain", "start_char_idx": 35646, "end_char_idx": 36401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd5da326-56f0-4fee-94ca-b8ded2b2bb92": {"__data__": {"id_": "fd5da326-56f0-4fee-94ca-b8ded2b2bb92", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "76d7c033-f299-423c-a9df-ddfbf180d12a", "node_type": "1", "metadata": {}, "hash": "0e62fec459cfd3f712e7e87084674b02c18235992e95196ca507daa9a23fe58f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12ceeb2e-f5f0-4446-8fa7-c240f1d4d272", "node_type": "1", "metadata": {}, "hash": "214ed834516ac15bb5a12fbbdd49baa89591516bc4eb8d86eaafb98722166686", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_getUncleCountByBlockNumber\",\n      \"params\": [blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_newBlockFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_newBlockFilter\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_newFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filter`: *object*\n    - `address`: *object*\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *object*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 36404, "end_char_idx": 37971, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12ceeb2e-f5f0-4446-8fa7-c240f1d4d272": {"__data__": {"id_": "12ceeb2e-f5f0-4446-8fa7-c240f1d4d272", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fd5da326-56f0-4fee-94ca-b8ded2b2bb92", "node_type": "1", "metadata": {}, "hash": "0795585e37d4cb96e009ca443aeeeef7623f3fe21d00668150aef67b8cd88c56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1de66cfa-f0c9-4d36-a230-0be440d230a5", "node_type": "1", "metadata": {}, "hash": "4491cd74f79dd316e0b721abaf1c4a16d06c9218dc240f8a04b4c9164f2d0228", "class_name": "RelatedNodeInfo"}}, "text": "\"method\": \"eth_newFilter\",\n      \"params\": [filter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_newPendingTransactionFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_newPendingTransactionFilter\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_pendingTransactions\n\nReturns the pending transactions list\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_pendingTransactions\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,", "mimetype": "text/plain", "start_char_idx": 37978, "end_char_idx": 39161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1de66cfa-f0c9-4d36-a230-0be440d230a5": {"__data__": {"id_": "1de66cfa-f0c9-4d36-a230-0be440d230a5", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12ceeb2e-f5f0-4446-8fa7-c240f1d4d272", "node_type": "1", "metadata": {}, "hash": "214ed834516ac15bb5a12fbbdd49baa89591516bc4eb8d86eaafb98722166686", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5ed9166-a65c-4018-b401-ce00a26c365e", "node_type": "1", "metadata": {}, "hash": "2b451685cf200a94f5e05ffe4d2054d78c16d132692be61cd0569b5cc6d5adae", "class_name": "RelatedNodeInfo"}}, "text": "\"result\": result\n}\n```\n\n`result`: array of *object*\n  - `accessList`: array of *object*\n    - `address`: *string* (address)\n    - `storageKeys`: array of *string* (hex integer)\n  - `blobVersionedHashes`: array of *string* (hex data)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `chainId`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `from`: *string* (address)\n  - `gas`: *string* (hex integer)\n  - `gasPrice`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `input`: *string* (hex data)\n  - `isSystemTx`: *boolean*\n  - `maxFeePerBlobGas`: *string* (hex integer)\n  - `maxFeePerGas`: *string* (hex integer)\n  - `maxPriorityFeePerGas`: *string* (hex integer)\n  - `mint`: *string* (hex integer)\n  - `nonce`: *string* (hex integer)\n  - `r`: *string* (hex integer)\n  - `s`: *string* (hex integer)\n  - `sourceHash`: *string* (hash)\n  - `to`: *string* (address)\n  - `transactionIndex`: *string* (hex integer)\n  - `type`: *integer*\n  - `v`: *string* (hex integer)\n  - `value`: *string* (hex integer)\n  - `yParity`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_protocolVersion\n\nReturns ETH protocol version\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_protocolVersion\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",", "mimetype": "text/plain", "start_char_idx": 39164, "end_char_idx": 40671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5ed9166-a65c-4018-b401-ce00a26c365e": {"__data__": {"id_": "c5ed9166-a65c-4018-b401-ce00a26c365e", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1de66cfa-f0c9-4d36-a230-0be440d230a5", "node_type": "1", "metadata": {}, "hash": "4491cd74f79dd316e0b721abaf1c4a16d06c9218dc240f8a04b4c9164f2d0228", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "de2f3ce7-ae24-46cc-bd38-dfd731cb3140", "node_type": "1", "metadata": {}, "hash": "1331d8897cb0735ea1683ecbabc2f62f2529110bd9e9f4b2b46634288795fa7b", "class_name": "RelatedNodeInfo"}}, "text": "\"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string*\n\n</TabItem>\n</Tabs>\n\n### eth_sendRawTransaction\n\nSend a raw transaction to the tx pool and broadcasting\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `transaction`: *string* (hex data)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_sendRawTransaction\",\n      \"params\": [transaction]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_sendTransaction\n\nSend a transaction to the tx pool and broadcasting\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1.", "mimetype": "text/plain", "start_char_idx": 40674, "end_char_idx": 41505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de2f3ce7-ae24-46cc-bd38-dfd731cb3140": {"__data__": {"id_": "de2f3ce7-ae24-46cc-bd38-dfd731cb3140", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5ed9166-a65c-4018-b401-ce00a26c365e", "node_type": "1", "metadata": {}, "hash": "2b451685cf200a94f5e05ffe4d2054d78c16d132692be61cd0569b5cc6d5adae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2f32b36-6bbe-43dc-bf05-75b3aa2b5508", "node_type": "1", "metadata": {}, "hash": "26faed2455dbf4731f937f54011ca71b565c15f7fb4b86462cd252f5ae438971", "class_name": "RelatedNodeInfo"}}, "text": "`rpcTx`: *object*\n    - `accessList`: array of *object*\n      - `address`: *string* (address)\n      - `storageKeys`: array of *string* (hex integer)\n    - `blobVersionedHashes`: array of *string* (hex data)\n    - `blockHash`: *string* (hash)\n    - `blockNumber`: *string* (hex integer)\n    - `chainId`: *string* (hex integer)\n    - `data`: *string* (hex data)\n    - `from`: *string* (address)\n    - `gas`: *string* (hex integer)\n    - `gasPrice`: *string* (hex integer)\n    - `hash`: *string* (hash)\n    - `input`: *string* (hex data)\n    - `isSystemTx`: *boolean*\n    - `maxFeePerBlobGas`: *string* (hex integer)\n    - `maxFeePerGas`: *string* (hex integer)\n    - `maxPriorityFeePerGas`: *string* (hex integer)\n    - `mint`: *string* (hex integer)\n    - `nonce`: *string* (hex integer)\n    - `r`: *string* (hex integer)\n    - `s`: *string* (hex integer)\n    - `sourceHash`: *string* (hash)\n    - `to`: *string* (address)\n    - `transactionIndex`: *string* (hex integer)\n    - `type`: *integer*\n    - `v`: *string* (hex integer)\n    - `value`: *string* (hex integer)\n    - `yParity`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 41506, "end_char_idx": 42612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2f32b36-6bbe-43dc-bf05-75b3aa2b5508": {"__data__": {"id_": "e2f32b36-6bbe-43dc-bf05-75b3aa2b5508", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de2f3ce7-ae24-46cc-bd38-dfd731cb3140", "node_type": "1", "metadata": {}, "hash": "1331d8897cb0735ea1683ecbabc2f62f2529110bd9e9f4b2b46634288795fa7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35d2cdf4-982b-4495-8695-590d6c97fa73", "node_type": "1", "metadata": {}, "hash": "a565fabdcab6afbd515dac7a0caf161516b3497c38871f292b06a8fe6d296211", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_sendTransaction\",\n      \"params\": [rpcTx]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *string* (hash)\n\n</TabItem>\n</Tabs>\n\n### eth_simulateV1\n\nExecutes a simulation across multiple blocks (does not create a transaction or block)\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `payload`: *object*\n    - `blockStateCalls`: array of *object*\n      - `blockOverrides`: *object*\n        - `baseFeePerGas`: *string* (hex integer)\n        - `blobBaseFee`: *string* (hex integer)\n        - `feeRecipient`: *string* (address)\n        - `gasLimit`: *string* (hex integer)\n        - `number`: *string* (hex integer)\n        - `prevRandao`: *string* (hash)\n        - `time`: *string* (hex integer)\n      - `calls`: array of *object*\n        - `accessList`: array of *object*\n          - `address`: *string* (address)\n          - `storageKeys`: array of *string* (hex integer)\n        - `blobVersionedHashes`: array of *string* (hex data)\n        - `blockHash`: *string* (hash)\n        - `blockNumber`: *string* (hex integer)\n        - `chainId`:", "mimetype": "text/plain", "start_char_idx": 42615, "end_char_idx": 43974, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35d2cdf4-982b-4495-8695-590d6c97fa73": {"__data__": {"id_": "35d2cdf4-982b-4495-8695-590d6c97fa73", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2f32b36-6bbe-43dc-bf05-75b3aa2b5508", "node_type": "1", "metadata": {}, "hash": "26faed2455dbf4731f937f54011ca71b565c15f7fb4b86462cd252f5ae438971", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9ecbf34-1927-4e50-81a5-b77db1b043b6", "node_type": "1", "metadata": {}, "hash": "5d16f099d8f355c724347707c976aac7ecda0d119ca1b34457d95924fc393136", "class_name": "RelatedNodeInfo"}}, "text": "*string* (hex integer)\n        - `data`: *string* (hex data)\n        - `from`: *string* (address)\n        - `gas`: *string* (hex integer)\n        - `gasPrice`: *string* (hex integer)\n        - `hash`: *string* (hash)\n        - `input`: *string* (hex data)\n        - `isSystemTx`: *boolean*\n        - `maxFeePerBlobGas`: *string* (hex integer)\n        - `maxFeePerGas`: *string* (hex integer)\n        - `maxPriorityFeePerGas`: *string* (hex integer)\n        - `mint`: *string* (hex integer)\n        - `nonce`: *string* (hex integer)\n        - `r`: *string* (hex integer)\n        - `s`: *string* (hex integer)\n        - `sourceHash`: *string* (hash)\n        - `to`: *string* (address)\n        - `transactionIndex`: *string* (hex integer)\n        - `type`: *integer*\n        - `v`: *string* (hex integer)\n        - `value`: *string* (hex integer)\n        - `yParity`: *string* (hex integer)\n      - `stateOverrides`: map of *object*\n        - `balance`: *string* (hex integer)\n        - `code`: *string* (hex data)\n        - `movePrecompileToAddress`: *string* (address)\n        - `nonce`: *string* (hex integer)\n        - `state`: map of *string* (hash)", "mimetype": "text/plain", "start_char_idx": 43975, "end_char_idx": 45126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9ecbf34-1927-4e50-81a5-b77db1b043b6": {"__data__": {"id_": "d9ecbf34-1927-4e50-81a5-b77db1b043b6", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35d2cdf4-982b-4495-8695-590d6c97fa73", "node_type": "1", "metadata": {}, "hash": "a565fabdcab6afbd515dac7a0caf161516b3497c38871f292b06a8fe6d296211", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a55669c-0148-45b4-8d3b-dd1f2224f785", "node_type": "1", "metadata": {}, "hash": "8581ca5ee40c9fa38d40756d13a051fb15503ff878a2ddd5d700e487a810d943", "class_name": "RelatedNodeInfo"}}, "text": "- `stateDiff`: map of *string* (hash)\n    - `returnFullTransactionObjects`: *boolean*\n    - `traceTransfers`: *boolean*\n    - `validation`: *boolean*\n\n2. `blockParameter`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_simulateV1\",\n      \"params\": [payload, blockParameter]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: array of *object*\n  - `calls`: array of *object*\n    - `error`: *object*\n      - `code`: *string* (hex integer)\n      - `data`: *string*\n      - `message`: *string*\n    - `gasUsed`: *string* (hex integer)\n    - `logs`: array of *object*\n      - `address`: *string* (address)\n      - `blockHash`: *string* (hash)\n      - `blockNumber`: *string* (hex integer)\n      - `data`: *string* (hex data)\n      - `logIndex`: *string* (hex integer)\n      - `removed`: *boolean*\n      - `topics`: array of *string* (hash)\n      - `transactionHash`: *string* (hash)\n      - `transactionIndex`: *string* (hex integer)\n    - `returnData`: *string* (hex data)\n    - `status`: *string* (hex integer)\n\n</TabItem>\n</Tabs>\n\n### eth_subscribe\n\nStarts a subscription to a particular event over WebSockets. A JSON-RPC notification with event payload and subscription id is sent to a client for every event matching the subscription topic.", "mimetype": "text/plain", "start_char_idx": 45135, "end_char_idx": 46740, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a55669c-0148-45b4-8d3b-dd1f2224f785": {"__data__": {"id_": "4a55669c-0148-45b4-8d3b-dd1f2224f785", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9ecbf34-1927-4e50-81a5-b77db1b043b6", "node_type": "1", "metadata": {}, "hash": "5d16f099d8f355c724347707c976aac7ecda0d119ca1b34457d95924fc393136", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb7be7c2-b5c0-4995-82ed-82224e1ccfa3", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}}, "text": ":::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionName`: *string*\n\n2. `filter`: *object*\n    - `address`: *string* (address)\n    - `fromBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `toBlock`: *string* (block number or hash or either of `earliest`, `finalized`, `latest`, `pending`, or `safe`)\n    - `topics`: array of *string* (hex data)\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_subscribe\",\n  \"params\": [subscriptionName, args]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": \"0x...\" // subscription id\n}\n```\n\n`result`: *string*\n\n</TabItem>\n<TabItem value=\"notif\" label=\"Notification\">\n\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_subscription\",\n  \"params\": {\n    \"subscription\": \"0x...\", // subscription id\n    \"result\": payload\n  }\n}\n```\n\nSee specific subcription topic below for `payload` details.\n\n</TabItem>\n</Tabs>\n\n#### Subscription topics\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newHeads\n\n</summary>\n<p>\n\nSubscribes to incoming block headers. Fires a notification each time a new header is appended to the chain, including chain reorganizations.", "mimetype": "text/plain", "start_char_idx": 46742, "end_char_idx": 48232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb7be7c2-b5c0-4995-82ed-82224e1ccfa3": {"__data__": {"id_": "cb7be7c2-b5c0-4995-82ed-82224e1ccfa3", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a55669c-0148-45b4-8d3b-dd1f2224f785", "node_type": "1", "metadata": {}, "hash": "8581ca5ee40c9fa38d40756d13a051fb15503ff878a2ddd5d700e487a810d943", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e98dc5cc-5be4-420c-90d0-6d252ae9b277", "node_type": "1", "metadata": {}, "hash": "ad0a92f04d15f0e6d6396f11000d66dcfc0332e484c0a175e8e4ab07fb37dcde", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `author`: *string* (address)\n  - `baseFeePerGas`: *string* (hex integer)\n  - `blobGasUsed`: *string* (hex integer)\n  - `difficulty`: *string* (hex integer)\n  - `excessBlobGas`: *string* (hex integer)\n  - `extraData`: *string* (hex data)\n  - `gasLimit`: *string* (hex integer)\n  - `gasUsed`: *string* (hex integer)\n  - `hash`: *string* (hash)\n  - `logsBloom`: *string* (hex data)\n  - `miner`: *string* (address)\n  - `mixHash`: *string* (hash)\n  - `nonce`: *string* (hex data)\n  - `number`: *string* (hex integer)\n  - `parentBeaconBlockRoot`: *string* (hash)\n  - `parentHash`: *string* (hash)\n  - `receiptsRoot`: *string* (hash)\n  - `sha3Uncles`: *string* (hash)\n  - `signature`: *string* (hex data)\n  - `size`: *string* (hex integer)\n  - `stateRoot`: *string* (hash)\n  - `step`: *string* (hex integer)\n  - `timestamp`: *string* (hex integer)\n  - `totalDifficulty`: *string* (hex integer)\n  - `transactions`: array of *object*\n  - `transactionsRoot`: *string* (hash)\n  - `uncles`: array of *string* (hash)\n  - `withdrawals`: array of *object*\n    - `address`: *string* (address)\n    - `amount`: *string* (hex integer)\n    - `index`: *string* (hex integer)\n    - `validatorIndex`: *string* (hex integer)\n  - `withdrawalsRoot`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### logs\n\n</summary>\n<p>\n\nSubscribes to incoming logs filtered by the given options. In case of a chain reorganization, previously sent logs on the old chain will be re-sent with the `removed` field set to `true`.", "mimetype": "text/plain", "start_char_idx": 48234, "end_char_idx": 49796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e98dc5cc-5be4-420c-90d0-6d252ae9b277": {"__data__": {"id_": "e98dc5cc-5be4-420c-90d0-6d252ae9b277", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb7be7c2-b5c0-4995-82ed-82224e1ccfa3", "node_type": "1", "metadata": {}, "hash": "dadf0aa0a229d3d2a7dd1591a144802df7b7603cae31d555cbe508ed3ab226d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e89b4a4-6d77-431d-bcc3-4d40eebff7d2", "node_type": "1", "metadata": {}, "hash": "ec0b2ccec90eb8441f76ce6e50875c280fd863351f46a912e7ab5e5e78440675", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`: *object*\n  - `address`: *string* (address)\n  - `blockHash`: *string* (hash)\n  - `blockNumber`: *string* (hex integer)\n  - `data`: *string* (hex data)\n  - `logIndex`: *string* (hex integer)\n  - `removed`: *boolean*\n  - `topics`: array of *string* (hash)\n  - `transactionHash`: *string* (hash)\n  - `transactionIndex`: *string* (hex integer)\n  - `transactionLogIndex`: *string* (hex integer)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### newPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to incoming pending transactions. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### droppedPendingTransactions\n\n</summary>\n<p>\n\nSubscribes to transactions evicted from the transaction pool. Returns the transaction hash.\n\nNotification `payload`: *string* (hash)\n\n</p>\n</details>\n\n<details>\n<summary className=\"nd-details-heading\">\n\n##### syncing\n\n</summary>\n<p>\n\nSubscribes to syncing events. Returns `false` (once) if the node is synced or an object with statistics (once) when the node starts syncing.", "mimetype": "text/plain", "start_char_idx": 49798, "end_char_idx": 50937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e89b4a4-6d77-431d-bcc3-4d40eebff7d2": {"__data__": {"id_": "5e89b4a4-6d77-431d-bcc3-4d40eebff7d2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e98dc5cc-5be4-420c-90d0-6d252ae9b277", "node_type": "1", "metadata": {}, "hash": "ad0a92f04d15f0e6d6396f11000d66dcfc0332e484c0a175e8e4ab07fb37dcde", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac502391-b05a-493a-bf2a-cb3d562ebba2", "node_type": "1", "metadata": {}, "hash": "912efa2d2872ce536d40e526c0137b773766c2a52df2cf4e68c32777de07b28d", "class_name": "RelatedNodeInfo"}}, "text": "Notification `payload`:\n\n  - if synced: *boolean*\n  - if syncing: *object*\n      - `currentBlock`: *string* (hex integer)\n      - `highestBlock`: *string* (hex integer)\n      - `isSyncing`: *boolean*\n      - `startingBlock`: *string* (hex integer)\n\n</p>\n</details>\n### eth_syncing\n\nReturns syncing status\n\n<Tabs>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_syncing\",\n      \"params\": []\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *object*\n  - `currentBlock`: *string* (hex integer)\n  - `highestBlock`: *string* (hex integer)\n  - `isSyncing`: *boolean*\n  - `startingBlock`: *string* (hex integer)\n  - `syncMode`: *integer*\n\n</TabItem>\n</Tabs>\n\n### eth_uninstallFilter\n\nCreates an update filter\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `filterId`: *string* (hex integer)", "mimetype": "text/plain", "start_char_idx": 50939, "end_char_idx": 51984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac502391-b05a-493a-bf2a-cb3d562ebba2": {"__data__": {"id_": "ac502391-b05a-493a-bf2a-cb3d562ebba2", "embedding": null, "metadata": {"file_path": "./nethermind_dist/eth.md"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e", "node_type": "4", "metadata": {}, "hash": "5567027a80bd7a084435bc45cac151fa29e78a1c96266d042e1f28eb9dac06e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e89b4a4-6d77-431d-bcc3-4d40eebff7d2", "node_type": "1", "metadata": {}, "hash": "ec0b2ccec90eb8441f76ce6e50875c280fd863351f46a912e7ab5e5e78440675", "class_name": "RelatedNodeInfo"}}, "text": "</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\ncurl localhost:8545 \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\n      \"jsonrpc\": \"2.0\",\n      \"id\": 0,\n      \"method\": \"eth_uninstallFilter\",\n      \"params\": [filterId]\n    }'\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean*\n\n</TabItem>\n</Tabs>\n\n### eth_unsubscribe\n\nUnsubscribes from a subscription.\n\n:::info\nThis method is enabled by adding `subscribe` to [`--JsonRpc.EnabledModules`](../../fundamentals/configuration.md#jsonrpc).\n:::\n\n<Tabs>\n<TabItem value=\"params\" label=\"Parameters\">\n\n1. `subscriptionId`: *string*\n\n\n</TabItem>\n<TabItem value=\"request\" label=\"Request\" default>\n\n```bash\nwscat -c ws://localhost:8545\n```\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"eth_unsubscribe\",\n  \"params\": [subscriptionId]\n}\n```\n\n</TabItem>\n<TabItem value=\"response\" label=\"Response\">\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"result\": result\n}\n```\n\n`result`: *boolean* (`true` if unsubscribed successfully; otherwise, `false`)\n\n</TabItem>\n</Tabs>", "mimetype": "text/plain", "start_char_idx": 51987, "end_char_idx": 53132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"127ac2be-4a98-4d76-b753-cc2df09c179d": {"doc_hash": "fc8c6963fd47b4c54ebc8f23c9d10b540bc8d8ba9dfd277ef78b4c1b97d4ff05", "ref_doc_id": "701e7e49-90aa-4c07-8287-636770eea2f5"}, "5cbd1801-bbe9-4299-9ada-a2cc97d972aa": {"doc_hash": "1b859d91616a23d957eea8fb5ac19df3856cb77e78585e76a0fabb264e9de9c3", "ref_doc_id": "701e7e49-90aa-4c07-8287-636770eea2f5"}, "9e31bcc6-97cf-4340-ba95-1a4f6a2fd56c": {"doc_hash": "87942fdef675cb578c48a8d8258ba798c42f76cc8fc936d627e32a4d8d4ed88b", "ref_doc_id": "701e7e49-90aa-4c07-8287-636770eea2f5"}, "5dce95dd-0aa5-4b5b-8297-39e93cb36d65": {"doc_hash": "e6b29bc2e2f3e3c57579a2ae0ca68e9114d6333dee44e102982208bc2baf2f45", "ref_doc_id": "701e7e49-90aa-4c07-8287-636770eea2f5"}, "1e2fc607-4299-4217-a9e0-18932cc25f36": {"doc_hash": "9e9896fbb93ec7746da99a406e4b778a4e83d390962e5601b92387036f388171", "ref_doc_id": "00ba67e4-8e74-4429-8abe-ca4bbed48126"}, "1e5db49b-2cf0-479a-89c6-5eeca9533227": {"doc_hash": "69f8af2f8982bea4fe872618e4cba209462c1b8370729b9cb7aa0035846e1e3b", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "45a591e7-cec0-43e0-af8b-4f51b08294d5": {"doc_hash": "38338b545f342302ebdc1416ee7d7d6becc02913f22839910f071c04e4b7403d", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "8b96321f-fa80-4aee-a730-52a573f9d795": {"doc_hash": "cca3cb8d751d561b327952486466919f76736add8cfeedcd2a91916e8f279eed", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "195dfec3-8754-4233-beee-9a94f80adc51": {"doc_hash": "d5bcad9aecccf805668f3684de0d8de6a15d6e60ac1c2bc274807a2e8c834e93", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "c17cb743-d453-4a9d-bd3e-351e3ad3379e": {"doc_hash": "040c5dbdd6638b05fea4c98abbb9639f14fe88075c114af42952887d3e422eb8", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "b62e3470-1163-4f57-83f7-c13757e0dd55": {"doc_hash": "eb7634eb0b9ad1ce85b9023f303f6f960da563a071c6475ad3be8aefc82394d1", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "31916a26-85e3-4ae7-8076-73cbb3660f61": {"doc_hash": "1986d9eb3f1a157ab9dd75d2bf6acca022a76929bdb172920890e2aef9d9e324", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "93d2706d-e077-4ae2-b9db-12691d71d2d4": {"doc_hash": "6887a5aecf396d3919cbcc8612544b31aaf271a7764a0360d405bc934487dd65", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "20788d48-fc5a-45e6-a395-ba99a9e3c84c": {"doc_hash": "5cb7615b7f0d3444330e1fc1198106a7b581d2799da2a9ce749c86c8002900da", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "e9154316-ac02-4018-8676-481e7e8266ba": {"doc_hash": "a7f626e83e3c55c5340ff76003a10f70222dc6dd7032a0842f5e0b811f54d759", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "c20db2ed-f30a-44f1-8b73-c846890f1870": {"doc_hash": "b89f9abeeaf8d80995d9688a8bb6af4e2709d7e5d7e5a38b14c471d269153876", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "51acd792-70f4-4f0b-ade0-76179461410f": {"doc_hash": "345ab3f41dab786c81d5e51ead89a8d69f6abc65a818decfbc039bd14750690c", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "e5af461e-d0c3-4efa-a292-d9901fa8f3c5": {"doc_hash": "0a23df88e1e8fc64b85a26a79c3220709b08402a9981f6d5b606d0a5790e9817", "ref_doc_id": "e9b80aa0-3a10-442e-aca6-208744012837"}, "edc77b9c-da58-4c48-817a-37c217a475ad": {"doc_hash": "0fd00d5f253ca916e982a29d8af5d8d0c264efa7af87a501057824906b4d44d4", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "2b5940f1-3314-49c8-8d02-f2f81011816a": {"doc_hash": "1c10c2794818c48760ecfc9f4007d76f9b15aac2f1a77027dd2715a18a0cdae4", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "255d5927-21ee-4324-8834-a3ea11f81930": {"doc_hash": "a742fd162d552ec879c3e643bf78eac2721b89fa380e6955131b25980c120cab", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "1d1edae9-a0f8-4150-ae84-357373ef1221": {"doc_hash": "bf498a3c4cc547f584f948efe8009a8f808110797eaca8119df501e27c7f93ff", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "bc8d3609-fe6e-4c47-b14b-cfdd9a80b883": {"doc_hash": "ed8c5583d3fd3ffca2457f48836909d107c5fe74b08d9005f93750cb92042ba7", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "01a9637b-3d0d-493f-b2d3-26d4e590fcc6": {"doc_hash": "a4a77cfc550d86685b97a5258364237c146aed19f30d35f8f93d7e98cf585870", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "6a252df2-239a-49bd-81f1-9419891545ff": {"doc_hash": "7573e71933206c23001176e03833064b520605398e1dc069b68341350f6a53c2", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "6543d586-7d83-48e0-a497-934d98af2935": {"doc_hash": "e7e4724a2364bfe318af6d09da1f6ac97f06587f269d4efb5331f284b8be9cb1", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "8a627d66-3424-477b-b0e8-a6cc5f962323": {"doc_hash": "0c9f135317445631ca0566a63084c91e08a4a18ed83b6e61b4da77066a2b40c2", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "74a22d81-d56b-43b4-8884-00b51196dc08": {"doc_hash": "73cd09ca0bb32a5e5d53a5833db08dbe0e6f838184afbcbddd242a041267aba6", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "806bd4ff-b93d-485c-8e60-1a8ef3267bff": {"doc_hash": "83ce8f7b05463d02570a14dc055d46191c0aa14939ed5c6d5fce03b5f17b7d0a", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "fe70b6d3-5c2f-4310-877a-b28b50cd28c5": {"doc_hash": "60db1098bac75ed0bacea8fabe155be5ba5663322a06fe2cbca7518fc9dc6e0c", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "516c970b-98e3-4986-89ec-4df1909b61ab": {"doc_hash": "cee2f43f33e8b46f4060770c6a15f259b3ccdda6801aa4d66c0b17907f5dad83", "ref_doc_id": "3472b989-e9b4-43d6-be73-fec76e45e6bb"}, "23cae480-f555-4e84-aa12-f18b6cc51ce0": {"doc_hash": "213bb0125297cff894d7570d6fc46306640282cd76fb1949962897833704acb6", "ref_doc_id": "748ca42a-058d-4d2b-b2d1-99378659ed03"}, "440826c7-6545-4d08-adf5-57228073a7a9": {"doc_hash": "14a543d3b5b410fe026a39cbee07cbf6cc240e6a818b35914cc008f4381b69ba", "ref_doc_id": "748ca42a-058d-4d2b-b2d1-99378659ed03"}, "8d2a1deb-f45f-4291-96f3-02c13d0353e6": {"doc_hash": "3278ed97c0518cd9884a0cf679c8434012da0640d5558cc45339b174b3e72d7b", "ref_doc_id": "2b21c998-df88-4b0f-bff2-ee542bda43da"}, "631c4930-4a8e-4adb-a4ec-8f36c24d941e": {"doc_hash": "dec522bec012d827cd74f2b731b2616766717003f66beb37904d4def1025635a", "ref_doc_id": "2b21c998-df88-4b0f-bff2-ee542bda43da"}, "8145fc51-d6e2-463d-acf9-61a462febbf1": {"doc_hash": "1734734929aada54cf0b0b5d50f6226ee1ba887d0ca2ee23a72e73a4253433cc", "ref_doc_id": "2b21c998-df88-4b0f-bff2-ee542bda43da"}, "66aca90c-7fb6-4002-81c9-367abeaab9ee": {"doc_hash": "f4b3a9aeb679fd3b755d85e04b23f6b3f8e6178e124098554dd7baeed8d6bf41", "ref_doc_id": "6bf93139-a8b3-4200-97eb-84f9e4f895df"}, "04317601-a5e7-4a89-b2c5-7729992fe7d7": {"doc_hash": "1d3c313ccc53506eeeddfe80eb2c4228888845b85e616f7f66fac1813d11d8cc", "ref_doc_id": "6bf93139-a8b3-4200-97eb-84f9e4f895df"}, "57003504-93d5-4a95-8bd8-4ca9f026acde": {"doc_hash": "5f9eba0bcca7f4fd78d29cf92a683743dd1cc8ef0ee9638868ccd1ab242a5e74", "ref_doc_id": "668b12a1-fcb4-4ede-b7e9-d15abe5dbb3f"}, "274057e8-fc64-47c7-b427-992b7d825f69": {"doc_hash": "e3e731e08b9f3c4d980e1b0b9a66b75e1bfd1bcd5798e0fd5ee3a8f35a6d0703", "ref_doc_id": "668b12a1-fcb4-4ede-b7e9-d15abe5dbb3f"}, "a6557f38-f085-49cb-ad07-7746cc0433a0": {"doc_hash": "824d067a092ccd6fb4f0e4a99b9dadc5a88fdf7ec8b87fc2982978dccf0d5663", "ref_doc_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d"}, "9c8b5cfd-b4b8-457c-9d1e-88dfb3eb48c5": {"doc_hash": "96584e98efe2ed8b648c9f5d0b1b00e7b2485caa48e522b352a605c283a37f00", "ref_doc_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d"}, "c2fd4779-49da-4fcc-a2f7-e24100dab9e0": {"doc_hash": "4e7e52b8fc6304dc2fe7e176781ae22520e90f329a0ab0153ada0ca833399c53", "ref_doc_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d"}, "df484fa6-4652-4281-9ab2-7843591e728f": {"doc_hash": "a428dfce04e9a4f38414bbfdbc03d29af291f463d1c68bb2daa36bde9df4da4c", "ref_doc_id": "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d"}, "985ea85d-2d98-40aa-a3f8-b4afdadc0de0": {"doc_hash": "ac660c3eb948d4dfe7bca5569cba18383f8bacaa652b329e79928f13c73b9a0a", "ref_doc_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc"}, "f4f2c6e2-4492-4663-a076-c3e1e8421331": {"doc_hash": "b74ea5c3a363747a8e93e9d3284bfc055476abf5d72f2e22d48a72e616890f80", "ref_doc_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc"}, "b84c592b-a0ea-4f0b-9c86-d2b19957c939": {"doc_hash": "a5e2166d35c27b6c254212fd34467b78bea1fd00fc05e36adabed3d581c27ffd", "ref_doc_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc"}, "cfcb3c05-d06e-4919-8c38-bb632c1df841": {"doc_hash": "b94610f3da17c4ce4698a0d32423a8e769a3148978776bb58e898895bbde25fd", "ref_doc_id": "c009a85d-4502-48ff-85f5-b4e3caa219cc"}, "ae250fc3-02ca-4e83-9452-3533f0dc4cfe": {"doc_hash": "9d4284c8e9159c3db633a190ef113b16a3243845f6b8319c07a504f7a93eb0e4", "ref_doc_id": "7c8fbb93-1954-4964-8281-6adc2170f2c7"}, "658e44aa-4095-47da-89cc-4c65c082ff25": {"doc_hash": "be6dc38d58e909cabf50a10fac6232e6b23a2e1f31ff83e29a27fb70f4eb0c93", "ref_doc_id": "d03748cf-4666-40c8-9c7a-973b989532a9"}, "d9b34817-2c00-42fe-aa0f-a18318b77ff2": {"doc_hash": "6d808533c9726c52d8055c83bc23e6250951804acbe418d65d7ae26f89748e24", "ref_doc_id": "d03748cf-4666-40c8-9c7a-973b989532a9"}, "5bdcd376-340a-4120-96ad-92bbc3e3b6e1": {"doc_hash": "4e07c20b2e72a8bafe9a6b48fa15031b7da29c34ecf2b13d87d2ba4b2725ea55", "ref_doc_id": "d03748cf-4666-40c8-9c7a-973b989532a9"}, "2047d01e-d72c-432f-90f2-7c413c0d9e5f": {"doc_hash": "8bf3e43b551916970559776ed8e09bb4054061c1251602d7f1a9f69c1f46b3ed", "ref_doc_id": "5f277d37-995e-4aca-ac43-d26f95fb4e7b"}, "a14147fc-1451-4e78-9d59-a28199d1a00b": {"doc_hash": "5b07b97c68c09409bfb8e45cc6176d309ec6313c52aaf46f60b246cb35253519", "ref_doc_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0"}, "84f0355b-6732-4a10-a598-d8fd14ce9a73": {"doc_hash": "ba5799f61e971cf45b0d1d03a12f8a9939a4ffe687eca91e73ce2a58164b4792", "ref_doc_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0"}, "9887fcc4-843b-43cd-819c-1f245554420c": {"doc_hash": "6bdc111c6750b5d4a6d0a03eb7166e667e2b1efe9c0c41b43ffaef53b40bfcc2", "ref_doc_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0"}, "b06ea2b8-e1ef-48a9-8a0a-e7a4cc671530": {"doc_hash": "406d8d2bd82d06f77eac00036255008f3338d7181e7c196a1f7f081ded21e7c8", "ref_doc_id": "81605480-4c0e-42cf-bae3-8a23e0f961c0"}, "11cce8c5-6b0a-499b-a3b0-626142ec33db": {"doc_hash": "10f835e7678d11c9419b7fafd8b01cd6c5190626d042aada76f0fb19c4f05ec0", "ref_doc_id": "e265db7c-5479-412b-99a8-18bc0514d45a"}, "632c5823-56b0-4c6b-85ce-fbc206d01b83": {"doc_hash": "87fbfd5cf54e6ce2670087a48e74520a22f10b33a0a23a34fcb806a151f260aa", "ref_doc_id": "e265db7c-5479-412b-99a8-18bc0514d45a"}, "60daf961-f7d0-43f8-a4f8-69a40d34044d": {"doc_hash": "8e39c81115d718ebff00fb9a2a59d3cb1c5e3ff87a69ef64a9a1c6c48cf0c810", "ref_doc_id": "e265db7c-5479-412b-99a8-18bc0514d45a"}, "d1e514ca-b78d-4f67-91a6-a43fa26574bc": {"doc_hash": "5145adf9e11a1eb1a25a71f5eb697ba5f0f01a7aa8f464a16578604627c3283c", "ref_doc_id": "feccd6cc-06a9-4e0a-a409-e2cf694bf358"}, "21f5eaae-7fa5-43b2-a4d9-839d67beda00": {"doc_hash": "1ee90b041c69fd993163652e87801df41881a83e88684337a509f10c498a5ae5", "ref_doc_id": "feccd6cc-06a9-4e0a-a409-e2cf694bf358"}, "26d16158-980a-48c0-9707-7370530b0305": {"doc_hash": "6ece952d0a8043e3f8d67da73fe63f40be0f72ed8702cf65f4f1a57babbf6afd", "ref_doc_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c"}, "d7801535-6336-429d-a221-86859805d3b2": {"doc_hash": "df6d0234602394030d08daf28ada014a83fc9134e91f772a185077a5776c5ece", "ref_doc_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c"}, "a23211df-1876-434f-bfb6-30ed8a7276e4": {"doc_hash": "0585abb8e3d17a7e8554ca3bda6888fd1fb8a789eb7f06c4f5edd43593daf1f7", "ref_doc_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c"}, "6812d7a3-c15b-4866-ba4c-056580cef6c0": {"doc_hash": "52b539ca45b0cadba2b704cc1b18c89ff71de8b8d875e97a7fe6d7b7474f5ca6", "ref_doc_id": "bc74e562-eda7-43a6-ba6b-c0e8f255f93c"}, "7c8b1005-ad0f-48a4-af0e-c2c6503bc803": {"doc_hash": "2424a63599b9e90ffecc067de3f915af0fcc3c82e6b5034ea2505f492db87497", "ref_doc_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35"}, "fdf2be51-caee-40c2-aa2f-4680e30bbecd": {"doc_hash": "4affd9413386c879bf5e39c909ff6329ba29d54061c32b9d5f372700153f688c", "ref_doc_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35"}, "e4f4b631-78d5-4d96-be80-19254e21380a": {"doc_hash": "2ceea46344799d63b8013e3672a0285b288fd4359ab489e1a7a0c9f11753eb58", "ref_doc_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35"}, "59b3aea3-2e6d-4f97-9923-9f956aee7dad": {"doc_hash": "0e9739c17f2773b9d41cad433b7ccc0c6223ccb41a84036bb8361458672727a5", "ref_doc_id": "8b9c9715-2d2d-41cc-b0da-44b4800a7e35"}, "1057c323-7f05-4e7b-b7bd-6df73da4fad0": {"doc_hash": "d0071bf90ec7e51d22484d6084792d8adea64cde5e4853ffbbd74a2ab4b0f98d", "ref_doc_id": "a905c3c1-4a67-451c-8cb3-641cec283d4a"}, "1ae8ebc9-5fe7-429f-9651-d80e615a18f9": {"doc_hash": "aa371dd008096cc324d93619863078e32337fa33720b3db50e14791fb2333474", "ref_doc_id": "a905c3c1-4a67-451c-8cb3-641cec283d4a"}, "c8ec3b47-9f59-4dfe-bdbf-cc41a6adca64": {"doc_hash": "eb4f238ddc21bd9975205d7fcda252236ba68fa55186403bc312d8b1ddc6f8db", "ref_doc_id": "cd90a438-2708-46c2-9856-978ec91c79d7"}, "e36c057e-1789-45e4-8992-983baf045b88": {"doc_hash": "18ea85cd010d01d197da80fae7c3488ae720efeb7f4e59bc854805a178c52f26", "ref_doc_id": "cd90a438-2708-46c2-9856-978ec91c79d7"}, "3f125e8c-e8e9-4c1b-9a73-e072717b7821": {"doc_hash": "f86f4340149a6b40f6c1e79d08d93b764e0503ab4cd30c1d846e949029522e4b", "ref_doc_id": "cd90a438-2708-46c2-9856-978ec91c79d7"}, "51cf1cdd-71c7-4a0f-aa9a-0e46cbb206c4": {"doc_hash": "847dbbedc4bb9f8be241c68bd26bae915edf958f6743ba0c0acd3cf4af5d5470", "ref_doc_id": "cd90a438-2708-46c2-9856-978ec91c79d7"}, "9fcb0bd2-0b86-4d0d-bbcd-e7f41e15869b": {"doc_hash": "a4c113cd0323227bcb25597999c3bb189ce86b281dbf8d63f281445c92de30c0", "ref_doc_id": "cd90a438-2708-46c2-9856-978ec91c79d7"}, "b041b8e5-6dc4-4bb2-99c2-eefb5521eba5": {"doc_hash": "05a230c3f00e2f0e7c9c3d53d02ce745e6fc3d7b15526dd524bb1512001b5d0d", "ref_doc_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0"}, "c766f9a4-6ee0-4345-9a63-fd7f4318c70d": {"doc_hash": "029796ab8cd5feccf1b881fd03e8ce25ff20c2a341b11ea2a87ee1ca89babe49", "ref_doc_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0"}, "5e180c88-13bf-4057-9c0a-99d6772addf7": {"doc_hash": "c03214d72d78cae9e2963b15a3523110f99ad38b4583a88277ad79e8dfa908b0", "ref_doc_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0"}, "d822b678-93e5-4a4e-a4d6-090719a0e78a": {"doc_hash": "a95222e9ed37bbb97a3c04e66b790d030007aa1d131f37fe1c917f2e61d4b838", "ref_doc_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0"}, "b47e435d-8ead-466f-ae16-1be1888c310c": {"doc_hash": "93e7b9092b4e7150446bcb6191746db9b8fa4e5def207265b34e893ed1a6b1a6", "ref_doc_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0"}, "185a0863-ab6c-4c1e-a5b6-dd3cc7a8e45c": {"doc_hash": "0a685ac19a3d456d151b984284256fb7182365d7ee0f29611c079d9de9e192c9", "ref_doc_id": "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0"}, "f0f1fffc-bbe7-47d3-9960-2b024c572fa6": {"doc_hash": "bff31238c5acfa06331b96d0106ed1dd03503dc03b7bf8cee2cd67e4050ef8b8", "ref_doc_id": "11612d7c-a423-405d-8164-b98f1ce79e1e"}, "1892a731-3716-4057-9030-84549ede490f": {"doc_hash": "4e5634da32c19e7bec348ac365e87e44d48d43da88c66606a513dd17a9e57276", "ref_doc_id": "5e74a428-275c-435d-bc0b-5730cd065dcf"}, "2ea9f49c-6817-4942-91ca-ccc8eceb5da6": {"doc_hash": "8f86aabfe1fcbc8e161e873434196a9071543b655999408606a6222fe4ef6ea3", "ref_doc_id": "5e74a428-275c-435d-bc0b-5730cd065dcf"}, "c1443373-26b0-422f-af88-2f4fb40b1468": {"doc_hash": "dc081dc76bb5f215033c09bf4db9e541150aa3a92431970e1b5fb4a8ae68588e", "ref_doc_id": "8c61042e-106e-4344-8944-9f3fb38ac1b1"}, "160897e3-8c5c-4821-b8d3-7e880ced511c": {"doc_hash": "3853631875ce3c067f42e176c637d272806cd8e255d8ca8c3f583de345a9d0e1", "ref_doc_id": "8c61042e-106e-4344-8944-9f3fb38ac1b1"}, "113cd6bc-9c5e-4043-97e3-80afe334b3c9": {"doc_hash": "9a5a0125a4f8b22b9e0eab7aca823c49407a064836126190d723f92abbd7dd6c", "ref_doc_id": "8c61042e-106e-4344-8944-9f3fb38ac1b1"}, "54f4f001-34f4-40a4-8326-bc3049483b5b": {"doc_hash": "68f8f7c995213d08d687f1e4f72dd6ee6b8876aebb73c225bdabafc719cd65ad", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "1ecb58a4-58cf-4345-b23c-04f8bbce9dd3": {"doc_hash": "523e2c348da31b79e89c603ad1a2b832c1efd1bfd27bbfa8f08e60f150945377", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "1b3aee40-afc8-4922-8c33-d5e67d4a3122": {"doc_hash": "aa1adf6637b49899b330031f5be01629a8498854e85fad3fa321ac146c71e74c", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "6528a368-f9c6-4298-b137-e1decfd48cf5": {"doc_hash": "54863079cf264edc92b3dcd92b8163bd2c3a7148a37579b9163038e5ec44919e", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "05ee67e2-7b9d-4103-9edd-db602df79dbd": {"doc_hash": "511b42f777fe299815d96a1d1bc6c21a4f983a27bbe7bd7f26942a4c0828db27", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "8ac4b596-cbe4-4aee-970a-42464a04bbcf": {"doc_hash": "99434dfcd2f0e9fef3fc3cd368bd010da8db56b6f3e3166518403150833c4a63", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "9f54bdb0-f73b-43b9-a089-1b7c3a33ee57": {"doc_hash": "ea7c1be40eb679e64ff5fe36159a1aae24a7d51c8054fee1a372e43cfcffac69", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "222286d5-b1f2-4651-9e5d-00edbc94033f": {"doc_hash": "68e6ed75bfd50ca01e9ecc25fb4e78a0b499028126b98d4bb00e7e437e8c0479", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "bc647d79-f469-4732-b387-beeedbe06235": {"doc_hash": "47309214c396848cf9324cadbb5bbfa53ca44581fdef363921bfcb5d0f71f756", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "8781e331-8cb1-41ff-827a-ffc5e4e7378b": {"doc_hash": "7d521f35c3439a01106bce9e13d4bed09109add55fb524f9b90bfc3f174cd823", "ref_doc_id": "799bc2c6-e839-4003-86f2-bf1d34fc2cef"}, "ab4ba967-6daf-4ccf-b6f7-d67fbdade85d": {"doc_hash": "53065427f57c2fdae644925ce08c1ee536d134644ecfe8708a1ffeac129b1993", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "03e2812a-4217-48de-88a3-19da70122ab5": {"doc_hash": "f0aa9e4b578273d5b9f9d14ecedaa61cba6aeb4aa4b78c45e7c58f16bc26e520", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "2f2a68b4-cf53-49d1-b6cf-916407b25f7d": {"doc_hash": "0eaf2e7eb28c08e237488ef934f967584a4df719aeb7e000e01da0a12ceec244", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "b8beeec3-a3f4-40f3-9302-2125d780627e": {"doc_hash": "486fcb414b1ed4116f0df028b63bcbd00bcef522ef1314bdf5b8bfcceed252fe", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "17a68b79-5cf0-4498-a908-ce6fbb252de0": {"doc_hash": "ce882b04548e3db1cda01957412f40c258ba903666791deb7f7b7265af5c79c6", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "b149ec91-6302-447c-b50c-2f9ab916b601": {"doc_hash": "70c290164a9e95c87df227829eea3fc94a260db5d92df619e5933865f9bc3b74", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "90bd36bb-ca82-43be-b919-6d9a0ceb90c9": {"doc_hash": "29d188b404f7132893d9ae9d6d56a1614ac51a4070581edf6a8e8f0771f12b1b", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "5fdc879d-08b7-446c-95ed-755439b6d2b6": {"doc_hash": "ed9c9cae415a386ec0b75cf10d942222195a90fc79c4edaca5e8a1d19eb024a9", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "496e384e-dc6e-4e0d-a112-03f7fce779df": {"doc_hash": "f3f5598d7fa58131c707ba8f890b1eaf7423b2f3bc54e118d3e8492440ddacbc", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "cd241b06-8b68-4163-8397-3c89ffa258ed": {"doc_hash": "62ac9c4f0e0c184bb633a96d2d4589fae1541a88b2cb1b72127269d23396070b", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "c1416434-ddd6-47ab-bff6-c90f2dbf0b2e": {"doc_hash": "db7930288ed1f12b1e6672f4a9a21fa4691e5c8115715b1aaa4c8170c9e940a1", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "7d620e21-e8f6-4510-82ae-f696c714e7b7": {"doc_hash": "14d682834463dafda845a3c4bc73b0c0170337a101493fe92f4b58d67bbe9729", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "b22ac79a-1d5d-44bd-8b29-665bb0842959": {"doc_hash": "b6438990a6403e1251775af4932ba123ffb203d25b8010daef22d1ba0a0ab916", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "2619e9fa-e622-4e99-a5e8-1d3f7794da6d": {"doc_hash": "bc476145213469d0795bec3c1779512c00938a704caf45481c3836d4c739eaee", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "1c2b7a65-4403-4b90-8fc6-b5269a1f9806": {"doc_hash": "73b6f0980db15d4b61300edf18e0d234eeafcf52698d013cb5f4c3505544f6f9", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "6ff1f568-c8ff-4341-8e0c-8ebb615af9ec": {"doc_hash": "e4f8881fe2215b5383b38c60f6392a3502d14dfd087b52a73eba355730443971", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "9218bc85-5670-4c2f-bc84-631319827bad": {"doc_hash": "674e46bb01d73ada62b5df9a6c645a5583097601dcd817d9d44e79c76fac28ba", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "5eba5aaa-0fcc-4326-9fc3-a810a8f5e039": {"doc_hash": "c2345700342ad19bedf89a9b3ad9c2dd8d15e47e7b00802d1667d1ff2459b1f5", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "25e21b8a-af94-40e0-a77f-662e9d316bf5": {"doc_hash": "6d19a12225c03074603036c35a895c566c360f4f2b3c8e79adeb0000d7b1adbd", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "55e572ee-a2d8-4f92-8b54-d645fc0b0a3b": {"doc_hash": "fefa9ea45ac480bd70ac0807996ed81eb96f880120177c39015a6713a0d08c15", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "62d902b7-c04e-4726-82a9-294cd10d7ef3": {"doc_hash": "ee5378ae85d846af0180dd68d2e0a5cc2e85e5a7bad80546877762ae5fac12f8", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "519be33e-d27f-48e4-adfc-d77064ff563a": {"doc_hash": "2d3f4cbc831a62dcfe17ae63938b1826060018f88ec2b2cd839fbe6d1b299385", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "d4683ad7-07b9-4f00-bb39-45d34eea0b6c": {"doc_hash": "bf87adc5ba977e9a7e99d6879064199c9b4bc6d0b6e6ec373a93fd65b32c7186", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "8559fb83-eef5-4ba1-bdb9-a998add0c442": {"doc_hash": "63799188823b92e10e6e802bf87abc7b22638c8f322106b93e9236622ae5abfb", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "298ad726-aa09-4471-b7ec-36950cdb975d": {"doc_hash": "c02d5c242c1d71355f1c6baaaf2627bc022243107492b70394c3516bb27b4979", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "3c952276-0035-442e-979e-4c9ffb9b94d6": {"doc_hash": "2368acca6b8633bbfd28d46c90daa530a391411ce4c8b24182faa24b76391b98", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "3c4ba1c4-77f6-4f4a-9df1-2d10c392f1a9": {"doc_hash": "3aeaa0e6209cdf07ffb1001e7a1cec62bed6b92071808218b867bdcb39ec97e3", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "49ff15cd-1804-4c1f-9edf-ea006e6d1e14": {"doc_hash": "a0fea3da026771f300a0f9a02ad58d4e686ed93e1eece301b085a7348e44c530", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "82b1aa75-80d4-422d-8fab-c50d317220cd": {"doc_hash": "30cd2ee21cc207ae64efe46a85054e60dad4ff373d0a46e2d223f952cefebd11", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "a673e824-7e1b-4df2-9bb6-f879ed328ce7": {"doc_hash": "a17af8a1fb311429606dce83c230fb2dd8ddb3712a3e45e5cbf533eaa3c8aa5b", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "cfc412cd-5b94-4f18-ba16-1f060df7f30a": {"doc_hash": "3173d8e8e691d58cb99125e92549e8a4582443fe513172350fd5734389c72d35", "ref_doc_id": "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca"}, "9e62f6bc-7f3f-47d0-abd0-c1133b10cc15": {"doc_hash": "fc9639b772b2b469140c18d40b27e378523a291073ef9353a4e8ff89da96f9e1", "ref_doc_id": "5b651ce2-36d3-424b-94ad-c94608a85833"}, "b3ef69fd-b76a-44da-a7f4-f9ff989b20f5": {"doc_hash": "7d9de65c6a920da821fad074650e934699c28f08d1313380923ad439698aae9a", "ref_doc_id": "5b651ce2-36d3-424b-94ad-c94608a85833"}, "67f609d8-e38b-4678-baac-cc2b9b678830": {"doc_hash": "d9f41f068be43b87a2ffff5c6868154e1a5e0290bdab4ebf85ef8faf33489cf0", "ref_doc_id": "5b651ce2-36d3-424b-94ad-c94608a85833"}, "91a6e201-063b-4f8d-8328-d013be697a5e": {"doc_hash": "d3c1d7c72386ee4860455e87dee053aa6a2645f878cae2fa75348651181cd364", "ref_doc_id": "6a44dadf-6137-48de-9cb0-744ef74bd1c6"}, "9f812813-1898-4bec-a807-7ce1628c253f": {"doc_hash": "af6cc0b5a44cce605c5bf954fcf6f1f35a68838919225bc624b3de0d6e5015b7", "ref_doc_id": "40dc6907-16f9-4b3b-8479-e4706214b737"}, "d3e2a74c-15de-41de-bd23-b66787c6983f": {"doc_hash": "f3b718a39692e97ee585415e17da2168868a0da8a3ae12f0df9eb58d2998031f", "ref_doc_id": "40dc6907-16f9-4b3b-8479-e4706214b737"}, "32055c1a-a0ac-4f80-83d1-2b4c7886a7d2": {"doc_hash": "3cf542bd5241eb55f10e306a5d392777a91d8c74d5af3448b6fc5252f6c962d2", "ref_doc_id": "40dc6907-16f9-4b3b-8479-e4706214b737"}, "c65a1b06-9beb-4e22-ad72-bccc349406f4": {"doc_hash": "a92f768a6f78cfa6d606ad70f55b5398089f8fa4c8661b232fceb36c12efd563", "ref_doc_id": "87ade3c9-09cc-45e9-9912-2ddf943a9405"}, "98060030-1779-4673-92e0-3a4083dd9f2a": {"doc_hash": "766a242f409baa6513faeb40aa969286d5db2ea8552eefe5a692da793f047c3e", "ref_doc_id": "87ade3c9-09cc-45e9-9912-2ddf943a9405"}, "589bf77a-e03a-4a43-a522-8aa7784cd6c9": {"doc_hash": "32a40ab63608ef709429cfa9133f178092d90cccc70783b955a01abb1f615813", "ref_doc_id": "87ade3c9-09cc-45e9-9912-2ddf943a9405"}, "8c250543-4167-466e-ab6c-445f66916a09": {"doc_hash": "526badff2e0e3a34a1abf95d707faacb5c335284c21753251344aaafdc2b83bb", "ref_doc_id": "822762fa-de38-4879-9724-110e95b97f27"}, "0665b851-949f-4263-82b8-f37562490b6f": {"doc_hash": "ed9e7ba0ba3141d0df3eaad87184cfb6a459cb271bd4ba64afdcd6f4f770eb90", "ref_doc_id": "822762fa-de38-4879-9724-110e95b97f27"}, "a4bad18d-be5f-4af0-a001-94777c14e8ec": {"doc_hash": "bce24de39fc80971798701ad0bda95c227592162168bbcb08cf41de1c3f1b12c", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "0faca715-c912-48e2-a097-bfae00bbc5e1": {"doc_hash": "55b404690016aeb6d2df58119737419e724ff716d56d072bc8ad50c1d5369841", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "3f3408fb-792b-439e-8568-3619535ef40a": {"doc_hash": "e742e93438a34d9a050402769510bbdb43af454fa95fd07643aad842d07493ce", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "3cbbdcea-b806-4801-9d7d-0c7d5ae32383": {"doc_hash": "5f89c60cf1eb7c414a96c97ac0676c80ddc579f0730798b90b45f8c081b5d0d5", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "dce38309-8c48-477e-aee4-55ae104ec487": {"doc_hash": "5eca530bdbfa5f1b484fe1b4f9a4f39b335dd2eb5c83b20b128fb8fa5b732040", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "15672a96-3441-405f-a189-95109b9a0526": {"doc_hash": "e8cb18b840a61bee95e0c2382af069fc2016cd712afff6b61c605039ba225ada", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "c5d1442b-f414-4b50-a972-8420161e07ea": {"doc_hash": "063b063c2a2a1c6509b72cac0b525cc3a3014d4ef5220dc85bc068a876f23a67", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "0a10ee75-b2c3-421a-839c-fe8107fa3b17": {"doc_hash": "057af11211848afd2d83ee1301baa9e7b3db173f0620296d8f66f83892adb2de", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "d7e514a4-990e-49e3-84d5-c9cc77fc0cf2": {"doc_hash": "8cca92ec6444bc62562f3326f603577a2051ed8107888d6fd4d8b2bd3422e048", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "f2c44190-8f1f-4aca-ab21-3f0a2bd20128": {"doc_hash": "7cd7e52772f87797507e67a3a79009f7a2a5e1c1ed0e7e2d30fbe1e47ee32d79", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "efa13523-8c5f-4322-b8d9-758bef6f497f": {"doc_hash": "54d4f018326b4e23ab372e15ee0b1d7318c8fb44ab6dbd59d230465b6bb6c798", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "527e28ad-9d10-4335-ba12-b8b1f7b5c59f": {"doc_hash": "e2a6f2964dafa91ffd25396a526304d47985090c84a4917819f1054b6c238aa7", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "9018f075-ad16-4a88-8c55-27c97aa86886": {"doc_hash": "b803eb6bb7b6f37f5174fed280356701b078e9e8e9808561459669c6c9cd2c23", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "7577b263-cd58-4cd8-9cdd-7bb610930c4f": {"doc_hash": "24c111851778340fe959342cefc0ad4d655435556ada8483a50ce963edd191c3", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "4cea4b5c-5cd6-47f9-8658-df0e5f352bad": {"doc_hash": "b93698a2ea33d3380463a54d317f7343b2439d6bea4725d8f1ee922b165702e5", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "09b095d5-543c-48d0-8672-c482b687f17d": {"doc_hash": "87bd2f5118f4ff753f6affaa9ff6bbc36fce8c829fdc33562ba913ce3f5b9ae8", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "4b349da3-541a-4408-8129-91c8f18557e9": {"doc_hash": "75b6630bc5cad28c818ffc68df8ca7507979a64e347bb0fb2630b468f73d90e5", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "183ce983-931c-49b3-841f-e511ec3bc825": {"doc_hash": "db9d6b4a08402fe67c92678d341c0b1f9196432572d614774912b3f5dd649f29", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "9266f42f-e049-4cae-b2b1-4bf09df21c1f": {"doc_hash": "a5fcf06d0406c71089fcfd07324f5cc76656a6c5fc914e11878c2b77724fb984", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "c04981d8-a728-44d0-acc3-321f0845b402": {"doc_hash": "af61d58cd41d54677b5c910e85dd987682b852da4f8590da2cadf749a690fee5", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "fe8d9dab-3816-412d-af27-7435423452bd": {"doc_hash": "69083c0f39095667e9ab4027d9f1f3abdef861e7a8b7dea012545ec7eb92df47", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "ad82b241-512c-4c8f-8527-71e99bba281f": {"doc_hash": "f251246ee7ac3ad8461ba3e3d78d605c228303957f89975510d480806a9627bc", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "0793ea21-3815-40b7-a632-ba433bd07c9a": {"doc_hash": "2708e43b1de7ec32dedaa9119fe6adab02dcb6e9192ffc81d16442e862c9a61e", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "e177e861-cd6a-489f-9572-cd97464a5c99": {"doc_hash": "4e3070d5fcad556a33a0d3c6daaa96906c5c6a5e623960d1b916a40308eb982b", "ref_doc_id": "200a9bcf-0774-423f-9a6c-d0c650ba88ed"}, "88041be2-debd-49b6-913f-3613385eefbf": {"doc_hash": "edfe81f3c3b9f7a004596884570334f91537be2862e784e69384a2a3b3ce50c3", "ref_doc_id": "a08e001a-8f19-4613-be32-3d77915d2f10"}, "cfa21f38-c744-4198-8e49-66956bad0e95": {"doc_hash": "b4aa3988386bef4885489b013005bbe98b80c0449051db1d991d1ae6951dfc51", "ref_doc_id": "a08e001a-8f19-4613-be32-3d77915d2f10"}, "7119b3a9-f68a-400c-a760-9b8e18fccb3f": {"doc_hash": "498b29436e1fb52964bfdaba9aeac3ea43108a84a9fb2ef03d7f67937cceca49", "ref_doc_id": "de75718d-211d-4707-bd66-e473a3054f96"}, "bd8e40ad-41ca-45bf-9020-df0b796075cc": {"doc_hash": "73c99f8ed6d5084738e7de4f9f1d0f4b29099e5c4b8e2d7aa45456776c591933", "ref_doc_id": "de75718d-211d-4707-bd66-e473a3054f96"}, "4aac5a90-4f91-4448-859c-13b2578f4f41": {"doc_hash": "1d18dcb4c13257b3da620893683ac7d0bebdbc23967eff53d58263e08b2f88a2", "ref_doc_id": "de75718d-211d-4707-bd66-e473a3054f96"}, "6fa43437-a036-463b-80ff-b3664bd8855c": {"doc_hash": "62f281abd11e357224eb7bcbc8304421653290e23f9c9c33959982c0bdb7dca5", "ref_doc_id": "de75718d-211d-4707-bd66-e473a3054f96"}, "dbdeb1e8-95c1-49b6-933d-5545aa75dff4": {"doc_hash": "09f349398676f5ca3b6100e40cd1d59ca815af846d416779194e3ed9dbca42df", "ref_doc_id": "de75718d-211d-4707-bd66-e473a3054f96"}, "54f83690-4a3d-4947-b3aa-5fdb8a38e42d": {"doc_hash": "c7073c1e06fb50865d4fc0d3492c1175ca76abad57126a8f3f955c1140e9586f", "ref_doc_id": "de75718d-211d-4707-bd66-e473a3054f96"}, "53b9c2f7-0ffe-4b5a-a416-2eb8d93729f4": {"doc_hash": "abac5c1e65ee3b3f673dfea0e13cee862fbb67bc1cab12b3dfa73d725a90a35a", "ref_doc_id": "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549"}, "18acc7e4-135f-4cc7-9720-5326585bbf2e": {"doc_hash": "cd015c8adde9ab53135e03374e5ed21f4e4f23ea79fa23a92785806799d34180", "ref_doc_id": "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549"}, "295eb3d5-30d4-49ae-bced-84bb0434624b": {"doc_hash": "b3b24e9ce518cf818385b2e0a669bab65665b08db451436ff66f59ca2a2b8af9", "ref_doc_id": "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549"}, "125e08e0-7468-4a45-927a-559d2f12c137": {"doc_hash": "3078245e254f9be670e0c676a86a2580828fcb3667d7c29381cc8521bff06401", "ref_doc_id": "f528212e-2daa-41e8-8c25-c3edc14827c2"}, "95cd79e8-d794-4261-8894-e587055b2f8d": {"doc_hash": "538d104080c0b7da28273e5b7041252b9f29ffc9027aed4cf3de42a09027cef7", "ref_doc_id": "f528212e-2daa-41e8-8c25-c3edc14827c2"}, "6c69763e-fb36-4246-b1c2-7326776e30c4": {"doc_hash": "e0e94436cc5c78cff47bf87e09dd238159dfcffc3b65d0d9043947b8e6d441bd", "ref_doc_id": "f528212e-2daa-41e8-8c25-c3edc14827c2"}, "13a9e367-cc44-4bb7-9703-50e0c9d9a88e": {"doc_hash": "ad412d521da85556046735639e7d1414f8d0b1f12f460a24ade852492184c224", "ref_doc_id": "f528212e-2daa-41e8-8c25-c3edc14827c2"}, "55f48373-e770-40c8-8551-03150a244952": {"doc_hash": "a68d97f69378db784036ad913a4158e5c9639d7208f93cf2bf73379a1c4b6195", "ref_doc_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f"}, "e2618dc8-60cf-4078-bdab-f57bafa411bb": {"doc_hash": "25f9fd1bee53ecaf70f21d27fbb1590c5b530fc65a8606cf7fe1ca11c08b9bd0", "ref_doc_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f"}, "af3517d3-a8a3-44e2-94b7-8be9975b39f1": {"doc_hash": "21d1dff7c534cac0ee00cbbaad1ee099de09fa66e9dbfa47eb3b392ad440262c", "ref_doc_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f"}, "246fe8bd-dcb4-4df0-94fe-3f61d5874bc7": {"doc_hash": "0417690a6703aafc2e7bad7cd003e45ecc9a024ff54e3867ff7d54fea2d253b4", "ref_doc_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f"}, "ca4ad4ae-1383-4d2d-bdbc-cadce0a8d90a": {"doc_hash": "b326641a883772814c6d4d0801972e2eb9e860285214adcb405b7afce52b0dc3", "ref_doc_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f"}, "46aa25c1-738f-42d2-93d8-b386feb67dd3": {"doc_hash": "9530e7aaa54cae292ae24c5faefc1d018911f79df8b74973736f8a02fc839a60", "ref_doc_id": "74be1092-5884-4f63-8a0d-0dc1faaaf37f"}, "011d5400-3d55-4412-a9d4-33cf7205712a": {"doc_hash": "e208876bd4eb86a146d8bb89f02493c5d2c8d84cb9ecc2a97268ce065ef49dd4", "ref_doc_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9"}, "37153e88-7f07-474f-a956-8ab1ee5374fd": {"doc_hash": "58f94205228c6bf94c12d2a0824e8a9334c517a3325c1751553bb433e3adbc40", "ref_doc_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9"}, "f7f9f40d-5787-49a7-8cbd-c27568312249": {"doc_hash": "ce658ea377d326cc5d7deb397329fb910c8021614c6e1098c9e8b83f751d92b7", "ref_doc_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9"}, "05d2d4ca-50e2-4245-8d32-b25690167d1a": {"doc_hash": "2171daea6075577d790b0938d5f7e5ac1f7d4e40bed8c5fca7a621bbad76cdf8", "ref_doc_id": "1a3eb007-2a20-4474-87e6-735bcb09dfd9"}, "adfdc2bd-839a-4871-b373-024c42044a0b": {"doc_hash": "1992b852a49471b10e820fe0a2ecd41243cb6426968596c8f28daa60b6eb3034", "ref_doc_id": "747fc977-c677-424f-89fd-1e31fce604c2"}, "236ef3b6-e731-453c-9f57-84834d3835e5": {"doc_hash": "885b56ee9b871a5263ba20cf1fcbafd40c178e775ea4601c4565d5254014fd72", "ref_doc_id": "747fc977-c677-424f-89fd-1e31fce604c2"}, "cd9348f9-a039-4b9d-8004-29f56f437054": {"doc_hash": "edc91d54e28096c1adb7b82b43985a9c80616b3c35520d1b579ed5c754e423e3", "ref_doc_id": "747fc977-c677-424f-89fd-1e31fce604c2"}, "54c6fb21-e67a-4ba3-984e-d97af68e99d2": {"doc_hash": "92c515d580752bc1368bdfc9111333d2712bbefb04da0f1283444952a732f509", "ref_doc_id": "747fc977-c677-424f-89fd-1e31fce604c2"}, "7aad8061-9ba7-40ed-a9f5-5f1b5b18077e": {"doc_hash": "b813dab22fa017c513da939014bad23272ae439488eaa67d520670158e6de9e2", "ref_doc_id": "747fc977-c677-424f-89fd-1e31fce604c2"}, "0a32ab99-95b2-4773-a20b-dc9f6f683ac7": {"doc_hash": "1e10087f7d726e81898980f2e655ade95a11673d4ad8e2b732ed14c1430b3bda", "ref_doc_id": "747fc977-c677-424f-89fd-1e31fce604c2"}, "5b92317e-c0c2-4cb0-9f42-bf932f1d9641": {"doc_hash": "290fd5268b9ce9f1683ca54bc6c60dc4fe9fef9b591fede1966b1144aa5e0e38", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "3479d342-bf0d-4304-b9f8-4343cda6ec98": {"doc_hash": "6fa406faf39a6ee4ab0152aa804ff2e55826df15618ca81fca3e284680b7c5d9", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "15e80a1b-bd66-4105-aef4-816c2bf962f6": {"doc_hash": "b94d7eb841f635d56707878136261fd2d2c4b9d21a975a76f6f8b9ea91f4f428", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "685947c2-f961-4432-b5ce-65ca173ebc1c": {"doc_hash": "549b8a6c379181a4672f86f4a33f4791d32eeeaaf0a038826804f28ec3849d07", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "96fadb2e-6eab-4adf-bc9b-f2dd19f148e2": {"doc_hash": "b91140c626e4e17721d733592450b93e7c82f31a1e6106bd865bb34a6bec10b2", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "d9bc25b2-4b75-499f-8c5f-db31739f8329": {"doc_hash": "6fa406faf39a6ee4ab0152aa804ff2e55826df15618ca81fca3e284680b7c5d9", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "db460f3d-0fed-495e-a387-182d1c985ed2": {"doc_hash": "f0a14acce4468f15d25c52ab94ace106063058cbae906fd94babd9104fb8b807", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "cc6753f2-723d-4a4a-9c88-06fc0e599177": {"doc_hash": "f16988886c7fde294387f4bf789bc592bbf2f9b24ad3fda270036764b981036e", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "cd16bd16-b422-49c7-afc2-04b8ed1d2d4d": {"doc_hash": "cbea249e929b099ad685f3ae99a0dabc5112846dc2d9401b51ffc1c302782ad3", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "8657e696-818b-4f43-96ca-9a83158e8b3b": {"doc_hash": "3893b0caad3c920a7fa3273cfe77321b76bb5c0c94971440cf623aa4fb8d16d6", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "d3ef87a4-7ea3-4d0c-9de1-fda8c0829256": {"doc_hash": "fd4fb7341ec2aad245998ac67081b98168eea14003829b4201939b1be227c864", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "d1f02020-d012-409d-9680-49fe4f58f7de": {"doc_hash": "5668e8517969b6f63b837eb2e442c79cd5ffddb3e8d2114fd71017aa793344ae", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "b61cfe6e-fa45-42b2-8b25-b5a748e2b458": {"doc_hash": "d55d28490c5f716c996b1a7ce15c6e859491ffbc0dc353461586727b6ab808b3", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "2b29915a-70c9-4a09-ba3c-5a472454286f": {"doc_hash": "5ebe968a5addb3cf5b9c081c587ca42421bc9d83bd26ee11a53732c5e57279cf", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "cf7ece49-4fa1-413d-8b6f-0961ea4a3d7b": {"doc_hash": "d3ec8d4b18e688b2a39f99178b7909c3beb3c4d6d88c287ccc286f3201c8d49e", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "47955db1-fd52-4672-8ac8-f449e30edade": {"doc_hash": "2f9e1e1a5c1967bc232447ffae2f0a96059cd5643504e40711ccf92480b99c34", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "ae8915f0-ace1-4727-999e-753ec461dacc": {"doc_hash": "28ebdf3ba46273da3f7193ef6479680c5a802470985451a21bb7b3a98c86392c", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "dcf61618-1d91-4379-bd3a-a720aeaa1272": {"doc_hash": "2b6d95b142faf3f1f7db9a4d4460abc4e304f3e74513bd6a70d673af30373bcc", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "b0982c1d-eabe-417e-a8dd-e07603b34f0f": {"doc_hash": "f74d6da7c63fcc346b914a7ecd3836a3c333dfff393f702520658c52daf9428c", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "91290833-e020-4948-b2c2-48815eb52ff0": {"doc_hash": "f597a1e372babfe531207f411e84b8ddeedd8a17d2ff0d9ffe74f5e266027eff", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "b68331cc-537d-4035-8190-547a1c536e86": {"doc_hash": "d1b4b60604c707b104b3c5c3d9319af85d15ffd369824d42a90751146ea245ba", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "6196524c-9f82-4f08-a0f4-7a007cddda0b": {"doc_hash": "d3a80e5afe1e2e744eef97a34bd13ef363409b37777d18014f064a8fd74f9508", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "b50150bd-1a76-41f9-aa4c-ec9e02d88d43": {"doc_hash": "db0ab41d97ef62fdec3ad3549883507c777c50ddb992ef472676683783821cc4", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "5351a4c1-c1ee-4d43-a8b6-77ff60129d65": {"doc_hash": "f41061abd752a0394ba264de39612912228b5ef27ae13c3521f33ae7777244ff", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "53b6ddb2-3e77-4cff-92af-f3f7a7ef75f3": {"doc_hash": "eed787d0b37a1a754f41fc76dacd45ebd056bd8589eaa021303e8f09da333ade", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "938849db-0330-4823-9eb9-99e50b082b01": {"doc_hash": "126a4a1cd1ff0dc5bbf73b47b585f98ea9d70c7c0b04d058fb7b3b7012b3ad18", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "740afb66-58d4-4ad7-91a1-ae22a3e2a71a": {"doc_hash": "101be7126e6ffda71f352c66c48a0480ac05819becc4f33bab3a49b23ec1040c", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "d9a50725-29bc-4802-bc10-ee0a5a1d7b88": {"doc_hash": "5c1ab638ed5ac6a221418cc63481613260e6e7febd4c2595b69c5d58947ce846", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "bd6c3eb9-fc15-42c0-9702-dc0b94139ae9": {"doc_hash": "d5518ce638b96b6e26e708433a59db43507bc1305706841d7439c0303c616288", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "c7a9295e-7cd4-46e4-bdc0-4e7fd249dead": {"doc_hash": "df81366e9713b0eaa1bd536126f6ef3b27bae6da7f09e963ef7fcc6650c08682", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "c7dcb359-5493-4410-997d-766c492f5dec": {"doc_hash": "7191b4f5a7094e827aed3ae7c128eb36b85e1dfcc70f020e77010008d44e48e9", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "76d7c033-f299-423c-a9df-ddfbf180d12a": {"doc_hash": "60d511ea73ffa7f5274a9b393015efb8fe89b990e921be175e7b72bd8795cd22", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "fd5da326-56f0-4fee-94ca-b8ded2b2bb92": {"doc_hash": "d1af4ecce80ff599c81d608ca233f4a4742bdb177515dffc3a52c0ab5b4719b7", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "12ceeb2e-f5f0-4446-8fa7-c240f1d4d272": {"doc_hash": "deea9ef1ba3039da5e61e4b409e0fe958063438293a99d13b8365492052a2252", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "1de66cfa-f0c9-4d36-a230-0be440d230a5": {"doc_hash": "f3a2214322e3f50b7320fb06293b8c045342ece57d0dafac82cd2e496844b522", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "c5ed9166-a65c-4018-b401-ce00a26c365e": {"doc_hash": "7cd873c35b252be0098b02be0672db5aa94962f9f6eeab618b87ca7a18ebdf31", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "de2f3ce7-ae24-46cc-bd38-dfd731cb3140": {"doc_hash": "5e213be70dde029e7ed3c7eedddf168fc3c504012631f7d158152e5fdc4e97b0", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "e2f32b36-6bbe-43dc-bf05-75b3aa2b5508": {"doc_hash": "f5d442828cadab55100ae78a41feb031282a92701a8c75a10f7999eb7fda8880", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "35d2cdf4-982b-4495-8695-590d6c97fa73": {"doc_hash": "b71ba3614f20b34660ffd062c47d81a19295af3fccdb51cde10a268fad5af225", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "d9ecbf34-1927-4e50-81a5-b77db1b043b6": {"doc_hash": "79beb579d5585a3b188ab0c95d55e3f501c454c6879e9d95a3b5e1f07837c118", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "4a55669c-0148-45b4-8d3b-dd1f2224f785": {"doc_hash": "5f2f97fd74a4a95369f9d2edff4365879f2b84c7e4e30dc39448e5866271698a", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "cb7be7c2-b5c0-4995-82ed-82224e1ccfa3": {"doc_hash": "73174c03675469be487d57be44b3193f31a24b9516dde328997bc502951878df", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "e98dc5cc-5be4-420c-90d0-6d252ae9b277": {"doc_hash": "1e5a0f7a642da674cb99997f0f39a9eb6ebec5c1158fa2a2333bdb0577819aff", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "5e89b4a4-6d77-431d-bcc3-4d40eebff7d2": {"doc_hash": "c728d46e347650de214bce720a99cd0944e6b981e2741fd877f8a7ad5d881a3d", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}, "ac502391-b05a-493a-bf2a-cb3d562ebba2": {"doc_hash": "b10207e15151c4c53e0ef9cc8c5b9ae37758b7b9bb1b78db24fb5793b8b0e34b", "ref_doc_id": "53053e2f-6bef-40b4-8cbc-8799fb546e2e"}}, "docstore/ref_doc_info": {"701e7e49-90aa-4c07-8287-636770eea2f5": {"node_ids": ["127ac2be-4a98-4d76-b753-cc2df09c179d", "5cbd1801-bbe9-4299-9ada-a2cc97d972aa", "9e31bcc6-97cf-4340-ba95-1a4f6a2fd56c", "5dce95dd-0aa5-4b5b-8297-39e93cb36d65"], "metadata": {"file_path": "./nethermind_dist/proof.md"}}, "00ba67e4-8e74-4429-8abe-ca4bbed48126": {"node_ids": ["1e2fc607-4299-4217-a9e0-18932cc25f36"], "metadata": {"file_path": "./nethermind_dist/eth_unsubscribe.md"}}, "e9b80aa0-3a10-442e-aca6-208744012837": {"node_ids": ["1e5db49b-2cf0-479a-89c6-5eeca9533227", "45a591e7-cec0-43e0-af8b-4f51b08294d5", "8b96321f-fa80-4aee-a730-52a573f9d795", "195dfec3-8754-4233-beee-9a94f80adc51", "c17cb743-d453-4a9d-bd3e-351e3ad3379e", "b62e3470-1163-4f57-83f7-c13757e0dd55", "31916a26-85e3-4ae7-8076-73cbb3660f61", "93d2706d-e077-4ae2-b9db-12691d71d2d4", "20788d48-fc5a-45e6-a395-ba99a9e3c84c", "e9154316-ac02-4018-8676-481e7e8266ba", "c20db2ed-f30a-44f1-8b73-c846890f1870", "51acd792-70f4-4f0b-ade0-76179461410f", "e5af461e-d0c3-4efa-a292-d9901fa8f3c5"], "metadata": {"file_path": "./nethermind_dist/trace.md"}}, "3472b989-e9b4-43d6-be73-fec76e45e6bb": {"node_ids": ["edc77b9c-da58-4c48-817a-37c217a475ad", "2b5940f1-3314-49c8-8d02-f2f81011816a", "255d5927-21ee-4324-8834-a3ea11f81930", "1d1edae9-a0f8-4150-ae84-357373ef1221", "bc8d3609-fe6e-4c47-b14b-cfdd9a80b883", "01a9637b-3d0d-493f-b2d3-26d4e590fcc6", "6a252df2-239a-49bd-81f1-9419891545ff", "6543d586-7d83-48e0-a497-934d98af2935", "8a627d66-3424-477b-b0e8-a6cc5f962323", "74a22d81-d56b-43b4-8884-00b51196dc08", "806bd4ff-b93d-485c-8e60-1a8ef3267bff", "fe70b6d3-5c2f-4310-877a-b28b50cd28c5", "516c970b-98e3-4986-89ec-4df1909b61ab"], "metadata": {"file_path": "./nethermind_dist/sync.md"}}, "748ca42a-058d-4d2b-b2d1-99378659ed03": {"node_ids": ["23cae480-f555-4e84-aa12-f18b6cc51ce0", "440826c7-6545-4d08-adf5-57228073a7a9"], "metadata": {"file_path": "./nethermind_dist/setting-up-local-metrics-infrastracture.md"}}, "2b21c998-df88-4b0f-bff2-ee542bda43da": {"node_ids": ["8d2a1deb-f45f-4291-96f3-02c13d0353e6", "631c4930-4a8e-4adb-a4ec-8f36c24d941e", "8145fc51-d6e2-463d-acf9-61a462febbf1"], "metadata": {"file_path": "./nethermind_dist/eth_subscribe.md"}}, "6bf93139-a8b3-4200-97eb-84f9e4f895df": {"node_ids": ["66aca90c-7fb6-4002-81c9-367abeaab9ee", "04317601-a5e7-4a89-b2c5-7729992fe7d7"], "metadata": {"file_path": "./nethermind_dist/building-from-source.md"}}, "668b12a1-fcb4-4ede-b7e9-d15abe5dbb3f": {"node_ids": ["57003504-93d5-4a95-8bd8-4ca9f026acde", "274057e8-fc64-47c7-b427-992b7d825f69"], "metadata": {"file_path": "./nethermind_dist/json-rpc-server.md"}}, "dad98ca1-dbac-4c44-b83b-b9b8a2357c8d": {"node_ids": ["a6557f38-f085-49cb-ad07-7746cc0433a0", "9c8b5cfd-b4b8-457c-9d1e-88dfb3eb48c5", "c2fd4779-49da-4fcc-a2f7-e24100dab9e0", "df484fa6-4652-4281-9ab2-7843591e728f"], "metadata": {"file_path": "./nethermind_dist/health-check.md"}}, "c009a85d-4502-48ff-85f5-b4e3caa219cc": {"node_ids": ["985ea85d-2d98-40aa-a3f8-b4afdadc0de0", "f4f2c6e2-4492-4663-a076-c3e1e8421331", "b84c592b-a0ea-4f0b-9c86-d2b19957c939", "cfcb3c05-d06e-4919-8c38-bb632c1df841"], "metadata": {"file_path": "./nethermind_dist/plugins.md"}}, "7c8fbb93-1954-4964-8281-6adc2170f2c7": {"node_ids": ["ae250fc3-02ca-4e83-9452-3533f0dc4cfe"], "metadata": {"file_path": "./nethermind_dist/security.md"}}, "d03748cf-4666-40c8-9c7a-973b989532a9": {"node_ids": ["658e44aa-4095-47da-89cc-4c65c082ff25", "d9b34817-2c00-42fe-aa0f-a18318b77ff2", "5bdcd376-340a-4120-96ad-92bbc3e3b6e1"], "metadata": {"file_path": "./nethermind_dist/custom-analytic-tools.md"}}, "5f277d37-995e-4aca-ac43-d26f95fb4e7b": {"node_ids": ["2047d01e-d72c-432f-90f2-7c413c0d9e5f"], "metadata": {"file_path": "./nethermind_dist/README.md"}}, "81605480-4c0e-42cf-bae3-8a23e0f961c0": {"node_ids": ["a14147fc-1451-4e78-9d59-a28199d1a00b", "84f0355b-6732-4a10-a598-d8fd14ce9a73", "9887fcc4-843b-43cd-819c-1f245554420c", "b06ea2b8-e1ef-48a9-8a0a-e7a4cc671530"], "metadata": {"file_path": "./nethermind_dist/logs.md"}}, "e265db7c-5479-412b-99a8-18bc0514d45a": {"node_ids": ["11cce8c5-6b0a-499b-a3b0-626142ec33db", "632c5823-56b0-4c6b-85ce-fbc206d01b83", "60daf961-f7d0-43f8-a4f8-69a40d34044d"], "metadata": {"file_path": "./nethermind_dist/txpool.md"}}, "feccd6cc-06a9-4e0a-a409-e2cf694bf358": {"node_ids": ["d1e514ca-b78d-4f67-91a6-a43fa26574bc", "21f5eaae-7fa5-43b2-a4d9-839d67beda00"], "metadata": {"file_path": "./nethermind_dist/grafana-and-prometheus.md"}}, "bc74e562-eda7-43a6-ba6b-c0e8f255f93c": {"node_ids": ["26d16158-980a-48c0-9707-7370530b0305", "d7801535-6336-429d-a221-86859805d3b2", "a23211df-1876-434f-bfb6-30ed8a7276e4", "6812d7a3-c15b-4866-ba4c-056580cef6c0"], "metadata": {"file_path": "./nethermind_dist/admin.md"}}, "8b9c9715-2d2d-41cc-b0da-44b4800a7e35": {"node_ids": ["7c8b1005-ad0f-48a4-af0e-c2c6503bc803", "fdf2be51-caee-40c2-aa2f-4680e30bbecd", "e4f4b631-78d5-4d96-be80-19254e21380a", "59b3aea3-2e6d-4f97-9923-9f956aee7dad"], "metadata": {"file_path": "./nethermind_dist/performance-tuning.md"}}, "a905c3c1-4a67-451c-8cb3-641cec283d4a": {"node_ids": ["1057c323-7f05-4e7b-b7bd-6df73da4fad0", "1ae8ebc9-5fe7-429f-9651-d80e615a18f9"], "metadata": {"file_path": "./nethermind_dist/validators.md"}}, "cd90a438-2708-46c2-9856-978ec91c79d7": {"node_ids": ["c8ec3b47-9f59-4dfe-bdbf-cc41a6adca64", "e36c057e-1789-45e4-8992-983baf045b88", "3f125e8c-e8e9-4c1b-9a73-e072717b7821", "51cf1cdd-71c7-4a0f-aa9a-0e46cbb206c4", "9fcb0bd2-0b86-4d0d-bbcd-e7f41e15869b"], "metadata": {"file_path": "./nethermind_dist/parity.md"}}, "8f1ff9e0-6256-4e23-a353-c53fd78ee8c0": {"node_ids": ["b041b8e5-6dc4-4bb2-99c2-eefb5521eba5", "c766f9a4-6ee0-4345-9a63-fd7f4318c70d", "5e180c88-13bf-4057-9c0a-99d6772addf7", "d822b678-93e5-4a4e-a4d6-090719a0e78a", "b47e435d-8ead-466f-ae16-1be1888c310c", "185a0863-ab6c-4c1e-a5b6-dd3cc7a8e45c"], "metadata": {"file_path": "./nethermind_dist/clique.md"}}, "11612d7c-a423-405d-8164-b98f1ce79e1e": {"node_ids": ["f0f1fffc-bbe7-47d3-9960-2b024c572fa6"], "metadata": {"file_path": "./nethermind_dist/web3.md"}}, "5e74a428-275c-435d-bc0b-5730cd065dcf": {"node_ids": ["1892a731-3716-4057-9030-84549ede490f", "2ea9f49c-6817-4942-91ca-ccc8eceb5da6"], "metadata": {"file_path": "./nethermind_dist/troubleshooting.md"}}, "8c61042e-106e-4344-8944-9f3fb38ac1b1": {"node_ids": ["c1443373-26b0-422f-af88-2f4fb40b1468", "160897e3-8c5c-4821-b8d3-7e880ced511c", "113cd6bc-9c5e-4043-97e3-80afe334b3c9"], "metadata": {"file_path": "./nethermind_dist/aura.md"}}, "799bc2c6-e839-4003-86f2-bf1d34fc2cef": {"node_ids": ["54f4f001-34f4-40a4-8326-bc3049483b5b", "1ecb58a4-58cf-4345-b23c-04f8bbce9dd3", "1b3aee40-afc8-4922-8c33-d5e67d4a3122", "6528a368-f9c6-4298-b137-e1decfd48cf5", "05ee67e2-7b9d-4103-9edd-db602df79dbd", "8ac4b596-cbe4-4aee-970a-42464a04bbcf", "9f54bdb0-f73b-43b9-a089-1b7c3a33ee57", "222286d5-b1f2-4651-9e5d-00edbc94033f", "bc647d79-f469-4732-b387-beeedbe06235", "8781e331-8cb1-41ff-827a-ffc5e4e7378b"], "metadata": {"file_path": "./nethermind_dist/metrics.md"}}, "dbde1c01-023a-46c6-8ecc-e2b69a8ac8ca": {"node_ids": ["ab4ba967-6daf-4ccf-b6f7-d67fbdade85d", "03e2812a-4217-48de-88a3-19da70122ab5", "2f2a68b4-cf53-49d1-b6cf-916407b25f7d", "b8beeec3-a3f4-40f3-9302-2125d780627e", "17a68b79-5cf0-4498-a908-ce6fbb252de0", "b149ec91-6302-447c-b50c-2f9ab916b601", "90bd36bb-ca82-43be-b919-6d9a0ceb90c9", "5fdc879d-08b7-446c-95ed-755439b6d2b6", "496e384e-dc6e-4e0d-a112-03f7fce779df", "cd241b06-8b68-4163-8397-3c89ffa258ed", "c1416434-ddd6-47ab-bff6-c90f2dbf0b2e", "7d620e21-e8f6-4510-82ae-f696c714e7b7", "b22ac79a-1d5d-44bd-8b29-665bb0842959", "2619e9fa-e622-4e99-a5e8-1d3f7794da6d", "1c2b7a65-4403-4b90-8fc6-b5269a1f9806", "6ff1f568-c8ff-4341-8e0c-8ebb615af9ec", "9218bc85-5670-4c2f-bc84-631319827bad", "5eba5aaa-0fcc-4326-9fc3-a810a8f5e039", "25e21b8a-af94-40e0-a77f-662e9d316bf5", "55e572ee-a2d8-4f92-8b54-d645fc0b0a3b", "62d902b7-c04e-4726-82a9-294cd10d7ef3", "519be33e-d27f-48e4-adfc-d77064ff563a", "d4683ad7-07b9-4f00-bb39-45d34eea0b6c", "8559fb83-eef5-4ba1-bdb9-a998add0c442", "298ad726-aa09-4471-b7ec-36950cdb975d", "3c952276-0035-442e-979e-4c9ffb9b94d6", "3c4ba1c4-77f6-4f4a-9df1-2d10c392f1a9", "49ff15cd-1804-4c1f-9edf-ea006e6d1e14", "82b1aa75-80d4-422d-8fab-c50d317220cd", "a673e824-7e1b-4df2-9bb6-f879ed328ce7", "cfc412cd-5b94-4f18-ba16-1f060df7f30a"], "metadata": {"file_path": "./nethermind_dist/configuration.md"}}, "5b651ce2-36d3-424b-94ad-c94608a85833": {"node_ids": ["9e62f6bc-7f3f-47d0-abd0-c1133b10cc15", "b3ef69fd-b76a-44da-a7f4-f9ff989b20f5", "67f609d8-e38b-4678-baac-cc2b9b678830"], "metadata": {"file_path": "./nethermind_dist/migrating-from-geth.md"}}, "6a44dadf-6137-48de-9cb0-744ef74bd1c6": {"node_ids": ["91a6e201-063b-4f8d-8328-d013be697a5e"], "metadata": {"file_path": "./nethermind_dist/intro.md"}}, "40dc6907-16f9-4b3b-8479-e4706214b737": {"node_ids": ["9f812813-1898-4bec-a807-7ce1628c253f", "d3e2a74c-15de-41de-bd23-b66787c6983f", "32055c1a-a0ac-4f80-83d1-2b4c7886a7d2"], "metadata": {"file_path": "./nethermind_dist/faq.md"}}, "87ade3c9-09cc-45e9-9912-2ddf943a9405": {"node_ids": ["c65a1b06-9beb-4e22-ad72-bccc349406f4", "98060030-1779-4673-92e0-3a4083dd9f2a", "589bf77a-e03a-4a43-a522-8aa7784cd6c9"], "metadata": {"file_path": "./nethermind_dist/personal.md"}}, "822762fa-de38-4879-9724-110e95b97f27": {"node_ids": ["8c250543-4167-466e-ab6c-445f66916a09", "0665b851-949f-4263-82b8-f37562490b6f"], "metadata": {"file_path": "./nethermind_dist/system-requirements.md"}}, "200a9bcf-0774-423f-9a6c-d0c650ba88ed": {"node_ids": ["a4bad18d-be5f-4af0-a001-94777c14e8ec", "0faca715-c912-48e2-a097-bfae00bbc5e1", "3f3408fb-792b-439e-8568-3619535ef40a", "3cbbdcea-b806-4801-9d7d-0c7d5ae32383", "dce38309-8c48-477e-aee4-55ae104ec487", "15672a96-3441-405f-a189-95109b9a0526", "c5d1442b-f414-4b50-a972-8420161e07ea", "0a10ee75-b2c3-421a-839c-fe8107fa3b17", "d7e514a4-990e-49e3-84d5-c9cc77fc0cf2", "f2c44190-8f1f-4aca-ab21-3f0a2bd20128", "efa13523-8c5f-4322-b8d9-758bef6f497f", "527e28ad-9d10-4335-ba12-b8b1f7b5c59f", "9018f075-ad16-4a88-8c55-27c97aa86886", "7577b263-cd58-4cd8-9cdd-7bb610930c4f", "4cea4b5c-5cd6-47f9-8658-df0e5f352bad", "09b095d5-543c-48d0-8672-c482b687f17d", "4b349da3-541a-4408-8129-91c8f18557e9", "183ce983-931c-49b3-841f-e511ec3bc825", "9266f42f-e049-4cae-b2b1-4bf09df21c1f", "c04981d8-a728-44d0-acc3-321f0845b402", "fe8d9dab-3816-412d-af27-7435423452bd", "ad82b241-512c-4c8f-8527-71e99bba281f", "0793ea21-3815-40b7-a632-ba433bd07c9a", "e177e861-cd6a-489f-9572-cd97464a5c99"], "metadata": {"file_path": "./nethermind_dist/debug.md"}}, "a08e001a-8f19-4613-be32-3d77915d2f10": {"node_ids": ["88041be2-debd-49b6-913f-3613385eefbf", "cfa21f38-c744-4198-8e49-66956bad0e95"], "metadata": {"file_path": "./nethermind_dist/net.md"}}, "de75718d-211d-4707-bd66-e473a3054f96": {"node_ids": ["7119b3a9-f68a-400c-a760-9b8e18fccb3f", "bd8e40ad-41ca-45bf-9020-df0b796075cc", "4aac5a90-4f91-4448-859c-13b2578f4f41", "6fa43437-a036-463b-80ff-b3664bd8855c", "dbdeb1e8-95c1-49b6-933d-5545aa75dff4", "54f83690-4a3d-4947-b3aa-5fdb8a38e42d"], "metadata": {"file_path": "./nethermind_dist/private-networks.md"}}, "5ac1d7cf-cf47-4ca6-9ad2-cf72f3464549": {"node_ids": ["53b9c2f7-0ffe-4b5a-a416-2eb8d93729f4", "18acc7e4-135f-4cc7-9720-5326585bbf2e", "295eb3d5-30d4-49ae-bced-84bb0434624b"], "metadata": {"file_path": "./nethermind_dist/dotnet-counters.md"}}, "f528212e-2daa-41e8-8c25-c3edc14827c2": {"node_ids": ["125e08e0-7468-4a45-927a-559d2f12c137", "95cd79e8-d794-4261-8894-e587055b2f8d", "6c69763e-fb36-4246-b1c2-7326776e30c4", "13a9e367-cc44-4bb7-9703-50e0c9d9a88e"], "metadata": {"file_path": "./nethermind_dist/database.md"}}, "74be1092-5884-4f63-8a0d-0dc1faaaf37f": {"node_ids": ["55f48373-e770-40c8-8551-03150a244952", "e2618dc8-60cf-4078-bdab-f57bafa411bb", "af3517d3-a8a3-44e2-94b7-8be9975b39f1", "246fe8bd-dcb4-4df0-94fe-3f61d5874bc7", "ca4ad4ae-1383-4d2d-bdbc-cadce0a8d90a", "46aa25c1-738f-42d2-93d8-b386feb67dd3"], "metadata": {"file_path": "./nethermind_dist/installing-nethermind.md"}}, "1a3eb007-2a20-4474-87e6-735bcb09dfd9": {"node_ids": ["011d5400-3d55-4412-a9d4-33cf7205712a", "37153e88-7f07-474f-a956-8ab1ee5374fd", "f7f9f40d-5787-49a7-8cbd-c27568312249", "05d2d4ca-50e2-4245-8d32-b25690167d1a"], "metadata": {"file_path": "./nethermind_dist/consensus-clients.md"}}, "747fc977-c677-424f-89fd-1e31fce604c2": {"node_ids": ["adfdc2bd-839a-4871-b373-024c42044a0b", "236ef3b6-e731-453c-9f57-84834d3835e5", "cd9348f9-a039-4b9d-8004-29f56f437054", "54c6fb21-e67a-4ba3-984e-d97af68e99d2", "7aad8061-9ba7-40ed-a9f5-5f1b5b18077e", "0a32ab99-95b2-4773-a20b-dc9f6f683ac7"], "metadata": {"file_path": "./nethermind_dist/pruning.md"}}, "53053e2f-6bef-40b4-8cbc-8799fb546e2e": {"node_ids": ["5b92317e-c0c2-4cb0-9f42-bf932f1d9641", "3479d342-bf0d-4304-b9f8-4343cda6ec98", "15e80a1b-bd66-4105-aef4-816c2bf962f6", "685947c2-f961-4432-b5ce-65ca173ebc1c", "96fadb2e-6eab-4adf-bc9b-f2dd19f148e2", "d9bc25b2-4b75-499f-8c5f-db31739f8329", "db460f3d-0fed-495e-a387-182d1c985ed2", "cc6753f2-723d-4a4a-9c88-06fc0e599177", "cd16bd16-b422-49c7-afc2-04b8ed1d2d4d", "8657e696-818b-4f43-96ca-9a83158e8b3b", "d3ef87a4-7ea3-4d0c-9de1-fda8c0829256", "d1f02020-d012-409d-9680-49fe4f58f7de", "b61cfe6e-fa45-42b2-8b25-b5a748e2b458", "2b29915a-70c9-4a09-ba3c-5a472454286f", "cf7ece49-4fa1-413d-8b6f-0961ea4a3d7b", "47955db1-fd52-4672-8ac8-f449e30edade", "ae8915f0-ace1-4727-999e-753ec461dacc", "dcf61618-1d91-4379-bd3a-a720aeaa1272", "b0982c1d-eabe-417e-a8dd-e07603b34f0f", "91290833-e020-4948-b2c2-48815eb52ff0", "b68331cc-537d-4035-8190-547a1c536e86", "6196524c-9f82-4f08-a0f4-7a007cddda0b", "b50150bd-1a76-41f9-aa4c-ec9e02d88d43", "5351a4c1-c1ee-4d43-a8b6-77ff60129d65", "53b6ddb2-3e77-4cff-92af-f3f7a7ef75f3", "938849db-0330-4823-9eb9-99e50b082b01", "740afb66-58d4-4ad7-91a1-ae22a3e2a71a", "d9a50725-29bc-4802-bc10-ee0a5a1d7b88", "bd6c3eb9-fc15-42c0-9702-dc0b94139ae9", "c7a9295e-7cd4-46e4-bdc0-4e7fd249dead", "c7dcb359-5493-4410-997d-766c492f5dec", "76d7c033-f299-423c-a9df-ddfbf180d12a", "fd5da326-56f0-4fee-94ca-b8ded2b2bb92", "12ceeb2e-f5f0-4446-8fa7-c240f1d4d272", "1de66cfa-f0c9-4d36-a230-0be440d230a5", "c5ed9166-a65c-4018-b401-ce00a26c365e", "de2f3ce7-ae24-46cc-bd38-dfd731cb3140", "e2f32b36-6bbe-43dc-bf05-75b3aa2b5508", "35d2cdf4-982b-4495-8695-590d6c97fa73", "d9ecbf34-1927-4e50-81a5-b77db1b043b6", "4a55669c-0148-45b4-8d3b-dd1f2224f785", "cb7be7c2-b5c0-4995-82ed-82224e1ccfa3", "e98dc5cc-5be4-420c-90d0-6d252ae9b277", "5e89b4a4-6d77-431d-bcc3-4d40eebff7d2", "ac502391-b05a-493a-bf2a-cb3d562ebba2"], "metadata": {"file_path": "./nethermind_dist/eth.md"}}}}